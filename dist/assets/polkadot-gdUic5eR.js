var At=Object.defineProperty;var _t=(n,e,t)=>e in n?At(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var A=(n,e,t)=>_t(n,typeof e!="symbol"?e+"":e,t);import{g as getAugmentedNamespace,a as getDefaultExportFromCjs,b as commonjsGlobal,B as Buffer}from"./common-DdUxYNrb.js";import{R as React,r as reactExports,j as jsxRuntimeExports}from"./react-jUP5VzyY.js";var extendStatics=function(n,e){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,a){t.__proto__=a}||function(t,a){for(var o in a)Object.prototype.hasOwnProperty.call(a,o)&&(t[o]=a[o])},extendStatics(n,e)};function __extends(n,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");extendStatics(n,e);function t(){this.constructor=n}n.prototype=e===null?Object.create(e):(t.prototype=e.prototype,new t)}function __awaiter(n,e,t,a){function o(i){return i instanceof t?i:new t(function(r){r(i)})}return new(t||(t=Promise))(function(i,r){function s(p){try{d(a.next(p))}catch(h){r(h)}}function c(p){try{d(a.throw(p))}catch(h){r(h)}}function d(p){p.done?i(p.value):o(p.value).then(s,c)}d((a=a.apply(n,e||[])).next())})}function __generator(n,e){var t={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},a,o,i,r=Object.create((typeof Iterator=="function"?Iterator:Object).prototype);return r.next=s(0),r.throw=s(1),r.return=s(2),typeof Symbol=="function"&&(r[Symbol.iterator]=function(){return this}),r;function s(d){return function(p){return c([d,p])}}function c(d){if(a)throw new TypeError("Generator is already executing.");for(;r&&(r=0,d[0]&&(t=0)),t;)try{if(a=1,o&&(i=d[0]&2?o.return:d[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,d[1])).done)return i;switch(o=0,i&&(d=[d[0]&2,i.value]),d[0]){case 0:case 1:i=d;break;case 4:return t.label++,{value:d[1],done:!1};case 5:t.label++,o=d[1],d=[0];continue;case 7:d=t.ops.pop(),t.trys.pop();continue;default:if(i=t.trys,!(i=i.length>0&&i[i.length-1])&&(d[0]===6||d[0]===2)){t=0;continue}if(d[0]===3&&(!i||d[1]>i[0]&&d[1]<i[3])){t.label=d[1];break}if(d[0]===6&&t.label<i[1]){t.label=i[1],i=d;break}if(i&&t.label<i[2]){t.label=i[2],t.ops.push(d);break}i[2]&&t.ops.pop(),t.trys.pop();continue}d=e.call(n,t)}catch(p){d=[6,p],o=0}finally{a=i=0}if(d[0]&5)throw d[1];return{value:d[0]?d[1]:void 0,done:!0}}}function __values(n){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&n[e],a=0;if(t)return t.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&a>=n.length&&(n=void 0),{value:n&&n[a++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function __read(n,e){var t=typeof Symbol=="function"&&n[Symbol.iterator];if(!t)return n;var a=t.call(n),o,i=[],r;try{for(;(e===void 0||e-- >0)&&!(o=a.next()).done;)i.push(o.value)}catch(s){r={error:s}}finally{try{o&&!o.done&&(t=a.return)&&t.call(a)}finally{if(r)throw r.error}}return i}function __spreadArray(n,e,t){if(t||arguments.length===2)for(var a=0,o=e.length,i;a<o;a++)(i||!(a in e))&&(i||(i=Array.prototype.slice.call(e,0,a)),i[a]=e[a]);return n.concat(i||Array.prototype.slice.call(e))}function __await(n){return this instanceof __await?(this.v=n,this):new __await(n)}function __asyncGenerator(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var a=t.apply(n,e||[]),o,i=[];return o=Object.create((typeof AsyncIterator=="function"?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",r),o[Symbol.asyncIterator]=function(){return this},o;function r(_){return function(k){return Promise.resolve(k).then(_,h)}}function s(_,k){a[_]&&(o[_]=function(P){return new Promise(function(v,E){i.push([_,P,v,E])>1||c(_,P)})},k&&(o[_]=k(o[_])))}function c(_,k){try{d(a[_](k))}catch(P){I(i[0][3],P)}}function d(_){_.value instanceof __await?Promise.resolve(_.value.v).then(p,h):I(i[0][2],_)}function p(_){c("next",_)}function h(_){c("throw",_)}function I(_,k){_(k),i.shift(),i.length&&c(i[0][0],i[0][1])}}function __asyncValues(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=n[Symbol.asyncIterator],t;return e?e.call(n):(n=typeof __values=="function"?__values(n):n[Symbol.iterator](),t={},a("next"),a("throw"),a("return"),t[Symbol.asyncIterator]=function(){return this},t);function a(i){t[i]=n[i]&&function(r){return new Promise(function(s,c){r=n[i](r),o(s,c,r.done,r.value)})}}function o(i,r,s,c){Promise.resolve(c).then(function(d){i({value:d,done:s})},r)}}typeof SuppressedError=="function"&&SuppressedError;function isFunction$3(n){return typeof n=="function"}function createErrorClass(n){var e=function(a){Error.call(a),a.stack=new Error().stack},t=n(e);return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var UnsubscriptionError=createErrorClass(function(n){return function(t){n(this),this.message=t?t.length+` errors occurred during unsubscription:
`+t.map(function(a,o){return o+1+") "+a.toString()}).join(`
  `):"",this.name="UnsubscriptionError",this.errors=t}});function arrRemove(n,e){if(n){var t=n.indexOf(e);0<=t&&n.splice(t,1)}}var Subscription=function(){function n(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return n.prototype.unsubscribe=function(){var e,t,a,o,i;if(!this.closed){this.closed=!0;var r=this._parentage;if(r)if(this._parentage=null,Array.isArray(r))try{for(var s=__values(r),c=s.next();!c.done;c=s.next()){var d=c.value;d.remove(this)}}catch(P){e={error:P}}finally{try{c&&!c.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else r.remove(this);var p=this.initialTeardown;if(isFunction$3(p))try{p()}catch(P){i=P instanceof UnsubscriptionError?P.errors:[P]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var I=__values(h),_=I.next();!_.done;_=I.next()){var k=_.value;try{execFinalizer(k)}catch(P){i=i??[],P instanceof UnsubscriptionError?i=__spreadArray(__spreadArray([],__read(i)),__read(P.errors)):i.push(P)}}}catch(P){a={error:P}}finally{try{_&&!_.done&&(o=I.return)&&o.call(I)}finally{if(a)throw a.error}}}if(i)throw new UnsubscriptionError(i)}},n.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)execFinalizer(e);else{if(e instanceof n){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=(t=this._finalizers)!==null&&t!==void 0?t:[]).push(e)}},n.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},n.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},n.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&arrRemove(t,e)},n.prototype.remove=function(e){var t=this._finalizers;t&&arrRemove(t,e),e instanceof n&&e._removeParent(this)},n.EMPTY=function(){var e=new n;return e.closed=!0,e}(),n}(),EMPTY_SUBSCRIPTION=Subscription.EMPTY;function isSubscription(n){return n instanceof Subscription||n&&"closed"in n&&isFunction$3(n.remove)&&isFunction$3(n.add)&&isFunction$3(n.unsubscribe)}function execFinalizer(n){isFunction$3(n)?n():n.unsubscribe()}var config$2={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},timeoutProvider={setTimeout:function(n,e){for(var t=[],a=2;a<arguments.length;a++)t[a-2]=arguments[a];return setTimeout.apply(void 0,__spreadArray([n,e],__read(t)))},clearTimeout:function(n){var e=timeoutProvider.delegate;return((e==null?void 0:e.clearTimeout)||clearTimeout)(n)},delegate:void 0};function reportUnhandledError(n){timeoutProvider.setTimeout(function(){throw n})}function noop$1(){}function errorContext(n){n()}var Subscriber=function(n){__extends(e,n);function e(t){var a=n.call(this)||this;return a.isStopped=!1,t?(a.destination=t,isSubscription(t)&&t.add(a)):a.destination=EMPTY_OBSERVER,a}return e.create=function(t,a,o){return new SafeSubscriber(t,a,o)},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(Subscription),_bind=Function.prototype.bind;function bind$2(n,e){return _bind.call(n,e)}var ConsumerObserver=function(){function n(e){this.partialObserver=e}return n.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(a){handleUnhandledError(a)}},n.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(a){handleUnhandledError(a)}else handleUnhandledError(e)},n.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(t){handleUnhandledError(t)}},n}(),SafeSubscriber=function(n){__extends(e,n);function e(t,a,o){var i=n.call(this)||this,r;if(isFunction$3(t)||!t)r={next:t??void 0,error:a??void 0,complete:o??void 0};else{var s;i&&config$2.useDeprecatedNextContext?(s=Object.create(t),s.unsubscribe=function(){return i.unsubscribe()},r={next:t.next&&bind$2(t.next,s),error:t.error&&bind$2(t.error,s),complete:t.complete&&bind$2(t.complete,s)}):r=t}return i.destination=new ConsumerObserver(r),i}return e}(Subscriber);function handleUnhandledError(n){reportUnhandledError(n)}function defaultErrorHandler(n){throw n}var EMPTY_OBSERVER={closed:!0,next:noop$1,error:defaultErrorHandler,complete:noop$1},observable=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function identity$2(n){return n}function pipeFromArray(n){return n.length===0?identity$2:n.length===1?n[0]:function(t){return n.reduce(function(a,o){return o(a)},t)}}var Observable=function(){function n(e){e&&(this._subscribe=e)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(e,t,a){var o=this,i=isSubscriber(e)?e:new SafeSubscriber(e,t,a);return errorContext(function(){var r=o,s=r.operator,c=r.source;i.add(s?s.call(i,c):c?o._subscribe(i):o._trySubscribe(i))}),i},n.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},n.prototype.forEach=function(e,t){var a=this;return t=getPromiseCtor(t),new t(function(o,i){var r=new SafeSubscriber({next:function(s){try{e(s)}catch(c){i(c),r.unsubscribe()}},error:i,complete:o});a.subscribe(r)})},n.prototype._subscribe=function(e){var t;return(t=this.source)===null||t===void 0?void 0:t.subscribe(e)},n.prototype[observable]=function(){return this},n.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return pipeFromArray(e)(this)},n.prototype.toPromise=function(e){var t=this;return e=getPromiseCtor(e),new e(function(a,o){var i;t.subscribe(function(r){return i=r},function(r){return o(r)},function(){return a(i)})})},n.create=function(e){return new n(e)},n}();function getPromiseCtor(n){var e;return(e=n??config$2.Promise)!==null&&e!==void 0?e:Promise}function isObserver(n){return n&&isFunction$3(n.next)&&isFunction$3(n.error)&&isFunction$3(n.complete)}function isSubscriber(n){return n&&n instanceof Subscriber||isObserver(n)&&isSubscription(n)}function hasLift(n){return isFunction$3(n==null?void 0:n.lift)}function operate(n){return function(e){if(hasLift(e))return e.lift(function(t){try{return n(t,this)}catch(a){this.error(a)}});throw new TypeError("Unable to lift unknown Observable type")}}function createOperatorSubscriber(n,e,t,a,o){return new OperatorSubscriber(n,e,t,a,o)}var OperatorSubscriber=function(n){__extends(e,n);function e(t,a,o,i,r,s){var c=n.call(this,t)||this;return c.onFinalize=r,c.shouldUnsubscribe=s,c._next=a?function(d){try{a(d)}catch(p){t.error(p)}}:n.prototype._next,c._error=i?function(d){try{i(d)}catch(p){t.error(p)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=o?function(){try{o()}catch(d){t.error(d)}finally{this.unsubscribe()}}:n.prototype._complete,c}return e.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var a=this.closed;n.prototype.unsubscribe.call(this),!a&&((t=this.onFinalize)===null||t===void 0||t.call(this))}},e}(Subscriber);function refCount(){return operate(function(n,e){var t=null;n._refCount++;var a=createOperatorSubscriber(e,void 0,void 0,void 0,function(){if(!n||n._refCount<=0||0<--n._refCount){t=null;return}var o=n._connection,i=t;t=null,o&&(!i||o===i)&&o.unsubscribe(),e.unsubscribe()});n.subscribe(a),a.closed||(t=n.connect())})}var ConnectableObservable=function(n){__extends(e,n);function e(t,a){var o=n.call(this)||this;return o.source=t,o.subjectFactory=a,o._subject=null,o._refCount=0,o._connection=null,hasLift(t)&&(o.lift=t.lift),o}return e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return(!t||t.isStopped)&&(this._subject=this.subjectFactory()),this._subject},e.prototype._teardown=function(){this._refCount=0;var t=this._connection;this._subject=this._connection=null,t==null||t.unsubscribe()},e.prototype.connect=function(){var t=this,a=this._connection;if(!a){a=this._connection=new Subscription;var o=this.getSubject();a.add(this.source.subscribe(createOperatorSubscriber(o,void 0,function(){t._teardown(),o.complete()},function(i){t._teardown(),o.error(i)},function(){return t._teardown()}))),a.closed&&(this._connection=null,a=Subscription.EMPTY)}return a},e.prototype.refCount=function(){return refCount()(this)},e}(Observable),ObjectUnsubscribedError=createErrorClass(function(n){return function(){n(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}),Subject=function(n){__extends(e,n);function e(){var t=n.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return e.prototype.lift=function(t){var a=new AnonymousSubject(this,this);return a.operator=t,a},e.prototype._throwIfClosed=function(){if(this.closed)throw new ObjectUnsubscribedError},e.prototype.next=function(t){var a=this;errorContext(function(){var o,i;if(a._throwIfClosed(),!a.isStopped){a.currentObservers||(a.currentObservers=Array.from(a.observers));try{for(var r=__values(a.currentObservers),s=r.next();!s.done;s=r.next()){var c=s.value;c.next(t)}}catch(d){o={error:d}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}}})},e.prototype.error=function(t){var a=this;errorContext(function(){if(a._throwIfClosed(),!a.isStopped){a.hasError=a.isStopped=!0,a.thrownError=t;for(var o=a.observers;o.length;)o.shift().error(t)}})},e.prototype.complete=function(){var t=this;errorContext(function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var a=t.observers;a.length;)a.shift().complete()}})},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return((t=this.observers)===null||t===void 0?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(t){return this._throwIfClosed(),n.prototype._trySubscribe.call(this,t)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var a=this,o=this,i=o.hasError,r=o.isStopped,s=o.observers;return i||r?EMPTY_SUBSCRIPTION:(this.currentObservers=null,s.push(t),new Subscription(function(){a.currentObservers=null,arrRemove(s,t)}))},e.prototype._checkFinalizedStatuses=function(t){var a=this,o=a.hasError,i=a.thrownError,r=a.isStopped;o?t.error(i):r&&t.complete()},e.prototype.asObservable=function(){var t=new Observable;return t.source=this,t},e.create=function(t,a){return new AnonymousSubject(t,a)},e}(Observable),AnonymousSubject=function(n){__extends(e,n);function e(t,a){var o=n.call(this)||this;return o.destination=t,o.source=a,o}return e.prototype.next=function(t){var a,o;(o=(a=this.destination)===null||a===void 0?void 0:a.next)===null||o===void 0||o.call(a,t)},e.prototype.error=function(t){var a,o;(o=(a=this.destination)===null||a===void 0?void 0:a.error)===null||o===void 0||o.call(a,t)},e.prototype.complete=function(){var t,a;(a=(t=this.destination)===null||t===void 0?void 0:t.complete)===null||a===void 0||a.call(t)},e.prototype._subscribe=function(t){var a,o;return(o=(a=this.source)===null||a===void 0?void 0:a.subscribe(t))!==null&&o!==void 0?o:EMPTY_SUBSCRIPTION},e}(Subject),BehaviorSubject=function(n){__extends(e,n);function e(t){var a=n.call(this)||this;return a._value=t,a}return Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(t){var a=n.prototype._subscribe.call(this,t);return!a.closed&&t.next(this._value),a},e.prototype.getValue=function(){var t=this,a=t.hasError,o=t.thrownError,i=t._value;if(a)throw o;return this._throwIfClosed(),i},e.prototype.next=function(t){n.prototype.next.call(this,this._value=t)},e}(Subject),dateTimestampProvider={now:function(){return(dateTimestampProvider.delegate||Date).now()},delegate:void 0},ReplaySubject=function(n){__extends(e,n);function e(t,a,o){t===void 0&&(t=1/0),a===void 0&&(a=1/0),o===void 0&&(o=dateTimestampProvider);var i=n.call(this)||this;return i._bufferSize=t,i._windowTime=a,i._timestampProvider=o,i._buffer=[],i._infiniteTimeWindow=!0,i._infiniteTimeWindow=a===1/0,i._bufferSize=Math.max(1,t),i._windowTime=Math.max(1,a),i}return e.prototype.next=function(t){var a=this,o=a.isStopped,i=a._buffer,r=a._infiniteTimeWindow,s=a._timestampProvider,c=a._windowTime;o||(i.push(t),!r&&i.push(s.now()+c)),this._trimBuffer(),n.prototype.next.call(this,t)},e.prototype._subscribe=function(t){this._throwIfClosed(),this._trimBuffer();for(var a=this._innerSubscribe(t),o=this,i=o._infiniteTimeWindow,r=o._buffer,s=r.slice(),c=0;c<s.length&&!t.closed;c+=i?1:2)t.next(s[c]);return this._checkFinalizedStatuses(t),a},e.prototype._trimBuffer=function(){var t=this,a=t._bufferSize,o=t._timestampProvider,i=t._buffer,r=t._infiniteTimeWindow,s=(r?1:2)*a;if(a<1/0&&s<i.length&&i.splice(0,i.length-s),!r){for(var c=o.now(),d=0,p=1;p<i.length&&i[p]<=c;p+=2)d=p;d&&i.splice(0,d+1)}},e}(Subject),Action=function(n){__extends(e,n);function e(t,a){return n.call(this)||this}return e.prototype.schedule=function(t,a){return this},e}(Subscription),intervalProvider={setInterval:function(n,e){for(var t=[],a=2;a<arguments.length;a++)t[a-2]=arguments[a];return setInterval.apply(void 0,__spreadArray([n,e],__read(t)))},clearInterval:function(n){var e=intervalProvider.delegate;return((e==null?void 0:e.clearInterval)||clearInterval)(n)},delegate:void 0},AsyncAction=function(n){__extends(e,n);function e(t,a){var o=n.call(this,t,a)||this;return o.scheduler=t,o.work=a,o.pending=!1,o}return e.prototype.schedule=function(t,a){var o;if(a===void 0&&(a=0),this.closed)return this;this.state=t;var i=this.id,r=this.scheduler;return i!=null&&(this.id=this.recycleAsyncId(r,i,a)),this.pending=!0,this.delay=a,this.id=(o=this.id)!==null&&o!==void 0?o:this.requestAsyncId(r,this.id,a),this},e.prototype.requestAsyncId=function(t,a,o){return o===void 0&&(o=0),intervalProvider.setInterval(t.flush.bind(t,this),o)},e.prototype.recycleAsyncId=function(t,a,o){if(o===void 0&&(o=0),o!=null&&this.delay===o&&this.pending===!1)return a;a!=null&&intervalProvider.clearInterval(a)},e.prototype.execute=function(t,a){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var o=this._execute(t,a);if(o)return o;this.pending===!1&&this.id!=null&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,a){var o=!1,i;try{this.work(t)}catch(r){o=!0,i=r||new Error("Scheduled action threw falsy error")}if(o)return this.unsubscribe(),i},e.prototype.unsubscribe=function(){if(!this.closed){var t=this,a=t.id,o=t.scheduler,i=o.actions;this.work=this.state=this.scheduler=null,this.pending=!1,arrRemove(i,this),a!=null&&(this.id=this.recycleAsyncId(o,a,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},e}(Action),nextHandle=1,resolved,activeHandles={};function findAndClearHandle(n){return n in activeHandles?(delete activeHandles[n],!0):!1}var Immediate={setImmediate:function(n){var e=nextHandle++;return activeHandles[e]=!0,resolved||(resolved=Promise.resolve()),resolved.then(function(){return findAndClearHandle(e)&&n()}),e},clearImmediate:function(n){findAndClearHandle(n)}},setImmediate=Immediate.setImmediate,clearImmediate=Immediate.clearImmediate,immediateProvider={setImmediate:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return setImmediate.apply(void 0,__spreadArray([],__read(n)))},clearImmediate:function(n){var e=immediateProvider.delegate;return((e==null?void 0:e.clearImmediate)||clearImmediate)(n)},delegate:void 0},AsapAction=function(n){__extends(e,n);function e(t,a){var o=n.call(this,t,a)||this;return o.scheduler=t,o.work=a,o}return e.prototype.requestAsyncId=function(t,a,o){return o===void 0&&(o=0),o!==null&&o>0?n.prototype.requestAsyncId.call(this,t,a,o):(t.actions.push(this),t._scheduled||(t._scheduled=immediateProvider.setImmediate(t.flush.bind(t,void 0))))},e.prototype.recycleAsyncId=function(t,a,o){var i;if(o===void 0&&(o=0),o!=null?o>0:this.delay>0)return n.prototype.recycleAsyncId.call(this,t,a,o);var r=t.actions;a!=null&&((i=r[r.length-1])===null||i===void 0?void 0:i.id)!==a&&(immediateProvider.clearImmediate(a),t._scheduled===a&&(t._scheduled=void 0))},e}(AsyncAction),Scheduler=function(){function n(e,t){t===void 0&&(t=n.now),this.schedulerActionCtor=e,this.now=t}return n.prototype.schedule=function(e,t,a){return t===void 0&&(t=0),new this.schedulerActionCtor(this,e).schedule(a,t)},n.now=dateTimestampProvider.now,n}(),AsyncScheduler=function(n){__extends(e,n);function e(t,a){a===void 0&&(a=Scheduler.now);var o=n.call(this,t,a)||this;return o.actions=[],o._active=!1,o}return e.prototype.flush=function(t){var a=this.actions;if(this._active){a.push(t);return}var o;this._active=!0;do if(o=t.execute(t.state,t.delay))break;while(t=a.shift());if(this._active=!1,o){for(;t=a.shift();)t.unsubscribe();throw o}},e}(Scheduler),AsapScheduler=function(n){__extends(e,n);function e(){return n!==null&&n.apply(this,arguments)||this}return e.prototype.flush=function(t){this._active=!0;var a=this._scheduled;this._scheduled=void 0;var o=this.actions,i;t=t||o.shift();do if(i=t.execute(t.state,t.delay))break;while((t=o[0])&&t.id===a&&o.shift());if(this._active=!1,i){for(;(t=o[0])&&t.id===a&&o.shift();)t.unsubscribe();throw i}},e}(AsyncScheduler),asapScheduler=new AsapScheduler(AsapAction),EMPTY=new Observable(function(n){return n.complete()});function isScheduler(n){return n&&isFunction$3(n.schedule)}function last(n){return n[n.length-1]}function popResultSelector(n){return isFunction$3(last(n))?n.pop():void 0}function popScheduler(n){return isScheduler(last(n))?n.pop():void 0}var isArrayLike$1=function(n){return n&&typeof n.length=="number"&&typeof n!="function"};function isPromise$1(n){return isFunction$3(n==null?void 0:n.then)}function isInteropObservable(n){return isFunction$3(n[observable])}function isAsyncIterable(n){return Symbol.asyncIterator&&isFunction$3(n==null?void 0:n[Symbol.asyncIterator])}function createInvalidObservableTypeError(n){return new TypeError("You provided "+(n!==null&&typeof n=="object"?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function getSymbolIterator(){return typeof Symbol!="function"||!Symbol.iterator?"@@iterator":Symbol.iterator}var iterator=getSymbolIterator();function isIterable(n){return isFunction$3(n==null?void 0:n[iterator])}function readableStreamLikeToAsyncGenerator(n){return __asyncGenerator(this,arguments,function(){var t,a,o,i;return __generator(this,function(r){switch(r.label){case 0:t=n.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,__await(t.read())];case 3:return a=r.sent(),o=a.value,i=a.done,i?[4,__await(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,__await(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}})})}function isReadableStreamLike(n){return isFunction$3(n==null?void 0:n.getReader)}function innerFrom(n){if(n instanceof Observable)return n;if(n!=null){if(isInteropObservable(n))return fromInteropObservable(n);if(isArrayLike$1(n))return fromArrayLike(n);if(isPromise$1(n))return fromPromise(n);if(isAsyncIterable(n))return fromAsyncIterable(n);if(isIterable(n))return fromIterable(n);if(isReadableStreamLike(n))return fromReadableStreamLike(n)}throw createInvalidObservableTypeError(n)}function fromInteropObservable(n){return new Observable(function(e){var t=n[observable]();if(isFunction$3(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}function fromArrayLike(n){return new Observable(function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()})}function fromPromise(n){return new Observable(function(e){n.then(function(t){e.closed||(e.next(t),e.complete())},function(t){return e.error(t)}).then(null,reportUnhandledError)})}function fromIterable(n){return new Observable(function(e){var t,a;try{for(var o=__values(n),i=o.next();!i.done;i=o.next()){var r=i.value;if(e.next(r),e.closed)return}}catch(s){t={error:s}}finally{try{i&&!i.done&&(a=o.return)&&a.call(o)}finally{if(t)throw t.error}}e.complete()})}function fromAsyncIterable(n){return new Observable(function(e){process(n,e).catch(function(t){return e.error(t)})})}function fromReadableStreamLike(n){return fromAsyncIterable(readableStreamLikeToAsyncGenerator(n))}function process(n,e){var t,a,o,i;return __awaiter(this,void 0,void 0,function(){var r,s;return __generator(this,function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),t=__asyncValues(n),c.label=1;case 1:return[4,t.next()];case 2:if(a=c.sent(),!!a.done)return[3,4];if(r=a.value,e.next(r),e.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=c.sent(),o={error:s},[3,11];case 6:return c.trys.push([6,,9,10]),a&&!a.done&&(i=t.return)?[4,i.call(t)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}})})}function executeSchedule(n,e,t,a,o){a===void 0&&(a=0),o===void 0&&(o=!1);var i=e.schedule(function(){t(),o?n.add(this.schedule(null,a)):this.unsubscribe()},a);if(n.add(i),!o)return i}function observeOn(n,e){return e===void 0&&(e=0),operate(function(t,a){t.subscribe(createOperatorSubscriber(a,function(o){return executeSchedule(a,n,function(){return a.next(o)},e)},function(){return executeSchedule(a,n,function(){return a.complete()},e)},function(o){return executeSchedule(a,n,function(){return a.error(o)},e)}))})}function subscribeOn(n,e){return e===void 0&&(e=0),operate(function(t,a){a.add(n.schedule(function(){return t.subscribe(a)},e))})}function scheduleObservable(n,e){return innerFrom(n).pipe(subscribeOn(e),observeOn(e))}function schedulePromise(n,e){return innerFrom(n).pipe(subscribeOn(e),observeOn(e))}function scheduleArray(n,e){return new Observable(function(t){var a=0;return e.schedule(function(){a===n.length?t.complete():(t.next(n[a++]),t.closed||this.schedule())})})}function scheduleIterable(n,e){return new Observable(function(t){var a;return executeSchedule(t,e,function(){a=n[iterator](),executeSchedule(t,e,function(){var o,i,r;try{o=a.next(),i=o.value,r=o.done}catch(s){t.error(s);return}r?t.complete():t.next(i)},0,!0)}),function(){return isFunction$3(a==null?void 0:a.return)&&a.return()}})}function scheduleAsyncIterable(n,e){if(!n)throw new Error("Iterable cannot be null");return new Observable(function(t){executeSchedule(t,e,function(){var a=n[Symbol.asyncIterator]();executeSchedule(t,e,function(){a.next().then(function(o){o.done?t.complete():t.next(o.value)})},0,!0)})})}function scheduleReadableStreamLike(n,e){return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(n),e)}function scheduled(n,e){if(n!=null){if(isInteropObservable(n))return scheduleObservable(n,e);if(isArrayLike$1(n))return scheduleArray(n,e);if(isPromise$1(n))return schedulePromise(n,e);if(isAsyncIterable(n))return scheduleAsyncIterable(n,e);if(isIterable(n))return scheduleIterable(n,e);if(isReadableStreamLike(n))return scheduleReadableStreamLike(n,e)}throw createInvalidObservableTypeError(n)}function from(n,e){return e?scheduled(n,e):innerFrom(n)}function of(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=popScheduler(n);return from(n,t)}var EmptyError=createErrorClass(function(n){return function(){n(this),this.name="EmptyError",this.message="no elements in sequence"}});function firstValueFrom(n,e){return new Promise(function(t,a){var o=new SafeSubscriber({next:function(i){t(i),o.unsubscribe()},error:a,complete:function(){a(new EmptyError)}});n.subscribe(o)})}function map$2(n,e){return operate(function(t,a){var o=0;t.subscribe(createOperatorSubscriber(a,function(i){a.next(n.call(e,i,o++))}))})}var isArray$2=Array.isArray;function callOrApply(n,e){return isArray$2(e)?n.apply(void 0,__spreadArray([],__read(e))):n(e)}function mapOneOrManyArgs(n){return map$2(function(e){return callOrApply(n,e)})}var isArray$1=Array.isArray,getPrototypeOf=Object.getPrototypeOf,objectProto=Object.prototype,getKeys=Object.keys;function argsArgArrayOrObject(n){if(n.length===1){var e=n[0];if(isArray$1(e))return{args:e,keys:null};if(isPOJO(e)){var t=getKeys(e);return{args:t.map(function(a){return e[a]}),keys:t}}}return{args:n,keys:null}}function isPOJO(n){return n&&typeof n=="object"&&getPrototypeOf(n)===objectProto}function createObject(n,e){return n.reduce(function(t,a,o){return t[a]=e[o],t},{})}function combineLatest(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=popScheduler(n),a=popResultSelector(n),o=argsArgArrayOrObject(n),i=o.args,r=o.keys;if(i.length===0)return from([],t);var s=new Observable(combineLatestInit(i,t,r?function(c){return createObject(r,c)}:identity$2));return a?s.pipe(mapOneOrManyArgs(a)):s}function combineLatestInit(n,e,t){return t===void 0&&(t=identity$2),function(a){maybeSchedule(e,function(){for(var o=n.length,i=new Array(o),r=o,s=o,c=function(p){maybeSchedule(e,function(){var h=from(n[p],e),I=!1;h.subscribe(createOperatorSubscriber(a,function(_){i[p]=_,I||(I=!0,s--),s||a.next(t(i.slice()))},function(){--r||a.complete()}))},a)},d=0;d<o;d++)c(d)},a)}}function maybeSchedule(n,e,t){n?executeSchedule(t,n,e):e()}function mergeInternals(n,e,t,a,o,i,r,s){var c=[],d=0,p=0,h=!1,I=function(){h&&!c.length&&!d&&e.complete()},_=function(P){return d<a?k(P):c.push(P)},k=function(P){d++;var v=!1;innerFrom(t(P,p++)).subscribe(createOperatorSubscriber(e,function(E){e.next(E)},function(){v=!0},void 0,function(){if(v)try{d--;for(var E=function(){var M=c.shift();r||k(M)};c.length&&d<a;)E();I()}catch(M){e.error(M)}}))};return n.subscribe(createOperatorSubscriber(e,_,function(){h=!0,I()})),function(){}}function mergeMap(n,e,t){return t===void 0&&(t=1/0),isFunction$3(e)?mergeMap(function(a,o){return map$2(function(i,r){return e(a,i,o,r)})(innerFrom(n(a,o)))},t):(typeof e=="number"&&(t=e),operate(function(a,o){return mergeInternals(a,o,n,t)}))}function mergeAll(n){return mergeMap(identity$2,n)}function concatAll(){return mergeAll(1)}function concat(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return concatAll()(from(n,popScheduler(n)))}function catchError(n){return operate(function(e,t){var a=null,o=!1,i;a=e.subscribe(createOperatorSubscriber(t,void 0,void 0,function(r){i=innerFrom(n(r,catchError(n)(e))),a?(a.unsubscribe(),a=null,i.subscribe(t)):o=!0})),o&&(a.unsubscribe(),a=null,i.subscribe(t))})}function scanInternals(n,e,t,a,o){return function(i,r){var s=t,c=e,d=0;i.subscribe(createOperatorSubscriber(r,function(p){var h=d++;c=s?n(c,p,h):(s=!0,p)},function(){s&&r.next(c),r.complete()}))}}function reduce(n,e){return operate(scanInternals(n,e,arguments.length>=2,!1,!0))}var arrReducer=function(n,e){return n.push(e),n};function toArray(){return operate(function(n,e){reduce(arrReducer,[])(n).subscribe(e)})}function fromSubscribable(n){return new Observable(function(e){return n.subscribe(e)})}var DEFAULT_CONFIG={connector:function(){return new Subject}};function connect(n,e){e===void 0&&(e=DEFAULT_CONFIG);var t=e.connector;return operate(function(a,o){var i=t();innerFrom(n(fromSubscribable(i))).subscribe(o),o.add(a.subscribe(i))})}function defaultIfEmpty(n){return operate(function(e,t){var a=!1;e.subscribe(createOperatorSubscriber(t,function(o){a=!0,t.next(o)},function(){a||t.next(n),t.complete()}))})}function take(n){return n<=0?function(){return EMPTY}:operate(function(e,t){var a=0;e.subscribe(createOperatorSubscriber(t,function(o){++a<=n&&(t.next(o),n<=a&&t.complete())}))})}function distinctUntilChanged(n,e){return e===void 0&&(e=identity$2),n=n??defaultCompare,operate(function(t,a){var o,i=!0;t.subscribe(createOperatorSubscriber(a,function(r){var s=e(r);(i||!n(o,s))&&(i=!1,o=s,a.next(r))}))})}function defaultCompare(n,e){return n===e}function throwIfEmpty(n){return n===void 0&&(n=defaultErrorFactory),operate(function(e,t){var a=!1;e.subscribe(createOperatorSubscriber(t,function(o){a=!0,t.next(o)},function(){return a?t.complete():t.error(n())}))})}function defaultErrorFactory(){return new EmptyError}function first(n,e){var t=arguments.length>=2;return function(a){return a.pipe(identity$2,take(1),t?defaultIfEmpty(e):throwIfEmpty(function(){return new EmptyError}))}}function multicast(n,e){var t=isFunction$3(n)?n:function(){return n};return isFunction$3(e)?connect(e,{connector:t}):function(a){return new ConnectableObservable(a,t)}}function publishReplay(n,e,t,a){var o=isFunction$3(t)?t:void 0;return function(i){return multicast(new ReplaySubject(n,e,a),o)(i)}}function startWith(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=popScheduler(n);return operate(function(a,o){(t?concat(n,a,t):concat(n,a)).subscribe(o)})}function switchMap(n,e){return operate(function(t,a){var o=null,i=0,r=!1,s=function(){return r&&!o&&a.complete()};t.subscribe(createOperatorSubscriber(a,function(c){o==null||o.unsubscribe();var d=0,p=i++;innerFrom(n(c,p)).subscribe(o=createOperatorSubscriber(a,function(h){return a.next(e?e(c,h,p,d++):h)},function(){o=null,s()}))},function(){r=!0,s()}))})}function tap(n,e,t){var a=isFunction$3(n)||e||t?{next:n,error:e,complete:t}:n;return a?operate(function(o,i){var r;(r=a.subscribe)===null||r===void 0||r.call(a);var s=!0;o.subscribe(createOperatorSubscriber(i,function(c){var d;(d=a.next)===null||d===void 0||d.call(a,c),i.next(c)},function(){var c;s=!1,(c=a.complete)===null||c===void 0||c.call(a),i.complete()},function(c){var d;s=!1,(d=a.error)===null||d===void 0||d.call(a,c),i.error(c)},function(){var c,d;s&&((c=a.unsubscribe)===null||c===void 0||c.call(a)),(d=a.finalize)===null||d===void 0||d.call(a)}))}):identity$2}const global=globalThis||void 0||self;function evaluateThis(n){return n("return this")}const xglobal=typeof globalThis<"u"?globalThis:typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:evaluateThis(Function);function extractGlobal(n,e){return typeof xglobal[n]>"u"?e:xglobal[n]}let TextDecoder$2=class{constructor(e){A(this,"__encoding");this.__encoding=e}decode(e){let t="";for(let a=0,o=e.length;a<o;a++)t+=String.fromCharCode(e[a]);return t}};const TextDecoder$1=extractGlobal("TextDecoder",TextDecoder$2);let TextEncoder$2=class{encode(e){const t=e.length,a=new Uint8Array(t);for(let o=0;o<t;o++)a[o]=e.charCodeAt(o);return a}};const TextEncoder$1=extractGlobal("TextEncoder",TextEncoder$2);function isFunction$2(n){return typeof n=="function"}const DEDUPE=`Either remove and explicitly install matching versions or dedupe using your package manager.
The following conflicting packages were found:`,POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG="POLKADOTJS_DISABLE_ESM_CJS_WARNING";function getEntry(n){const e=xglobal;return e.__polkadotjs||(e.__polkadotjs={}),e.__polkadotjs[n]||(e.__polkadotjs[n]=[]),e.__polkadotjs[n]}function formatDisplay(n,e){let t=0;for(let a=0,o=n.length;a<o;a++)t=Math.max(t,n[a].version.length);return n.map(a=>`	${e(a.version.padEnd(t),a).join("	")}`).join(`
`)}function formatInfo(n,{name:e}){return[n,e]}function formatVersion(n,{path:e,type:t}){let a;if(e&&e.length>=5){const o=e.indexOf("node_modules");a=o===-1?e:e.substring(o)}else a="<unknown>";return[`${`${t||""}`.padStart(3)} ${n}`,a]}function getPath(n,e){if(n)return n;if(isFunction$2(e))try{return e()||""}catch{return""}return e||""}function warn$1(n,e,t){console.warn(`${n}
${DEDUPE}
${formatDisplay(e,t)}`)}function detectPackage({name:n,path:e,type:t,version:a},o,i=[]){var h,I;if(!n.startsWith("@polkadot"))throw new Error(`Invalid package descriptor ${n}`);const r=getEntry(n);r.push({path:getPath(e,o),type:t,version:a});const s=r.every(_=>_.version===a),c=((I=(h=xglobal.process)==null?void 0:h.env)==null?void 0:I[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG])==="1";if(r.length!==1&&!(c&&s))warn$1(`${n} has multiple versions, ensure that there is only one installed.`,r,formatVersion);else{const _=i.filter(k=>k&&k.version!==a);_.length&&warn$1(`${n} requires direct dependencies exactly matching version ${a}.`,_,formatInfo)}}function arrayChunk(n,e){const t=Math.ceil(n.length/e);if(t===1)return[n];const a=Array(t);for(let o=0;o<t;o++){const i=o*e;a[o]=n.slice(i,i+e)}return a}function arrayFlatten(n){const e=n.length;if(e===0)return[];if(e===1)return n[0];let t=0;for(let i=0;i<e;i++)t+=n[i].length;const a=new Array(t);let o=-1;for(let i=0;i<e;i++){const r=n[i];for(let s=0,c=r.length;s<c;s++)a[++o]=r[s]}return a}function assert(n,e){if(!n)throw new Error(isFunction$2(e)?e():e)}function assertReturn(n,e){return assert(n!=null,e),n}function assertUnreachable(n){throw new Error(`This codepath should be unreachable. Unhandled input: ${n}`)}function createCmp(n){return(...e)=>{const t=e.length;if(t===0)throw new Error("Must provide one or more arguments");let a=e[0];for(let o=1;o<t;o++)n(e[o],a)&&(a=e[o]);return a}}function invalidFallback(){return Number.NaN}const BigInt$1=extractGlobal("BigInt",invalidFallback),_0n$6=BigInt$1(0),_1n$8=BigInt$1(1),U8_MAX=BigInt$1(256),U16_MAX=BigInt$1(256*256),U64_MAX=BigInt$1("0x10000000000000000");function u8aToBigInt(n,{isLe:e=!0,isNegative:t=!1}={}){e||(n=n.slice().reverse());const a=n.length;if(t&&a&&n[a-1]&128){switch(a){case 0:return BigInt$1(0);case 1:return BigInt$1((n[0]^255)*-1-1);case 2:return BigInt$1((n[0]+(n[1]<<8)^65535)*-1-1);case 4:return BigInt$1((n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)*-1-1)}const i=new DataView(n.buffer,n.byteOffset);if(a===8)return i.getBigInt64(0,!0);let r=BigInt$1(0);const s=a%2;for(let c=a-2;c>=s;c-=2)r=r*U16_MAX+BigInt$1(i.getUint16(c,!0)^65535);return s&&(r=r*U8_MAX+BigInt$1(n[0]^255)),r*-_1n$8-_1n$8}switch(a){case 0:return BigInt$1(0);case 1:return BigInt$1(n[0]);case 2:return BigInt$1(n[0]+(n[1]<<8));case 4:return BigInt$1(n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216)}const o=new DataView(n.buffer,n.byteOffset);switch(a){case 8:return o.getBigUint64(0,!0);case 16:return o.getBigUint64(8,!0)*U64_MAX+o.getBigUint64(0,!0);default:{let i=BigInt$1(0);const r=a%2;for(let s=a-2;s>=r;s-=2)i=i*U16_MAX+BigInt$1(o.getUint16(s,!0));return r&&(i=i*U8_MAX+BigInt$1(n[0])),i}}}const CHR$1="0123456789abcdef",U8$1=new Uint8Array(256),U16$1=new Uint8Array(256*256);for(let n=0,e=CHR$1.length;n<e;n++)U8$1[CHR$1[n].charCodeAt(0)|0]=n|0,n>9&&(U8$1[CHR$1[n].toUpperCase().charCodeAt(0)|0]=n|0);for(let n=0;n<256;n++){const e=n<<8;for(let t=0;t<256;t++)U16$1[e|t]=U8$1[n]<<4|U8$1[t]}function hexToU8a(n,e=-1){if(!n)return new Uint8Array;let t=n.startsWith("0x")?2:0;const a=Math.ceil((n.length-t)/2),o=Math.ceil(e===-1?a:e/8),i=new Uint8Array(o),r=o>a?o-a:0;for(let s=r;s<o;s++,t+=2)i[s]=U16$1[n.charCodeAt(t)<<8|n.charCodeAt(t+1)];return i}function hexToBigInt(n,{isLe:e=!1,isNegative:t=!1}={}){return!n||n==="0x"?BigInt$1(0):u8aToBigInt(hexToU8a(n),{isLe:e,isNegative:t})}var bn={exports:{}};const __viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})),require$$0=getAugmentedNamespace(__viteBrowserExternal$1);bn.exports;(function(n){(function(e,t){function a(O,u){if(!O)throw new Error(u||"Assertion failed")}function o(O,u){O.super_=u;var m=function(){};m.prototype=u.prototype,O.prototype=new m,O.prototype.constructor=O}function i(O,u,m){if(i.isBN(O))return O;this.negative=0,this.words=null,this.length=0,this.red=null,O!==null&&((u==="le"||u==="be")&&(m=u,u=10),this._init(O||0,u||10,m||"be"))}typeof e=="object"?e.exports=i:t.BN=i,i.BN=i,i.wordSize=26;var r;try{typeof window<"u"&&typeof window.Buffer<"u"?r=window.Buffer:r=require$$0.Buffer}catch{}i.isBN=function(u){return u instanceof i?!0:u!==null&&typeof u=="object"&&u.constructor.wordSize===i.wordSize&&Array.isArray(u.words)},i.max=function(u,m){return u.cmp(m)>0?u:m},i.min=function(u,m){return u.cmp(m)<0?u:m},i.prototype._init=function(u,m,g){if(typeof u=="number")return this._initNumber(u,m,g);if(typeof u=="object")return this._initArray(u,m,g);m==="hex"&&(m=16),a(m===(m|0)&&m>=2&&m<=36),u=u.toString().replace(/\s+/g,"");var b=0;u[0]==="-"&&(b++,this.negative=1),b<u.length&&(m===16?this._parseHex(u,b,g):(this._parseBase(u,m,b),g==="le"&&this._initArray(this.toArray(),m,g)))},i.prototype._initNumber=function(u,m,g){u<0&&(this.negative=1,u=-u),u<67108864?(this.words=[u&67108863],this.length=1):u<4503599627370496?(this.words=[u&67108863,u/67108864&67108863],this.length=2):(a(u<9007199254740992),this.words=[u&67108863,u/67108864&67108863,1],this.length=3),g==="le"&&this._initArray(this.toArray(),m,g)},i.prototype._initArray=function(u,m,g){if(a(typeof u.length=="number"),u.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(u.length/3),this.words=new Array(this.length);for(var b=0;b<this.length;b++)this.words[b]=0;var B,D,V=0;if(g==="be")for(b=u.length-1,B=0;b>=0;b-=3)D=u[b]|u[b-1]<<8|u[b-2]<<16,this.words[B]|=D<<V&67108863,this.words[B+1]=D>>>26-V&67108863,V+=24,V>=26&&(V-=26,B++);else if(g==="le")for(b=0,B=0;b<u.length;b+=3)D=u[b]|u[b+1]<<8|u[b+2]<<16,this.words[B]|=D<<V&67108863,this.words[B+1]=D>>>26-V&67108863,V+=24,V>=26&&(V-=26,B++);return this._strip()};function s(O,u){var m=O.charCodeAt(u);if(m>=48&&m<=57)return m-48;if(m>=65&&m<=70)return m-55;if(m>=97&&m<=102)return m-87;a(!1,"Invalid character in "+O)}function c(O,u,m){var g=s(O,m);return m-1>=u&&(g|=s(O,m-1)<<4),g}i.prototype._parseHex=function(u,m,g){this.length=Math.ceil((u.length-m)/6),this.words=new Array(this.length);for(var b=0;b<this.length;b++)this.words[b]=0;var B=0,D=0,V;if(g==="be")for(b=u.length-1;b>=m;b-=2)V=c(u,m,b)<<B,this.words[D]|=V&67108863,B>=18?(B-=18,D+=1,this.words[D]|=V>>>26):B+=8;else{var x=u.length-m;for(b=x%2===0?m+1:m;b<u.length;b+=2)V=c(u,m,b)<<B,this.words[D]|=V&67108863,B>=18?(B-=18,D+=1,this.words[D]|=V>>>26):B+=8}this._strip()};function d(O,u,m,g){for(var b=0,B=0,D=Math.min(O.length,m),V=u;V<D;V++){var x=O.charCodeAt(V)-48;b*=g,x>=49?B=x-49+10:x>=17?B=x-17+10:B=x,a(x>=0&&B<g,"Invalid character"),b+=B}return b}i.prototype._parseBase=function(u,m,g){this.words=[0],this.length=1;for(var b=0,B=1;B<=67108863;B*=m)b++;b--,B=B/m|0;for(var D=u.length-g,V=D%b,x=Math.min(D,D-V)+g,y=0,T=g;T<x;T+=b)y=d(u,T,T+b,m),this.imuln(B),this.words[0]+y<67108864?this.words[0]+=y:this._iaddn(y);if(V!==0){var q=1;for(y=d(u,T,u.length,m),T=0;T<V;T++)q*=m;this.imuln(q),this.words[0]+y<67108864?this.words[0]+=y:this._iaddn(y)}this._strip()},i.prototype.copy=function(u){u.words=new Array(this.length);for(var m=0;m<this.length;m++)u.words[m]=this.words[m];u.length=this.length,u.negative=this.negative,u.red=this.red};function p(O,u){O.words=u.words,O.length=u.length,O.negative=u.negative,O.red=u.red}if(i.prototype._move=function(u){p(u,this)},i.prototype.clone=function(){var u=new i(null);return this.copy(u),u},i.prototype._expand=function(u){for(;this.length<u;)this.words[this.length++]=0;return this},i.prototype._strip=function(){for(;this.length>1&&this.words[this.length-1]===0;)this.length--;return this._normSign()},i.prototype._normSign=function(){return this.length===1&&this.words[0]===0&&(this.negative=0),this},typeof Symbol<"u"&&typeof Symbol.for=="function")try{i.prototype[Symbol.for("nodejs.util.inspect.custom")]=h}catch{i.prototype.inspect=h}else i.prototype.inspect=h;function h(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var I=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],_=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],k=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];i.prototype.toString=function(u,m){u=u||10,m=m|0||1;var g;if(u===16||u==="hex"){g="";for(var b=0,B=0,D=0;D<this.length;D++){var V=this.words[D],x=((V<<b|B)&16777215).toString(16);B=V>>>24-b&16777215,b+=2,b>=26&&(b-=26,D--),B!==0||D!==this.length-1?g=I[6-x.length]+x+g:g=x+g}for(B!==0&&(g=B.toString(16)+g);g.length%m!==0;)g="0"+g;return this.negative!==0&&(g="-"+g),g}if(u===(u|0)&&u>=2&&u<=36){var y=_[u],T=k[u];g="";var q=this.clone();for(q.negative=0;!q.isZero();){var G=q.modrn(T).toString(u);q=q.idivn(T),q.isZero()?g=G+g:g=I[y-G.length]+G+g}for(this.isZero()&&(g="0"+g);g.length%m!==0;)g="0"+g;return this.negative!==0&&(g="-"+g),g}a(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var u=this.words[0];return this.length===2?u+=this.words[1]*67108864:this.length===3&&this.words[2]===1?u+=4503599627370496+this.words[1]*67108864:this.length>2&&a(!1,"Number can only safely store up to 53 bits"),this.negative!==0?-u:u},i.prototype.toJSON=function(){return this.toString(16,2)},r&&(i.prototype.toBuffer=function(u,m){return this.toArrayLike(r,u,m)}),i.prototype.toArray=function(u,m){return this.toArrayLike(Array,u,m)};var P=function(u,m){return u.allocUnsafe?u.allocUnsafe(m):new u(m)};i.prototype.toArrayLike=function(u,m,g){this._strip();var b=this.byteLength(),B=g||Math.max(1,b);a(b<=B,"byte array longer than desired length"),a(B>0,"Requested array length <= 0");var D=P(u,B),V=m==="le"?"LE":"BE";return this["_toArrayLike"+V](D,b),D},i.prototype._toArrayLikeLE=function(u,m){for(var g=0,b=0,B=0,D=0;B<this.length;B++){var V=this.words[B]<<D|b;u[g++]=V&255,g<u.length&&(u[g++]=V>>8&255),g<u.length&&(u[g++]=V>>16&255),D===6?(g<u.length&&(u[g++]=V>>24&255),b=0,D=0):(b=V>>>24,D+=2)}if(g<u.length)for(u[g++]=b;g<u.length;)u[g++]=0},i.prototype._toArrayLikeBE=function(u,m){for(var g=u.length-1,b=0,B=0,D=0;B<this.length;B++){var V=this.words[B]<<D|b;u[g--]=V&255,g>=0&&(u[g--]=V>>8&255),g>=0&&(u[g--]=V>>16&255),D===6?(g>=0&&(u[g--]=V>>24&255),b=0,D=0):(b=V>>>24,D+=2)}if(g>=0)for(u[g--]=b;g>=0;)u[g--]=0},Math.clz32?i.prototype._countBits=function(u){return 32-Math.clz32(u)}:i.prototype._countBits=function(u){var m=u,g=0;return m>=4096&&(g+=13,m>>>=13),m>=64&&(g+=7,m>>>=7),m>=8&&(g+=4,m>>>=4),m>=2&&(g+=2,m>>>=2),g+m},i.prototype._zeroBits=function(u){if(u===0)return 26;var m=u,g=0;return m&8191||(g+=13,m>>>=13),m&127||(g+=7,m>>>=7),m&15||(g+=4,m>>>=4),m&3||(g+=2,m>>>=2),m&1||g++,g},i.prototype.bitLength=function(){var u=this.words[this.length-1],m=this._countBits(u);return(this.length-1)*26+m};function v(O){for(var u=new Array(O.bitLength()),m=0;m<u.length;m++){var g=m/26|0,b=m%26;u[m]=O.words[g]>>>b&1}return u}i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var u=0,m=0;m<this.length;m++){var g=this._zeroBits(this.words[m]);if(u+=g,g!==26)break}return u},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(u){return this.negative!==0?this.abs().inotn(u).iaddn(1):this.clone()},i.prototype.fromTwos=function(u){return this.testn(u-1)?this.notn(u).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return this.negative!==0},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(u){for(;this.length<u.length;)this.words[this.length++]=0;for(var m=0;m<u.length;m++)this.words[m]=this.words[m]|u.words[m];return this._strip()},i.prototype.ior=function(u){return a((this.negative|u.negative)===0),this.iuor(u)},i.prototype.or=function(u){return this.length>u.length?this.clone().ior(u):u.clone().ior(this)},i.prototype.uor=function(u){return this.length>u.length?this.clone().iuor(u):u.clone().iuor(this)},i.prototype.iuand=function(u){var m;this.length>u.length?m=u:m=this;for(var g=0;g<m.length;g++)this.words[g]=this.words[g]&u.words[g];return this.length=m.length,this._strip()},i.prototype.iand=function(u){return a((this.negative|u.negative)===0),this.iuand(u)},i.prototype.and=function(u){return this.length>u.length?this.clone().iand(u):u.clone().iand(this)},i.prototype.uand=function(u){return this.length>u.length?this.clone().iuand(u):u.clone().iuand(this)},i.prototype.iuxor=function(u){var m,g;this.length>u.length?(m=this,g=u):(m=u,g=this);for(var b=0;b<g.length;b++)this.words[b]=m.words[b]^g.words[b];if(this!==m)for(;b<m.length;b++)this.words[b]=m.words[b];return this.length=m.length,this._strip()},i.prototype.ixor=function(u){return a((this.negative|u.negative)===0),this.iuxor(u)},i.prototype.xor=function(u){return this.length>u.length?this.clone().ixor(u):u.clone().ixor(this)},i.prototype.uxor=function(u){return this.length>u.length?this.clone().iuxor(u):u.clone().iuxor(this)},i.prototype.inotn=function(u){a(typeof u=="number"&&u>=0);var m=Math.ceil(u/26)|0,g=u%26;this._expand(m),g>0&&m--;for(var b=0;b<m;b++)this.words[b]=~this.words[b]&67108863;return g>0&&(this.words[b]=~this.words[b]&67108863>>26-g),this._strip()},i.prototype.notn=function(u){return this.clone().inotn(u)},i.prototype.setn=function(u,m){a(typeof u=="number"&&u>=0);var g=u/26|0,b=u%26;return this._expand(g+1),m?this.words[g]=this.words[g]|1<<b:this.words[g]=this.words[g]&~(1<<b),this._strip()},i.prototype.iadd=function(u){var m;if(this.negative!==0&&u.negative===0)return this.negative=0,m=this.isub(u),this.negative^=1,this._normSign();if(this.negative===0&&u.negative!==0)return u.negative=0,m=this.isub(u),u.negative=1,m._normSign();var g,b;this.length>u.length?(g=this,b=u):(g=u,b=this);for(var B=0,D=0;D<b.length;D++)m=(g.words[D]|0)+(b.words[D]|0)+B,this.words[D]=m&67108863,B=m>>>26;for(;B!==0&&D<g.length;D++)m=(g.words[D]|0)+B,this.words[D]=m&67108863,B=m>>>26;if(this.length=g.length,B!==0)this.words[this.length]=B,this.length++;else if(g!==this)for(;D<g.length;D++)this.words[D]=g.words[D];return this},i.prototype.add=function(u){var m;return u.negative!==0&&this.negative===0?(u.negative=0,m=this.sub(u),u.negative^=1,m):u.negative===0&&this.negative!==0?(this.negative=0,m=u.sub(this),this.negative=1,m):this.length>u.length?this.clone().iadd(u):u.clone().iadd(this)},i.prototype.isub=function(u){if(u.negative!==0){u.negative=0;var m=this.iadd(u);return u.negative=1,m._normSign()}else if(this.negative!==0)return this.negative=0,this.iadd(u),this.negative=1,this._normSign();var g=this.cmp(u);if(g===0)return this.negative=0,this.length=1,this.words[0]=0,this;var b,B;g>0?(b=this,B=u):(b=u,B=this);for(var D=0,V=0;V<B.length;V++)m=(b.words[V]|0)-(B.words[V]|0)+D,D=m>>26,this.words[V]=m&67108863;for(;D!==0&&V<b.length;V++)m=(b.words[V]|0)+D,D=m>>26,this.words[V]=m&67108863;if(D===0&&V<b.length&&b!==this)for(;V<b.length;V++)this.words[V]=b.words[V];return this.length=Math.max(this.length,V),b!==this&&(this.negative=1),this._strip()},i.prototype.sub=function(u){return this.clone().isub(u)};function E(O,u,m){m.negative=u.negative^O.negative;var g=O.length+u.length|0;m.length=g,g=g-1|0;var b=O.words[0]|0,B=u.words[0]|0,D=b*B,V=D&67108863,x=D/67108864|0;m.words[0]=V;for(var y=1;y<g;y++){for(var T=x>>>26,q=x&67108863,G=Math.min(y,u.length-1),W=Math.max(0,y-O.length+1);W<=G;W++){var te=y-W|0;b=O.words[te]|0,B=u.words[W]|0,D=b*B+q,T+=D/67108864|0,q=D&67108863}m.words[y]=q|0,x=T|0}return x!==0?m.words[y]=x|0:m.length--,m._strip()}var M=function(u,m,g){var b=u.words,B=m.words,D=g.words,V=0,x,y,T,q=b[0]|0,G=q&8191,W=q>>>13,te=b[1]|0,Y=te&8191,Q=te>>>13,Me=b[2]|0,ee=Me&8191,$=Me>>>13,we=b[3]|0,ne=we&8191,ae=we>>>13,Le=b[4]|0,le=Le&8191,de=Le>>>13,Ke=b[5]|0,ie=Ke&8191,oe=Ke>>>13,He=b[6]|0,re=He&8191,se=He>>>13,Ue=b[7]|0,ce=Ue&8191,ue=Ue>>>13,Fe=b[8]|0,pe=Fe&8191,me=Fe>>>13,ct=b[9]|0,ye=ct&8191,fe=ct>>>13,lt=B[0]|0,he=lt&8191,ge=lt>>>13,dt=B[1]|0,Ie=dt&8191,be=dt>>>13,pt=B[2]|0,Ae=pt&8191,_e=pt>>>13,mt=B[3]|0,xe=mt&8191,Se=mt>>>13,yt=B[4]|0,Be=yt&8191,Ce=yt>>>13,ft=B[5]|0,ke=ft&8191,Te=ft>>>13,ht=B[6]|0,Pe=ht&8191,Oe=ht>>>13,gt=B[7]|0,De=gt&8191,ve=gt>>>13,It=B[8]|0,Ve=It&8191,Re=It>>>13,bt=B[9]|0,Ee=bt&8191,Ne=bt>>>13;g.negative=u.negative^m.negative,g.length=19,x=Math.imul(G,he),y=Math.imul(G,ge),y=y+Math.imul(W,he)|0,T=Math.imul(W,ge);var qe=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(qe>>>26)|0,qe&=67108863,x=Math.imul(Y,he),y=Math.imul(Y,ge),y=y+Math.imul(Q,he)|0,T=Math.imul(Q,ge),x=x+Math.imul(G,Ie)|0,y=y+Math.imul(G,be)|0,y=y+Math.imul(W,Ie)|0,T=T+Math.imul(W,be)|0;var Ge=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(Ge>>>26)|0,Ge&=67108863,x=Math.imul(ee,he),y=Math.imul(ee,ge),y=y+Math.imul($,he)|0,T=Math.imul($,ge),x=x+Math.imul(Y,Ie)|0,y=y+Math.imul(Y,be)|0,y=y+Math.imul(Q,Ie)|0,T=T+Math.imul(Q,be)|0,x=x+Math.imul(G,Ae)|0,y=y+Math.imul(G,_e)|0,y=y+Math.imul(W,Ae)|0,T=T+Math.imul(W,_e)|0;var We=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(We>>>26)|0,We&=67108863,x=Math.imul(ne,he),y=Math.imul(ne,ge),y=y+Math.imul(ae,he)|0,T=Math.imul(ae,ge),x=x+Math.imul(ee,Ie)|0,y=y+Math.imul(ee,be)|0,y=y+Math.imul($,Ie)|0,T=T+Math.imul($,be)|0,x=x+Math.imul(Y,Ae)|0,y=y+Math.imul(Y,_e)|0,y=y+Math.imul(Q,Ae)|0,T=T+Math.imul(Q,_e)|0,x=x+Math.imul(G,xe)|0,y=y+Math.imul(G,Se)|0,y=y+Math.imul(W,xe)|0,T=T+Math.imul(W,Se)|0;var ze=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(ze>>>26)|0,ze&=67108863,x=Math.imul(le,he),y=Math.imul(le,ge),y=y+Math.imul(de,he)|0,T=Math.imul(de,ge),x=x+Math.imul(ne,Ie)|0,y=y+Math.imul(ne,be)|0,y=y+Math.imul(ae,Ie)|0,T=T+Math.imul(ae,be)|0,x=x+Math.imul(ee,Ae)|0,y=y+Math.imul(ee,_e)|0,y=y+Math.imul($,Ae)|0,T=T+Math.imul($,_e)|0,x=x+Math.imul(Y,xe)|0,y=y+Math.imul(Y,Se)|0,y=y+Math.imul(Q,xe)|0,T=T+Math.imul(Q,Se)|0,x=x+Math.imul(G,Be)|0,y=y+Math.imul(G,Ce)|0,y=y+Math.imul(W,Be)|0,T=T+Math.imul(W,Ce)|0;var je=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(je>>>26)|0,je&=67108863,x=Math.imul(ie,he),y=Math.imul(ie,ge),y=y+Math.imul(oe,he)|0,T=Math.imul(oe,ge),x=x+Math.imul(le,Ie)|0,y=y+Math.imul(le,be)|0,y=y+Math.imul(de,Ie)|0,T=T+Math.imul(de,be)|0,x=x+Math.imul(ne,Ae)|0,y=y+Math.imul(ne,_e)|0,y=y+Math.imul(ae,Ae)|0,T=T+Math.imul(ae,_e)|0,x=x+Math.imul(ee,xe)|0,y=y+Math.imul(ee,Se)|0,y=y+Math.imul($,xe)|0,T=T+Math.imul($,Se)|0,x=x+Math.imul(Y,Be)|0,y=y+Math.imul(Y,Ce)|0,y=y+Math.imul(Q,Be)|0,T=T+Math.imul(Q,Ce)|0,x=x+Math.imul(G,ke)|0,y=y+Math.imul(G,Te)|0,y=y+Math.imul(W,ke)|0,T=T+Math.imul(W,Te)|0;var Xe=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(Xe>>>26)|0,Xe&=67108863,x=Math.imul(re,he),y=Math.imul(re,ge),y=y+Math.imul(se,he)|0,T=Math.imul(se,ge),x=x+Math.imul(ie,Ie)|0,y=y+Math.imul(ie,be)|0,y=y+Math.imul(oe,Ie)|0,T=T+Math.imul(oe,be)|0,x=x+Math.imul(le,Ae)|0,y=y+Math.imul(le,_e)|0,y=y+Math.imul(de,Ae)|0,T=T+Math.imul(de,_e)|0,x=x+Math.imul(ne,xe)|0,y=y+Math.imul(ne,Se)|0,y=y+Math.imul(ae,xe)|0,T=T+Math.imul(ae,Se)|0,x=x+Math.imul(ee,Be)|0,y=y+Math.imul(ee,Ce)|0,y=y+Math.imul($,Be)|0,T=T+Math.imul($,Ce)|0,x=x+Math.imul(Y,ke)|0,y=y+Math.imul(Y,Te)|0,y=y+Math.imul(Q,ke)|0,T=T+Math.imul(Q,Te)|0,x=x+Math.imul(G,Pe)|0,y=y+Math.imul(G,Oe)|0,y=y+Math.imul(W,Pe)|0,T=T+Math.imul(W,Oe)|0;var Ze=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(Ze>>>26)|0,Ze&=67108863,x=Math.imul(ce,he),y=Math.imul(ce,ge),y=y+Math.imul(ue,he)|0,T=Math.imul(ue,ge),x=x+Math.imul(re,Ie)|0,y=y+Math.imul(re,be)|0,y=y+Math.imul(se,Ie)|0,T=T+Math.imul(se,be)|0,x=x+Math.imul(ie,Ae)|0,y=y+Math.imul(ie,_e)|0,y=y+Math.imul(oe,Ae)|0,T=T+Math.imul(oe,_e)|0,x=x+Math.imul(le,xe)|0,y=y+Math.imul(le,Se)|0,y=y+Math.imul(de,xe)|0,T=T+Math.imul(de,Se)|0,x=x+Math.imul(ne,Be)|0,y=y+Math.imul(ne,Ce)|0,y=y+Math.imul(ae,Be)|0,T=T+Math.imul(ae,Ce)|0,x=x+Math.imul(ee,ke)|0,y=y+Math.imul(ee,Te)|0,y=y+Math.imul($,ke)|0,T=T+Math.imul($,Te)|0,x=x+Math.imul(Y,Pe)|0,y=y+Math.imul(Y,Oe)|0,y=y+Math.imul(Q,Pe)|0,T=T+Math.imul(Q,Oe)|0,x=x+Math.imul(G,De)|0,y=y+Math.imul(G,ve)|0,y=y+Math.imul(W,De)|0,T=T+Math.imul(W,ve)|0;var Je=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(Je>>>26)|0,Je&=67108863,x=Math.imul(pe,he),y=Math.imul(pe,ge),y=y+Math.imul(me,he)|0,T=Math.imul(me,ge),x=x+Math.imul(ce,Ie)|0,y=y+Math.imul(ce,be)|0,y=y+Math.imul(ue,Ie)|0,T=T+Math.imul(ue,be)|0,x=x+Math.imul(re,Ae)|0,y=y+Math.imul(re,_e)|0,y=y+Math.imul(se,Ae)|0,T=T+Math.imul(se,_e)|0,x=x+Math.imul(ie,xe)|0,y=y+Math.imul(ie,Se)|0,y=y+Math.imul(oe,xe)|0,T=T+Math.imul(oe,Se)|0,x=x+Math.imul(le,Be)|0,y=y+Math.imul(le,Ce)|0,y=y+Math.imul(de,Be)|0,T=T+Math.imul(de,Ce)|0,x=x+Math.imul(ne,ke)|0,y=y+Math.imul(ne,Te)|0,y=y+Math.imul(ae,ke)|0,T=T+Math.imul(ae,Te)|0,x=x+Math.imul(ee,Pe)|0,y=y+Math.imul(ee,Oe)|0,y=y+Math.imul($,Pe)|0,T=T+Math.imul($,Oe)|0,x=x+Math.imul(Y,De)|0,y=y+Math.imul(Y,ve)|0,y=y+Math.imul(Q,De)|0,T=T+Math.imul(Q,ve)|0,x=x+Math.imul(G,Ve)|0,y=y+Math.imul(G,Re)|0,y=y+Math.imul(W,Ve)|0,T=T+Math.imul(W,Re)|0;var Ye=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(Ye>>>26)|0,Ye&=67108863,x=Math.imul(ye,he),y=Math.imul(ye,ge),y=y+Math.imul(fe,he)|0,T=Math.imul(fe,ge),x=x+Math.imul(pe,Ie)|0,y=y+Math.imul(pe,be)|0,y=y+Math.imul(me,Ie)|0,T=T+Math.imul(me,be)|0,x=x+Math.imul(ce,Ae)|0,y=y+Math.imul(ce,_e)|0,y=y+Math.imul(ue,Ae)|0,T=T+Math.imul(ue,_e)|0,x=x+Math.imul(re,xe)|0,y=y+Math.imul(re,Se)|0,y=y+Math.imul(se,xe)|0,T=T+Math.imul(se,Se)|0,x=x+Math.imul(ie,Be)|0,y=y+Math.imul(ie,Ce)|0,y=y+Math.imul(oe,Be)|0,T=T+Math.imul(oe,Ce)|0,x=x+Math.imul(le,ke)|0,y=y+Math.imul(le,Te)|0,y=y+Math.imul(de,ke)|0,T=T+Math.imul(de,Te)|0,x=x+Math.imul(ne,Pe)|0,y=y+Math.imul(ne,Oe)|0,y=y+Math.imul(ae,Pe)|0,T=T+Math.imul(ae,Oe)|0,x=x+Math.imul(ee,De)|0,y=y+Math.imul(ee,ve)|0,y=y+Math.imul($,De)|0,T=T+Math.imul($,ve)|0,x=x+Math.imul(Y,Ve)|0,y=y+Math.imul(Y,Re)|0,y=y+Math.imul(Q,Ve)|0,T=T+Math.imul(Q,Re)|0,x=x+Math.imul(G,Ee)|0,y=y+Math.imul(G,Ne)|0,y=y+Math.imul(W,Ee)|0,T=T+Math.imul(W,Ne)|0;var Qe=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(Qe>>>26)|0,Qe&=67108863,x=Math.imul(ye,Ie),y=Math.imul(ye,be),y=y+Math.imul(fe,Ie)|0,T=Math.imul(fe,be),x=x+Math.imul(pe,Ae)|0,y=y+Math.imul(pe,_e)|0,y=y+Math.imul(me,Ae)|0,T=T+Math.imul(me,_e)|0,x=x+Math.imul(ce,xe)|0,y=y+Math.imul(ce,Se)|0,y=y+Math.imul(ue,xe)|0,T=T+Math.imul(ue,Se)|0,x=x+Math.imul(re,Be)|0,y=y+Math.imul(re,Ce)|0,y=y+Math.imul(se,Be)|0,T=T+Math.imul(se,Ce)|0,x=x+Math.imul(ie,ke)|0,y=y+Math.imul(ie,Te)|0,y=y+Math.imul(oe,ke)|0,T=T+Math.imul(oe,Te)|0,x=x+Math.imul(le,Pe)|0,y=y+Math.imul(le,Oe)|0,y=y+Math.imul(de,Pe)|0,T=T+Math.imul(de,Oe)|0,x=x+Math.imul(ne,De)|0,y=y+Math.imul(ne,ve)|0,y=y+Math.imul(ae,De)|0,T=T+Math.imul(ae,ve)|0,x=x+Math.imul(ee,Ve)|0,y=y+Math.imul(ee,Re)|0,y=y+Math.imul($,Ve)|0,T=T+Math.imul($,Re)|0,x=x+Math.imul(Y,Ee)|0,y=y+Math.imul(Y,Ne)|0,y=y+Math.imul(Q,Ee)|0,T=T+Math.imul(Q,Ne)|0;var $e=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+($e>>>26)|0,$e&=67108863,x=Math.imul(ye,Ae),y=Math.imul(ye,_e),y=y+Math.imul(fe,Ae)|0,T=Math.imul(fe,_e),x=x+Math.imul(pe,xe)|0,y=y+Math.imul(pe,Se)|0,y=y+Math.imul(me,xe)|0,T=T+Math.imul(me,Se)|0,x=x+Math.imul(ce,Be)|0,y=y+Math.imul(ce,Ce)|0,y=y+Math.imul(ue,Be)|0,T=T+Math.imul(ue,Ce)|0,x=x+Math.imul(re,ke)|0,y=y+Math.imul(re,Te)|0,y=y+Math.imul(se,ke)|0,T=T+Math.imul(se,Te)|0,x=x+Math.imul(ie,Pe)|0,y=y+Math.imul(ie,Oe)|0,y=y+Math.imul(oe,Pe)|0,T=T+Math.imul(oe,Oe)|0,x=x+Math.imul(le,De)|0,y=y+Math.imul(le,ve)|0,y=y+Math.imul(de,De)|0,T=T+Math.imul(de,ve)|0,x=x+Math.imul(ne,Ve)|0,y=y+Math.imul(ne,Re)|0,y=y+Math.imul(ae,Ve)|0,T=T+Math.imul(ae,Re)|0,x=x+Math.imul(ee,Ee)|0,y=y+Math.imul(ee,Ne)|0,y=y+Math.imul($,Ee)|0,T=T+Math.imul($,Ne)|0;var et=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(et>>>26)|0,et&=67108863,x=Math.imul(ye,xe),y=Math.imul(ye,Se),y=y+Math.imul(fe,xe)|0,T=Math.imul(fe,Se),x=x+Math.imul(pe,Be)|0,y=y+Math.imul(pe,Ce)|0,y=y+Math.imul(me,Be)|0,T=T+Math.imul(me,Ce)|0,x=x+Math.imul(ce,ke)|0,y=y+Math.imul(ce,Te)|0,y=y+Math.imul(ue,ke)|0,T=T+Math.imul(ue,Te)|0,x=x+Math.imul(re,Pe)|0,y=y+Math.imul(re,Oe)|0,y=y+Math.imul(se,Pe)|0,T=T+Math.imul(se,Oe)|0,x=x+Math.imul(ie,De)|0,y=y+Math.imul(ie,ve)|0,y=y+Math.imul(oe,De)|0,T=T+Math.imul(oe,ve)|0,x=x+Math.imul(le,Ve)|0,y=y+Math.imul(le,Re)|0,y=y+Math.imul(de,Ve)|0,T=T+Math.imul(de,Re)|0,x=x+Math.imul(ne,Ee)|0,y=y+Math.imul(ne,Ne)|0,y=y+Math.imul(ae,Ee)|0,T=T+Math.imul(ae,Ne)|0;var tt=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(tt>>>26)|0,tt&=67108863,x=Math.imul(ye,Be),y=Math.imul(ye,Ce),y=y+Math.imul(fe,Be)|0,T=Math.imul(fe,Ce),x=x+Math.imul(pe,ke)|0,y=y+Math.imul(pe,Te)|0,y=y+Math.imul(me,ke)|0,T=T+Math.imul(me,Te)|0,x=x+Math.imul(ce,Pe)|0,y=y+Math.imul(ce,Oe)|0,y=y+Math.imul(ue,Pe)|0,T=T+Math.imul(ue,Oe)|0,x=x+Math.imul(re,De)|0,y=y+Math.imul(re,ve)|0,y=y+Math.imul(se,De)|0,T=T+Math.imul(se,ve)|0,x=x+Math.imul(ie,Ve)|0,y=y+Math.imul(ie,Re)|0,y=y+Math.imul(oe,Ve)|0,T=T+Math.imul(oe,Re)|0,x=x+Math.imul(le,Ee)|0,y=y+Math.imul(le,Ne)|0,y=y+Math.imul(de,Ee)|0,T=T+Math.imul(de,Ne)|0;var nt=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(nt>>>26)|0,nt&=67108863,x=Math.imul(ye,ke),y=Math.imul(ye,Te),y=y+Math.imul(fe,ke)|0,T=Math.imul(fe,Te),x=x+Math.imul(pe,Pe)|0,y=y+Math.imul(pe,Oe)|0,y=y+Math.imul(me,Pe)|0,T=T+Math.imul(me,Oe)|0,x=x+Math.imul(ce,De)|0,y=y+Math.imul(ce,ve)|0,y=y+Math.imul(ue,De)|0,T=T+Math.imul(ue,ve)|0,x=x+Math.imul(re,Ve)|0,y=y+Math.imul(re,Re)|0,y=y+Math.imul(se,Ve)|0,T=T+Math.imul(se,Re)|0,x=x+Math.imul(ie,Ee)|0,y=y+Math.imul(ie,Ne)|0,y=y+Math.imul(oe,Ee)|0,T=T+Math.imul(oe,Ne)|0;var at=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(at>>>26)|0,at&=67108863,x=Math.imul(ye,Pe),y=Math.imul(ye,Oe),y=y+Math.imul(fe,Pe)|0,T=Math.imul(fe,Oe),x=x+Math.imul(pe,De)|0,y=y+Math.imul(pe,ve)|0,y=y+Math.imul(me,De)|0,T=T+Math.imul(me,ve)|0,x=x+Math.imul(ce,Ve)|0,y=y+Math.imul(ce,Re)|0,y=y+Math.imul(ue,Ve)|0,T=T+Math.imul(ue,Re)|0,x=x+Math.imul(re,Ee)|0,y=y+Math.imul(re,Ne)|0,y=y+Math.imul(se,Ee)|0,T=T+Math.imul(se,Ne)|0;var ot=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(ot>>>26)|0,ot&=67108863,x=Math.imul(ye,De),y=Math.imul(ye,ve),y=y+Math.imul(fe,De)|0,T=Math.imul(fe,ve),x=x+Math.imul(pe,Ve)|0,y=y+Math.imul(pe,Re)|0,y=y+Math.imul(me,Ve)|0,T=T+Math.imul(me,Re)|0,x=x+Math.imul(ce,Ee)|0,y=y+Math.imul(ce,Ne)|0,y=y+Math.imul(ue,Ee)|0,T=T+Math.imul(ue,Ne)|0;var it=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(it>>>26)|0,it&=67108863,x=Math.imul(ye,Ve),y=Math.imul(ye,Re),y=y+Math.imul(fe,Ve)|0,T=Math.imul(fe,Re),x=x+Math.imul(pe,Ee)|0,y=y+Math.imul(pe,Ne)|0,y=y+Math.imul(me,Ee)|0,T=T+Math.imul(me,Ne)|0;var rt=(V+x|0)+((y&8191)<<13)|0;V=(T+(y>>>13)|0)+(rt>>>26)|0,rt&=67108863,x=Math.imul(ye,Ee),y=Math.imul(ye,Ne),y=y+Math.imul(fe,Ee)|0,T=Math.imul(fe,Ne);var st=(V+x|0)+((y&8191)<<13)|0;return V=(T+(y>>>13)|0)+(st>>>26)|0,st&=67108863,D[0]=qe,D[1]=Ge,D[2]=We,D[3]=ze,D[4]=je,D[5]=Xe,D[6]=Ze,D[7]=Je,D[8]=Ye,D[9]=Qe,D[10]=$e,D[11]=et,D[12]=tt,D[13]=nt,D[14]=at,D[15]=ot,D[16]=it,D[17]=rt,D[18]=st,V!==0&&(D[19]=V,g.length++),g};Math.imul||(M=E);function R(O,u,m){m.negative=u.negative^O.negative,m.length=O.length+u.length;for(var g=0,b=0,B=0;B<m.length-1;B++){var D=b;b=0;for(var V=g&67108863,x=Math.min(B,u.length-1),y=Math.max(0,B-O.length+1);y<=x;y++){var T=B-y,q=O.words[T]|0,G=u.words[y]|0,W=q*G,te=W&67108863;D=D+(W/67108864|0)|0,te=te+V|0,V=te&67108863,D=D+(te>>>26)|0,b+=D>>>26,D&=67108863}m.words[B]=V,g=D,D=b}return g!==0?m.words[B]=g:m.length--,m._strip()}function H(O,u,m){return R(O,u,m)}i.prototype.mulTo=function(u,m){var g,b=this.length+u.length;return this.length===10&&u.length===10?g=M(this,u,m):b<63?g=E(this,u,m):b<1024?g=R(this,u,m):g=H(this,u,m),g},i.prototype.mul=function(u){var m=new i(null);return m.words=new Array(this.length+u.length),this.mulTo(u,m)},i.prototype.mulf=function(u){var m=new i(null);return m.words=new Array(this.length+u.length),H(this,u,m)},i.prototype.imul=function(u){return this.clone().mulTo(u,this)},i.prototype.imuln=function(u){var m=u<0;m&&(u=-u),a(typeof u=="number"),a(u<67108864);for(var g=0,b=0;b<this.length;b++){var B=(this.words[b]|0)*u,D=(B&67108863)+(g&67108863);g>>=26,g+=B/67108864|0,g+=D>>>26,this.words[b]=D&67108863}return g!==0&&(this.words[b]=g,this.length++),m?this.ineg():this},i.prototype.muln=function(u){return this.clone().imuln(u)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(u){var m=v(u);if(m.length===0)return new i(1);for(var g=this,b=0;b<m.length&&m[b]===0;b++,g=g.sqr());if(++b<m.length)for(var B=g.sqr();b<m.length;b++,B=B.sqr())m[b]!==0&&(g=g.mul(B));return g},i.prototype.iushln=function(u){a(typeof u=="number"&&u>=0);var m=u%26,g=(u-m)/26,b=67108863>>>26-m<<26-m,B;if(m!==0){var D=0;for(B=0;B<this.length;B++){var V=this.words[B]&b,x=(this.words[B]|0)-V<<m;this.words[B]=x|D,D=V>>>26-m}D&&(this.words[B]=D,this.length++)}if(g!==0){for(B=this.length-1;B>=0;B--)this.words[B+g]=this.words[B];for(B=0;B<g;B++)this.words[B]=0;this.length+=g}return this._strip()},i.prototype.ishln=function(u){return a(this.negative===0),this.iushln(u)},i.prototype.iushrn=function(u,m,g){a(typeof u=="number"&&u>=0);var b;m?b=(m-m%26)/26:b=0;var B=u%26,D=Math.min((u-B)/26,this.length),V=67108863^67108863>>>B<<B,x=g;if(b-=D,b=Math.max(0,b),x){for(var y=0;y<D;y++)x.words[y]=this.words[y];x.length=D}if(D!==0)if(this.length>D)for(this.length-=D,y=0;y<this.length;y++)this.words[y]=this.words[y+D];else this.words[0]=0,this.length=1;var T=0;for(y=this.length-1;y>=0&&(T!==0||y>=b);y--){var q=this.words[y]|0;this.words[y]=T<<26-B|q>>>B,T=q&V}return x&&T!==0&&(x.words[x.length++]=T),this.length===0&&(this.words[0]=0,this.length=1),this._strip()},i.prototype.ishrn=function(u,m,g){return a(this.negative===0),this.iushrn(u,m,g)},i.prototype.shln=function(u){return this.clone().ishln(u)},i.prototype.ushln=function(u){return this.clone().iushln(u)},i.prototype.shrn=function(u){return this.clone().ishrn(u)},i.prototype.ushrn=function(u){return this.clone().iushrn(u)},i.prototype.testn=function(u){a(typeof u=="number"&&u>=0);var m=u%26,g=(u-m)/26,b=1<<m;if(this.length<=g)return!1;var B=this.words[g];return!!(B&b)},i.prototype.imaskn=function(u){a(typeof u=="number"&&u>=0);var m=u%26,g=(u-m)/26;if(a(this.negative===0,"imaskn works only with positive numbers"),this.length<=g)return this;if(m!==0&&g++,this.length=Math.min(g,this.length),m!==0){var b=67108863^67108863>>>m<<m;this.words[this.length-1]&=b}return this._strip()},i.prototype.maskn=function(u){return this.clone().imaskn(u)},i.prototype.iaddn=function(u){return a(typeof u=="number"),a(u<67108864),u<0?this.isubn(-u):this.negative!==0?this.length===1&&(this.words[0]|0)<=u?(this.words[0]=u-(this.words[0]|0),this.negative=0,this):(this.negative=0,this.isubn(u),this.negative=1,this):this._iaddn(u)},i.prototype._iaddn=function(u){this.words[0]+=u;for(var m=0;m<this.length&&this.words[m]>=67108864;m++)this.words[m]-=67108864,m===this.length-1?this.words[m+1]=1:this.words[m+1]++;return this.length=Math.max(this.length,m+1),this},i.prototype.isubn=function(u){if(a(typeof u=="number"),a(u<67108864),u<0)return this.iaddn(-u);if(this.negative!==0)return this.negative=0,this.iaddn(u),this.negative=1,this;if(this.words[0]-=u,this.length===1&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var m=0;m<this.length&&this.words[m]<0;m++)this.words[m]+=67108864,this.words[m+1]-=1;return this._strip()},i.prototype.addn=function(u){return this.clone().iaddn(u)},i.prototype.subn=function(u){return this.clone().isubn(u)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(u,m,g){var b=u.length+g,B;this._expand(b);var D,V=0;for(B=0;B<u.length;B++){D=(this.words[B+g]|0)+V;var x=(u.words[B]|0)*m;D-=x&67108863,V=(D>>26)-(x/67108864|0),this.words[B+g]=D&67108863}for(;B<this.length-g;B++)D=(this.words[B+g]|0)+V,V=D>>26,this.words[B+g]=D&67108863;if(V===0)return this._strip();for(a(V===-1),V=0,B=0;B<this.length;B++)D=-(this.words[B]|0)+V,V=D>>26,this.words[B]=D&67108863;return this.negative=1,this._strip()},i.prototype._wordDiv=function(u,m){var g=this.length-u.length,b=this.clone(),B=u,D=B.words[B.length-1]|0,V=this._countBits(D);g=26-V,g!==0&&(B=B.ushln(g),b.iushln(g),D=B.words[B.length-1]|0);var x=b.length-B.length,y;if(m!=="mod"){y=new i(null),y.length=x+1,y.words=new Array(y.length);for(var T=0;T<y.length;T++)y.words[T]=0}var q=b.clone()._ishlnsubmul(B,1,x);q.negative===0&&(b=q,y&&(y.words[x]=1));for(var G=x-1;G>=0;G--){var W=(b.words[B.length+G]|0)*67108864+(b.words[B.length+G-1]|0);for(W=Math.min(W/D|0,67108863),b._ishlnsubmul(B,W,G);b.negative!==0;)W--,b.negative=0,b._ishlnsubmul(B,1,G),b.isZero()||(b.negative^=1);y&&(y.words[G]=W)}return y&&y._strip(),b._strip(),m!=="div"&&g!==0&&b.iushrn(g),{div:y||null,mod:b}},i.prototype.divmod=function(u,m,g){if(a(!u.isZero()),this.isZero())return{div:new i(0),mod:new i(0)};var b,B,D;return this.negative!==0&&u.negative===0?(D=this.neg().divmod(u,m),m!=="mod"&&(b=D.div.neg()),m!=="div"&&(B=D.mod.neg(),g&&B.negative!==0&&B.iadd(u)),{div:b,mod:B}):this.negative===0&&u.negative!==0?(D=this.divmod(u.neg(),m),m!=="mod"&&(b=D.div.neg()),{div:b,mod:D.mod}):this.negative&u.negative?(D=this.neg().divmod(u.neg(),m),m!=="div"&&(B=D.mod.neg(),g&&B.negative!==0&&B.isub(u)),{div:D.div,mod:B}):u.length>this.length||this.cmp(u)<0?{div:new i(0),mod:this}:u.length===1?m==="div"?{div:this.divn(u.words[0]),mod:null}:m==="mod"?{div:null,mod:new i(this.modrn(u.words[0]))}:{div:this.divn(u.words[0]),mod:new i(this.modrn(u.words[0]))}:this._wordDiv(u,m)},i.prototype.div=function(u){return this.divmod(u,"div",!1).div},i.prototype.mod=function(u){return this.divmod(u,"mod",!1).mod},i.prototype.umod=function(u){return this.divmod(u,"mod",!0).mod},i.prototype.divRound=function(u){var m=this.divmod(u);if(m.mod.isZero())return m.div;var g=m.div.negative!==0?m.mod.isub(u):m.mod,b=u.ushrn(1),B=u.andln(1),D=g.cmp(b);return D<0||B===1&&D===0?m.div:m.div.negative!==0?m.div.isubn(1):m.div.iaddn(1)},i.prototype.modrn=function(u){var m=u<0;m&&(u=-u),a(u<=67108863);for(var g=(1<<26)%u,b=0,B=this.length-1;B>=0;B--)b=(g*b+(this.words[B]|0))%u;return m?-b:b},i.prototype.modn=function(u){return this.modrn(u)},i.prototype.idivn=function(u){var m=u<0;m&&(u=-u),a(u<=67108863);for(var g=0,b=this.length-1;b>=0;b--){var B=(this.words[b]|0)+g*67108864;this.words[b]=B/u|0,g=B%u}return this._strip(),m?this.ineg():this},i.prototype.divn=function(u){return this.clone().idivn(u)},i.prototype.egcd=function(u){a(u.negative===0),a(!u.isZero());var m=this,g=u.clone();m.negative!==0?m=m.umod(u):m=m.clone();for(var b=new i(1),B=new i(0),D=new i(0),V=new i(1),x=0;m.isEven()&&g.isEven();)m.iushrn(1),g.iushrn(1),++x;for(var y=g.clone(),T=m.clone();!m.isZero();){for(var q=0,G=1;!(m.words[0]&G)&&q<26;++q,G<<=1);if(q>0)for(m.iushrn(q);q-- >0;)(b.isOdd()||B.isOdd())&&(b.iadd(y),B.isub(T)),b.iushrn(1),B.iushrn(1);for(var W=0,te=1;!(g.words[0]&te)&&W<26;++W,te<<=1);if(W>0)for(g.iushrn(W);W-- >0;)(D.isOdd()||V.isOdd())&&(D.iadd(y),V.isub(T)),D.iushrn(1),V.iushrn(1);m.cmp(g)>=0?(m.isub(g),b.isub(D),B.isub(V)):(g.isub(m),D.isub(b),V.isub(B))}return{a:D,b:V,gcd:g.iushln(x)}},i.prototype._invmp=function(u){a(u.negative===0),a(!u.isZero());var m=this,g=u.clone();m.negative!==0?m=m.umod(u):m=m.clone();for(var b=new i(1),B=new i(0),D=g.clone();m.cmpn(1)>0&&g.cmpn(1)>0;){for(var V=0,x=1;!(m.words[0]&x)&&V<26;++V,x<<=1);if(V>0)for(m.iushrn(V);V-- >0;)b.isOdd()&&b.iadd(D),b.iushrn(1);for(var y=0,T=1;!(g.words[0]&T)&&y<26;++y,T<<=1);if(y>0)for(g.iushrn(y);y-- >0;)B.isOdd()&&B.iadd(D),B.iushrn(1);m.cmp(g)>=0?(m.isub(g),b.isub(B)):(g.isub(m),B.isub(b))}var q;return m.cmpn(1)===0?q=b:q=B,q.cmpn(0)<0&&q.iadd(u),q},i.prototype.gcd=function(u){if(this.isZero())return u.abs();if(u.isZero())return this.abs();var m=this.clone(),g=u.clone();m.negative=0,g.negative=0;for(var b=0;m.isEven()&&g.isEven();b++)m.iushrn(1),g.iushrn(1);do{for(;m.isEven();)m.iushrn(1);for(;g.isEven();)g.iushrn(1);var B=m.cmp(g);if(B<0){var D=m;m=g,g=D}else if(B===0||g.cmpn(1)===0)break;m.isub(g)}while(!0);return g.iushln(b)},i.prototype.invm=function(u){return this.egcd(u).a.umod(u)},i.prototype.isEven=function(){return(this.words[0]&1)===0},i.prototype.isOdd=function(){return(this.words[0]&1)===1},i.prototype.andln=function(u){return this.words[0]&u},i.prototype.bincn=function(u){a(typeof u=="number");var m=u%26,g=(u-m)/26,b=1<<m;if(this.length<=g)return this._expand(g+1),this.words[g]|=b,this;for(var B=b,D=g;B!==0&&D<this.length;D++){var V=this.words[D]|0;V+=B,B=V>>>26,V&=67108863,this.words[D]=V}return B!==0&&(this.words[D]=B,this.length++),this},i.prototype.isZero=function(){return this.length===1&&this.words[0]===0},i.prototype.cmpn=function(u){var m=u<0;if(this.negative!==0&&!m)return-1;if(this.negative===0&&m)return 1;this._strip();var g;if(this.length>1)g=1;else{m&&(u=-u),a(u<=67108863,"Number is too big");var b=this.words[0]|0;g=b===u?0:b<u?-1:1}return this.negative!==0?-g|0:g},i.prototype.cmp=function(u){if(this.negative!==0&&u.negative===0)return-1;if(this.negative===0&&u.negative!==0)return 1;var m=this.ucmp(u);return this.negative!==0?-m|0:m},i.prototype.ucmp=function(u){if(this.length>u.length)return 1;if(this.length<u.length)return-1;for(var m=0,g=this.length-1;g>=0;g--){var b=this.words[g]|0,B=u.words[g]|0;if(b!==B){b<B?m=-1:b>B&&(m=1);break}}return m},i.prototype.gtn=function(u){return this.cmpn(u)===1},i.prototype.gt=function(u){return this.cmp(u)===1},i.prototype.gten=function(u){return this.cmpn(u)>=0},i.prototype.gte=function(u){return this.cmp(u)>=0},i.prototype.ltn=function(u){return this.cmpn(u)===-1},i.prototype.lt=function(u){return this.cmp(u)===-1},i.prototype.lten=function(u){return this.cmpn(u)<=0},i.prototype.lte=function(u){return this.cmp(u)<=0},i.prototype.eqn=function(u){return this.cmpn(u)===0},i.prototype.eq=function(u){return this.cmp(u)===0},i.red=function(u){return new L(u)},i.prototype.toRed=function(u){return a(!this.red,"Already a number in reduction context"),a(this.negative===0,"red works only with positives"),u.convertTo(this)._forceRed(u)},i.prototype.fromRed=function(){return a(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(u){return this.red=u,this},i.prototype.forceRed=function(u){return a(!this.red,"Already a number in reduction context"),this._forceRed(u)},i.prototype.redAdd=function(u){return a(this.red,"redAdd works only with red numbers"),this.red.add(this,u)},i.prototype.redIAdd=function(u){return a(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,u)},i.prototype.redSub=function(u){return a(this.red,"redSub works only with red numbers"),this.red.sub(this,u)},i.prototype.redISub=function(u){return a(this.red,"redISub works only with red numbers"),this.red.isub(this,u)},i.prototype.redShl=function(u){return a(this.red,"redShl works only with red numbers"),this.red.shl(this,u)},i.prototype.redMul=function(u){return a(this.red,"redMul works only with red numbers"),this.red._verify2(this,u),this.red.mul(this,u)},i.prototype.redIMul=function(u){return a(this.red,"redMul works only with red numbers"),this.red._verify2(this,u),this.red.imul(this,u)},i.prototype.redSqr=function(){return a(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return a(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return a(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return a(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return a(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(u){return a(this.red&&!u.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,u)};var K={k256:null,p224:null,p192:null,p25519:null};function w(O,u){this.name=O,this.p=new i(u,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}w.prototype._tmp=function(){var u=new i(null);return u.words=new Array(Math.ceil(this.n/13)),u},w.prototype.ireduce=function(u){var m=u,g;do this.split(m,this.tmp),m=this.imulK(m),m=m.iadd(this.tmp),g=m.bitLength();while(g>this.n);var b=g<this.n?-1:m.ucmp(this.p);return b===0?(m.words[0]=0,m.length=1):b>0?m.isub(this.p):m.strip!==void 0?m.strip():m._strip(),m},w.prototype.split=function(u,m){u.iushrn(this.n,0,m)},w.prototype.imulK=function(u){return u.imul(this.k)};function U(){w.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}o(U,w),U.prototype.split=function(u,m){for(var g=4194303,b=Math.min(u.length,9),B=0;B<b;B++)m.words[B]=u.words[B];if(m.length=b,u.length<=9){u.words[0]=0,u.length=1;return}var D=u.words[9];for(m.words[m.length++]=D&g,B=10;B<u.length;B++){var V=u.words[B]|0;u.words[B-10]=(V&g)<<4|D>>>22,D=V}D>>>=22,u.words[B-10]=D,D===0&&u.length>10?u.length-=10:u.length-=9},U.prototype.imulK=function(u){u.words[u.length]=0,u.words[u.length+1]=0,u.length+=2;for(var m=0,g=0;g<u.length;g++){var b=u.words[g]|0;m+=b*977,u.words[g]=m&67108863,m=b*64+(m/67108864|0)}return u.words[u.length-1]===0&&(u.length--,u.words[u.length-1]===0&&u.length--),u};function F(){w.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}o(F,w);function X(){w.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}o(X,w);function z(){w.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}o(z,w),z.prototype.imulK=function(u){for(var m=0,g=0;g<u.length;g++){var b=(u.words[g]|0)*19+m,B=b&67108863;b>>>=26,u.words[g]=B,m=b}return m!==0&&(u.words[u.length++]=m),u},i._prime=function(u){if(K[u])return K[u];var m;if(u==="k256")m=new U;else if(u==="p224")m=new F;else if(u==="p192")m=new X;else if(u==="p25519")m=new z;else throw new Error("Unknown prime "+u);return K[u]=m,m};function L(O){if(typeof O=="string"){var u=i._prime(O);this.m=u.p,this.prime=u}else a(O.gtn(1),"modulus must be greater than 1"),this.m=O,this.prime=null}L.prototype._verify1=function(u){a(u.negative===0,"red works only with positives"),a(u.red,"red works only with red numbers")},L.prototype._verify2=function(u,m){a((u.negative|m.negative)===0,"red works only with positives"),a(u.red&&u.red===m.red,"red works only with red numbers")},L.prototype.imod=function(u){return this.prime?this.prime.ireduce(u)._forceRed(this):(p(u,u.umod(this.m)._forceRed(this)),u)},L.prototype.neg=function(u){return u.isZero()?u.clone():this.m.sub(u)._forceRed(this)},L.prototype.add=function(u,m){this._verify2(u,m);var g=u.add(m);return g.cmp(this.m)>=0&&g.isub(this.m),g._forceRed(this)},L.prototype.iadd=function(u,m){this._verify2(u,m);var g=u.iadd(m);return g.cmp(this.m)>=0&&g.isub(this.m),g},L.prototype.sub=function(u,m){this._verify2(u,m);var g=u.sub(m);return g.cmpn(0)<0&&g.iadd(this.m),g._forceRed(this)},L.prototype.isub=function(u,m){this._verify2(u,m);var g=u.isub(m);return g.cmpn(0)<0&&g.iadd(this.m),g},L.prototype.shl=function(u,m){return this._verify1(u),this.imod(u.ushln(m))},L.prototype.imul=function(u,m){return this._verify2(u,m),this.imod(u.imul(m))},L.prototype.mul=function(u,m){return this._verify2(u,m),this.imod(u.mul(m))},L.prototype.isqr=function(u){return this.imul(u,u.clone())},L.prototype.sqr=function(u){return this.mul(u,u)},L.prototype.sqrt=function(u){if(u.isZero())return u.clone();var m=this.m.andln(3);if(a(m%2===1),m===3){var g=this.m.add(new i(1)).iushrn(2);return this.pow(u,g)}for(var b=this.m.subn(1),B=0;!b.isZero()&&b.andln(1)===0;)B++,b.iushrn(1);a(!b.isZero());var D=new i(1).toRed(this),V=D.redNeg(),x=this.m.subn(1).iushrn(1),y=this.m.bitLength();for(y=new i(2*y*y).toRed(this);this.pow(y,x).cmp(V)!==0;)y.redIAdd(V);for(var T=this.pow(y,b),q=this.pow(u,b.addn(1).iushrn(1)),G=this.pow(u,b),W=B;G.cmp(D)!==0;){for(var te=G,Y=0;te.cmp(D)!==0;Y++)te=te.redSqr();a(Y<W);var Q=this.pow(T,new i(1).iushln(W-Y-1));q=q.redMul(Q),T=Q.redSqr(),G=G.redMul(T),W=Y}return q},L.prototype.invm=function(u){var m=u._invmp(this.m);return m.negative!==0?(m.negative=0,this.imod(m).redNeg()):this.imod(m)},L.prototype.pow=function(u,m){if(m.isZero())return new i(1).toRed(this);if(m.cmpn(1)===0)return u.clone();var g=4,b=new Array(1<<g);b[0]=new i(1).toRed(this),b[1]=u;for(var B=2;B<b.length;B++)b[B]=this.mul(b[B-1],u);var D=b[0],V=0,x=0,y=m.bitLength()%26;for(y===0&&(y=26),B=m.length-1;B>=0;B--){for(var T=m.words[B],q=y-1;q>=0;q--){var G=T>>q&1;if(D!==b[0]&&(D=this.sqr(D)),G===0&&V===0){x=0;continue}V<<=1,V|=G,x++,!(x!==g&&(B!==0||q!==0))&&(D=this.mul(D,b[V]),x=0,V=0)}y=26}return D},L.prototype.convertTo=function(u){var m=u.umod(this.m);return m===u?m.clone():m},L.prototype.convertFrom=function(u){var m=u.clone();return m.red=null,m},i.mont=function(u){return new J(u)};function J(O){L.call(this,O),this.shift=this.m.bitLength(),this.shift%26!==0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}o(J,L),J.prototype.convertTo=function(u){return this.imod(u.ushln(this.shift))},J.prototype.convertFrom=function(u){var m=this.imod(u.mul(this.rinv));return m.red=null,m},J.prototype.imul=function(u,m){if(u.isZero()||m.isZero())return u.words[0]=0,u.length=1,u;var g=u.imul(m),b=g.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),B=g.isub(b).iushrn(this.shift),D=B;return B.cmp(this.m)>=0?D=B.isub(this.m):B.cmpn(0)<0&&(D=B.iadd(this.m)),D._forceRed(this)},J.prototype.mul=function(u,m){if(u.isZero()||m.isZero())return new i(0)._forceRed(this);var g=u.mul(m),b=g.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),B=g.isub(b).iushrn(this.shift),D=B;return B.cmp(this.m)>=0?D=B.isub(this.m):B.cmpn(0)<0&&(D=B.iadd(this.m)),D._forceRed(this)},J.prototype.invm=function(u){var m=this.imod(u._invmp(this.m).mul(this.r2));return m._forceRed(this)}})(n,commonjsGlobal)})(bn);var bnExports=bn.exports;const BN=getDefaultExportFromCjs(bnExports);function isBn(n){return BN.isBN(n)}const REGEX_HEX_PREFIXED=/^0x[\da-fA-F]+$/,REGEX_HEX_NOPREFIX=/^[\da-fA-F]+$/;function isHex(n,e=-1,t){return typeof n=="string"&&(n==="0x"||REGEX_HEX_PREFIXED.test(n))&&(e===-1?t||n.length%2===0:n.length===2+Math.ceil(e/4))}function isObject$2(n){return!!n&&typeof n=="object"}function isOn(...n){return e=>(isObject$2(e)||isFunction$2(e))&&n.every(t=>isFunction$2(e[t]))}function isOnFunction(...n){return e=>isFunction$2(e)&&n.every(t=>isFunction$2(e[t]))}function isOnObject(...n){return e=>isObject$2(e)&&n.every(t=>isFunction$2(e[t]))}const isToBigInt=isOn("toBigInt"),isToBn$1=isOn("toBn");function nToBigInt(n){return typeof n=="bigint"?n:n?isHex(n)?hexToBigInt(n.toString()):isBn(n)?BigInt$1(n.toString()):isToBigInt(n)?n.toBigInt():isToBn$1(n)?BigInt$1(n.toBn().toString()):BigInt$1(n):BigInt$1(0)}const hasBigInt=typeof BigInt$1=="function"&&typeof BigInt$1.asIntN=="function",hasBuffer=typeof xglobal.Buffer=="function"&&typeof xglobal.Buffer.isBuffer=="function";xglobal.process;function isBuffer(n){return hasBuffer&&!!n&&isFunction$2(n.readDoubleLE)&&xglobal.Buffer.isBuffer(n)}function isU8a(n){return(n&&n.constructor)===Uint8Array||n instanceof Uint8Array}const encoder=new TextEncoder$1;function stringToU8a(n){return n?encoder.encode(n.toString()):new Uint8Array}function u8aToU8a(n){return isU8a(n)?isBuffer(n)?new Uint8Array(n):n:isHex(n)?hexToU8a(n):Array.isArray(n)?new Uint8Array(n):stringToU8a(n)}function u8aCmp(n,e){const t=u8aToU8a(n),a=u8aToU8a(e);let o=0;for(;;){const i=o>=t.length,r=o>=a.length;if(i&&r)return 0;if(i)return-1;if(r)return 1;if(t[o]!==a[o])return t[o]>a[o]?1:-1;o++}}function u8aConcat(...n){const e=n.length,t=new Array(e);let a=0;for(let o=0;o<e;o++)t[o]=u8aToU8a(n[o]),a+=t[o].length;return u8aConcatStrict(t,a)}function u8aConcatStrict(n,e=0){const t=n.length;let a=0;if(!e)for(let i=0;i<t;i++)e+=n[i].length;const o=new Uint8Array(e);for(let i=0;i<t;i++)o.set(n[i],a),a+=n[i].length;return o}function u8aEmpty(n){const e=n.length|0;for(let t=0;t<e;t++)if(n[t]|0)return!1;return!0}function u8aEq(n,e){const t=u8aToU8a(n),a=u8aToU8a(e);if(t.length===a.length){const o=new DataView(t.buffer,t.byteOffset),i=new DataView(a.buffer,a.byteOffset),r=t.length%4|0,s=t.length-r|0;for(let c=0;c<s;c+=4)if(o.getUint32(c)!==i.getUint32(c))return!1;for(let c=s,d=t.length;c<d;c++)if(t[c]!==a[c])return!1;return!0}return!1}function u8aFixLength(n,e=-1,t=!1){const a=Math.ceil(e/8);if(e===-1||n.length===a)return n;if(n.length>a)return n.subarray(0,a);const o=new Uint8Array(a);return o.set(n,t?0:a-n.length),o}function u8aSorted(n){return n.sort(u8aCmp)}function u8aToBn(n,{isLe:e=!0,isNegative:t=!1}={}){e||(n=n.slice().reverse());const a=n.length;if(t&&a&&n[a-1]&128)switch(a){case 0:return new BN(0);case 1:return new BN((n[0]^255)*-1-1);case 2:return new BN((n[0]+(n[1]<<8)^65535)*-1-1);case 3:return new BN((n[0]+(n[1]<<8)+(n[2]<<16)^16777215)*-1-1);case 4:return new BN((n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)*-1-1);case 5:return new BN(((n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)+(n[4]^255)*4294967296)*-1-1);case 6:return new BN(((n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)+(n[4]+(n[5]<<8)^65535)*4294967296)*-1-1);default:return new BN(n,"le").fromTwos(a*8)}switch(a){case 0:return new BN(0);case 1:return new BN(n[0]);case 2:return new BN(n[0]+(n[1]<<8));case 3:return new BN(n[0]+(n[1]<<8)+(n[2]<<16));case 4:return new BN(n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216);case 5:return new BN(n[0]+(n[1]<<8)+(n[2]<<16)+(n[3]+(n[4]<<8))*16777216);case 6:return new BN(n[0]+(n[1]<<8)+(n[2]<<16)+(n[3]+(n[4]<<8)+(n[5]<<16))*16777216);default:return new BN(n,"le")}}function u8aToFloat(n,{bitLength:e=32,isLe:t=!0}={}){if(e!==32&&e!==64)throw new Error("Invalid bitLength provided, expected 32 or 64");if(n.length<e/8)throw new Error(`Invalid input buffer provided, expected at least ${e/8} bytes, found ${n.length}`);const a=new DataView(n.buffer,n.byteOffset);return e===32?a.getFloat32(0,t):a.getFloat64(0,t)}const U8=new Array(256),U16=new Array(256*256);for(let n=0;n<256;n++)U8[n]=n.toString(16).padStart(2,"0");for(let n=0;n<256;n++){const e=n<<8;for(let t=0;t<256;t++)U16[e|t]=U8[n]+U8[t]}function hex(n,e){const t=n.length%2|0,a=n.length-t|0;for(let o=0;o<a;o+=2)e+=U16[n[o]<<8|n[o+1]];return t&&(e+=U8[n[a]|0]),e}function u8aToHex(n,e=-1,t=!0){const a=t?"0x":"";if(n!=null&&n.length){if(e>0){const o=Math.ceil(e/8);if(n.length>o)return`${hex(n.subarray(0,o/2),a)}…${hex(n.subarray(n.length-o/2),"")}`}}else return a;return hex(n,a)}function u8aToNumber(n,{isLe:e=!0,isNegative:t=!1}={}){e||(n=n.slice().reverse());const a=n.length;if(t&&a&&n[a-1]&128)switch(a){case 0:return 0;case 1:return(n[0]^255)*-1-1;case 2:return(n[0]+(n[1]<<8)^65535)*-1-1;case 3:return(n[0]+(n[1]<<8)+(n[2]<<16)^16777215)*-1-1;case 4:return(n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)*-1-1;case 5:return((n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)+(n[4]^255)*4294967296)*-1-1;case 6:return((n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216^4294967295)+(n[4]+(n[5]<<8)^65535)*4294967296)*-1-1;default:throw new Error("Value more than 48-bits cannot be reliably converted")}switch(a){case 0:return 0;case 1:return n[0];case 2:return n[0]+(n[1]<<8);case 3:return n[0]+(n[1]<<8)+(n[2]<<16);case 4:return n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216;case 5:return n[0]+(n[1]<<8)+(n[2]<<16)+(n[3]+(n[4]<<8))*16777216;case 6:return n[0]+(n[1]<<8)+(n[2]<<16)+(n[3]+(n[4]<<8)+(n[5]<<16))*16777216;default:throw new Error("Value more than 48-bits cannot be reliably converted")}}const decoder=new TextDecoder$1("utf-8");function u8aToString(n){return n?decoder.decode(n):""}const U8A_WRAP_ETHEREUM=u8aToU8a(`Ethereum Signed Message:
`),U8A_WRAP_PREFIX=u8aToU8a("<Bytes>"),U8A_WRAP_POSTFIX=u8aToU8a("</Bytes>"),WRAP_LEN=U8A_WRAP_PREFIX.length+U8A_WRAP_POSTFIX.length;function u8aIsWrapped(n,e){return n.length>=WRAP_LEN&&u8aEq(n.subarray(0,U8A_WRAP_PREFIX.length),U8A_WRAP_PREFIX)&&u8aEq(n.slice(-U8A_WRAP_POSTFIX.length),U8A_WRAP_POSTFIX)||e&&n.length>=U8A_WRAP_ETHEREUM.length&&u8aEq(n.subarray(0,U8A_WRAP_ETHEREUM.length),U8A_WRAP_ETHEREUM)}function u8aUnwrapBytes(n){const e=u8aToU8a(n);return u8aIsWrapped(e,!1)?e.subarray(U8A_WRAP_PREFIX.length,e.length-U8A_WRAP_POSTFIX.length):e}function u8aWrapBytes(n){const e=u8aToU8a(n);return u8aIsWrapped(e,!0)?e:u8aConcatStrict([U8A_WRAP_PREFIX,e,U8A_WRAP_POSTFIX])}const DIV=BigInt$1(256),NEG_MASK=BigInt$1(255);function toU8a(n,e,t){const a=[],o=t&&n<_0n$6;for(o&&(n=(n+_1n$8)*-_1n$8);n!==_0n$6;){const i=n%DIV,r=Number(o?i^NEG_MASK:i);e?a.push(r):a.unshift(r),n=(n-i)/DIV}return Uint8Array.from(a)}function nToU8a(n,{bitLength:e=-1,isLe:t=!0,isNegative:a=!1}={}){const o=nToBigInt(n);if(o===_0n$6)return e===-1?new Uint8Array(1):new Uint8Array(Math.ceil((e||0)/8));const i=toU8a(o,t,a);if(e===-1)return i;const r=Math.ceil((e||0)/8),s=new Uint8Array(r);return a&&s.fill(255),s.set(i,t?0:r-i.length),s}function hexStripPrefix(n){if(!n||n==="0x")return"";if(REGEX_HEX_PREFIXED.test(n))return n.substring(2);if(REGEX_HEX_NOPREFIX.test(n))return n;throw new Error(`Expected hex value to convert, found '${n}'`)}function hexToBn(n,{isLe:e=!1,isNegative:t=!1}={}){if(!n||n==="0x")return new BN(0);const a=hexStripPrefix(n),o=new BN(a,16,e?"le":"be");return t?o.fromTwos(a.length*4):o}const bnMax=createCmp((n,e)=>n.gt(e)),bnMin=createCmp((n,e)=>n.lt(e)),BN_ZERO=new BN(0),BN_ONE=new BN(1),BN_TWO=new BN(2),BN_TEN=new BN(10),BN_HUNDRED=new BN(100),BN_THOUSAND=new BN(1e3),BN_MILLION=new BN(1e6),BN_BILLION=new BN(1e9),BN_QUINTILL=BN_BILLION.mul(BN_BILLION),BN_MAX_INTEGER=new BN(Number.MAX_SAFE_INTEGER),BN_SQRT_MAX_INTEGER=new BN(94906265);function isBigInt(n){return typeof n=="bigint"}function bnToBn(n){return n?BN.isBN(n)?n:isHex(n)?hexToBn(n.toString()):isBigInt(n)?new BN(n.toString()):isToBn$1(n)?n.toBn():isToBigInt(n)?new BN(n.toBigInt().toString()):new BN(n):new BN(0)}function bnSqrt(n){const e=bnToBn(n);if(e.isNeg())throw new Error("square root of negative numbers is not supported");if(e.lte(BN_MAX_INTEGER))return new BN(~~Math.sqrt(e.toNumber()));let t=BN_SQRT_MAX_INTEGER.clone();for(;;){const a=e.div(t).iadd(t).ishrn(1);if(t.eq(a)||t.eq(a.sub(BN_ONE)))return t;t=a}}const DEFAULT_OPTS={bitLength:-1,isLe:!0,isNegative:!1};function bnToU8a(n,{bitLength:e=-1,isLe:t=!0,isNegative:a=!1}=DEFAULT_OPTS){const o=bnToBn(n),i=Math.ceil(e===-1?o.bitLength()/8:(e||0)/8);if(!n)return e===-1?new Uint8Array(1):new Uint8Array(i);const r=new Uint8Array(i),s=a?o.toTwos(i*8):o;return r.set(s.toArray(t?"le":"be",i),0),r}function bnToHex(n,{bitLength:e=-1,isLe:t=!1,isNegative:a=!1}={}){return u8aToHex(bnToU8a(n,{bitLength:e,isLe:t,isNegative:a}))}const MAX_U8=BN_TWO.pow(new BN(6)).isub(BN_ONE),MAX_U16=BN_TWO.pow(new BN(14)).isub(BN_ONE),MAX_U32=BN_TWO.pow(new BN(30)).isub(BN_ONE),BL_16={bitLength:16},BL_32={bitLength:32};function compactToU8a(n){const e=bnToBn(n);if(e.lte(MAX_U8))return new Uint8Array([e.toNumber()<<2]);if(e.lte(MAX_U16))return bnToU8a(e.shln(2).iadd(BN_ONE),BL_16);if(e.lte(MAX_U32))return bnToU8a(e.shln(2).iadd(BN_TWO),BL_32);const t=bnToU8a(e);let a=t.length;for(;t[a-1]===0;)a--;if(a<4)throw new Error("Invalid length, previous checks match anything less than 2^30");return u8aConcatStrict([new Uint8Array([(a-4<<2)+3]),t.subarray(0,a)])}function compactAddLength(n){return u8aConcatStrict([compactToU8a(n.length),n])}function compactFromU8a(n){const e=u8aToU8a(n);switch(e[0]&3){case 0:return[1,new BN(e[0]>>>2)];case 1:return[2,new BN(e[0]+(e[1]<<8)>>>2)];case 2:return[4,new BN(e[0]+(e[1]<<8)+(e[2]<<16)+e[3]*16777216>>>2)];default:{const t=(e[0]>>>2)+5;switch(t){case 5:return[5,new BN(e[1]+(e[2]<<8)+(e[3]<<16)+e[4]*16777216)];case 6:return[6,new BN(e[1]+(e[2]<<8)+(e[3]<<16)+(e[4]+(e[5]<<8))*16777216)];case 7:return[7,new BN(e[1]+(e[2]<<8)+(e[3]<<16)+(e[4]+(e[5]<<8)+(e[6]<<16))*16777216)];default:return[t,u8aToBn(e.subarray(1,t))]}}}}function compactFromU8aLim(n){switch(n[0]&3){case 0:return[1,n[0]>>>2];case 1:return[2,n[0]+(n[1]<<8)>>>2];case 2:return[4,n[0]+(n[1]<<8)+(n[2]<<16)+n[3]*16777216>>>2];default:switch((n[0]>>>2)+5){case 5:return[5,n[1]+(n[2]<<8)+(n[3]<<16)+n[4]*16777216];case 6:return[6,n[1]+(n[2]<<8)+(n[3]<<16)+(n[4]+(n[5]<<8))*16777216];case 7:return[7,n[1]+(n[2]<<8)+(n[3]<<16)+(n[4]+(n[5]<<8)+(n[6]<<16))*16777216];default:throw new Error("Compact input is > Number.MAX_SAFE_INTEGER")}}}function compactStripLength(n){const[e,t]=compactFromU8a(n),a=e+t.toNumber();return[a,n.subarray(e,a)]}function floatToU8a(n=0,{bitLength:e=32,isLe:t=!0}={}){if(e!==32&&e!==64)throw new Error("Invalid bitLength provided, expected 32 or 64");const a=new Uint8Array(e/8),o=new DataView(a.buffer,a.byteOffset);return e===32?o.setFloat32(0,Number(n),t):o.setFloat64(0,Number(n),t),a}function isBoolean(n){return typeof n=="boolean"}const NUMBER_REGEX=new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)","g");function formatDecimal(n,e=","){const t=n[0].startsWith("-"),a=t?n.substring(1).match(NUMBER_REGEX):n.match(NUMBER_REGEX);return a?`${t?"-":""}${a.join(e)}`:n}function getSeparator(n){return{decimal:.1.toLocaleString(n).substring(1,2),thousand:1e3.toLocaleString(n).substring(1,2)}}const SI_MID=8,SI=[{power:-24,text:"yocto",value:"y"},{power:-21,text:"zepto",value:"z"},{power:-18,text:"atto",value:"a"},{power:-15,text:"femto",value:"f"},{power:-12,text:"pico",value:"p"},{power:-9,text:"nano",value:"n"},{power:-6,text:"micro",value:"µ"},{power:-3,text:"milli",value:"m"},{power:0,text:"Unit",value:"-"},{power:3,text:"Kilo",value:"k"},{power:6,text:"Mill",value:"M"},{power:9,text:"Bill",value:"B"},{power:12,text:"Tril",value:"T"},{power:15,text:"Peta",value:"P"},{power:18,text:"Exa",value:"E"},{power:21,text:"Zeta",value:"Z"},{power:24,text:"Yotta",value:"Y"}];function findSi(n){for(let e=0,t=SI.length;e<t;e++)if(SI[e].value===n)return SI[e];return SI[SI_MID]}function calcSi(n,e,t){if(t)return findSi(t);const a=SI_MID-1+Math.ceil((n.length-e)/3);return SI[a]||SI[a<0?0:SI.length-1]}const DEFAULT_DECIMALS=0,DEFAULT_UNIT=SI[SI_MID].text;let defaultDecimals=DEFAULT_DECIMALS,defaultUnit=DEFAULT_UNIT;function _formatBalance(n,{decimals:e=defaultDecimals,forceUnit:t,locale:a="en",withAll:o=!1,withSi:i=!0,withSiFull:r=!1,withUnit:s=!0,withZero:c=!0}={}){let d=bnToBn(n).toString();if(d.length===0||d==="0")return"0";let p="";d[0].startsWith("-")&&(p="-",d=d.substring(1));const h=calcSi(d,e,t),I=d.length-(e+h.power),_=I<=0?"0":d.substring(0,I);let k=d.padStart(I<0?e:1,"0").substring(I<0?0:I).padEnd(o?Math.max(e,4):4,"0").substring(0,o?Math.max(4,e+h.power):4);if(!c){let R=k.length-1;do k[R]==="0"&&R--;while(k[R]==="0");k=k.substring(0,R+1)}const P=isBoolean(s)?SI[SI_MID].text:s,v=i||r?h.value==="-"?s?` ${P}`:"":` ${r?`${h.text}${s?" ":""}`:h.value}${s?P:""}`:"",{decimal:E,thousand:M}=getSeparator(a);return`${p}${formatDecimal(_,M)}${k&&`${E}${k}`}${v}`}const formatBalance=_formatBalance;formatBalance.calcSi=(n,e=defaultDecimals)=>calcSi(n,e);formatBalance.findSi=findSi;formatBalance.getDefaults=()=>({decimals:defaultDecimals,unit:defaultUnit});formatBalance.getOptions=(n=defaultDecimals)=>SI.filter(({power:e})=>e<0?n+e>=0:!0);formatBalance.setDefaults=({decimals:n,unit:e})=>{defaultDecimals=(Array.isArray(n)?n[0]:n)??defaultDecimals,defaultUnit=(Array.isArray(e)?e[0]:e)??defaultUnit,SI[SI_MID].text=defaultUnit};function zeroPad(n){return n.toString().padStart(2,"0")}function formatDate(n){const e=n.getFullYear().toString(),t=zeroPad(n.getMonth()+1),a=zeroPad(n.getDate()),o=zeroPad(n.getHours()),i=zeroPad(n.getMinutes()),r=zeroPad(n.getSeconds());return`${e}-${t}-${a} ${o}:${i}:${r}`}function formatNumber(n,{locale:e="en"}={}){const{thousand:t}=getSeparator(e);return formatDecimal(bnToBn(n).toString(),t)}function isArray(n){return Array.isArray(n)}function isString(n){return typeof n=="string"||n instanceof String}function isAsciiStr(n){for(let e=0,t=n.length;e<t;e++){const a=n.charCodeAt(e);if(a<32||a>126)return!1}return!0}function isAsciiBytes(n){for(let e=0,t=n.length;e<t;e++){const a=n[e]|0;if(a<32||a>126)return!1}return!0}function isAscii(n){return isString(n)?isHex(n)?isAsciiBytes(u8aToU8a(n)):isAsciiStr(n):n?isAsciiBytes(n):!1}const isClass=isOnFunction("isPrototypeOf","hasOwnProperty");function isChildClass(n,e){return isClass(e)&&isClass(n)?n===e||n.isPrototypeOf(e):!1}const checkCodec=isOnObject("toHex","toHuman","toU8a"),checkRegistry=isOnObject("get");function isCodec(n){return checkCodec(n)&&checkRegistry(n.registry)}const isCompact=isOnObject("toBigInt","toBn","toNumber","unwrap");function replacer(n,e){return isBigInt(e)?e.toString():e}function stringify(n,e){return JSON.stringify(n,replacer,e)}function isNull(n){return n===null}function isNumber(n){return typeof n=="number"}const isPromise=isOnObject("catch","then"),REGEX_DEV=/(Development|Local Testnet)$/;function isTestChain(n){return n?!!REGEX_DEV.test(n.toString()):!1}function isUndefined(n){return n===void 0}function isUtf8(n){if(!n)return isString(n);const e=u8aToU8a(n),t=e.length;let a=0;for(;a<t;)if(e[a]<=127)a+=1;else if(e[a]>=194&&e[a]<=223){if(a+1<t){if(e[a+1]<128||e[a+1]>191)return!1}else return!1;a+=2}else if(e[a]===224){if(a+2<t){if(e[a+1]<160||e[a+1]>191||e[a+2]<128||e[a+2]>191)return!1}else return!1;a+=3}else if(e[a]>=225&&e[a]<=236){if(a+2<t){if(e[a+1]<128||e[a+1]>191||e[a+2]<128||e[a+2]>191)return!1}else return!1;a+=3}else if(e[a]===237){if(a+2<t){if(e[a+1]<128||e[a+1]>159||e[a+2]<128||e[a+2]>191)return!1}else return!1;a+=3}else if(e[a]>=238&&e[a]<=239){if(a+2<t){if(e[a+1]<128||e[a+1]>191||e[a+2]<128||e[a+2]>191)return!1}else return!1;a+=3}else if(e[a]===240){if(a+3<t){if(e[a+1]<144||e[a+1]>191||e[a+2]<128||e[a+2]>191||e[a+3]<128||e[a+3]>191)return!1}else return!1;a+=4}else if(e[a]>=241&&e[a]<=243){if(a+3<t){if(e[a+1]<128||e[a+1]>191||e[a+2]<128||e[a+2]>191||e[a+3]<128||e[a+3]>191)return!1}else return!1;a+=4}else if(e[a]===244){if(a+3<t){if(e[a+1]<128||e[a+1]>143||e[a+2]<128||e[a+2]>191||e[a+3]<128||e[a+3]>191)return!1}else return!1;a+=4}else return!1;return!0}function lazyMethod(n,e,t,a,o=0){const i=a?a(e,o):e.toString();let r;Object.defineProperty(n,i,{configurable:!0,enumerable:!0,get:function(){if(r===void 0){r=t(e,o,this);try{Object.defineProperty(this,i,{value:r})}catch{}}return r}})}function lazyMethods(n,e,t,a){for(let o=0,i=e.length;o<i;o++)lazyMethod(n,e[o],t,a,o);return n}function identity$1(n){return n}function noop(){}const logTo={debug:"log",error:"error",log:"log",warn:"warn"};function formatOther(n){if(n&&isObject$2(n)&&n.constructor===Object){const e={};for(const[t,a]of Object.entries(n))e[t]=loggerFormat(a);return e}return n}function loggerFormat(n){return Array.isArray(n)?n.map(loggerFormat):isBn(n)?n.toString():isU8a(n)||isBuffer(n)?u8aToHex(u8aToU8a(n)):formatOther(n)}function formatWithLength(n){return e=>{if(n<=0)return e;const t=`${e}`;return t.length<n?e:`${t.substring(0,n)} ...`}}function apply(n,e,t,a=-1){if(t.length===1&&isFunction$2(t[0])){const o=t[0]();return apply(n,e,Array.isArray(o)?o:[o],a)}console[logTo[n]](formatDate(new Date),e,...t.map(loggerFormat).map(formatWithLength(a)))}function isDebugOn(n,e){return!!n&&(n==="*"||e===n||n.endsWith("*")&&e.startsWith(n.slice(0,-1)))}function isDebugOff(n,e){return!!n&&n.startsWith("-")&&(e===n.slice(1)||n.endsWith("*")&&e.startsWith(n.slice(1,-1)))}function getDebugFlag(n,e){let t=!1;for(const a of n)isDebugOn(a,e)?t=!0:isDebugOff(a,e)&&(t=!1);return t}function parseEnv(n){var t,a,o,i;const e=parseInt(((a=(t=xglobal.process)==null?void 0:t.env)==null?void 0:a.DEBUG_MAX)||"-1",10);return[getDebugFlag((((i=(o=xglobal.process)==null?void 0:o.env)==null?void 0:i.DEBUG)||"").toLowerCase().split(","),n),isNaN(e)?-1:e]}function logger(n){const e=`${n.toUpperCase()}:`.padStart(16),[t,a]=parseEnv(n.toLowerCase());return{debug:t?(...o)=>apply("debug",e,o,a):noop,error:(...o)=>apply("error",e,o),log:(...o)=>apply("log",e,o),noop,warn:(...o)=>apply("warn",e,o)}}function defaultGetId(){return"none"}function memoize(n,{getInstanceId:e=defaultGetId}={}){const t={},a=(...o)=>{const i=stringify(o),r=e();return t[r]||(t[r]={}),t[r][i]===void 0&&(t[r][i]=n(...o)),t[r][i]};return a.unmemoize=(...o)=>{var s;const i=stringify(o),r=e();((s=t[r])==null?void 0:s[i])!==void 0&&delete t[r][i]},a}function nextTick(n,e){setTimeout(()=>{Promise.resolve().then(()=>{n()}).catch(t=>{console.error(t)})},0)}function objectClear(n){const e=Object.keys(n);for(let t=0,a=e.length;t<a;t++)delete n[e[t]];return n}function objectSpread(n,...e){for(let t=0,a=e.length;t<a;t++){const o=e[t];if(o)if(typeof o.entries=="function")for(const[i,r]of o.entries())n[i]=r;else Object.assign(n,o)}return n}function objectCopy(n){return objectSpread({},n)}function objectProperty(n,e,t,a,o=0){const i=e;i in n||Object.defineProperty(n,i,{enumerable:!0,get:function(){return t(e,o,this)}})}function objectProperties(n,e,t,a){for(let o=0,i=e.length;o<i;o++)objectProperty(n,e[o],t,a,o)}const CC_TO_UP=new Array(256),CC_TO_LO=new Array(256);for(let n=0,e=CC_TO_UP.length;n<e;n++)CC_TO_LO[n]=String.fromCharCode(n).toLowerCase(),CC_TO_UP[n]=String.fromCharCode(n).toUpperCase();function formatAllCaps(n){return n.slice(0,n.length-1).toLowerCase()+CC_TO_UP[n.charCodeAt(n.length-1)]}function converter$1(n){return e=>{const t=e.replace(/[-_., ]+/g," ").trim().split(" ");let a="";for(let o=0,i=t.length;o<i;o++){const r=t[o];a+=n(/^[\dA-Z]+$/.test(r)?r.toLowerCase():r.replace(/^[\dA-Z]{2,}[^a-z]/,formatAllCaps),o)}return a}}const stringCamelCase=converter$1((n,e)=>(e?CC_TO_UP[n.charCodeAt(0)]:CC_TO_LO[n.charCodeAt(0)])+n.slice(1)),stringPascalCase=converter$1(n=>CC_TO_UP[n.charCodeAt(0)]+n.slice(1));function converter(n){return e=>e?n[e.charCodeAt(0)]+e.slice(1):""}const stringUpperFirst=converter(CC_TO_UP);function stringToHex(n){return u8aToHex(stringToU8a(n))}const AllHashers={Blake2_128:null,Blake2_256:null,Blake2_128Concat:null,Twox128:null,Twox256:null,Twox64Concat:null,Identity:null},META_V1_TO_V2={metadata:{description:"Returns the metadata of a runtime",params:[],type:"OpaqueMetadata"}},runtime$y={Metadata:[{methods:{metadata_at_version:{description:"Returns the metadata at a given version.",params:[{name:"version",type:"u32"}],type:"Option<OpaqueMetadata>"},metadata_versions:{description:"Returns the supported metadata versions.",params:[],type:"Vec<u32>"},...META_V1_TO_V2},version:2},{methods:{...META_V1_TO_V2},version:1}]},v9={ErrorMetadataV9:{name:"Text",docs:"Vec<Text>"},EventMetadataV9:{name:"Text",args:"Vec<Type>",docs:"Vec<Text>"},FunctionArgumentMetadataV9:{name:"Text",type:"Type"},FunctionMetadataV9:{name:"Text",args:"Vec<FunctionArgumentMetadataV9>",docs:"Vec<Text>"},MetadataV9:{modules:"Vec<ModuleMetadataV9>"},ModuleConstantMetadataV9:{name:"Text",type:"Type",value:"Bytes",docs:"Vec<Text>"},ModuleMetadataV9:{name:"Text",storage:"Option<StorageMetadataV9>",calls:"Option<Vec<FunctionMetadataV9>>",events:"Option<Vec<EventMetadataV9>>",constants:"Vec<ModuleConstantMetadataV9>",errors:"Vec<ErrorMetadataV9>"},StorageEntryMetadataV9:{name:"Text",modifier:"StorageEntryModifierV9",type:"StorageEntryTypeV9",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryModifierV9:{_enum:["Optional","Default","Required"]},StorageEntryTypeV9:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV9",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV9",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV9"}}},StorageHasherV9:{_enum:{Blake2_128:null,Blake2_256:null,Twox128:null,Twox256:null,Twox64Concat:null}},StorageMetadataV9:{prefix:"Text",items:"Vec<StorageEntryMetadataV9>"}},v10={ErrorMetadataV10:"ErrorMetadataV9",EventMetadataV10:"EventMetadataV9",FunctionArgumentMetadataV10:"FunctionArgumentMetadataV9",FunctionMetadataV10:"FunctionMetadataV9",MetadataV10:{modules:"Vec<ModuleMetadataV10>"},ModuleConstantMetadataV10:"ModuleConstantMetadataV9",ModuleMetadataV10:{name:"Text",storage:"Option<StorageMetadataV10>",calls:"Option<Vec<FunctionMetadataV10>>",events:"Option<Vec<EventMetadataV10>>",constants:"Vec<ModuleConstantMetadataV10>",errors:"Vec<ErrorMetadataV10>"},StorageEntryModifierV10:"StorageEntryModifierV9",StorageEntryMetadataV10:{name:"Text",modifier:"StorageEntryModifierV10",type:"StorageEntryTypeV10",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryTypeV10:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV10",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV10",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV10"}}},StorageMetadataV10:{prefix:"Text",items:"Vec<StorageEntryMetadataV10>"},StorageHasherV10:{_enum:{Blake2_128:null,Blake2_256:null,Blake2_128Concat:null,Twox128:null,Twox256:null,Twox64Concat:null}}},v11={ErrorMetadataV11:"ErrorMetadataV10",EventMetadataV11:"EventMetadataV10",ExtrinsicMetadataV11:{version:"u8",signedExtensions:"Vec<Text>"},FunctionArgumentMetadataV11:"FunctionArgumentMetadataV10",FunctionMetadataV11:"FunctionMetadataV10",MetadataV11:{modules:"Vec<ModuleMetadataV11>",extrinsic:"ExtrinsicMetadataV11"},ModuleConstantMetadataV11:"ModuleConstantMetadataV10",ModuleMetadataV11:{name:"Text",storage:"Option<StorageMetadataV11>",calls:"Option<Vec<FunctionMetadataV11>>",events:"Option<Vec<EventMetadataV11>>",constants:"Vec<ModuleConstantMetadataV11>",errors:"Vec<ErrorMetadataV11>"},StorageEntryModifierV11:"StorageEntryModifierV10",StorageEntryMetadataV11:{name:"Text",modifier:"StorageEntryModifierV11",type:"StorageEntryTypeV11",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryTypeV11:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV11",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV11",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV11"}}},StorageMetadataV11:{prefix:"Text",items:"Vec<StorageEntryMetadataV11>"},StorageHasherV11:{_enum:AllHashers}},v12={ErrorMetadataV12:"ErrorMetadataV11",EventMetadataV12:"EventMetadataV11",ExtrinsicMetadataV12:"ExtrinsicMetadataV11",FunctionArgumentMetadataV12:"FunctionArgumentMetadataV11",FunctionMetadataV12:"FunctionMetadataV11",MetadataV12:{modules:"Vec<ModuleMetadataV12>",extrinsic:"ExtrinsicMetadataV12"},ModuleConstantMetadataV12:"ModuleConstantMetadataV11",ModuleMetadataV12:{name:"Text",storage:"Option<StorageMetadataV12>",calls:"Option<Vec<FunctionMetadataV12>>",events:"Option<Vec<EventMetadataV12>>",constants:"Vec<ModuleConstantMetadataV12>",errors:"Vec<ErrorMetadataV12>",index:"u8"},StorageEntryModifierV12:"StorageEntryModifierV11",StorageEntryMetadataV12:"StorageEntryMetadataV11",StorageEntryTypeV12:"StorageEntryTypeV11",StorageMetadataV12:"StorageMetadataV11",StorageHasherV12:"StorageHasherV11"},v13={ErrorMetadataV13:"ErrorMetadataV12",EventMetadataV13:"EventMetadataV12",ExtrinsicMetadataV13:"ExtrinsicMetadataV12",FunctionArgumentMetadataV13:"FunctionArgumentMetadataV12",FunctionMetadataV13:"FunctionMetadataV12",MetadataV13:{modules:"Vec<ModuleMetadataV13>",extrinsic:"ExtrinsicMetadataV13"},ModuleConstantMetadataV13:"ModuleConstantMetadataV12",ModuleMetadataV13:{name:"Text",storage:"Option<StorageMetadataV13>",calls:"Option<Vec<FunctionMetadataV13>>",events:"Option<Vec<EventMetadataV13>>",constants:"Vec<ModuleConstantMetadataV13>",errors:"Vec<ErrorMetadataV13>",index:"u8"},StorageEntryModifierV13:"StorageEntryModifierV12",StorageEntryMetadataV13:{name:"Text",modifier:"StorageEntryModifierV13",type:"StorageEntryTypeV13",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryTypeV13:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV13",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV13",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV13"},NMap:{keyVec:"Vec<Type>",hashers:"Vec<StorageHasherV13>",value:"Type"}}},StorageMetadataV13:{prefix:"Text",items:"Vec<StorageEntryMetadataV13>"},StorageHasherV13:"StorageHasherV12"},Si1Variant={name:"Text",fields:"Vec<Si1Field>",index:"u8",docs:"Vec<Text>"},v1$1={Si1Field:{name:"Option<Text>",type:"Si1LookupTypeId",typeName:"Option<Text>",docs:"Vec<Text>"},Si1LookupTypeId:"Compact<u32>",Si1Path:"Si0Path",Si1Type:{path:"Si1Path",params:"Vec<Si1TypeParameter>",def:"Si1TypeDef",docs:"Vec<Text>"},Si1TypeDef:{_enum:{Composite:"Si1TypeDefComposite",Variant:"Si1TypeDefVariant",Sequence:"Si1TypeDefSequence",Array:"Si1TypeDefArray",Tuple:"Si1TypeDefTuple",Primitive:"Si1TypeDefPrimitive",Compact:"Si1TypeDefCompact",BitSequence:"Si1TypeDefBitSequence",HistoricMetaCompat:"Type"}},Si1TypeDefArray:{len:"u32",type:"Si1LookupTypeId"},Si1TypeDefBitSequence:{bitStoreType:"Si1LookupTypeId",bitOrderType:"Si1LookupTypeId"},Si1TypeDefCompact:{type:"Si1LookupTypeId"},Si1TypeDefComposite:{fields:"Vec<Si1Field>"},Si1TypeDefPrimitive:"Si0TypeDefPrimitive",Si1TypeDefSequence:{type:"Si1LookupTypeId"},Si1TypeDefTuple:"Vec<Si1LookupTypeId>",Si1TypeParameter:{name:"Text",type:"Option<Si1LookupTypeId>"},Si1TypeDefVariant:{variants:"Vec<Si1Variant>"},Si1Variant},v14={PortableTypeV14:{id:"Si1LookupTypeId",type:"Si1Type"},ErrorMetadataV14:{...Si1Variant,args:"Vec<Type>"},EventMetadataV14:{...Si1Variant,args:"Vec<Type>"},FunctionArgumentMetadataV14:{name:"Text",type:"Type",typeName:"Option<Type>"},FunctionMetadataV14:{...Si1Variant,args:"Vec<FunctionArgumentMetadataV14>"},ExtrinsicMetadataV14:{type:"SiLookupTypeId",version:"u8",signedExtensions:"Vec<SignedExtensionMetadataV14>"},MetadataV14:{lookup:"PortableRegistry",pallets:"Vec<PalletMetadataV14>",extrinsic:"ExtrinsicMetadataV14",type:"SiLookupTypeId"},PalletCallMetadataV14:{type:"SiLookupTypeId"},PalletConstantMetadataV14:{name:"Text",type:"SiLookupTypeId",value:"Bytes",docs:"Vec<Text>"},PalletErrorMetadataV14:{type:"SiLookupTypeId"},PalletEventMetadataV14:{type:"SiLookupTypeId"},PalletMetadataV14:{name:"Text",storage:"Option<PalletStorageMetadataV14>",calls:"Option<PalletCallMetadataV14>",events:"Option<PalletEventMetadataV14>",constants:"Vec<PalletConstantMetadataV14>",errors:"Option<PalletErrorMetadataV14>",index:"u8"},PalletStorageMetadataV14:{prefix:"Text",items:"Vec<StorageEntryMetadataV14>"},SignedExtensionMetadataV14:{identifier:"Text",type:"SiLookupTypeId",additionalSigned:"SiLookupTypeId"},StorageEntryMetadataV14:{name:"Text",modifier:"StorageEntryModifierV14",type:"StorageEntryTypeV14",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryModifierV14:"StorageEntryModifierV13",StorageEntryTypeV14:{_enum:{Plain:"SiLookupTypeId",Map:{hashers:"Vec<StorageHasherV14>",key:"SiLookupTypeId",value:"SiLookupTypeId"}}},StorageHasherV14:"StorageHasherV13"},v15={CustomMetadata15:{map:"BTreeMap<Text, CustomValueMetadata15>"},CustomValueMetadata15:{type:"SiLookupTypeId",value:"Bytes"},ExtrinsicMetadataV15:{version:"u8",addressType:"SiLookupTypeId",callType:"SiLookupTypeId",signatureType:"SiLookupTypeId",extraType:"SiLookupTypeId",signedExtensions:"Vec<SignedExtensionMetadataV14>"},OuterEnums15:{callType:"SiLookupTypeId",eventType:"SiLookupTypeId",errorType:"SiLookupTypeId"},PalletMetadataV15:{name:"Text",storage:"Option<PalletStorageMetadataV14>",calls:"Option<PalletCallMetadataV14>",events:"Option<PalletEventMetadataV14>",constants:"Vec<PalletConstantMetadataV14>",errors:"Option<PalletErrorMetadataV14>",index:"u8",docs:"Vec<Text>"},RuntimeApiMetadataV15:{name:"Text",methods:"Vec<RuntimeApiMethodMetadataV15>",docs:"Vec<Text>"},RuntimeApiMethodMetadataV15:{name:"Text",inputs:"Vec<RuntimeApiMethodParamMetadataV15>",output:"SiLookupTypeId",docs:"Vec<Text>"},RuntimeApiMethodParamMetadataV15:{name:"Text",type:"SiLookupTypeId"},MetadataV15:{lookup:"PortableRegistry",pallets:"Vec<PalletMetadataV15>",extrinsic:"ExtrinsicMetadataV15",type:"SiLookupTypeId",apis:"Vec<RuntimeApiMetadataV15>",outerEnums:"OuterEnums15",custom:"CustomMetadata15"}},definitions$1h={rpc:{},runtime:runtime$y,types:{...v9,...v10,...v11,...v12,...v13,...v14,...v15,ErrorMetadataLatest:"ErrorMetadataV14",EventMetadataLatest:"EventMetadataV14",ExtrinsicMetadataLatest:"ExtrinsicMetadataV15",FunctionArgumentMetadataLatest:"FunctionArgumentMetadataV14",FunctionMetadataLatest:"FunctionMetadataV14",MetadataLatest:"MetadataV15",PalletCallMetadataLatest:"PalletCallMetadataV14",PalletConstantMetadataLatest:"PalletConstantMetadataV14",PalletErrorMetadataLatest:"PalletErrorMetadataV14",PalletEventMetadataLatest:"PalletEventMetadataV14",PalletMetadataLatest:"PalletMetadataV15",PalletStorageMetadataLatest:"PalletStorageMetadataV14",PortableType:"PortableTypeV14",RuntimeApiMetadataLatest:"RuntimeApiMetadataV15",SignedExtensionMetadataLatest:"SignedExtensionMetadataV14",StorageEntryMetadataLatest:"StorageEntryMetadataV14",StorageEntryModifierLatest:"StorageEntryModifierV14",StorageEntryTypeLatest:"StorageEntryTypeV14",StorageHasher:"StorageHasherV14",OpaqueMetadata:"Opaque<Bytes>",MetadataAll:{_enum:{V0:"DoNotConstruct<MetadataV0>",V1:"DoNotConstruct<MetadataV1>",V2:"DoNotConstruct<MetadataV2>",V3:"DoNotConstruct<MetadataV3>",V4:"DoNotConstruct<MetadataV4>",V5:"DoNotConstruct<MetadataV5>",V6:"DoNotConstruct<MetadataV6>",V7:"DoNotConstruct<MetadataV7>",V8:"DoNotConstruct<MetadataV8>",V9:"MetadataV9",V10:"MetadataV10",V11:"MetadataV11",V12:"MetadataV12",V13:"MetadataV13",V14:"MetadataV14",V15:"MetadataV15"}}}},CORE_V1_TO_V4={execute_block:{description:"Execute the given block.",params:[{name:"block",type:"Block"}],type:"Null"}},CORE_V1_TO_V2={version:{description:"Returns the version of the runtime.",params:[],type:"RuntimeVersionPre3"}},CORE_V2_TO_V4={initialize_block:{description:"Initialize a block with the given header.",params:[{name:"header",type:"Header"}],type:"Null"}},CORE_V4_VERSION={version:{description:"Returns the version of the runtime.",params:[],type:"RuntimeVersion"}},CORE_V4_TO_V5={...CORE_V1_TO_V4,initialize_block:{description:"Initialize a block with the given header.",params:[{name:"header",type:"Header"}],type:"ExtrinsicInclusionMode"}},runtime$x={Core:[{methods:{...CORE_V4_VERSION,...CORE_V4_TO_V5},version:5},{methods:{...CORE_V4_VERSION,...CORE_V1_TO_V4,...CORE_V2_TO_V4},version:4},{methods:{version:{description:"Returns the version of the runtime.",params:[],type:"RuntimeVersionPre4"},...CORE_V1_TO_V4,...CORE_V2_TO_V4},version:3},{methods:{...CORE_V1_TO_V2,...CORE_V1_TO_V4,...CORE_V2_TO_V4},version:2},{methods:{initialise_block:{description:"Initialize a block with the given header.",params:[{name:"header",type:"Header"}],type:"Null"},...CORE_V1_TO_V2,...CORE_V1_TO_V4},version:1}]},numberTypes={Fixed64:"Int<64, Fixed64>",FixedI64:"Int<64, FixedI64>",FixedU64:"UInt<64, FixedU64>",Fixed128:"Int<128, Fixed128>",FixedI128:"Int<128, FixedI128>",FixedU128:"UInt<128, FixedU128>",I32F32:"Int<64, I32F32>",U32F32:"UInt<64, U32F32>",PerU16:"UInt<16, PerU16>",Perbill:"UInt<32, Perbill>",Percent:"UInt<8, Percent>",Permill:"UInt<32, Permill>",Perquintill:"UInt<64, Perquintill>"},knownOrigins={Council:"CollectiveOrigin",System:"SystemOrigin",TechnicalCommittee:"CollectiveOrigin",Xcm:"XcmOrigin",XcmPallet:"XcmOrigin",Authority:"AuthorityOrigin",GeneralCouncil:"CollectiveOrigin"},definitions$1g={rpc:{},runtime:runtime$x,types:{...numberTypes,AccountId:"AccountId32",AccountId20:"GenericEthereumAccountId",AccountId32:"GenericAccountId32",AccountId33:"GenericAccountId33",AccountIdOf:"AccountId",AccountIndex:"GenericAccountIndex",Address:"MultiAddress",AssetId:"u32",Balance:"UInt<128, Balance>",BalanceOf:"Balance",Block:"GenericBlock",BlockNumber:"u32",BlockNumberFor:"BlockNumber",BlockNumberOf:"BlockNumber",Call:"GenericCall",CallHash:"Hash",CallHashOf:"CallHash",ChangesTrieConfiguration:{digestInterval:"u32",digestLevels:"u32"},ChangesTrieSignal:{_enum:{NewConfiguration:"Option<ChangesTrieConfiguration>"}},ConsensusEngineId:"GenericConsensusEngineId",CodecHash:"Hash",CrateVersion:{major:"u16",minor:"u8",patch:"u8"},Digest:{logs:"Vec<DigestItem>"},DigestItem:{_enum:{Other:"Bytes",AuthoritiesChange:"Vec<AuthorityId>",ChangesTrieRoot:"Hash",SealV0:"SealV0",Consensus:"Consensus",Seal:"Seal",PreRuntime:"PreRuntime",ChangesTrieSignal:"ChangesTrieSignal",RuntimeEnvironmentUpdated:"Null"}},ExtrinsicsWeight:{normal:"Weight",operational:"Weight"},H32:"[u8; 4; H32]",H64:"[u8; 8; H64]",H128:"[u8; 16; H128]",H160:"[u8; 20; H160]",H256:"[u8; 32; H256]",H512:"[u8; 64; H512]",H1024:"[u8; 128; H1024]",H2048:"[u8; 256; H2048]",Hash:"H256",Header:{parentHash:"Hash",number:"Compact<BlockNumber>",stateRoot:"Hash",extrinsicsRoot:"Hash",digest:"Digest"},HeaderPartial:{parentHash:"Hash",number:"BlockNumber"},IndicesLookupSource:"GenericLookupSource",Index:"u32",Justification:"(ConsensusEngineId, EncodedJustification)",EncodedJustification:"Bytes",Justifications:"Vec<Justification>",KeyValue:"(StorageKey, StorageData)",KeyTypeId:"u32",LockIdentifier:"[u8; 8]",LookupSource:"MultiAddress",LookupTarget:"AccountId",ModuleId:"LockIdentifier",MultiAddress:"GenericMultiAddress",MultiSigner:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Ecdsa:"[u8; 33]"}},Moment:"UInt<64, Moment>",OpaqueCall:"Bytes",Origin:"DoNotConstruct<Origin>",OriginCaller:{_enum:{System:"SystemOrigin"}},PalletId:"LockIdentifier",PalletsOrigin:"OriginCaller",PalletVersion:{major:"u16",minor:"u8",patch:"u8"},Pays:{_enum:["Yes","No"]},Phantom:"Null",PhantomData:"Null",Releases:{_enum:["V1","V2","V3","V4","V5","V6","V7","V8","V9","V10"]},RuntimeCall:"Call",RuntimeEvent:"Event",RuntimeDbWeight:{read:"Weight",write:"Weight"},SignedBlock:"SignedBlockWithJustifications",SignedBlockWithJustification:{block:"Block",justification:"Option<EncodedJustification>"},SignedBlockWithJustifications:{block:"Block",justifications:"Option<Justifications>"},Slot:"u64",SlotDuration:"u64",StorageData:"Bytes",StorageInfo:{palletName:"Bytes",storage_name:"Bytes",prefix:"Bytes",maxValues:"Option<u32>",maxSize:"Option<u32>"},StorageProof:{trieNodes:"Vec<Bytes>"},TransactionPriority:"u64",TransactionLongevity:"u64",TransactionTag:"Bytes",TransactionInfo:{_alias:{dataSize:"size"},chunkRoot:"H256",contentHash:"H256",dataSize:"u32",blockChunks:"u32"},TransactionStorageProof:{chunk:"Vec<u8>",proof:"Vec<Vec<u8>>"},ValidatorId:"AccountId",ValidatorIdOf:"ValidatorId",WeightV0:"u32",WeightV1:"u64",WeightV2:{refTime:"Compact<u64>",proofSize:"Compact<u64>"},Weight:"WeightV2",WeightMultiplier:"Fixed64",PreRuntime:"(ConsensusEngineId, Bytes)",SealV0:"(u64, Signature)",Seal:"(ConsensusEngineId, Bytes)",Consensus:"(ConsensusEngineId, Bytes)",ExtrinsicInclusionMode:{_enum:["AllExtrinsics","OnlyInherents"]}}},v0$1={Si0Field:{name:"Option<Text>",type:"Si0LookupTypeId",typeName:"Option<Text>",docs:"Vec<Text>"},Si0LookupTypeId:"u32",Si0Path:"Vec<Text>",Si0Type:{path:"Si0Path",params:"Vec<Si0LookupTypeId>",def:"Si0TypeDef"},Si0TypeDef:{_enum:{Composite:"Si0TypeDefComposite",Variant:"Si0TypeDefVariant",Sequence:"Si0TypeDefSequence",Array:"Si0TypeDefArray",Tuple:"Si0TypeDefTuple",Primitive:"Si0TypeDefPrimitive",Compact:"Si0TypeDefCompact",Phantom:"Si0TypeDefPhantom",BitSequence:"Si0TypeDefBitSequence"}},Si0TypeDefArray:{len:"u32",type:"Si0LookupTypeId"},Si0TypeDefBitSequence:{bitStoreType:"Si0LookupTypeId",bitOrderType:"Si0LookupTypeId"},Si0TypeDefCompact:{type:"Si0LookupTypeId"},Si0TypeDefComposite:{fields:"Vec<Si0Field>"},Si0TypeDefPhantom:"Null",Si0TypeDefVariant:{variants:"Vec<Si0Variant>"},Si0TypeDefPrimitive:{_enum:["Bool","Char","Str","U8","U16","U32","U64","U128","U256","I8","I16","I32","I64","I128","I256"]},Si0TypeDefSequence:{type:"Si0LookupTypeId"},Si0TypeDefTuple:"Vec<Si0LookupTypeId>",Si0TypeParameter:{name:"Text",type:"Option<Si0LookupTypeId>"},Si0Variant:{name:"Text",fields:"Vec<Si0Field>",index:"Option<u8>",discriminant:"Option<u64>",docs:"Vec<Text>"}},definitions$1f={rpc:{},types:{...v0$1,...v1$1,SiField:"Si1Field",SiLookupTypeId:"Si1LookupTypeId",SiPath:"Si1Path",SiType:"Si1Type",SiTypeDef:"Si1TypeDef",SiTypeDefArray:"Si1TypeDefArray",SiTypeDefBitSequence:"Si1TypeDefBitSequence",SiTypeDefCompact:"Si1TypeDefCompact",SiTypeDefComposite:"Si1TypeDefComposite",SiTypeDefPrimitive:"Si1TypeDefPrimitive",SiTypeDefSequence:"Si1TypeDefSequence",SiTypeDefTuple:"Si1TypeDefTuple",SiTypeParameter:"Si1TypeParameter",SiTypeDefVariant:"Si1TypeDefVariant",SiVariant:"Si1Variant"}},runtime$w={AssetConversionApi:[{methods:{get_reserves:{description:"Get pool reserves",params:[{name:"asset1",type:"StagingXcmV3MultiLocation"},{name:"asset2",type:"StagingXcmV3MultiLocation"}],type:"Option<(Balance,Balance)>"},quote_price_exact_tokens_for_tokens:{description:"Quote price: exact tokens for tokens",params:[{name:"asset1",type:"StagingXcmV3MultiLocation"},{name:"asset2",type:"StagingXcmV3MultiLocation"},{name:"amount",type:"u128"},{name:"include_fee",type:"bool"}],type:"Option<(Balance)>"},quote_price_tokens_for_exact_tokens:{description:"Quote price: tokens for exact tokens",params:[{name:"asset1",type:"StagingXcmV3MultiLocation"},{name:"asset2",type:"StagingXcmV3MultiLocation"},{name:"amount",type:"u128"},{name:"include_fee",type:"bool"}],type:"Option<(Balance)>"}},version:1}]},definitions$1e={rpc:{},runtime:runtime$w,types:{TAssetConversion:"Option<MultiLocation>"}},runtime$v={AssetsApi:[{methods:{account_balances:{description:"Return the current set of authorities.",params:[{name:"account",type:"AccountId"}],type:"Vec<(u32, TAssetBalance)>"}},version:1}]},definitions$1d={rpc:{},runtime:runtime$v,types:{AssetApprovalKey:{owner:"AccountId",delegate:"AccountId"},AssetApproval:{amount:"TAssetBalance",deposit:"TAssetDepositBalance"},AssetBalance:{balance:"TAssetBalance",isFrozen:"bool",isSufficient:"bool"},AssetDestroyWitness:{accounts:"Compact<u32>",sufficients:"Compact<u32>",approvals:"Compact<u32>"},AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"TAssetBalance",deposit:"TAssetDepositBalance",minBalance:"TAssetBalance",isSufficient:"bool",accounts:"u32",sufficients:"u32",approvals:"u32",isFrozen:"bool"},AssetMetadata:{deposit:"TAssetDepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},TAssetBalance:"u64",TAssetDepositBalance:"BalanceOf"}},runtime$u={AuraApi:[{methods:{authorities:{description:"Return the current set of authorities.",params:[],type:"Vec<AuthorityId>"},slot_duration:{description:"Returns the slot duration for Aura.",params:[],type:"SlotDuration"}},version:1}]},definitions$1c={rpc:{},runtime:runtime$u,types:{RawAuraPreDigest:{slotNumber:"u64"}}},definitions$1b={rpc:{},types:{UncleEntryItem:{_enum:{InclusionHeight:"BlockNumber",Uncle:"(Hash, Option<AccountId>)"}}}},rpc$g={epochAuthorship:{description:"Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",isUnsafe:!0,params:[],type:"HashMap<AuthorityId, EpochAuthorship>"}},V1_V2_SHARED={current_epoch:{description:"Returns information regarding the current epoch.",params:[],type:"Epoch"},current_epoch_start:{description:"Returns the slot that started the current epoch.",params:[],type:"Slot"},generate_key_ownership_proof:{description:"Generates a proof of key ownership for the given authority in the current epoch.",params:[{name:"slot",type:"Slot"},{name:"authorityId",type:"AuthorityId"}],type:"Option<OpaqueKeyOwnershipProof>"},next_epoch:{description:"Returns information regarding the next epoch (which was already previously announced).",params:[],type:"Epoch"},submit_report_equivocation_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report an equivocation.",params:[{name:"equivocationProof",type:"BabeEquivocationProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"}},runtime$t={BabeApi:[{methods:{configuration:{description:"Return the genesis configuration for BABE. The configuration is only read on genesis.",params:[],type:"BabeGenesisConfiguration"},...V1_V2_SHARED},version:2},{methods:{configuration:{description:"Return the configuration for BABE. Version 1.",params:[],type:"BabeGenesisConfigurationV1"},...V1_V2_SHARED},version:1}]},definitions$1a={rpc:rpc$g,runtime:runtime$t,types:{AllowedSlots:{_enum:["PrimarySlots","PrimaryAndSecondaryPlainSlots","PrimaryAndSecondaryVRFSlots"]},BabeAuthorityWeight:"u64",BabeEpochConfiguration:{c:"(u64, u64)",allowedSlots:"AllowedSlots"},BabeBlockWeight:"u32",BabeEquivocationProof:{offender:"AuthorityId",slotNumber:"SlotNumber",firstHeader:"Header",secondHeader:"Header"},BabeGenesisConfiguration:{slotDuration:"u64",epochLength:"u64",c:"(u64, u64)",genesisAuthorities:"Vec<(AuthorityId, BabeAuthorityWeight)>",randomness:"Randomness",allowedSlots:"AllowedSlots"},BabeGenesisConfigurationV1:{slotDuration:"u64",epochLength:"u64",c:"(u64, u64)",genesisAuthorities:"Vec<(AuthorityId, BabeAuthorityWeight)>",randomness:"Randomness",secondarySlots:"bool"},BabeWeight:"u64",MaybeRandomness:"Option<Randomness>",MaybeVrf:"Option<VrfData>",Epoch:{epochIndex:"u64",startSlot:"Slot",duration:"u64",authorities:"Vec<(AuthorityId, BabeAuthorityWeight)>",randomness:"Hash",config:"BabeEpochConfiguration"},EpochAuthorship:{primary:"Vec<u64>",secondary:"Vec<u64>",secondary_vrf:"Vec<u64>"},NextConfigDescriptor:{_enum:{V0:"Null",V1:"NextConfigDescriptorV1"}},NextConfigDescriptorV1:{c:"(u64, u64)",allowedSlots:"AllowedSlots"},OpaqueKeyOwnershipProof:"Bytes",Randomness:"Hash",RawBabePreDigest:{_enum:{Phantom:"Null",Primary:"RawBabePreDigestPrimary",SecondaryPlain:"RawBabePreDigestSecondaryPlain",SecondaryVRF:"RawBabePreDigestSecondaryVRF"}},RawBabePreDigestPrimary:{authorityIndex:"u32",slotNumber:"SlotNumber",vrfOutput:"VrfOutput",vrfProof:"VrfProof"},RawBabePreDigestSecondaryPlain:{authorityIndex:"u32",slotNumber:"SlotNumber"},RawBabePreDigestSecondaryVRF:{authorityIndex:"u32",slotNumber:"SlotNumber",vrfOutput:"VrfOutput",vrfProof:"VrfProof"},RawBabePreDigestTo159:{_enum:{Primary:"RawBabePreDigestPrimaryTo159",Secondary:"RawBabePreDigestSecondaryTo159"}},RawBabePreDigestPrimaryTo159:{authorityIndex:"u32",slotNumber:"SlotNumber",weight:"BabeBlockWeight",vrfOutput:"VrfOutput",vrfProof:"VrfProof"},RawBabePreDigestSecondaryTo159:{authorityIndex:"u32",slotNumber:"SlotNumber",weight:"BabeBlockWeight"},RawBabePreDigestCompat:{_enum:{Zero:"u32",One:"u32",Two:"u32",Three:"u32"}},SlotNumber:"u64",VrfData:"[u8; 32]",VrfOutput:"[u8; 32]",VrfProof:"[u8; 64]"}},definitions$19={rpc:{},types:{AccountData:{free:"Balance",reserved:"Balance",miscFrozen:"Balance",feeFrozen:"Balance"},BalanceLockTo212:{id:"LockIdentifier",amount:"Balance",until:"BlockNumber",reasons:"WithdrawReasons"},BalanceLock:{id:"LockIdentifier",amount:"Balance",reasons:"Reasons"},BalanceStatus:{_enum:["Free","Reserved"]},Reasons:{_enum:["Fee","Misc","All"]},ReserveData:{id:"ReserveIdentifier",amount:"Balance"},ReserveIdentifier:"[u8; 8]",VestingSchedule:{offset:"Balance",perBlock:"Balance",startingBlock:"BlockNumber"},WithdrawReasons:{_set:{TransactionPayment:1,Transfer:2,Reserve:4,Fee:8,Tip:16}}}},rpc$f={getFinalizedHead:{description:"Returns hash of the latest BEEFY finalized block as seen by this client.",params:[],type:"H256"},subscribeJustifications:{description:"Returns the block most recently finalized by BEEFY, alongside its justification.",params:[],pubsub:["justifications","subscribeJustifications","unsubscribeJustifications"],type:"BeefyVersionedFinalityProof"}},BEEFY_V3={beefy_genesis:{description:"Return the block number where BEEFY consensus is enabled/started",params:[],type:"Option<BlockNumber>"},generate_key_ownership_proof:{description:"Generates a proof of key ownership for the given authority in the given set.",params:[{name:"setId",type:"ValidatorSetId"},{name:"authorityId",type:"AuthorityId"}],type:"Option<OpaqueKeyOwnershipProof>"},validator_set:{description:"Return the current active BEEFY validator set",params:[],type:"Option<ValidatorSet>"}},BEEFY_V1_V3={...BEEFY_V3,submit_report_equivocation_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report an equivocation.",params:[{name:"equivocationProof",type:"BeefyEquivocationProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"}},BEEFY_V4={...BEEFY_V3,submit_report_double_voting_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report a double voting equivocation.",params:[{name:"equivocationProof",type:"SpConsensusBeefyDoubleVotingProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"}},BEEFY_MMR_V1={authority_set_proof:{description:"Return the currently active BEEFY authority set proof.",params:[],type:"BeefyAuthoritySet"},next_authority_set_proof:{description:"Return the next/queued BEEFY authority set proof.",params:[],type:"BeefyNextAuthoritySet"}},runtime$s={BeefyApi:[{methods:BEEFY_V4,version:4},{methods:BEEFY_V1_V3,version:3},{methods:BEEFY_V1_V3,version:2},{methods:BEEFY_V1_V3,version:1}],BeefyMmrApi:[{methods:BEEFY_MMR_V1,version:1}]},definitions$18={rpc:rpc$f,runtime:runtime$s,types:{BeefyAuthoritySet:{id:"u64",len:"u32",root:"H256"},BeefyCommitment:{payload:"BeefyPayload",blockNumber:"BlockNumber",validatorSetId:"ValidatorSetId"},BeefyId:"[u8; 33]",BeefyEquivocationProof:{first:"BeefyVoteMessage",second:"BeefyVoteMessage"},BeefyCompactSignedCommitment:{commitment:"BeefyCommitment",signaturesFrom:"Vec<u8>",validatorSetLen:"u32",signaturesCompact:"Vec<EcdsaSignature>"},BeefySignedCommitment:{commitment:"BeefyCommitment",signatures:"Vec<Option<EcdsaSignature>>"},BeefyVersionedFinalityProof:{_enum:{V0:"Null",V1:"BeefyCompactSignedCommitment"}},BeefyNextAuthoritySet:{id:"u64",len:"u32",root:"H256"},BeefyPayload:"Vec<(BeefyPayloadId, Bytes)>",BeefyPayloadId:"[u8;2]",BeefyVoteMessage:{commitment:"BeefyCommitment",id:"AuthorityId",signature:"Signature"},MmrRootHash:"H256",ValidatorSetId:"u64",ValidatorSet:{validators:"Vec<AuthorityId>",id:"ValidatorSetId"}}},runtime$r={Benchmark:[{methods:{benchmark_metadata:{description:"Get the benchmark metadata available for this runtime.",params:[{name:"extra",type:"bool"}],type:"(Vec<BenchmarkList>, Vec<StorageInfo>)"},dispatch_benchmark:{description:"Dispatch the given benchmark.",params:[{name:"config",type:"BenchmarkConfig"}],type:"Result<Vec<BenchmarkBatch>, Text>"}},version:1}]},definitions$17={rpc:{},runtime:runtime$r,types:{BenchmarkBatch:{pallet:"Text",instance:"Text",benchmark:"Text",results:"Vec<BenchmarkResult>"},BenchmarkConfig:{pallet:"Bytes",benchmark:"Bytes",selectedComponents:"Vec<(BenchmarkParameter, u32)>",verify:"bool",internalRepeats:"u32"},BenchmarkList:{pallet:"Bytes",instance:"Bytes",benchmarks:"Vec<BenchmarkMetadata>"},BenchmarkMetadata:{name:"Bytes",components:"Vec<(BenchmarkParameter, u32, u32)>"},BenchmarkParameter:{_enum:["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]},BenchmarkResult:{components:"Vec<(BenchmarkParameter, u32)>",extrinsicTime:"u128",storageRootTime:"u128",reads:"u32",repeatReads:"u32",writes:"u32",repeatWrites:"u32",proofSize:"u32",benchKeys:"Vec<(Vec<u8>, u32, u32, bool)>"}}},BB_V2_TO_V4={random_seed:{description:"Generate a random seed.",params:[],type:"Hash"}},BB_V2_TO_V5={apply_extrinsic:{description:"Apply the given extrinsic.",params:[{name:"extrinsic",type:"Extrinsic"}],type:"ApplyExtrinsicResultPre6"}},BB_V2_TO_V6={check_inherents:{description:"Check that the inherents are valid.",params:[{name:"block",type:"Block"},{name:"data",type:"InherentData"}],type:"CheckInherentsResult"},inherent_extrinsics:{description:"Generate inherent extrinsics.",params:[{name:"inherent",type:"InherentData"}],type:"Vec<Extrinsic>"}},BB_V3_TO_V6={finalize_block:{description:"Finish the current block.",params:[],type:"Header"}},runtime$q={BlockBuilder:[{methods:{apply_extrinsic:{description:"Apply the given extrinsic.",params:[{name:"extrinsic",type:"Extrinsic"}],type:"ApplyExtrinsicResult"},...BB_V2_TO_V6,...BB_V3_TO_V6},version:6},{methods:{...BB_V2_TO_V5,...BB_V2_TO_V6,...BB_V3_TO_V6},version:5},{methods:{...BB_V2_TO_V4,...BB_V2_TO_V5,...BB_V2_TO_V6,...BB_V3_TO_V6},version:4},{methods:{...BB_V2_TO_V4,...BB_V2_TO_V6,...BB_V3_TO_V6},version:3},{methods:{finalise_block:{description:"Finish the current block.",params:[],type:"Header"},...BB_V2_TO_V4,...BB_V2_TO_V6},version:2}]},definitions$16={rpc:{},runtime:runtime$q,types:{CheckInherentsResult:{okay:"bool",fatalError:"bool",errors:"InherentData"},InherentData:{data:"BTreeMap<InherentIdentifier, Bytes>"},InherentIdentifier:"[u8; 8]"}},definitions$15={rpc:{},types:{CollectiveOrigin:{_enum:{Members:"(MemberCount, MemberCount)",Member:"AccountId"}},MemberCount:"u32",ProposalIndex:"u32",VotesTo230:{index:"ProposalIndex",threshold:"MemberCount",ayes:"Vec<AccountId>",nays:"Vec<AccountId>"},Votes:{index:"ProposalIndex",threshold:"MemberCount",ayes:"Vec<AccountId>",nays:"Vec<AccountId>",end:"BlockNumber"}}},definitions$14={rpc:{},types:{AuthorityId:"AccountId",RawVRFOutput:"[u8; 32]"}},rpc$e={call:{deprecated:"Use the runtime interface `api.call.contractsApi.call` instead",description:"Executes a call to a contract",params:[{name:"callRequest",type:"ContractCallRequest"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ContractExecResult"},getStorage:{deprecated:"Use the runtime interface `api.call.contractsApi.getStorage` instead",description:"Returns the value under a specified storage key in a contract",params:[{name:"address",type:"AccountId"},{name:"key",type:"H256"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Option<Bytes>"},instantiate:{deprecated:"Use the runtime interface `api.call.contractsApi.instantiate` instead",description:"Instantiate a new contract",params:[{name:"request",type:"InstantiateRequestV1"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ContractInstantiateResult"},rentProjection:{deprecated:"Not available in newer versions of the contracts interfaces",description:"Returns the projected time a given contract will be able to sustain paying its rent",params:[{name:"address",type:"AccountId"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Option<BlockNumber>"},uploadCode:{deprecated:"Use the runtime interface `api.call.contractsApi.uploadCode` instead",description:"Upload new code without instantiating a contract from it",endpoint:"contracts_upload_code",params:[{name:"uploadRequest",type:"CodeUploadRequest"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"CodeUploadResult"}},SHARED_V1_V2={get_storage:{description:"Query a given storage key in a given contract.",params:[{name:"address",type:"AccountId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},upload_code:{description:"Upload new code without instantiating a contract from it.",params:[{name:"origin",type:"AccountId"},{name:"code",type:"Bytes"},{name:"storageDepositLimit",type:"Option<Balance>"}],type:"CodeUploadResult"}},runtime$p={ContractsApi:[{methods:{call:{description:"Perform a call from a specified account to a given contract.",params:[{name:"origin",type:"AccountId"},{name:"dest",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"Option<WeightV2>"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"inputData",type:"Vec<u8>"}],type:"ContractExecResult"},instantiate:{description:"Instantiate a new contract.",params:[{name:"origin",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"Option<WeightV2>"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"code",type:"CodeSource"},{name:"data",type:"Bytes"},{name:"salt",type:"Bytes"}],type:"ContractInstantiateResult"},...SHARED_V1_V2},version:2},{methods:{call:{description:"Perform a call from a specified account to a given contract.",params:[{name:"origin",type:"AccountId"},{name:"dest",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"u64"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"inputData",type:"Vec<u8>"}],type:"ContractExecResultU64"},instantiate:{description:"Instantiate a new contract.",params:[{name:"origin",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"u64"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"code",type:"CodeSource"},{name:"data",type:"Bytes"},{name:"salt",type:"Bytes"}],type:"ContractInstantiateResultU64"},...SHARED_V1_V2},version:1}]},definitions$13={rpc:rpc$e,runtime:runtime$p,types:{AliveContractInfo:{trieId:"TrieId",storageSize:"u32",pairCount:"u32",codeHash:"CodeHash",rentAllowance:"Balance",rentPaid:"Balance",deductBlock:"BlockNumber",lastWrite:"Option<BlockNumber>",_reserved:"Option<Null>"},CodeHash:"Hash",CodeSource:{_enum:{Upload:"Bytes",Existing:"Hash"}},CodeUploadRequest:{origin:"AccountId",code:"Bytes",storageDepositLimit:"Option<Balance>"},CodeUploadResult:"Result<CodeUploadResultValue, DispatchError>",CodeUploadResultValue:{codeHash:"CodeHash",deposit:"Balance"},ContractCallRequest:{origin:"AccountId",dest:"AccountId",value:"Balance",gasLimit:"u64",storageDepositLimit:"Option<Balance>",inputData:"Bytes"},ContractExecResultSuccessTo255:{status:"u8",data:"Raw"},ContractExecResultTo255:{_enum:{Success:"ContractExecResultSuccessTo255",Error:"Null"}},ContractExecResultSuccessTo260:{flags:"ContractReturnFlags",data:"Bytes",gasConsumed:"u64"},ContractExecResultTo260:{_enum:{Success:"ContractExecResultSuccessTo260",Error:"Null"}},ContractExecResultOk:{flags:"ContractReturnFlags",data:"Bytes"},ContractExecResultResult:"Result<ContractExecResultOk, DispatchError>",ContractExecResultTo267:{gasConsumed:"u64",debugMessage:"Text",result:"ContractExecResultResult"},ContractExecResult:{gasConsumed:"Weight",gasRequired:"Weight",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"ContractExecResultResult"},ContractExecResultU64:{gasConsumed:"u64",gasRequired:"u64",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"ContractExecResultResult"},ContractInfo:{_enum:{Alive:"AliveContractInfo",Tombstone:"TombstoneContractInfo"}},ContractCallFlags:{_set:{_bitLength:32,ForwardInput:1,CloneInput:2,TailCall:4,AllowReentry:8}},ContractReturnFlags:{_set:{_bitLength:32,Revert:1}},ContractStorageKey:"[u8; 32]",DeletedContract:{pairCount:"u32",trieId:"TrieId"},ExecReturnValue:{flags:"ContractReturnFlags",data:"Bytes"},Gas:"u64",HostFnWeightsTo264:{caller:"Weight",address:"Weight",gasLeft:"Weight",balance:"Weight",valueTransferred:"Weight",minimumBalance:"Weight",tombstoneDeposit:"Weight",rentAllowance:"Weight",blockNumber:"Weight",now:"Weight",weightToFee:"Weight",gas:"Weight",input:"Weight",inputPerByte:"Weight",return:"Weight",returnPerByte:"Weight",terminate:"Weight",restoreTo:"Weight",restoreToPerDelta:"Weight",random:"Weight",depositEvent:"Weight",depositEventPerTopic:"Weight",depositEventPerByte:"Weight",setRentAllowance:"Weight",setStorage:"Weight",setStoragePerByte:"Weight",clearStorage:"Weight",getStorage:"Weight",getStoragePerByte:"Weight",transfer:"Weight",call:"Weight",callTransferSurcharge:"Weight",callPerInputByte:"Weight",callPerOutputByte:"Weight",instantiate:"Weight",instantiatePerInputByte:"Weight",instantiatePerOutputByte:"Weight",hashSha2256:"Weight",hashSha2256PerByte:"Weight",hashKeccak256:"Weight",hashKeccak256PerByte:"Weight",hashBlake2256:"Weight",hashBlake2256PerByte:"Weight",hashBlake2128:"Weight",hashBlake2128PerByte:"Weight"},HostFnWeights:{caller:"Weight",address:"Weight",gasLeft:"Weight",balance:"Weight",valueTransferred:"Weight",minimumBalance:"Weight",tombstoneDeposit:"Weight",rentAllowance:"Weight",blockNumber:"Weight",now:"Weight",weightToFee:"Weight",gas:"Weight",input:"Weight",inputPerByte:"Weight",return:"Weight",returnPerByte:"Weight",terminate:"Weight",terminatePerCodeByte:"Weight",restoreTo:"Weight",restoreToPerCallerCodeByte:"Weight",restoreToPerTombstoneCodeByte:"Weight",restoreToPerDelta:"Weight",random:"Weight",depositEvent:"Weight",depositEventPerTopic:"Weight",depositEventPerByte:"Weight",setRentAllowance:"Weight",setStorage:"Weight",setStoragePerByte:"Weight",clearStorage:"Weight",getStorage:"Weight",getStoragePerByte:"Weight",transfer:"Weight",call:"Weight",callPerCodeByte:"Weight",callTransferSurcharge:"Weight",callPerInputByte:"Weight",callPerOutputByte:"Weight",instantiate:"Weight",instantiatePerCodeByte:"Weight",instantiatePerInputByte:"Weight",instantiatePerOutputByte:"Weight",instantiatePerSaltByte:"Weight",hashSha2256:"Weight",hashSha2256PerByte:"Weight",hashKeccak256:"Weight",hashKeccak256PerByte:"Weight",hashBlake2256:"Weight",hashBlake2256PerByte:"Weight",hashBlake2128:"Weight",hashBlake2128PerByte:"Weight",rentParams:"Weight"},InstantiateRequestV1:{origin:"AccountId",value:"Balance",gasLimit:"Gas",code:"Bytes",data:"Bytes",salt:"Bytes"},InstantiateRequestV2:{_fallback:"InstantiateRequestV1",origin:"AccountId",value:"Balance",gasLimit:"Gas",storageDepositLimit:"Option<Balance>",code:"Bytes",data:"Bytes",salt:"Bytes"},InstantiateRequest:{_fallback:"InstantiateRequestV2",origin:"AccountId",value:"Balance",gasLimit:"Gas",storageDepositLimit:"Option<Balance>",code:"CodeSource",data:"Bytes",salt:"Bytes"},ContractInstantiateResultTo267:"Result<InstantiateReturnValueTo267, Null>",ContractInstantiateResultTo299:"Result<InstantiateReturnValueOk, Null>",ContractInstantiateResult:{gasConsumed:"WeightV2",gasRequired:"WeightV2",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"InstantiateReturnValue"},ContractInstantiateResultU64:{_fallback:"ContractInstantiateResultTo299",gasConsumed:"u64",gasRequired:"u64",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"InstantiateReturnValue"},InstantiateReturnValueTo267:{result:"ExecReturnValue",accountId:"AccountId",rentProjection:"Option<RentProjection>"},InstantiateReturnValueOk:{result:"ExecReturnValue",accountId:"AccountId"},InstantiateReturnValue:"Result<InstantiateReturnValueOk, DispatchError>",InstructionWeights:{i64const:"u32",i64load:"u32",i64store:"u32",select:"u32",rIf:"u32",br:"u32",brIf:"u32",brIable:"u32",brIablePerEntry:"u32",call:"u32",callIndirect:"u32",callIndirectPerParam:"u32",localGet:"u32",localSet:"u32",local_tee:"u32",globalGet:"u32",globalSet:"u32",memoryCurrent:"u32",memoryGrow:"u32",i64clz:"u32",i64ctz:"u32",i64popcnt:"u32",i64eqz:"u32",i64extendsi32:"u32",i64extendui32:"u32",i32wrapi64:"u32",i64eq:"u32",i64ne:"u32",i64lts:"u32",i64ltu:"u32",i64gts:"u32",i64gtu:"u32",i64les:"u32",i64leu:"u32",i64ges:"u32",i64geu:"u32",i64add:"u32",i64sub:"u32",i64mul:"u32",i64divs:"u32",i64divu:"u32",i64rems:"u32",i64remu:"u32",i64and:"u32",i64or:"u32",i64xor:"u32",i64shl:"u32",i64shrs:"u32",i64shru:"u32",i64rotl:"u32",i64rotr:"u32"},LimitsTo264:{eventTopics:"u32",stackHeight:"u32",globals:"u32",parameters:"u32",memoryPages:"u32",tableSize:"u32",brTableSize:"u32",subjectLen:"u32",codeSize:"u32"},Limits:{eventTopics:"u32",stackHeight:"u32",globals:"u32",parameters:"u32",memoryPages:"u32",tableSize:"u32",brTableSize:"u32",subjectLen:"u32"},PrefabWasmModule:{scheduleVersion:"Compact<u32>",initial:"Compact<u32>",maximum:"Compact<u32>",refcount:"Compact<u64>",_reserved:"Option<Null>",code:"Bytes",originalCodeLen:"u32"},RentProjection:{_enum:{EvictionAt:"BlockNumber",NoEviction:"Null"}},ScheduleTo212:{version:"u32",putCodePerByteCost:"Gas",growMemCost:"Gas",regularOpCost:"Gas",returnDataPerByteCost:"Gas",eventDataPerByteCost:"Gas",eventPerTopicCost:"Gas",eventBaseCost:"Gas",sandboxDataReadCost:"Gas",sandboxDataWriteCost:"Gas",maxEventTopics:"u32",maxStackHeight:"u32",maxMemoryPages:"u32",enablePrintln:"bool",maxSubjectLen:"u32"},ScheduleTo258:{version:"u32",putCodePerByteCost:"Gas",growMemCost:"Gas",regularOpCost:"Gas",returnDataPerByteCost:"Gas",eventDataPerByteCost:"Gas",eventPerTopicCost:"Gas",eventBaseCost:"Gas",sandboxDataReadCost:"Gas",sandboxDataWriteCost:"Gas",transferCost:"Gas",maxEventTopics:"u32",maxStackHeight:"u32",maxMemoryPages:"u32",enablePrintln:"bool",maxSubjectLen:"u32"},ScheduleTo264:{version:"u32",enablePrintln:"bool",limits:"LimitsTo264",instructionWeights:"InstructionWeights",hostFnWeights:"HostFnWeightsTo264"},Schedule:{version:"u32",enablePrintln:"bool",limits:"Limits",instructionWeights:"InstructionWeights",hostFnWeights:"HostFnWeights"},SeedOf:"Hash",StorageDeposit:{_enum:{Refund:"Balance",Charge:"Balance"}},TombstoneContractInfo:"Hash",TrieId:"Bytes"}},AllConvictions=["None","Locked1x","Locked2x","Locked3x","Locked4x","Locked5x","Locked6x"],definitions$12={rpc:{},types:{AccountVote:{_enum:{Standard:"AccountVoteStandard",Split:"AccountVoteSplit"}},AccountVoteSplit:{aye:"Balance",nay:"Balance"},AccountVoteStandard:{vote:"Vote",balance:"Balance"},Conviction:{_enum:AllConvictions},Delegations:{votes:"Balance",capital:"Balance"},PreimageStatus:{_enum:{Missing:"BlockNumber",Available:"PreimageStatusAvailable"}},PreimageStatusAvailable:{data:"Bytes",provider:"AccountId",deposit:"Balance",since:"BlockNumber",expiry:"Option<BlockNumber>"},PriorLock:"(BlockNumber, Balance)",PropIndex:"u32",Proposal:"Call",ProxyState:{_enum:{Open:"AccountId",Active:"AccountId"}},ReferendumIndex:"u32",ReferendumInfoTo239:{end:"BlockNumber",proposalHash:"Hash",threshold:"VoteThreshold",delay:"BlockNumber"},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}},ReferendumInfoFinished:{approved:"bool",end:"BlockNumber"},ReferendumStatus:{end:"BlockNumber",proposalHash:"Hash",threshold:"VoteThreshold",delay:"BlockNumber",tally:"Tally"},Tally:{ayes:"Balance",nays:"Balance",turnout:"Balance"},Voting:{_enum:{Direct:"VotingDirect",Delegating:"VotingDelegating"}},VotingDirect:{votes:"Vec<VotingDirectVote>",delegations:"Delegations",prior:"PriorLock"},VotingDirectVote:"(ReferendumIndex, AccountVote)",VotingDelegating:{balance:"Balance",target:"AccountId",conviction:"Conviction",delegations:"Delegations",prior:"PriorLock"}}},rpc$d={getBlockStats:{description:"Reexecute the specified `block_hash` and gather statistics while doing so",isUnsafe:!0,params:[{isHistoric:!0,name:"at",type:"Hash"}],type:"Option<BlockStats>"}},definitions$11={rpc:rpc$d,types:{BlockStats:{witnessLen:"u64",witnessCompactLen:"u64",blockLen:"u64",blockNumExtrinsics:"u64"}}},runtime$o={AuthorityDiscoveryApi:[{methods:{authorities:{description:"Retrieve authority identifiers of the current and next authority set.",params:[],type:"Vec<AuthorityId>"}},version:1}]},definitions$10={rpc:{},runtime:runtime$o,types:{}},definitions$$={rpc:{},types:{ApprovalFlag:"u32",DefunctVoter:{who:"AccountId",voteCount:"Compact<u32>",candidateCount:"Compact<u32>"},Renouncing:{_enum:{Member:"Null",RunnerUp:"Null",Candidate:"Compact<u32>"}},SetIndex:"u32",Vote:"GenericVote",VoteIndex:"u32",VoterInfo:{lastActive:"VoteIndex",lastWin:"VoteIndex",pot:"Balance",stake:"Balance"},VoteThreshold:{_enum:["Super Majority Approve","Super Majority Against","Simple Majority"]}}},rpc$c={createBlock:{description:"Instructs the manual-seal authorship task to create a new block",params:[{name:"createEmpty",type:"bool"},{name:"finalize",type:"bool"},{isOptional:!0,name:"parentHash",type:"BlockHash"}],type:"CreatedBlock"},finalizeBlock:{description:"Instructs the manual-seal authorship task to finalize a block",params:[{name:"hash",type:"BlockHash"},{isOptional:!0,name:"justification",type:"Justification"}],type:"bool"}},definitions$_={rpc:rpc$c,types:{CreatedBlock:{_alias:{blockHash:"hash"},blockHash:"BlockHash",aux:"ImportedAux"},ImportedAux:{headerOnly:"bool",clearJustificationRequests:"bool",needsJustification:"bool",badJustification:"bool",needsFinalityProof:"bool",isNewBest:"bool"}}},definitions$Z={rpc:{},types:{EvmAccount:{nonce:"u256",balance:"u256"},EvmCallInfo:{exitReason:"ExitReason",value:"Bytes",usedGas:"U256",logs:"Vec<EvmLog>"},EvmCreateInfo:{exitReason:"ExitReason",value:"H160",usedGas:"U256",logs:"Vec<EvmLog>"},EvmCallInfoV2:{exitReason:"ExitReason",value:"Bytes",usedGas:"U256",weightInfo:"Option<EvmWeightInfo>",logs:"Vec<EvmLog>"},EvmCreateInfoV2:{exitReason:"ExitReason",value:"H160",usedGas:"U256",weightInfo:"Option<EvmWeightInfo>",logs:"Vec<EvmLog>"},EvmLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},EvmVicinity:{gasPrice:"u256",origin:"H160"},EvmWeightInfo:{refTimeLimit:"Option<u64>",proofSizeLimit:"Option<u64>",refTimeUsage:"Option<u64>",proofSizeUsage:"Option<u64>"},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text"}},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitRevert:{_enum:["Reverted"]},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]}}},definitions$Y={rpc:{},types:{Extrinsic:"GenericExtrinsic",ExtrinsicEra:"GenericExtrinsicEra",ExtrinsicPayload:"GenericExtrinsicPayload",ExtrinsicSignature:"MultiSignature",ExtrinsicV4:"GenericExtrinsicV4",ExtrinsicPayloadV4:"GenericExtrinsicPayloadV4",ExtrinsicSignatureV4:"GenericExtrinsicSignatureV4",ExtrinsicUnknown:"GenericExtrinsicUnknown",ExtrinsicPayloadUnknown:"GenericExtrinsicPayloadUnknown",Era:"ExtrinsicEra",ImmortalEra:"GenericImmortalEra",MortalEra:"GenericMortalEra",AnySignature:"H512",MultiSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature",Ecdsa:"EcdsaSignature"}},Signature:"H512",SignerPayload:"GenericSignerPayload",EcdsaSignature:"[u8; 65]",Ed25519Signature:"H512",Sr25519Signature:"H512"}},runtime$n={FungiblesApi:[{methods:{query_account_balances:{description:"Returns the list of all `MultiAsset` that an `AccountId` has",params:[{name:"account",type:"AccountId"}],type:"Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"}},version:1},{methods:{query_account_balances:{description:"Returns the list of all `MultiAsset` that an `AccountId` has",params:[{name:"account",type:"AccountId"}],type:"Result<XcmVersionedAssets, FungiblesAccessError>"}},version:2}]},definitions$X={rpc:{},runtime:runtime$n,types:{FungiblesAccessError:{_enum:["AssetIdConversionFailed","AmountToBalanceConversionFailed"]}}},definitions$W={rpc:{},types:{AssetOptions:{initalIssuance:"Compact<Balance>",permissions:"PermissionLatest"},Owner:{_enum:{None:"Null",Address:"AccountId"}},PermissionsV1:{update:"Owner",mint:"Owner",burn:"Owner"},PermissionVersions:{_enum:{V1:"PermissionsV1"}},PermissionLatest:"PermissionsV1"}},runtime$m={GenesisBuilder:[{methods:{build_config:{description:"Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the storage.",params:[{name:"json",type:"Vec<u8>"}],type:"Result<(), GenesisBuildErr>"},create_default_config:{description:"Creates the default `RuntimeGenesisConfig` and returns it as a JSON blob.",params:[],type:"Vec<u8>"}},version:1}]},definitions$V={rpc:{},runtime:runtime$m,types:{GenesisBuildErr:"Text"}},definitions$U={rpc:{},types:{ActiveGilt:{proportion:"Perquintill",amount:"Balance",who:"AccountId",expiry:"BlockNumber"},ActiveGiltsTotal:{frozen:"Balance",proportion:"Perquintill",index:"ActiveIndex",target:"Perquintill"},ActiveIndex:"u32",GiltBid:{amount:"Balance",who:"AccountId"}}},rpc$b={proveFinality:{description:"Prove finality for the given block number, returning the Justification for the last block in the set.",params:[{name:"blockNumber",type:"BlockNumber"}],type:"Option<EncodedFinalityProofs>"},roundState:{description:"Returns the state of the current best round state as well as the ongoing background rounds",params:[],type:"ReportedRoundStates"},subscribeJustifications:{description:"Subscribes to grandpa justifications",params:[],pubsub:["justifications","subscribeJustifications","unsubscribeJustifications"],type:"JustificationNotification"}},GRANDPA_V2_V3={generate_key_ownership_proof:{description:"Generates a proof of key ownership for the given authority in the given set.",params:[{name:"setId",type:"SetId"},{name:"authorityId",type:"AuthorityId"}],type:"Option<OpaqueKeyOwnershipProof>"},grandpa_authorities:{description:"Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",params:[],type:"AuthorityList"},submit_report_equivocation_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report an equivocation.",params:[{name:"equivocationProof",type:"GrandpaEquivocationProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"}},runtime$l={GrandpaApi:[{methods:{current_set_id:{description:"Get current GRANDPA authority set id.",params:[],type:"SetId"},...GRANDPA_V2_V3},version:3},{methods:GRANDPA_V2_V3,version:2}]},definitions$T={rpc:rpc$b,runtime:runtime$l,types:{AuthorityIndex:"u64",AuthorityList:"Vec<NextAuthority>",AuthoritySet:{currentAuthorities:"AuthorityList",setId:"u64",pendingStandardChanges:"ForkTreePendingChange",pendingForcedChanges:"Vec<PendingChange>",authoritySetChanges:"AuthoritySetChanges"},ForkTreePendingChange:{roots:"Vec<ForkTreePendingChangeNode>",bestFinalizedNumber:"Option<BlockNumber>"},ForkTreePendingChangeNode:{hash:"BlockHash",number:"BlockNumber",data:"PendingChange",children:"Vec<ForkTreePendingChangeNode>"},AuthoritySetChange:"(U64, BlockNumber)",AuthoritySetChanges:"Vec<AuthoritySetChange>",AuthorityWeight:"u64",DelayKind:{_enum:{Finalized:"Null",Best:"DelayKindBest"}},DelayKindBest:{medianLastFinalized:"BlockNumber"},EncodedFinalityProofs:"Bytes",GrandpaEquivocation:{_enum:{Prevote:"GrandpaEquivocationValue",Precommit:"GrandpaEquivocationValue"}},GrandpaEquivocationProof:{setId:"SetId",equivocation:"GrandpaEquivocation"},GrandpaEquivocationValue:{roundNumber:"u64",identity:"AuthorityId",first:"(GrandpaPrevote, AuthoritySignature)",second:"(GrandpaPrevote, AuthoritySignature)"},GrandpaPrevote:{targetHash:"Hash",targetNumber:"BlockNumber"},GrandpaCommit:{targetHash:"BlockHash",targetNumber:"BlockNumber",precommits:"Vec<GrandpaSignedPrecommit>"},GrandpaPrecommit:{targetHash:"BlockHash",targetNumber:"BlockNumber"},GrandpaSignedPrecommit:{precommit:"GrandpaPrecommit",signature:"AuthoritySignature",id:"AuthorityId"},GrandpaJustification:{round:"u64",commit:"GrandpaCommit",votesAncestries:"Vec<Header>"},JustificationNotification:"Bytes",KeyOwnerProof:"MembershipProof",NextAuthority:"(AuthorityId, AuthorityWeight)",PendingChange:{nextAuthorities:"AuthorityList",delay:"BlockNumber",canonHeight:"BlockNumber",canonHash:"BlockHash",delayKind:"DelayKind"},PendingPause:{scheduledAt:"BlockNumber",delay:"BlockNumber"},PendingResume:{scheduledAt:"BlockNumber",delay:"BlockNumber"},Precommits:{currentWeight:"u32",missing:"BTreeSet<AuthorityId>"},Prevotes:{currentWeight:"u32",missing:"BTreeSet<AuthorityId>"},ReportedRoundStates:{setId:"u32",best:"RoundState",background:"Vec<RoundState>"},RoundState:{round:"u32",totalWeight:"u32",thresholdWeight:"u32",prevotes:"Prevotes",precommits:"Precommits"},SetId:"u64",StoredPendingChange:{scheduledAt:"BlockNumber",delay:"BlockNumber",nextAuthorities:"AuthorityList"},StoredState:{_enum:{Live:"Null",PendingPause:"PendingPause",Paused:"Null",PendingResume:"PendingResume"}}}},definitions$S={rpc:{},types:{IdentityFields:{_set:{_bitLength:64,Display:1,Legal:2,Web:4,Riot:8,Email:16,PgpFingerprint:32,Image:64,Twitter:128}},IdentityInfoAdditional:"(Data, Data)",IdentityInfoTo198:{additional:"Vec<IdentityInfoAdditional>",display:"Data",legal:"Data",web:"Data",riot:"Data",email:"Data",pgpFingerprint:"Option<H160>",image:"Data"},IdentityInfo:{_fallback:"IdentityInfoTo198",additional:"Vec<IdentityInfoAdditional>",display:"Data",legal:"Data",web:"Data",riot:"Data",email:"Data",pgpFingerprint:"Option<H160>",image:"Data",twitter:"Data"},IdentityJudgement:{_enum:{Unknown:"Null",FeePaid:"Balance",Reasonable:"Null",KnownGood:"Null",OutOfDate:"Null",LowQuality:"Null",Erroneous:"Null"}},RegistrationJudgement:"(RegistrarIndex, IdentityJudgement)",RegistrationTo198:{judgements:"Vec<RegistrationJudgement>",deposit:"Balance",info:"IdentityInfoTo198"},Registration:{_fallback:"RegistrationTo198",judgements:"Vec<RegistrationJudgement>",deposit:"Balance",info:"IdentityInfo"},RegistrarIndex:"u32",RegistrarInfo:{account:"AccountId",fee:"Balance",fields:"IdentityFields"}}},definitions$R={rpc:{},types:{AuthIndex:"u32",AuthoritySignature:"Signature",Heartbeat:{blockNumber:"BlockNumber",networkState:"OpaqueNetworkState",sessionIndex:"SessionIndex",authorityIndex:"AuthIndex",validatorsLen:"u32"},HeartbeatTo244:{blockNumber:"BlockNumber",networkState:"OpaqueNetworkState",sessionIndex:"SessionIndex",authorityIndex:"AuthIndex"},OpaqueMultiaddr:"Opaque<Bytes>",OpaquePeerId:"Opaque<Bytes>",OpaqueNetworkState:{peerId:"OpaquePeerId",externalAddresses:"Vec<OpaqueMultiaddr>"}}},definitions$Q={rpc:{},types:{CallIndex:"(u8, u8)",LotteryConfig:{price:"Balance",start:"BlockNumber",length:"BlockNumber",delay:"BlockNumber",repeat:"bool"}}},runtime$k={MixnetApi:[{methods:{current_mixnodes:{description:"Get the index and phase of the current session.",params:[],type:"Result<Mixnode, MixnodesErr>"},maybe_register:{description:"Try to register a mixnode for the next session.",params:[{name:"session_index",type:"u32"},{name:"mixnode",type:"Mixnode"}],type:"bool"},prev_mixnodes:{description:"Get the index and phase of the current session.",params:[],type:"Result<Mixnode, MixnodesErr>"},session_status:{description:"Get the index and phase of the current session.",params:[],type:"SessionStatus"}},version:1}]},definitions$P={rpc:{},runtime:runtime$k,types:{Mixnode:{externalAddresses:"Vec<Bytes>",kxPublic:"[u8; 32]",peerId:"[u8; 32]"},MixnodesErr:{_enum:{InsufficientRegistrations:{min:"u32",num:"u32"}}},SessionPhase:{_enum:["CoverToCurrent","RequestsToCurrent","CoverToPrev","DisconnectFromPrev"]},SessionStatus:{currentIndex:"u32",phase:"SessionPhase"}}},rpc$a={generateProof:{description:"Generate MMR proof for the given block numbers.",params:[{name:"blockNumbers",type:"Vec<u64>"},{isOptional:!0,name:"bestKnownBlockNumber",type:"u64"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"MmrLeafBatchProof"},root:{description:"Get the MMR root hash for the current best block.",params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"MmrHash"},verifyProof:{description:"Verify an MMR proof",params:[{name:"proof",type:"MmrLeafBatchProof"}],type:"bool"},verifyProofStateless:{description:"Verify an MMR proof statelessly given an mmr_root",params:[{name:"root",type:"MmrHash"},{name:"proof",type:"MmrLeafBatchProof"}],type:"bool"}},MMR_V2={generate_proof:{description:"Generate MMR proof for the given block numbers.",params:[{name:"blockNumbers",type:"Vec<BlockNumber>"},{name:"bestKnownBlockNumber",type:"Option<BlockNumber>"}],type:"Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"},mmr_leaf_count:{description:"Return the number of MMR blocks in the chain.",params:[],type:"Result<U64, MmrError>"},mmr_root:{description:"Return the on-chain MMR root hash.",params:[],type:"Result<Hash, MmrError>"},verify_proof:{description:"Verify MMR proof against on-chain MMR.",params:[{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"},verify_proof_stateless:{description:"Verify MMR proof against given root hash.",params:[{name:"root",type:"Hash"},{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"}},MMR_V1={generate_batch_proof:{description:"Generate MMR proof for a series of leaves under given indices.",params:[{name:"leafIndices",type:"Vec<MmrLeafIndex>"}],type:"Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"},generate_proof:{description:"Generate MMR proof for a leaf under given index.",params:[{name:"leafIndex",type:"MmrLeafIndex"}],type:"Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"},mmr_root:{description:"Return the on-chain MMR root hash.",params:[],type:"Result<Hash, MmrError>"},verify_batch_proof:{description:"Verify MMR proof against on-chain MMR for a batch of leaves.",params:[{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"},verify_batch_proof_stateless:{description:"Verify MMR proof against given root hash or a batch of leaves.",params:[{name:"root",type:"Hash"},{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"},verify_proof:{description:"Verify MMR proof against on-chain MMR.",params:[{name:"leaf",type:"MmrEncodableOpaqueLeaf"},{name:"proof",type:"MmrProof"}],type:"Result<(), MmrError>"},verify_proof_stateless:{description:"Verify MMR proof against given root hash.",params:[{name:"root",type:"Hash"},{name:"leaf",type:"MmrEncodableOpaqueLeaf"},{name:"proof",type:"MmrProof"}],type:"Result<(), MmrError>"}},runtime$j={MmrApi:[{methods:MMR_V2,version:2},{methods:MMR_V1,version:1}]},definitions$O={rpc:rpc$a,runtime:runtime$j,types:{MmrBatchProof:{leafIndices:"Vec<MmrLeafIndex>",leafCount:"MmrNodeIndex",items:"Vec<Hash>"},MmrEncodableOpaqueLeaf:"Bytes",MmrError:{_enum:["InvalidNumericOp","Push","GetRoot","Commit","GenerateProof","Verify","LeafNotFound"," PalletNotIncluded","InvalidLeafIndex","InvalidBestKnownBlock"]},MmrHash:"Hash",MmrLeafBatchProof:{blockHash:"BlockHash",leaves:"Bytes",proof:"Bytes"},MmrLeafIndex:"u64",MmrLeafProof:{blockHash:"BlockHash",leaf:"Bytes",proof:"Bytes"},MmrNodeIndex:"u64",MmrProof:{leafIndex:"MmrLeafIndex",leafCount:"MmrNodeIndex",items:"Vec<Hash>"}}},runtime$i={NftsApi:[{methods:{attribute:{description:"An attribute",params:[{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},collection_attribute:{description:"A collection attribute",params:[{name:"collection",type:"NftCollectionId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},collection_owner:{description:"A collection owner",params:[{name:"collection",type:"NftCollectionId"}],type:"Option<AccountId>"},custom_attribute:{description:"A custom attribute",params:[{name:"account",type:"AccountId"},{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},owner:{description:"Collection owner",params:[{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"}],type:"Option<AccountId>"},system_attribute:{description:"System attribute",params:[{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"}},version:1}]},definitions$N={rpc:{},runtime:runtime$i,types:{NftCollectionId:"u32",NftItemId:"u32"}},runtime$h={NominationPoolsApi:[{methods:{balance_to_points:{description:"Returns the equivalent points of `new_funds` for a given pool.",params:[{name:"poolId",type:"NpPoolId"},{name:"newFunds",type:"Balance"}],type:"Balance"},pending_rewards:{description:"Returns the pending rewards for the given member.",params:[{name:"member",type:"AccountId"}],type:"Balance"},points_to_balance:{description:"Returns the equivalent balance of `points` for a given pool.",params:[{name:"poolId",type:"NpPoolId"},{name:"points",type:"Balance"}],type:"Balance"}},version:1}]},definitions$M={rpc:{},runtime:runtime$h,types:{NpApiError:{_enum:["MemberNotFound","OverflowInPendingRewards"]},NpPoolId:"u32"}},definitions$L={rpc:{},types:{DeferredOffenceOf:"(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",Kind:"[u8; 16]",OffenceDetails:{offender:"Offender",reporters:"Vec<Reporter>"},Offender:"IdentificationTuple",OpaqueTimeSlot:"Bytes",ReportIdOf:"Hash",Reporter:"AccountId"}},runtime$g={DifficultyApi:[{methods:{difficulty:{description:"Return the target difficulty of the next block.",params:[],type:"Raw"}},version:1}],TimestampApi:[{methods:{timestamp:{description:"API necessary for timestamp-based difficulty adjustment algorithms.",params:[],type:"Moment"}},version:1}]},definitions$K={rpc:{},runtime:runtime$g,types:{}},definitions$J={rpc:{},types:{ProxyDefinition:{delegate:"AccountId",proxyType:"ProxyType",delay:"BlockNumber"},ProxyType:{_enum:["Any","NonTransfer","Governance","Staking"]},ProxyAnnouncement:{real:"AccountId",callHash:"Hash",height:"BlockNumber"}}},definitions$I={rpc:{},types:{ActiveRecovery:{created:"BlockNumber",deposit:"Balance",friends:"Vec<AccountId>"},RecoveryConfig:{delayPeriod:"BlockNumber",deposit:"Balance",friends:"Vec<AccountId>",threshold:"u16"}}},definitions$H={rpc:{},types:{Period:"(BlockNumber, u32)",Priority:"u8",SchedulePeriod:"Period",SchedulePriority:"Priority",Scheduled:{maybeId:"Option<Bytes>",priority:"SchedulePriority",call:"Call",maybePeriodic:"Option<SchedulePeriod>",origin:"PalletsOrigin"},ScheduledTo254:{maybeId:"Option<Bytes>",priority:"SchedulePriority",call:"Call",maybePeriodic:"Option<SchedulePeriod>"},TaskAddress:"(BlockNumber, u32)"}},runtime$f={SessionKeys:[{methods:{decode_session_keys:{description:"Decode the given public session keys.",params:[{name:"encoded",type:"Bytes"}],type:"Option<Vec<(Bytes, KeyTypeId)>>"},generate_session_keys:{description:"Generate a set of session keys with optionally using the given seed.",params:[{name:"seed",type:"Option<Bytes>"}],type:"Bytes"}},version:1}]},keyTypes={BeefyKey:"[u8; 33]",Keys:"SessionKeys4",SessionKeys1:"(AccountId)",SessionKeys2:"(AccountId, AccountId)",SessionKeys3:"(AccountId, AccountId, AccountId)",SessionKeys4:"(AccountId, AccountId, AccountId, AccountId)",SessionKeys5:"(AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6B:"(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys7:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys7B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys8:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys8B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys9:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys9B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys10:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys10B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"},definitions$G={rpc:{},runtime:runtime$f,types:{...keyTypes,FullIdentification:"Exposure",IdentificationTuple:"(ValidatorId, FullIdentification)",MembershipProof:{session:"SessionIndex",trieNodes:"Vec<Bytes>",validatorCount:"ValidatorCount"},SessionIndex:"u32",ValidatorCount:"u32"}},definitions$F={rpc:{},types:{Bid:{who:"AccountId",kind:"BidKind",value:"Balance"},BidKind:{_enum:{Deposit:"Balance",Vouch:"(AccountId, Balance)"}},SocietyJudgement:{_enum:["Rebid","Reject","Approve"]},SocietyVote:{_enum:["Skeptic","Reject","Approve"]},StrikeCount:"u32",VouchingStatus:{_enum:["Vouching","Banned"]}}},runtime$e={StakingApi:[{methods:{nominations_quota:{description:"Returns the nominations quota for a nominator with a given balance.",params:[{name:"balance",type:"Balance"}],type:"u32"}},version:1}]},deprecated={Points:"u32",EraPoints:{total:"Points",individual:"Vec<Points>"}},phragmen={CompactAssignments:"CompactAssignmentsWith16",CompactAssignmentsWith16:{votes1:"Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",votes2:"Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",votes3:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",votes4:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",votes5:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",votes6:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",votes7:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",votes8:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",votes9:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",votes10:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",votes11:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",votes12:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",votes13:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",votes14:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",votes15:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",votes16:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"},CompactAssignmentsWith24:{votes1:"Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",votes2:"Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",votes3:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",votes4:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",votes5:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",votes6:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",votes7:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",votes8:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",votes9:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",votes10:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",votes11:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",votes12:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",votes13:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",votes14:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",votes15:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",votes16:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",votes17:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",votes18:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",votes19:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",votes20:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",votes21:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",votes22:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",votes23:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",votes24:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"},CompactAssignmentsTo265:"CompactAssignmentsWith16",CompactAssignmentsTo257:{votes1:"Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",votes2:"Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",votes3:"Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",votes4:"Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",votes5:"Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",votes6:"Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",votes7:"Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",votes8:"Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",votes9:"Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",votes10:"Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",votes11:"Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",votes12:"Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",votes13:"Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",votes14:"Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",votes15:"Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",votes16:"Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"},CompactScore:"(ValidatorIndex, OffchainAccuracy)",CompactScoreCompact:"(ValidatorIndexCompact, OffchainAccuracyCompact)",ElectionCompute:{_enum:["OnChain","Signed","Unsigned"]},ElectionPhase:{_enum:{Off:null,Signed:null,Unsigned:"(bool, BlockNumber)",Emergency:null}},ElectionResult:{compute:"ElectionCompute",slotStake:"Balance",electedStashes:"Vec<AccountId>",exposures:"Vec<(AccountId, Exposure)>"},ElectionScore:"[u128; 3]",ElectionSize:{validators:"Compact<ValidatorIndex>",nominators:"Compact<NominatorIndex>"},ElectionStatus:{_enum:{Close:"Null",Open:"BlockNumber"}},ExtendedBalance:"u128",RawSolution:"RawSolutionWith16",RawSolutionWith16:{compact:"CompactAssignmentsWith16",score:"ElectionScore",round:"u32"},RawSolutionWith24:{compact:"CompactAssignmentsWith24",score:"ElectionScore",round:"u32"},RawSolutionTo265:"RawSolutionWith16",ReadySolution:{supports:"SolutionSupports",score:"ElectionScore",compute:"ElectionCompute"},RoundSnapshot:{voters:"Vec<(AccountId, VoteWeight, Vec<AccountId>)>",targets:"Vec<AccountId>"},SeatHolder:{who:"AccountId",stake:"Balance",deposit:"Balance"},SignedSubmission:{_fallback:"SignedSubmissionTo276",who:"AccountId",deposit:"Balance",solution:"RawSolution",reward:"Balance"},SignedSubmissionTo276:{who:"AccountId",deposit:"Balance",solution:"RawSolution"},SignedSubmissionOf:"SignedSubmission",SolutionOrSnapshotSize:{voters:"Compact<u32>",targets:"Compact<u32>"},SolutionSupport:{total:"ExtendedBalance",voters:"Vec<(AccountId, ExtendedBalance)>"},SolutionSupports:"Vec<(AccountId, SolutionSupport)>",Supports:"SolutionSupports",SubmissionIndicesOf:"BTreeMap<ElectionScore, u32>",Voter:{votes:"Vec<AccountId>",stake:"Balance",deposit:"Balance"},VoteWeight:"u64"},definitions$E={rpc:{},runtime:runtime$e,types:{...deprecated,...phragmen,ActiveEraInfo:{index:"EraIndex",start:"Option<Moment>"},EraIndex:"u32",EraRewardPoints:{total:"RewardPoint",individual:"BTreeMap<AccountId, RewardPoint>"},EraRewards:{total:"u32",rewards:"Vec<u32>"},Exposure:{total:"Compact<Balance>",own:"Compact<Balance>",others:"Vec<IndividualExposure>"},Forcing:{_enum:["NotForcing","ForceNew","ForceNone","ForceAlways"]},IndividualExposure:{who:"AccountId",value:"Compact<Balance>"},KeyType:"AccountId",MomentOf:"Moment",Nominations:{targets:"Vec<AccountId>",submittedIn:"EraIndex",suppressed:"bool"},NominatorIndex:"u32",NominatorIndexCompact:"Compact<NominatorIndex>",OffchainAccuracy:"PerU16",OffchainAccuracyCompact:"Compact<OffchainAccuracy>",PhragmenScore:"[u128; 3]",Points:"u32",RewardDestination:{_enum:{Staked:"Null",Stash:"Null",Controller:"Null",Account:"AccountId",None:"Null"}},RewardPoint:"u32",SlashJournalEntry:{who:"AccountId",amount:"Balance",ownSlash:"Balance"},SlashingSpansTo204:{spanIndex:"SpanIndex",lastStart:"EraIndex",prior:"Vec<EraIndex>"},SlashingSpans:{spanIndex:"SpanIndex",lastStart:"EraIndex",lastNonzeroSlash:"EraIndex",prior:"Vec<EraIndex>"},SpanIndex:"u32",SpanRecord:{slashed:"Balance",paidOut:"Balance"},StakingLedgerTo223:{stash:"AccountId",total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},StakingLedgerTo240:{_fallback:"StakingLedgerTo223",stash:"AccountId",total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>",lastReward:"Option<EraIndex>"},StakingLedger:{stash:"AccountId",total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>",claimedRewards:"Vec<EraIndex>"},UnappliedSlashOther:"(AccountId, Balance)",UnappliedSlash:{validator:"AccountId",own:"Balance",others:"Vec<UnappliedSlashOther>",reporters:"Vec<AccountId>",payout:"Balance"},UnlockChunk:{value:"Compact<Balance>",era:"Compact<BlockNumber>"},ValidatorIndex:"u16",ValidatorIndexCompact:"Compact<ValidatorIndex>",ValidatorPrefs:"ValidatorPrefsWithBlocked",ValidatorPrefsWithCommission:{commission:"Compact<Perbill>"},ValidatorPrefsWithBlocked:{commission:"Compact<Perbill>",blocked:"bool"},ValidatorPrefsTo196:{validatorPayment:"Compact<Balance>"},ValidatorPrefsTo145:{unstakeThreshold:"Compact<u32>",validatorPayment:"Compact<Balance>"}}},runtime$d={ValidateStatement:[{methods:{valdate_statement:{description:"Validate the statement.",params:[{name:"source",type:"StatementStoreStatementSource"},{name:"statement",type:"SpStatementStoreStatement"}],type:"Result<StatementStoreValidStatement, StatementStoreInvalidStatement>"}},version:1}]},definitions$D={rpc:{},runtime:runtime$d,types:{StatementStoreStatementSource:{_enum:["Chain","Network","Local"]},StatementStoreValidStatement:{maxCount:"u32",maxSize:"u32"},StatementStoreInvalidStatement:{_enum:["BadProof","NoProof","InternalError"]}}},definitions$C={rpc:{},types:{WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"}}},rpc$9={genSyncSpec:{description:"Returns the json-serialized chainspec running the node, with a sync state.",endpoint:"sync_state_genSyncSpec",params:[{name:"raw",type:"bool"}],type:"Json"}},definitions$B={rpc:rpc$9,types:{}},rpc$8={accountNextIndex:{alias:["account_nextIndex"],description:"Retrieves the next accountIndex as available on the node",params:[{name:"accountId",type:"AccountId"}],type:"Index"},addLogFilter:{description:"Adds the supplied directives to the current log filter",isUnsafe:!0,params:[{name:"directives",type:"Text"}],type:"Null"},addReservedPeer:{description:"Adds a reserved peer",isUnsafe:!0,params:[{name:"peer",type:"Text"}],type:"Text"},chain:{description:"Retrieves the chain",params:[],type:"Text"},chainType:{description:"Retrieves the chain type",params:[],type:"ChainType"},dryRun:{alias:["system_dryRunAt"],description:"Dry run an extrinsic at a given block",isUnsafe:!0,params:[{name:"extrinsic",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ApplyExtrinsicResult"},health:{description:"Return health status of the node",noErrorLog:!0,params:[],type:"Health"},localListenAddresses:{description:"The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",params:[],type:"Vec<Text>"},localPeerId:{description:"Returns the base58-encoded PeerId of the node",params:[],type:"Text"},name:{description:"Retrieves the node name",params:[],type:"Text"},networkState:{alias:["system_unstable_networkState"],description:"Returns current state of the network",isUnsafe:!0,params:[],type:"NetworkState"},nodeRoles:{description:"Returns the roles the node is running as",params:[],type:"Vec<NodeRole>"},peers:{description:"Returns the currently connected peers",isUnsafe:!0,params:[],type:"Vec<PeerInfo>"},properties:{description:"Get a custom set of properties as a JSON object, defined in the chain spec",params:[],type:"ChainProperties"},removeReservedPeer:{description:"Remove a reserved peer",isUnsafe:!0,params:[{name:"peerId",type:"Text"}],type:"Text"},reservedPeers:{description:"Returns the list of reserved peers",params:[],type:"Vec<Text>"},resetLogFilter:{description:"Resets the log filter to Substrate defaults",isUnsafe:!0,params:[],type:"Null"},syncState:{description:"Returns the state of the syncing of the node",params:[],type:"SyncState"},version:{description:"Retrieves the version of the node",params:[],type:"Text"}},runtime$c={AccountNonceApi:[{methods:{account_nonce:{description:"The API to query account nonce (aka transaction index)",params:[{name:"accountId",type:"AccountId"}],type:"Index"}},version:1}]},definitions$A={rpc:rpc$8,runtime:runtime$c,types:{AccountInfo:"AccountInfoWithTripleRefCount",AccountInfoWithRefCountU8:{nonce:"Index",refcount:"u8",data:"AccountData"},AccountInfoWithRefCount:{_fallback:"AccountInfoWithRefCountU8",nonce:"Index",refcount:"RefCount",data:"AccountData"},AccountInfoWithDualRefCount:{_fallback:"AccountInfoWithRefCount",nonce:"Index",consumers:"RefCount",providers:"RefCount",data:"AccountData"},AccountInfoWithProviders:"AccountInfoWithDualRefCount",AccountInfoWithTripleRefCount:{_fallback:"AccountInfoWithDualRefCount",nonce:"Index",consumers:"RefCount",providers:"RefCount",sufficients:"RefCount",data:"AccountData"},ApplyExtrinsicResult:"Result<DispatchOutcome, TransactionValidityError>",ApplyExtrinsicResultPre6:"Result<DispatchOutcomePre6, TransactionValidityError>",ArithmeticError:{_enum:["Underflow","Overflow","DivisionByZero"]},BlockLength:{max:"PerDispatchClassU32"},BlockWeights:{baseBlock:"Weight",maxBlock:"Weight",perClass:"PerDispatchClassWeightsPerClass"},ChainProperties:"GenericChainProperties",ChainType:{_enum:{Development:"Null",Local:"Null",Live:"Null",Custom:"Text"}},ConsumedWeight:"PerDispatchClassWeight",DigestOf:"Digest",DispatchClass:{_enum:["Normal","Operational","Mandatory"]},DispatchError:{_enum:{Other:"Null",CannotLookup:"Null",BadOrigin:"Null",Module:"DispatchErrorModule",ConsumerRemaining:"Null",NoProviders:"Null",TooManyConsumers:"Null",Token:"TokenError",Arithmetic:"ArithmeticError",Transactional:"TransactionalError",Exhausted:"Null",Corruption:"Null",Unavailable:"Null"}},DispatchErrorPre6:{_enum:{Other:"Null",CannotLookup:"Null",BadOrigin:"Null",Module:"DispatchErrorModulePre6",ConsumerRemaining:"Null",NoProviders:"Null",TooManyConsumers:"Null",Token:"TokenError",Arithmetic:"ArithmeticError",Transactional:"TransactionalError"}},DispatchErrorPre6First:{_enum:{Other:"Null",CannotLookup:"Null",BadOrigin:"Null",Module:"DispatchErrorModulePre6",ConsumerRemaining:"Null",NoProviders:"Null",Token:"TokenError",Arithmetic:"ArithmeticError",Transactional:"TransactionalError"}},DispatchErrorModuleU8:{index:"u8",error:"u8"},DispatchErrorModuleU8a:{index:"u8",error:"[u8; 4]"},DispatchErrorModule:"DispatchErrorModuleU8a",DispatchErrorModulePre6:"DispatchErrorModuleU8",DispatchErrorTo198:{module:"Option<u8>",error:"u8"},DispatchInfo:{weight:"Weight",class:"DispatchClass",paysFee:"Pays"},DispatchInfoTo190:{weight:"Weight",class:"DispatchClass"},DispatchInfoTo244:{weight:"Weight",class:"DispatchClass",paysFee:"bool"},DispatchOutcome:"Result<(), DispatchError>",DispatchOutcomePre6:"Result<(), DispatchErrorPre6>",DispatchResult:"Result<(), DispatchError>",DispatchResultOf:"DispatchResult",DispatchResultTo198:"Result<(), Text>",Event:"GenericEvent",EventId:"[u8; 2]",EventIndex:"u32",EventRecord:{phase:"Phase",event:"Event",topics:"Vec<Hash>"},Health:{peers:"u64",isSyncing:"bool",shouldHavePeers:"bool"},InvalidTransaction:{_enum:{Call:"Null",Payment:"Null",Future:"Null",Stale:"Null",BadProof:"Null",AncientBirthBlock:"Null",ExhaustsResources:"Null",Custom:"u8",BadMandatory:"Null",MandatoryDispatch:"Null",BadSigner:"Null"}},Key:"Bytes",LastRuntimeUpgradeInfo:{specVersion:"Compact<u32>",specName:"Text"},NetworkState:{peerId:"Text",listenedAddresses:"Vec<Text>",externalAddresses:"Vec<Text>",connectedPeers:"HashMap<Text, Peer>",notConnectedPeers:"HashMap<Text, NotConnectedPeer>",averageDownloadPerSec:"u64",averageUploadPerSec:"u64",peerset:"NetworkStatePeerset"},NetworkStatePeerset:{messageQueue:"u64",nodes:"HashMap<Text, NetworkStatePeersetInfo>"},NetworkStatePeersetInfo:{connected:"bool",reputation:"i32"},NodeRole:{_enum:{Full:"Null",LightClient:"Null",Authority:"Null",UnknownRole:"u8"}},NotConnectedPeer:{knownAddresses:"Vec<Text>",latestPingTime:"Option<PeerPing>",versionString:"Option<Text>"},Peer:{enabled:"bool",endpoint:"PeerEndpoint",knownAddresses:"Vec<Text>",latestPingTime:"PeerPing",open:"bool",versionString:"Text"},PeerEndpoint:{listening:"PeerEndpointAddr"},PeerEndpointAddr:{_alias:{localAddr:"local_addr",sendBackAddr:"send_back_addr"},localAddr:"Text",sendBackAddr:"Text"},PeerPing:{nanos:"u64",secs:"u64"},PeerInfo:{peerId:"Text",roles:"Text",protocolVersion:"u32",bestHash:"Hash",bestNumber:"BlockNumber"},PerDispatchClassU32:{normal:"u32",operational:"u32",mandatory:"u32"},PerDispatchClassWeight:{normal:"Weight",operational:"Weight",mandatory:"Weight"},PerDispatchClassWeightsPerClass:{normal:"WeightPerClass",operational:"WeightPerClass",mandatory:"WeightPerClass"},Phase:{_enum:{ApplyExtrinsic:"u32",Finalization:"Null",Initialization:"Null"}},RawOrigin:{_enum:{Root:"Null",Signed:"AccountId",None:"Null"}},RefCount:"u32",RefCountTo259:"u8",SyncState:{startingBlock:"BlockNumber",currentBlock:"BlockNumber",highestBlock:"Option<BlockNumber>"},SystemOrigin:"RawOrigin",TokenError:{_enum:["NoFunds","WouldDie","BelowMinimum","CannotCreate","UnknownAsset","Frozen","Unsupported","Underflow","Overflow"]},TransactionValidityError:{_enum:{Invalid:"InvalidTransaction",Unknown:"UnknownTransaction"}},TransactionalError:{_enum:["LimitReached","NoLayer"]},UnknownTransaction:{_enum:{CannotLookup:"Null",NoUnsignedValidator:"Null",Custom:"u8"}},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"}}},definitions$z={rpc:{},types:{Bounty:{proposer:"AccountId",value:"Balance",fee:"Balance",curatorDeposit:"Balance",bond:"Balance",status:"BountyStatus"},BountyIndex:"u32",BountyStatus:{_enum:{Proposed:"Null",Approved:"Null",Funded:"Null",CuratorProposed:"BountyStatusCuratorProposed",Active:"BountyStatusActive",PendingPayout:"BountyStatusPendingPayout"}},BountyStatusActive:{curator:"AccountId",updateDue:"BlockNumber"},BountyStatusCuratorProposed:{curator:"AccountId"},BountyStatusPendingPayout:{curator:"AccountId",beneficiary:"AccountId",unlockAt:"BlockNumber"},OpenTip:{reason:"Hash",who:"AccountId",finder:"AccountId",deposit:"Balance",closes:"Option<BlockNumber>",tips:"Vec<OpenTipTip>",findersFee:"bool"},OpenTipTo225:{reason:"Hash",who:"AccountId",finder:"Option<OpenTipFinderTo225>",closes:"Option<BlockNumber>",tips:"Vec<OpenTipTip>"},OpenTipFinderTo225:"(AccountId, Balance)",OpenTipTip:"(AccountId, Balance)",TreasuryProposal:{proposer:"AccountId",value:"Balance",beneficiary:"AccountId",bond:"Balance"}}},definitions$y={rpc:{},types:{Multiplier:"Fixed128"}},runtime$b={TaggedTransactionQueue:[{methods:{validate_transaction:{description:"Validate the transaction.",params:[{name:"source",type:"TransactionSource"},{name:"tx",type:"Extrinsic"},{name:"blockHash",type:"BlockHash"}],type:"TransactionValidity"}},version:3},{methods:{validate_transaction:{description:"Validate the transaction.",params:[{name:"source",type:"TransactionSource"},{name:"tx",type:"Extrinsic"}],type:"TransactionValidity"}},version:2},{methods:{validate_transaction:{description:"Validate the transaction.",params:[{name:"tx",type:"Extrinsic"}],type:"TransactionValidity"}},version:1}]},definitions$x={rpc:{},runtime:runtime$b,types:{TransactionSource:{_enum:["InBlock","Local","External"]},TransactionValidity:"Result<ValidTransaction, TransactionValidityError>",ValidTransaction:{priority:"TransactionPriority",requires:"Vec<TransactionTag>",provides:"Vec<TransactionTag>",longevity:"TransactionLongevity",propagate:"bool"}}},definitions$w={rpc:{},types:{ClassId:"u32",InstanceId:"u32",DepositBalance:"Balance",DepositBalanceOf:"Balance",ClassDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",totalDeposit:"DepositBalance",freeHolding:"bool",instances:"u32",instanceMetadatas:"u32",attributes:"u32",isFrozen:"bool"},DestroyWitness:{instances:"Compact<u32>",instanceMetadatas:"Compact<u32>",attributes:"Compact<u32>"},InstanceDetails:{owner:"AccountId",approved:"Option<AccountId>",isFrozen:"bool",deposit:"DepositBalance"},ClassMetadata:{deposit:"DepositBalance",data:"Vec<u8>",isFrozen:"bool"},InstanceMetadata:{deposit:"DepositBalance",data:"Vec<u8>",isFrozen:"bool"}}},definitions$v={rpc:{},types:{Multisig:{when:"Timepoint",deposit:"Balance",depositor:"AccountId",approvals:"Vec<AccountId>"},Timepoint:{height:"BlockNumber",index:"u32"}}},definitions$u={rpc:{},types:{VestingInfo:{locked:"Balance",perBlock:"Balance",startingBlock:"BlockNumber"}}},definitions$t={rpc:{},types:{BlockAttestations:{receipt:"CandidateReceipt",valid:"Vec<AccountId>",invalid:"Vec<AccountId>"},IncludedBlocks:{actualNumber:"BlockNumber",session:"SessionIndex",randomSeed:"H256",activeParachains:"Vec<ParaId>",paraBlocks:"Vec<Hash>"},MoreAttestations:{}}},definitions$s={rpc:{},types:{BridgedBlockHash:"H256",BridgedBlockNumber:"BlockNumber",BridgedHeader:"Header",BridgeMessageId:"(LaneId, MessageNonce)",CallOrigin:{_enum:{SourceRoot:"Null",TargetAccount:"(AccountId, MultiSigner, MultiSignature)",SourceAccount:"AccountId"}},ChainId:"[u8; 4]",DeliveredMessages:{begin:"MessageNonce",end:"MessageNonce",dispatchResults:"BitVec"},DispatchFeePayment:{_enum:["AtSourceChain","AtTargetChain"]},InboundLaneData:{relayers:"Vec<UnrewardedRelayer>",lastConfirmedNonce:"MessageNonce"},InboundRelayer:"AccountId",InitializationData:{header:"Header",authorityList:"AuthorityList",setId:"SetId",isHalted:"bool"},LaneId:"[u8; 4]",MessageData:{payload:"Bytes",fee:"Balance"},MessagesDeliveryProofOf:{bridgedHeaderHash:"BlockHash",storageProof:"Vec<Bytes>",lane:"LaneId"},MessageKey:{laneId:"LaneId",nonce:"MessageNonce"},MessageNonce:"u64",MessagesProofOf:{bridgedHeaderHash:"BridgedBlockHash",storageProof:"Vec<Bytes>",lane:"LaneId",noncesStart:"MessageNonce",noncesEnd:"MessageNonce"},OperatingMode:{_enum:["Normal","RejectingOutboundMessages","Halted"]},OutboundLaneData:{oldestUnprunedNonce:"MessageNonce",latestReceivedNonce:"MessageNonce",latestGeneratedNonce:"MessageNonce"},OutboundMessageFee:"Balance",OutboundPayload:{specVersion:"u32",weight:"Weight",origin:"CallOrigin",dispatchFeePayment:"DispatchFeePayment",call:"Bytes"},Parameter:"Null",RelayerId:"AccountId",UnrewardedRelayer:{relayer:"RelayerId",messages:"DeliveredMessages"},UnrewardedRelayersState:{unrewardedRelayer_Entries:"MessageNonce",messagesInOldestEntry:"MessageNonce",totalMessages:"MessageNonce"}}},definitions$r={rpc:{},types:{StatementKind:{_enum:["Regular","Saft"]}}},definitions$q={rpc:{},types:{FundIndex:"u32",LastContribution:{_enum:{Never:"Null",PreEnding:"u32",Ending:"BlockNumber"}},FundInfo:{depositor:"AccountId",verifier:"Option<MultiSigner>",deposit:"Balance",raised:"Balance",end:"BlockNumber",cap:"Balance",lastContribution:"LastContribution",firstPeriod:"LeasePeriod",lastPeriod:"LeasePeriod",trieIndex:"TrieIndex"},TrieIndex:"u32"}},runtime$a={AuraUnincludedSegmentApi:[{methods:{can_build_upon:{description:"Whether it is legal to extend the chain",params:[{name:"includedHash",type:"BlockHash"},{name:"slot",type:"Slot"}],type:"bool"}},version:1}],CollectCollationInfo:[{methods:{collect_collation_info:{description:"Collect information about a collation.",params:[{name:"header",type:"Header"}],type:"CollationInfo"}},version:2},{methods:{collect_collation_info:{description:"Collect information about a collation.",params:[],type:"CollationInfoV1"}},version:1}]},dmpQueue={CollationInfo:{upwardMessages:"Vec<UpwardMessage>",horizontalMessages:"Vec<OutboundHrmpMessage>",newValidationCode:"Option<ValidationCode>",processedDownwardMessages:"u32",hrmpWatermark:"RelayBlockNumber",headData:"HeadData"},CollationInfoV1:{upwardMessages:"Vec<UpwardMessage>",horizontalMessages:"Vec<OutboundHrmpMessage>",newValidationCode:"Option<ValidationCode>",processedDownwardMessages:"u32",hrmpWatermark:"RelayBlockNumber"},ConfigData:{maxIndividual:"Weight"},MessageId:"[u8; 32]",OverweightIndex:"u64",PageCounter:"u32",PageIndexData:{beginUsed:"PageCounter",endUsed:"PageCounter",overweightCount:"OverweightIndex"}},definitions$p={rpc:{},runtime:runtime$a,types:dmpQueue},finalityV1={methods:{best_finalized:{description:"Returns number and hash of the best finalized header known to the bridge module.",params:[],type:"(BlockNumber, Hash)"}},version:1},runtime$9={KusamaFinalityApi:[finalityV1],PolkadotFinalityApi:[finalityV1],RococoFinalityApi:[finalityV1],WestendFinalityApi:[finalityV1]},definitions$o={rpc:{},runtime:runtime$9,types:{}},hrmpTypes={HrmpChannel:{maxCapacity:"u32",maxTotalSize:"u32",maxMessageSize:"u32",msgCount:"u32",totalSize:"u32",mqcHead:"Option<Hash>",senderDeposit:"Balance",recipientDeposit:"Balance"},HrmpChannelId:{sender:"u32",receiver:"u32"},HrmpOpenChannelRequest:{confirmed:"bool",age:"SessionIndex",senderDeposit:"Balance",maxMessageSize:"u32",maxCapacity:"u32",maxTotalSize:"u32"}},PH_V1_TO_V2={assumed_validation_data:{description:"Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",params:[{name:"paraId",type:"ParaId"},{name:"hash",type:"Hash"}],type:"Option<(PersistedValidationData, ValidationCodeHash)>"},availability_cores:{description:"Yields information on all availability cores as relevant to the child block.",params:[],type:"Vec<CoreState>"},candidate_events:{description:"Get a vector of events concerning candidates that occurred within a block.",params:[],type:"Vec<CandidateEvent>"},candidate_pending_availability:{description:"Get the receipt of a candidate pending availability.",params:[{name:"paraId",type:"ParaId"}],type:"Option<CommittedCandidateReceipt>"},check_validation_outputs:{description:"Checks if the given validation outputs pass the acceptance criteria.",params:[{name:"paraId",type:"ParaId"},{name:"outputs",type:"CandidateCommitments"}],type:"bool"},dmq_contents:{description:"Get all the pending inbound messages in the downward message queue for a para.",params:[{name:"paraId",type:"ParaId"}],type:"Vec<InboundDownwardMessage>"},inbound_hrmp_channels_contents:{description:"Get the contents of all channels addressed to the given recipient.",params:[{name:"paraId",type:"ParaId"}],type:"Vec<InboundHrmpMessage>"},on_chain_votes:{description:"Scrape dispute relevant from on-chain, backing votes and resolved disputes.",params:[],type:"Option<ScrapedOnChainVotes>"},persisted_validation_data:{description:"Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",params:[{name:"paraId",type:"ParaId"},{name:"assumption",type:"OccupiedCoreAssumption"}],type:"Option<PersistedValidationData>"},session_index_for_child:{description:"Returns the session index expected at a child of the block.",params:[],type:"SessionIndex"},validation_code:{description:"Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",params:[{name:"paraId",type:"ParaId"},{name:"assumption",type:"OccupiedCoreAssumption"}],type:"Option<ValidationCode>"},validation_code_by_hash:{description:"Get the validation code from its hash.",params:[{name:"hash",type:"ValidationCodeHash"}],type:"Option<ValidationCode>"},validator_groups:{description:"Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",params:[],type:"(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"},validators:{description:"Get the current validators.",params:[],type:"Vec<ValidatorId>"}},PH_V2_TO_V3={pvfs_require_precheck:{description:"Returns code hashes of PVFs that require pre-checking by validators in the active set.",params:[],type:"Vec<ValidationCodeHash>"},session_info:{description:"Get the session info for the given session, if stored.",params:[{name:"index",type:"SessionIndex"}],type:"Option<SessionInfo>"},submit_pvf_check_statement:{description:"Submits a PVF pre-checking statement into the transaction pool.",params:[{name:"stmt",type:"PvfCheckStatement"},{name:"signature",type:"ValidatorSignature"}],type:"Null"},validation_code_hash:{description:"Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",params:[{name:"paraId",type:"ParaId"},{name:"assumption",type:"OccupiedCoreAssumption"}],type:"Option<ValidationCodeHash>"}},PH_V3={disputes:{description:"Returns all onchain disputes.",params:[],type:"Vec<(SessionIndex, CandidateHash, DisputeState)>"}},PH_V4={session_executor_params:{description:"Returns execution parameters for the session.",params:[{name:"sessionIndex",type:"SessionIndex"}],type:"Option<ExecutorParams>"}},PH_V5={key_ownership_proof:{description:"Returns a merkle proof of a validator session key",params:[{name:"validatorId",type:"ValidatorId"}],type:"Option<OpaqueKeyOwnershipProof>"},submit_report_dispute_lost:{description:"Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session",params:[{name:"disputeProof",type:"DisputeProof"},{name:"keyOwnershipProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"},unapplied_slashes:{description:"Returns a list of validators that lost a past session dispute and need to be slashed",params:[],type:"Vec<(SessionIndex, CandidateHash, PendingSlashes)>"}},PH_V6={minimum_backing_votes:{description:"Get the minimum number of backing votes for a parachain candidate. This is a staging method! Do not use on production runtimes!",params:[],type:"u32"}},PH_V7={async_backing_params:{description:"Returns candidate's acceptance limitations for asynchronous backing for a relay parent",params:[],type:"AsyncBackingParams"},para_backing_state:{description:"Returns the state of parachain backing for a given para",params:[{name:"paraId",type:"ParaId"}],type:"Option<BackingState>"}},PH_V8={disabled_validators:{description:"Returns a list of all disabled validators at the given block",params:[],type:"ValidatorIndex"}},PH_V9={node_features:{description:"Get node features. This is a staging method! Do not use on production runtimes!",params:[],type:"NodeFeatures"}},PH_V10={approval_voting_params:{description:"Approval voting configuration parameters",params:[],type:"ApprovalVotingParams"}},PH_V11={claim_queue:{description:"Claim queue",params:[],type:"BTreeMap<CoreIndex, Vec<u32>>"}},runtime$8={ParachainHost:[{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5,...PH_V6,...PH_V7,...PH_V8,...PH_V9,...PH_V10,...PH_V11},version:11},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5,...PH_V6,...PH_V7,...PH_V8,...PH_V9,...PH_V10},version:10},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5,...PH_V6,...PH_V7,...PH_V8,...PH_V9},version:9},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5,...PH_V6,...PH_V7,...PH_V8},version:8},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5,...PH_V6,...PH_V7},version:7},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5,...PH_V6},version:6},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4,...PH_V5},version:5},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3,...PH_V4},version:4},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3,...PH_V3},version:3},{methods:{...PH_V1_TO_V2,...PH_V2_TO_V3},version:2},{methods:{session_info:{description:"Get the session info for the given session, if stored.",params:[{name:"index",type:"SessionIndex"}],type:"Option<OldV1SessionInfo>"},...PH_V1_TO_V2},version:1}]},SlotRange10={_enum:["ZeroZero","ZeroOne","ZeroTwo","ZeroThree","OneOne","OneTwo","OneThree","TwoTwo","TwoThree","ThreeThree"]},SlotRange={_enum:["ZeroZero","ZeroOne","ZeroTwo","ZeroThree","ZeroFour","ZeroFive","ZeroSix","ZeroSeven","OneOne","OneTwo","OneThree","OneFour","OneFive","OneSix","OneSeven","TwoTwo","TwoThree","TwoFour","TwoFive","TwoSix","TwoSeven","ThreeThree","ThreeFour","ThreeFive","ThreeSix","ThreeSeven","FourFour","FourFive","FourSix","FourSeven","FiveFive","FiveSix","FiveSeven","SixSix","SixSeven","SevenSeven"]},oldTypes={Bidder:{_enum:{New:"NewBidder",Existing:"ParaId"}},IncomingParachain:{_enum:{Unset:"NewBidder",Fixed:"IncomingParachainFixed",Deploy:"IncomingParachainDeploy"}},IncomingParachainDeploy:{code:"ValidationCode",initialHeadData:"HeadData"},IncomingParachainFixed:{codeHash:"Hash",codeSize:"u32",initialHeadData:"HeadData"},NewBidder:{who:"AccountId",sub:"SubId"},SubId:"u32"},slotTypes={...oldTypes,AuctionIndex:"u32",LeasePeriod:"BlockNumber",LeasePeriodOf:"BlockNumber",SlotRange10,SlotRange,WinningData10:`[WinningDataEntry; ${SlotRange10._enum.length}]`,WinningData:`[WinningDataEntry; ${SlotRange._enum.length}]`,WinningDataEntry:"Option<(AccountId, ParaId, BalanceOf)>",WinnersData10:"Vec<WinnersDataTuple10>",WinnersData:"Vec<WinnersDataTuple>",WinnersDataTuple10:"(AccountId, ParaId, BalanceOf, SlotRange10)",WinnersDataTuple:"(AccountId, ParaId, BalanceOf, SlotRange)"},proposeTypes={ParachainProposal:{proposer:"AccountId",genesisHead:"HeadData",validators:"Vec<ValidatorId>",name:"Bytes",balance:"Balance"},RegisteredParachainInfo:{validators:"Vec<ValidatorId>",proposer:"AccountId"}},cumulusTypes={ServiceQuality:{_enum:["Ordered","Fast"]}},disputeTypes={DisputeLocation:{_enum:["Local","Remote"]},DisputeResult:{_enum:["Valid","Invalid"]},DisputeState:{validatorsFor:"BitVec",validatorsAgainst:"BitVec",start:"BlockNumber",concludedAt:"Option<BlockNumber>"},DisputeStatement:{_enum:{Valid:"ValidDisputeStatementKind",Invalid:"InvalidDisputeStatementKind"}},DisputeStatementSet:{candidateHash:"CandidateHash",session:"SessionIndex",statements:"Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"},ExecutorParam:{_enum:{Phantom:"Null",MaxMemoryPages:"u32",StackLogicalMax:"u32",StackNativeMax:"u32",PrecheckingMaxMemory:"u64",PvfPrepTimeout:"(PvfPrepTimeoutKind, u64)",PvfExecTimeout:"(PvfExecTimeoutKind, u64)"}},ExecutorParamsHash:"Hash",ExecutorParams:"Vec<ExecutorParam>",ExplicitDisputeStatement:{valid:"bool",candidateHash:"CandidateHash",session:"SessionIndex"},InvalidDisputeStatementKind:{_enum:["Explicit"]},MultiDisputeStatementSet:"Vec<DisputeStatementSet>",PvfExecTimeoutKind:{_enum:["Backing","Approval"]},PvfPrepTimeoutKind:{_enum:["Precheck","Lenient"]},ValidDisputeStatementKind:{_enum:{Explicit:"Null",BackingSeconded:"Hash",BackingValid:"Hash",ApprovalChecking:"Null"}}},definitions$n={rpc:{},runtime:runtime$8,types:{...cumulusTypes,...disputeTypes,...hrmpTypes,...proposeTypes,...slotTypes,AbridgedCandidateReceipt:{parachainIndex:"ParaId",relayParent:"Hash",headData:"HeadData",collator:"CollatorId",signature:"CollatorSignature",povBlockHash:"Hash",commitments:"CandidateCommitments"},AbridgedHostConfiguration:{maxCodeSize:"u32",maxHeadDataSize:"u32",maxUpwardQueueCount:"u32",maxUpwardQueueSize:"u32",maxUpwardMessageSize:"u32",maxUpwardMessageNumPerCandidate:"u32",hrmpMaxMessageNumPerCandidate:"u32",validationUpgradeFrequency:"BlockNumber",validationUpgradeDelay:"BlockNumber"},AbridgedHrmpChannel:{maxCapacity:"u32",maxTotalSize:"u32",maxMessageSize:"u32",msgCount:"u32",totalSize:"u32",mqcHead:"Option<Hash>"},ApprovalVotingParams:{maxApprovalCoalesceCount:"u32"},AssignmentId:"AccountId",AssignmentKind:{_enum:{Parachain:"Null",Parathread:"(CollatorId, u32)"}},AsyncBackingParams:{maxCandidateDepth:"u32",allowedAncestryLen:"u32"},AttestedCandidate:{candidate:"AbridgedCandidateReceipt",validityVotes:"Vec<ValidityAttestation>",validatorIndices:"BitVec"},AuthorityDiscoveryId:"AccountId",AvailabilityBitfield:"BitVec",AvailabilityBitfieldRecord:{bitfield:"AvailabilityBitfield",submittedTt:"BlockNumber"},BackedCandidate:{candidate:"CommittedCandidateReceipt",validityVotes:"Vec<ValidityAttestation>",validatorIndices:"BitVec"},BackingState:{constraints:"Constraints",pendingAvailability:"Vec<CandidatePendingAvailability>"},BufferedSessionChange:{applyAt:"BlockNumber",validators:"Vec<ValidatorId>",queued:"Vec<ValidatorId>",sessionIndex:"SessionIndex"},CandidateCommitments:{upwardMessages:"Vec<UpwardMessage>",horizontalMessages:"Vec<OutboundHrmpMessage>",newValidationCode:"Option<ValidationCode>",headData:"HeadData",processedDownwardMessages:"u32",hrmpWatermark:"BlockNumber"},CandidateDescriptor:{paraId:"ParaId",relayParent:"RelayChainHash",collatorId:"CollatorId",persistedValidationDataHash:"Hash",povHash:"Hash",erasureRoot:"Hash",signature:"CollatorSignature",paraHead:"Hash",validationCodeHash:"ValidationCodeHash"},CandidateEvent:{_enum:{CandidateBacked:"(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",CandidateIncluded:"(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",CandidateTimedOut:"(CandidateReceipt, HeadData, CoreIndex)"}},CandidateHash:"Hash",CandidateInfo:{who:"AccountId",deposit:"Balance"},CandidatePendingAvailability:{core:"CoreIndex",hash:"CandidateHash",descriptor:"CandidateDescriptor",availabilityVotes:"BitVec",backers:"BitVec",relayParentNumber:"BlockNumber",backedInNumber:"BlockNumber",backingGroup:"GroupIndex"},CandidateReceipt:{descriptor:"CandidateDescriptor",commitmentsHash:"Hash"},GlobalValidationData:{maxCodeSize:"u32",maxHeadDataSize:"u32",blockNumber:"BlockNumber"},CollatorId:"H256",CollatorSignature:"Signature",CommittedCandidateReceipt:{descriptor:"CandidateDescriptor",commitments:"CandidateCommitments"},Constraints:{minRelayParentNumber:"BlockNumber",maxPovSize:"u32",maxCodeSize:"u32",umpRemaining:"u32",umpRemainingBytes:"u32",maxUmpNumPerCandidate:"u32",dmpRemainingMessages:"Vec<BlockNumber>",hrmpInbound:"InboundHrmpLimitations",hrmpChannelsOut:"HashMap<ParaId, OutboundHrmpChannelLimitations>",maxHrmpNumPerCandidate:"u32",requiredParent:"HeadData",validationCodeHash:"ValidationCodeHash",upgradeRestriction:"Option<UpgradeRestriction>",futureValidationCode:"Option<(BlockNumber, ValidationCodeHash)>"},CoreAssignment:{core:"CoreIndex",paraId:"ParaId",kind:"AssignmentKind",groupIdx:"GroupIndex"},CoreIndex:"u32",CoreOccupied:{_enum:{Parathread:"ParathreadEntry",Parachain:"Null"}},CoreState:{_enum:{Occupied:"OccupiedCore",Scheduled:"ScheduledCore",Free:"Null"}},DisputeProof:{timeSlot:"DisputesTimeSlot",kind:"SlashingOffenceKind",validatorIndex:"ValidatorIndex",validatorId:"ValidatorId"},DisputesTimeSlot:{sessionIndex:"SessionIndex",candidateHash:"CandidateHash"},DoubleVoteReport:{identity:"ValidatorId",first:"(Statement, ValidatorSignature)",second:"(Statement, ValidatorSignature)",proof:"MembershipProof",signingContext:"SigningContext"},DownwardMessage:"Bytes",GroupIndex:"u32",GroupRotationInfo:{sessionStartBlock:"BlockNumber",groupRotationFrequency:"BlockNumber",now:"BlockNumber"},GlobalValidationSchedule:{maxCodeSize:"u32",maxHeadDataSize:"u32",blockNumber:"BlockNumber"},HeadData:"Bytes",HostConfiguration:{maxCodeSize:"u32",maxHeadDataSize:"u32",maxUpwardQueueCount:"u32",maxUpwardQueueSize:"u32",maxUpwardMessageSize:"u32",maxUpwardMessageNumPerCandidate:"u32",hrmpMaxMessageNumPerCandidate:"u32",validationUpgradeFrequency:"BlockNumber",validationUpgradeDelay:"BlockNumber",maxPovSize:"u32",maxDownwardMessageSize:"u32",preferredDispatchableUpwardMessagesStepWeight:"Weight",hrmpMaxParachainOutboundChannels:"u32",hrmpMaxParathreadOutboundChannels:"u32",hrmpOpenRequestTtl:"u32",hrmpSenderDeposit:"Balance",hrmpRecipientDeposit:"Balance",hrmpChannelMaxCapacity:"u32",hrmpChannelMaxTotalSize:"u32",hrmpMaxParachainInboundChannels:"u32",hrmpMaxParathreadInboundChannels:"u32",hrmpChannelMaxMessageSize:"u32",codeRetentionPeriod:"BlockNumber",parathreadCores:"u32",parathreadRetries:"u32",groupRotationFrequency:"BlockNumber",chainAvailabilityPeriod:"BlockNumber",threadAvailabilityPeriod:"BlockNumber",schedulingLookahead:"u32",maxValidatorsPerCore:"Option<u32>",maxValidators:"Option<u32>",disputePeriod:"SessionIndex",disputePostConclusionAcceptancePeriod:"BlockNumber",disputeMaxSpamSlots:"u32",disputeConclusionByTimeOutPeriod:"BlockNumber",noShowSlots:"u32",nDelayTranches:"u32",zerothDelayTrancheWidth:"u32",neededApprovals:"u32",relayVrfModuloSamples:"u32"},InboundDownwardMessage:{pubSentAt:"BlockNumber",pubMsg:"DownwardMessage"},InboundHrmpMessage:{sentAt:"BlockNumber",data:"Bytes"},InboundHrmpLimitations:{validWatermarks:"Vec<BlockNumber>"},InboundHrmpMessages:"Vec<InboundHrmpMessage>",LocalValidationData:{parentHead:"HeadData",balance:"Balance",codeUpgradeAllowed:"Option<BlockNumber>"},MessageIngestionType:{downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, InboundHrmpMessages>"},MessageQueueChain:"RelayChainHash",NodeFeatures:"BitVec",OccupiedCore:{nextUpOnAvailable:"Option<ScheduledCore>",occupiedSince:"BlockNumber",timeOutAt:"BlockNumber",nextUpOnTimeOut:"Option<ScheduledCore>",availability:"BitVec",groupResponsible:"GroupIndex",candidateHash:"CandidateHash",candidateDescriptor:"CandidateDescriptor"},OccupiedCoreAssumption:{_enum:["Included,","TimedOut","Free"]},OutboundHrmpChannelLimitations:{bytesRemaining:"u32",messagesRemaining:"u32"},OutboundHrmpMessage:{recipient:"u32",data:"Bytes"},PendingSlashes:{_alias:{slashKeys:"keys"},slashKeys:"BTreeMap<ValidatorIndex, ValidatorId>",kind:"SlashingOffenceKind"},ParachainDispatchOrigin:{_enum:["Signed","Parachain","Root"]},ParachainInherentData:{validationData:"PersistedValidationData",relayChainState:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, VecInboundHrmpMessage>"},ParachainsInherentData:{bitfields:"SignedAvailabilityBitfields",backedCandidates:"Vec<BackedCandidate>",disputes:"MultiDisputeStatementSet",parentHeader:"Header"},ParaGenesisArgs:{genesisHead:"Bytes",validationCode:"Bytes",parachain:"bool"},ParaId:"u32",ParaInfo:{manager:"AccountId",deposit:"Balance",locked:"bool"},ParaLifecycle:{_enum:["Onboarding","Parathread","Parachain","UpgradingToParachain","DowngradingToParathread","OutgoingParathread","OutgoingParachain"]},ParaPastCodeMeta:{upgradeTimes:"Vec<ReplacementTimes>",lastPruned:"Option<BlockNumber>"},ParaScheduling:{_enum:["Always","Dynamic"]},ParathreadClaim:"(ParaId, CollatorId)",ParathreadClaimQueue:{queue:"Vec<QueuedParathread>",nextCoreOffset:"u32"},ParathreadEntry:{claim:"ParathreadClaim",retries:"u32"},ParaValidatorIndex:"u32",PersistedValidationData:{parentHead:"HeadData",relayParentNumber:"RelayChainBlockNumber",relayParentStorageRoot:"Hash",maxPovSize:"u32"},PvfCheckStatement:{accept:"bool",subject:"ValidationCodeHash",sessionIndex:"SessionIndex",validatorIndex:"ParaValidatorIndex"},QueuedParathread:{claim:"ParathreadEntry",coreOffset:"u32"},RelayBlockNumber:"u32",RelayChainBlockNumber:"RelayBlockNumber",RelayHash:"Hash",RelayChainHash:"RelayHash",Remark:"[u8; 32]",ReplacementTimes:{expectedAt:"BlockNumber",activatedAt:"BlockNumber"},Retriable:{_enum:{Never:"Null",WithRetries:"u32"}},ScheduledCore:{paraId:"ParaId",collator:"Option<CollatorId>"},Scheduling:{_enum:["Always","Dynamic"]},ScrapedOnChainVotes:{session:"SessionIndex",backingValidatorsPerCandidate:"Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",disputes:"MultiDisputeStatementSet"},SessionInfo:{activeValidatorIndices:"Vec<ParaValidatorIndex>",randomSeed:"[u8; 32]",disputePeriod:"SessionIndex",validators:"Vec<ValidatorId>",discoveryKeys:"Vec<AuthorityDiscoveryId>",assignmentKeys:"Vec<AssignmentId>",validatorGroups:"Vec<Vec<ValidatorIndex>>",nCores:"u32",zerothDelayTrancheWidth:"u32",relayVrfModuloSamples:"u32",nDelayTranches:"u32",noShowSlots:"u32",neededApprovals:"u32"},OldV1SessionInfo:{validators:"Vec<ValidatorId>",discoveryKeys:"Vec<AuthorityDiscoveryId>",assignmentKeys:"Vec<AssignmentId>",validatorGroups:"Vec<Vec<ParaValidatorIndex>>",nCores:"u32",zerothDelayTrancheWidth:"u32",relayVrfModuloSamples:"u32",nDelayTranches:"u32",noShowSlots:"u32",neededApprovals:"u32"},SessionInfoValidatorGroup:"Vec<ParaValidatorIndex>",SignedAvailabilityBitfield:{payload:"BitVec",validatorIndex:"ParaValidatorIndex",signature:"ValidatorSignature"},SignedAvailabilityBitfields:"Vec<SignedAvailabilityBitfield>",SigningContext:{sessionIndex:"SessionIndex",parentHash:"Hash"},SlashingOffenceKind:{_enum:["ForInvalid","AgainstValid"]},Statement:{_enum:{Never:"Null",Candidate:"Hash",Valid:"Hash",Invalid:"Hash"}},TransientValidationData:{maxCodeSize:"u32",maxHeadDataSize:"u32",balance:"Balance",codeUpgradeAllowed:"Option<BlockNumber>",dmqLength:"u32"},UpgradeGoAhead:{_enum:["Abort","GoAhead"]},UpgradeRestriction:{_enum:["Present"]},UpwardMessage:"Bytes",ValidationFunctionParams:{maxCodeSize:"u32",relayChainHeight:"RelayChainBlockNumber",codeUpgradeAllowed:"Option<RelayChainBlockNumber>"},ValidationCode:"Bytes",ValidationCodeHash:"Hash",ValidationData:{persisted:"PersistedValidationData",transient:"TransientValidationData"},ValidationDataType:{validationData:"ValidationData",relayChainState:"Vec<Bytes>"},ValidatorSignature:"Signature",ValidityAttestation:{_enum:{Never:"Null",Implicit:"ValidatorSignature",Explicit:"ValidatorSignature"}},MessagingStateSnapshot:{relayDispatchQueueSize:"(u32, u32)",egressChannels:"Vec<MessagingStateSnapshotEgressEntry>"},MessagingStateSnapshotEgressEntry:"(ParaId, AbridgedHrmpChannel)",SystemInherentData:"ParachainInherentData",VecInboundHrmpMessage:"Vec<InboundHrmpMessage>"}},definitions$m={rpc:{},types:{Approvals:"[bool; 4]"}},definitions$l={rpc:{},types:{AccountStatus:{validity:"AccountValidity",freeBalance:"Balance",lockedBalance:"Balance",signature:"Vec<u8>",vat:"Permill"},AccountValidity:{_enum:["Invalid","Initiated","Pending","ValidLow","ValidHigh","Completed"]}}};var TypeDefInfo;(function(n){n[n.BTreeMap=0]="BTreeMap",n[n.BTreeSet=1]="BTreeSet",n[n.Compact=2]="Compact",n[n.DoNotConstruct=3]="DoNotConstruct",n[n.Enum=4]="Enum",n[n.HashMap=5]="HashMap",n[n.Int=6]="Int",n[n.Linkage=7]="Linkage",n[n.Null=8]="Null",n[n.Option=9]="Option",n[n.Plain=10]="Plain",n[n.Range=11]="Range",n[n.RangeInclusive=12]="RangeInclusive",n[n.Result=13]="Result",n[n.Set=14]="Set",n[n.Si=15]="Si",n[n.Struct=16]="Struct",n[n.Tuple=17]="Tuple",n[n.UInt=18]="UInt",n[n.Vec=19]="Vec",n[n.VecFixed=20]="VecFixed",n[n.WrapperKeepOpaque=21]="WrapperKeepOpaque",n[n.WrapperOpaque=22]="WrapperOpaque"})(TypeDefInfo||(TypeDefInfo={}));function hasEq(n){return isFunction$2(n.eq)}function compareArray(n,e){return Array.isArray(e)?n.length===e.length&&isUndefined(n.find((t,a)=>hasEq(t)?!t.eq(e[a]):t!==e[a])):!1}class AbstractArray extends Array{constructor(t,a){super(a);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");this.registry=t}static get[Symbol.species](){return Array}get encodedLength(){const t=this.length;let a=compactToU8a(t).length;for(let o=0;o<t;o++)a+=this[o].encodedLength;return a}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.length===0}get length(){return super.length}eq(t){return compareArray(this,t)}inspect(){return{inner:this.inspectInner(),outer:[compactToU8a(this.length)]}}inspectInner(){const t=this.length,a=new Array(t);for(let o=0;o<t;o++)a[o]=this[o].inspect();return a}toArray(){return Array.from(this)}toHex(){return u8aToHex(this.toU8a())}toHuman(t,a){const o=this.length,i=new Array(o);for(let r=0;r<o;r++)i[r]=this[r]&&this[r].toHuman(t,a);return i}toJSON(){const t=this.length,a=new Array(t);for(let o=0;o<t;o++)a[o]=this[o]&&this[o].toJSON();return a}toPrimitive(t){const a=this.length,o=new Array(a);for(let i=0;i<a;i++)o[i]=this[i]&&this[i].toPrimitive(t);return o}toString(){const t=this.length,a=new Array(t);for(let o=0;o<t;o++)a[o]=this[o].toString();return`[${a.join(", ")}]`}toU8a(t){const a=this.toU8aInner();return u8aConcatStrict(t?a:[compactToU8a(this.length),...a])}toU8aInner(t){const a=this.length,o=new Array(a);for(let i=0;i<a;i++)o[i]=this[i].toU8a(t);return o}}class AbstractBase{constructor(e,t,a){A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__raw");this.initialU8aLength=a,this.__internal__raw=t,this.registry=e}get encodedLength(){return this.toU8a().length}get hash(){return this.registry.hash(this.toU8a())}get inner(){return this.__internal__raw}get isEmpty(){return this.__internal__raw.isEmpty}eq(e){return this.__internal__raw.eq(e)}inspect(){return this.__internal__raw.inspect()}toHex(e){return this.__internal__raw.toHex(e)}toHuman(e,t){return this.__internal__raw.toHuman(e,t)}toJSON(){return this.__internal__raw.toJSON()}toPrimitive(e){return this.__internal__raw.toPrimitive(e)}toString(){return this.__internal__raw.toString()}toU8a(e){return this.__internal__raw.toU8a(e)}unwrap(){return this.__internal__raw}valueOf(){return this.__internal__raw}}const DEFAULT_UINT_BITS=64,MAX_NUMBER_BITS=52,MUL_P=new BN(1e4),FORMATTERS=[["Perquintill",BN_QUINTILL],["Perbill",BN_BILLION],["Permill",BN_MILLION],["Percent",BN_HUNDRED]];function isToBn(n){return isFunction$2(n.toBn)}function toPercentage(n,e){return`${(n.mul(MUL_P).div(e).toNumber()/100).toFixed(2)}%`}function decodeAbstractInt(n,e){if(isNumber(n)){if(!Number.isInteger(n)||n>Number.MAX_SAFE_INTEGER||n<Number.MIN_SAFE_INTEGER)throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");return n}else if(isString(n)){if(isHex(n,-1,!0))return hexToBn(n,{isLe:!1,isNegative:e}).toString();if(n.includes(".")||n.includes(",")||n.includes("e"))throw new Error("String should not contain decimal points or scientific notation");return n}else{if(isBn(n)||isBigInt(n))return n.toString();if(isObject$2(n)){if(isToBn(n))return n.toBn().toString();const t=Object.keys(n);if(t.length!==1)throw new Error("Unable to construct number from multi-key object");return decodeAbstractInt(n[t[0]],e)}else if(!n)return 0}throw new Error(`Unable to create BN from unknown type ${typeof n}`)}class AbstractInt extends BN{constructor(t,a=0,o=DEFAULT_UINT_BITS,i=!1){super(isU8a(a)?o<=48?u8aToNumber(a.subarray(0,o/8),{isNegative:i}):u8aToBn(a.subarray(0,o/8),{isLe:!0,isNegative:i}).toString():decodeAbstractInt(a,i));A(this,"registry");A(this,"encodedLength");A(this,"isUnsigned");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__bitLength");this.registry=t,this.__internal__bitLength=o,this.encodedLength=this.__internal__bitLength/8,this.initialU8aLength=this.__internal__bitLength/8,this.isUnsigned=!i;const r=this.isNeg(),s=o-(i&&!r?1:0);if(r&&!i)throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);if(super.bitLength()>s)throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${s}`)}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.isZero()}bitLength(){return this.__internal__bitLength}eq(t){return super.eq(isHex(t)?hexToBn(t.toString(),{isLe:!1,isNegative:!this.isUnsigned}):bnToBn(t))}inspect(){return{outer:[this.toU8a()]}}isMax(){return this.toU8a().filter(a=>a===255).length===this.__internal__bitLength/8}toBigInt(){return BigInt(this.toString())}toBn(){return this}toHex(t=!1){return bnToHex(this,{bitLength:this.bitLength(),isLe:t,isNegative:!this.isUnsigned})}toHuman(t){const a=this.toRawType();if(a==="Balance")return this.isMax()?"everything":formatBalance(this,{decimals:this.registry.chainDecimals[0],withSi:!0,withUnit:this.registry.chainTokens[0]});const[,o]=FORMATTERS.find(([i])=>i===a)||[];return o?toPercentage(this,o):formatNumber(this)}toJSON(t=!1){return t||this.__internal__bitLength>128||super.bitLength()>MAX_NUMBER_BITS?this.toHex():this.toNumber()}toPrimitive(){return super.bitLength()>MAX_NUMBER_BITS?this.toString():this.toNumber()}toRawType(){return this instanceof this.registry.createClassUnsafe("Balance")?"Balance":`${this.isUnsigned?"u":"i"}${this.bitLength()}`}toString(t){return super.toString(t)}toU8a(t){return bnToU8a(this,{bitLength:this.bitLength(),isLe:!0,isNegative:!this.isUnsigned})}}function hasMismatch(n,e){return isUndefined(n)||(hasEq(n)?!n.eq(e):n!==e)}function notEntry(n){return!Array.isArray(n)||n.length!==2}function compareMapArray(n,e){return n.size===e.length&&!e.some(t=>notEntry(t)||hasMismatch(n.get(t[0]),t[1]))}function compareMap(n,e){return Array.isArray(e)?compareMapArray(n,e):e instanceof Map?compareMapArray(n,[...e.entries()]):isObject$2(e)?compareMapArray(n,Object.entries(e)):!1}function compareSetArray(n,e){return n.size===e.length&&!e.some(t=>!n.has(t))}function compareSet(n,e){return Array.isArray(e)?compareSetArray(n,e):e instanceof Set?compareSetArray(n,[...e.values()]):isObject$2(e)?compareSetArray(n,Object.values(e)):!1}function formatFailure(n,e,t,{message:a},o,i,r,s,c){let d="";try{d=`: ${new s(n).toRawType()}`}catch{}return`${e}: failed at ${u8aToHex(o.subarray(0,16))}…${c?` on ${c}`:""} (index ${i+1}/${r})${d}:: ${a}`}function decodeU8a$6(n,e,t,[a,o]){const i=e.length;let r=0,s=0;try{for(;s<i;){const c=new a[s](n,t.subarray(r));r+=c.initialU8aLength||c.encodedLength,e[s]=c,s++}}catch(c){throw new Error(formatFailure(n,"decodeU8a",e,c,t.subarray(r),s,i,a[s],o[s]))}return[e,r]}function decodeU8aStruct(n,e,t,[a,o]){const i=e.length;let r=0,s=0;try{for(;s<i;){const c=new a[s](n,t.subarray(r));r+=c.initialU8aLength||c.encodedLength,e[s]=[o[s],c],s++}}catch(c){throw new Error(formatFailure(n,"decodeU8aStruct",e,c,t.subarray(r),s,i,a[s],o[s]))}return[e,r]}function decodeU8aVec(n,e,t,a,o){const i=e.length;let r=a,s=0;try{for(;s<i;){const c=new o(n,t.subarray(r));r+=c.initialU8aLength||c.encodedLength,e[s]=c,s++}}catch(c){throw new Error(formatFailure(n,"decodeU8aVec",e,c,t.subarray(r),s,i,o))}return[r,r-a]}const BOUNDED=["BTreeMap","BTreeSet","HashMap","Vec"],ALLOWED_BOXES=BOUNDED.concat(["Compact","DoNotConstruct","Int","Linkage","Range","RangeInclusive","Result","Opaque","Option","UInt","WrapperKeepOpaque","WrapperOpaque"]),BOX_PRECEDING=["<","(","[",'"',","," "],mappings=[alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent","InherentOfflineReport",!1),alias("VecDeque<","Vec<",!1),cleanupCompact(),removeExtensions("Bounded",!0),removeExtensions("Weak",!1),removeTraits(),removePairOf(),removeWrap("Box<"),removeGenerics(),alias("String","Text"),alias("Vec<u8>","Bytes"),alias("&\\[u8\\]","Bytes"),alias("&'static\\[u8\\]","Bytes"),alias("RawAddress","Address"),alias("Lookup::Source","LookupSource"),alias("Lookup::Target","LookupTarget"),alias("exec::StorageKey","ContractStorageKey"),flattenSingleTuple(),removeColons(),trim$2()];function trim$2(){return n=>n.trim()}function findClosing(n,e){let t=0;for(let a=e,o=n.length;a<o;a++)if(n[a]===">"){if(!t)return a;t--}else n[a]==="<"&&t++;throw new Error(`Unable to find closing matching <> on '${n}' (start ${e})`)}function alias(n,e,t=!0){const a=new RegExp(`(^${n}|${BOX_PRECEDING.map(i=>`\\${i}${n}`).join("|")})`,"g"),o=i=>(a.lastIndex=0,t&&BOX_PRECEDING.includes(i[0])?`${i[0]}${e}`:e);return i=>i.replace(a,o)}function cleanupCompact(){return n=>{if(n.includes(" as HasCompact")){for(let e=0,t=n.length;e<t;e++)if(n[e]==="<"){const a=findClosing(n,e+1)-14;n.substring(a,a+14)===" as HasCompact"&&(n=`Compact<${n.substring(e+1,a)}>`)}}return n}}function flattenSingleTuple(){const n=/,\)/g,e=/\(([^,]+)\)/;return t=>(n.lastIndex=0,t.replace(n,")").replace(e,"$1"))}function replaceTagWith(n,e,t){let a=-1;for(;;){if(a=n.indexOf(e,a+1),a===-1)return n;const o=a+e.length,i=findClosing(n,o);n=`${n.substring(0,a)}${t(n.substring(o,i))}${n.substring(i+1)}`}}function removeExtensions(n,e){return t=>{for(let a=0,o=BOUNDED.length;a<o;a++){const i=BOUNDED[a];t=replaceTagWith(t,`${n}${i}<`,r=>{const s=r.split(",").map(c=>c.trim()).filter(c=>c);return e&&s.pop(),`${i}<${s.join(",")}>`})}return t}}function removeColons(){return n=>{let e=0;for(;e!==-1;)if(e=n.indexOf("::"),e===0)n=n.substring(2);else if(e!==-1){let t=e;for(;t!==-1&&!BOX_PRECEDING.includes(n[t]);)t--;n=`${n.substring(0,t+1)}${n.substring(e+2)}`}return n}}function removeGenerics(){return n=>{for(let e=0,t=n.length;e<t;e++)if(n[e]==="<"&&!ALLOWED_BOXES.find(o=>{const i=e-o.length;return i>=0&&n.substring(i,e)===o&&(i===0||BOX_PRECEDING.includes(n[i-1]))})){const o=findClosing(n,e+1);n=`${n.substring(0,e)}${n.substring(o+1)}`}return n}}function removePairOf(){const n=e=>`(${e},${e})`;return e=>replaceTagWith(e,"PairOf<",n)}function removeTraits(){const n=/\s/g,e=/(T|Self)::/g,t=/<(T|Self)asTrait>::/g,a=/<Tas[a-z]+::Trait>::/g,o=/<LookupasStaticLookup>/g,i=/::Type/g;return r=>(n.lastIndex=0,e.lastIndex=0,t.lastIndex=0,a.lastIndex=0,o.lastIndex=0,i.lastIndex=0,r.replace(n,"").replace(e,"").replace(t,"").replace(a,"").replace(o,"Lookup").replace(i,""))}function removeWrap(n){const e=t=>t;return t=>replaceTagWith(t,n,e)}const sanitizeMap=new Map;function sanitize(n){const e=n.toString(),t=sanitizeMap.get(e);if(t)return t;let a=e;for(let o=0,i=mappings.length;o<i;o++)a=mappings[o](a);return sanitizeMap.set(e,a),a}function isArrayLike(n){return n instanceof Uint8Array||Array.isArray(n)}function isEnum(n){return isCodec(n)&&isNumber(n.index)&&isCodec(n.value)}function isOption(n){return isCodec(n)&&isBoolean(n.isSome)&&isCodec(n.value)}function isNumberLike(n){return isNumber(n)||isBn(n)||isBigInt(n)}function sortArray(n,e){let t=0;const a=Math.min(n.length,e.length);for(let o=0;o<a;++o)if(t=sortAsc(n[o],e[o]),t!==0)return t;return n.length-e.length}function checkForDuplicates(n,e,t){if(isCodec(t)){const a=t.toHex();if(e.has(a))throw new Error(`Duplicate value in ${n}: ${stringify(t)}`);e.add(a)}return!0}function sortAsc(n,e){if(isNumberLike(n)&&isNumberLike(e))return bnToBn(n).cmp(bnToBn(e));if(n instanceof Map&&e instanceof Map)return sortAsc(Array.from(n.values()),Array.from(e.values()));if(isEnum(n)&&isEnum(e))return sortAsc(n.index,e.index)||sortAsc(n.value,e.value);if(isOption(n)&&isOption(e))return sortAsc(n.isNone?0:1,e.isNone?0:1)||sortAsc(n.value,e.value);if(isArrayLike(n)&&isArrayLike(e))return sortArray(n,e);if(isCodec(n)&&isCodec(e))return sortAsc(n.toU8a(!0),e.toU8a(!0));throw new Error(`Attempting to sort unrecognized values: ${stringify(n)} (typeof ${typeof n}) <-> ${stringify(e)} (typeof ${typeof e})`)}function sortSet(n){const e=new Set;return new Set(Array.from(n).filter(t=>checkForDuplicates("BTreeSet",e,t)).sort(sortAsc))}function sortMap(n){const e=new Set;return new Map(Array.from(n.entries()).filter(([t])=>checkForDuplicates("BTreeMap",e,t)).sort(([t],[a])=>sortAsc(t,a)))}function typeToConstructor(n,e){return typeof e=="function"?e:n.createClassUnsafe(e)}function typesToConstructors(n,e){const t=e.length,a=new Array(t);for(let o=0;o<t;o++)a[o]=typeToConstructor(n,e[o]);return a}function mapToTypeMap(n,e){const t=Object.entries(e),a=t.length,o=[new Array(a),new Array(a)];for(let i=0;i<a;i++)o[1][i]=t[i][0],o[0][i]=typeToConstructor(n,t[i][1]);return o}function typesToMap(n,[e,t]){const a={};for(let o=0,i=t.length;o<i;o++)a[t[o]]=n.getClassName(e[o])||new e[o](n).toRawType();return a}function decodeCompact(n,e,t){if(isU8a(t)){const[a,o]=(t[0]&3)<3?compactFromU8aLim(t):compactFromU8a(t);return[new e(n,o),a]}else if(t instanceof Compact){const a=t.unwrap();return a instanceof e?[a,0]:[new e(n,a),0]}else if(t instanceof e)return[t,0];return[new e(n,t),0]}class Compact{constructor(e,t,a=0,{definition:o,setDefinition:i=identity$1}={}){A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__Type");A(this,"__internal__raw");this.registry=e,this.__internal__Type=o||i(typeToConstructor(e,t));const[r,s]=decodeCompact(e,this.__internal__Type,a);this.initialU8aLength=s,this.__internal__raw=r}static with(e){let t;const a=o=>t=o;return class extends Compact{constructor(o,i){super(o,e,i,{definition:t,setDefinition:a})}}}get encodedLength(){return this.toU8a().length}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.__internal__raw.isEmpty}bitLength(){return this.__internal__raw.bitLength()}eq(e){return this.__internal__raw.eq(e instanceof Compact?e.__internal__raw:e)}inspect(){return{outer:[this.toU8a()]}}toBigInt(){return this.__internal__raw.toBigInt()}toBn(){return this.__internal__raw.toBn()}toHex(e){return this.__internal__raw.toHex(e)}toHuman(e,t){return this.__internal__raw.toHuman(e,t)}toJSON(){return this.__internal__raw.toJSON()}toNumber(){return this.__internal__raw.toNumber()}toPrimitive(e){return this.__internal__raw.toPrimitive(e)}toRawType(){return`Compact<${this.registry.getClassName(this.__internal__Type)||this.__internal__raw.toRawType()}>`}toString(){return this.__internal__raw.toString()}toU8a(e){return compactToU8a(this.__internal__raw.toBn())}unwrap(){return this.__internal__raw}}class DoNotConstruct{constructor(e,t="DoNotConstruct"){A(this,"registry");A(this,"createdAtHash");A(this,"isStorageFallback");A(this,"__internal__neverError");throw this.registry=e,this.__internal__neverError=new Error(`DoNotConstruct: Cannot construct unknown type ${t}`),this.__internal__neverError}static with(e){return class extends DoNotConstruct{constructor(t){super(t,e)}}}get encodedLength(){throw this.__internal__neverError}get hash(){throw this.__internal__neverError}get isEmpty(){throw this.__internal__neverError}eq(){throw this.__internal__neverError}inspect(){throw this.__internal__neverError}toHex(){throw this.__internal__neverError}toHuman(){throw this.__internal__neverError}toJSON(){throw this.__internal__neverError}toPrimitive(){throw this.__internal__neverError}toRawType(){throw this.__internal__neverError}toString(){throw this.__internal__neverError}toU8a(){throw this.__internal__neverError}}class Null{constructor(e){A(this,"encodedLength",0);A(this,"isEmpty",!0);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength",0);A(this,"isStorageFallback");this.registry=e}get hash(){throw new Error(".hash is not implemented on Null")}eq(e){return e instanceof Null||isNull(e)}inspect(){return{}}toHex(){return"0x"}toHuman(){return this.toJSON()}toJSON(){return null}toPrimitive(){return null}toRawType(){return"Null"}toString(){return""}toU8a(e){return new Uint8Array}}function isRustEnum$1(n){const e=Object.values(n);if(e.some(t=>isNumber(t))){if(!e.every(t=>isNumber(t)&&t>=0&&t<=255))throw new Error("Invalid number-indexed enum definition");return!1}return!0}function extractDef(n,e){const t={};let a,o;if(Array.isArray(e)){for(let i=0,r=e.length;i<r;i++)t[e[i]]={Type:Null,index:i};a=!0,o=!1}else if(isRustEnum$1(e)){const[i,r]=mapToTypeMap(n,e);for(let s=0,c=r.length;s<c;s++)t[r[s]]={Type:i[s],index:s};a=!Object.values(t).some(({Type:s})=>s!==Null),o=!1}else{const i=Object.entries(e);for(let r=0,s=i.length;r<s;r++){const[c,d]=i[r];t[c]={Type:Null,index:d}}a=!0,o=!0}return{def:t,isBasic:a,isIndexed:o}}function getEntryType(n,e){const t=Object.values(n);for(let a=0,o=t.length;a<o;a++){const{Type:i,index:r}=t[a];if(r===e)return i}throw new Error(`Unable to create Enum via index ${e}, in ${Object.keys(n).join(", ")}`)}function createFromU8a(n,e,t,a){const o=getEntryType(e,t);return{index:t,value:new o(n,a)}}function createFromValue(n,e,t=0,a){const o=getEntryType(e,t);return{index:t,value:a instanceof o?a:new o(n,a)}}function decodeFromJSON(n,e,t,a){const o=Object.keys(e).map(s=>s.toLowerCase()),i=t.toLowerCase(),r=o.indexOf(i);if(r===-1)throw new Error(`Cannot map Enum JSON, unable to find '${t}' in ${o.join(", ")}`);try{return createFromValue(n,e,Object.values(e)[r].index,a)}catch(s){throw new Error(`Enum(${t}):: ${s.message}`)}}function decodeEnum(n,e,t,a){if(isNumber(a))return createFromValue(n,e,a,t);if(isU8a(t)||isHex(t)){const o=u8aToU8a(t);if(o.length)return createFromU8a(n,e,o[0],o.subarray(1))}else{if(t instanceof Enum)return createFromValue(n,e,t.index,t.value);if(isNumber(t))return createFromValue(n,e,t);if(isString(t))return decodeFromJSON(n,e,t.toString());if(isObject$2(t)){const o=Object.keys(t)[0];return decodeFromJSON(n,e,o,t[o])}}return createFromValue(n,e,Object.values(e)[0].index)}class Enum{constructor(e,t,a,o,{definition:i,setDefinition:r=identity$1}={}){A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__def");A(this,"__internal__entryIndex");A(this,"__internal__indexes");A(this,"__internal__isBasic");A(this,"__internal__isIndexed");A(this,"__internal__raw");const{def:s,isBasic:c,isIndexed:d}=i||r(extractDef(e,t)),p=isU8a(a)&&a.length&&!isNumber(o)?createFromU8a(e,s,a[0],a.subarray(1)):decodeEnum(e,s,a,o);this.registry=e,this.__internal__def=s,this.__internal__isBasic=c,this.__internal__isIndexed=d,this.__internal__indexes=Object.values(s).map(({index:h})=>h),this.__internal__entryIndex=this.__internal__indexes.indexOf(p.index),this.__internal__raw=p.value,this.__internal__raw.initialU8aLength&&(this.initialU8aLength=1+this.__internal__raw.initialU8aLength)}static with(e){var o;let t;const a=i=>t=i;return o=class extends Enum{constructor(r,s,c){super(r,e,s,c,{definition:t,setDefinition:a})}},(()=>{const r=Array.isArray(e)?e:Object.keys(e),s=r.length,c=new Array(s),d=new Array(s);for(let p=0;p<s;p++){const h=stringPascalCase(r[p]);c[p]=`as${h}`,d[p]=`is${h}`}objectProperties(o.prototype,d,(p,h,I)=>I.type===r[h]),objectProperties(o.prototype,c,(p,h,I)=>{if(I.type!==r[h])throw new Error(`Cannot convert '${I.type}' via ${p}`);return I.value})})(),o}get encodedLength(){return 1+this.__internal__raw.encodedLength}get hash(){return this.registry.hash(this.toU8a())}get index(){return this.__internal__indexes[this.__internal__entryIndex]}get inner(){return this.__internal__raw}get isBasic(){return this.__internal__isBasic}get isEmpty(){return this.__internal__raw.isEmpty}get isNone(){return this.__internal__raw instanceof Null}get defIndexes(){return this.__internal__indexes}get defKeys(){return Object.keys(this.__internal__def)}get type(){return this.defKeys[this.__internal__entryIndex]}get value(){return this.__internal__raw}eq(e){return isU8a(e)?!this.toU8a().some((t,a)=>t!==e[a]):isNumber(e)?this.toNumber()===e:this.__internal__isBasic&&isString(e)?this.type===e:isHex(e)?this.toHex()===e:e instanceof Enum?this.index===e.index&&this.value.eq(e.value):isObject$2(e)?this.value.eq(e[this.type]):this.value.eq(e)}inspect(){if(this.__internal__isBasic)return{outer:[new Uint8Array([this.index])]};const{inner:e,outer:t=[]}=this.__internal__raw.inspect();return{inner:e,outer:[new Uint8Array([this.index]),...t]}}toHex(){return u8aToHex(this.toU8a())}toHuman(e,t){return this.__internal__isBasic||this.isNone?this.type:{[this.type]:this.__internal__raw.toHuman(e,t)}}toJSON(){return this.__internal__isBasic?this.type:{[stringCamelCase(this.type)]:this.__internal__raw.toJSON()}}toNumber(){return this.index}toPrimitive(e){return this.__internal__isBasic?this.type:{[stringCamelCase(this.type)]:this.__internal__raw.toPrimitive(e)}}_toRawStruct(){if(this.__internal__isBasic)return this.__internal__isIndexed?this.defKeys.reduce((t,a,o)=>(t[a]=this.__internal__indexes[o],t),{}):this.defKeys;const e=Object.entries(this.__internal__def);return typesToMap(this.registry,e.reduce((t,[a,{Type:o}],i)=>(t[0][i]=o,t[1][i]=a,t),[new Array(e.length),new Array(e.length)]))}toRawType(){return stringify({_enum:this._toRawStruct()})}toString(){return this.isNone?this.type:stringify(this.toJSON())}toU8a(e){return e?this.__internal__raw.toU8a(e):u8aConcatStrict([new Uint8Array([this.index]),this.__internal__raw.toU8a(e)])}}class Int extends AbstractInt{constructor(e,t=0,a){super(e,t,a,!0)}static with(e,t){return class extends Int{constructor(a,o){super(a,o,e)}toRawType(){return t||super.toRawType()}}}}class None extends Null{toRawType(){return"None"}}function decodeOption(n,e,t){return t instanceof e?t:t instanceof Option?t.value instanceof e?t.value:t.isNone?new None(n):new e(n,t.value):isNull(t)||isUndefined(t)||t==="0x"||t instanceof None?new None(n):isU8a(t)?!t.length||t[0]===0?new None(n):new e(n,t.subarray(1)):new e(n,t)}class Option{constructor(e,t,a,{definition:o,setDefinition:i=identity$1}={}){A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__Type");A(this,"__internal__raw");const r=o||i(typeToConstructor(e,t)),s=isU8a(a)&&a.length&&!isCodec(a)?a[0]===0?new None(e):new r(e,a.subarray(1)):decodeOption(e,r,a);this.registry=e,this.__internal__Type=r,this.__internal__raw=s,s!=null&&s.initialU8aLength&&(this.initialU8aLength=1+s.initialU8aLength)}static with(e){let t;const a=o=>(t=o,o);return class extends Option{constructor(o,i){super(o,e,i,{definition:t,setDefinition:a})}}}get encodedLength(){return 1+this.__internal__raw.encodedLength}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.isNone}get isNone(){return this.__internal__raw instanceof None}get isSome(){return!this.isNone}get value(){return this.__internal__raw}eq(e){return e instanceof Option?this.isSome===e.isSome&&this.value.eq(e.value):this.value.eq(e)}inspect(){if(this.isNone)return{outer:[new Uint8Array([0])]};const{inner:e,outer:t=[]}=this.__internal__raw.inspect();return{inner:e,outer:[new Uint8Array([1]),...t]}}toHex(){return this.isNone?"0x":u8aToHex(this.toU8a().subarray(1))}toHuman(e,t){return this.__internal__raw.toHuman(e,t)}toJSON(){return this.isNone?null:this.__internal__raw.toJSON()}toPrimitive(e){return this.isNone?null:this.__internal__raw.toPrimitive(e)}toRawType(e){const t=this.registry.getClassName(this.__internal__Type)||new this.__internal__Type(this.registry).toRawType();return e?t:`Option<${t}>`}toString(){return this.__internal__raw.toString()}toU8a(e){if(e)return this.__internal__raw.toU8a(!0);const t=new Uint8Array(this.encodedLength);return this.isSome&&(t.set([1]),t.set(this.__internal__raw.toU8a(),1)),t}unwrap(){if(this.isNone)throw new Error("Option: unwrapping a None value");return this.__internal__raw}unwrapOr(e){return this.isSome?this.unwrap():e}unwrapOrDefault(){return this.isSome?this.unwrap():new this.__internal__Type(this.registry)}}class Result extends Enum{constructor(e,t,a,o){super(e,{Ok:t,Err:a},o)}static with(e){return class extends Result{constructor(t,a){super(t,e.Ok,e.Err,a)}}}get asErr(){if(!this.isErr)throw new Error("Cannot extract Err value from Ok result, check isErr first");return this.value}get asOk(){if(!this.isOk)throw new Error("Cannot extract Ok value from Err result, check isOk first");return this.value}get isEmpty(){return this.isOk&&this.value.isEmpty}get isErr(){return!this.isOk}get isOk(){return this.index===0}toRawType(){const e=this._toRawStruct();return`Result<${e.Ok},${e.Err}>`}}function decodeTuple(n,e,t,a){if(Array.isArray(t)){const o=a[0];for(let i=0,r=o.length;i<r;i++)try{const s=t==null?void 0:t[i];e[i]=s instanceof o[i]?s:new o[i](n,s)}catch(s){throw new Error(`Tuple: failed on ${i}:: ${s.message}`)}return[e,0]}else{if(isHex(t))return decodeU8a$6(n,e,u8aToU8a(t),a);if(!t||!e.length){const o=a[0];for(let i=0,r=o.length;i<r;i++)e[i]=new o[i](n);return[e,0]}}throw new Error(`Expected array input to Tuple decoding, found ${typeof t}: ${stringify(t)}`)}class Tuple extends AbstractArray{constructor(t,a,o,{definition:i,setDefinition:r=identity$1}={}){const s=i||r(Array.isArray(a)?[typesToConstructors(t,a),[]]:isFunction$2(a)||isString(a)?[[typeToConstructor(t,a)],[]]:mapToTypeMap(t,a));super(t,s[0].length);A(this,"__internal__Types");this.initialU8aLength=(isU8a(o)?decodeU8a$6(t,this,o,s):decodeTuple(t,this,o,s))[1],this.__internal__Types=s}static with(t){let a;const o=i=>a=i;return class extends Tuple{constructor(i,r){super(i,t,r,{definition:a,setDefinition:o})}}}get encodedLength(){let t=0;for(let a=0,o=this.length;a<o;a++)t+=this[a].encodedLength;return t}get Types(){return this.__internal__Types[1].length?this.__internal__Types[1]:this.__internal__Types[0].map(t=>new t(this.registry).toRawType())}inspect(){return{inner:this.inspectInner()}}toRawType(){return`(${this.__internal__Types[0].map(a=>this.registry.getClassName(a)||new a(this.registry).toRawType()).join(",")})`}toString(){return stringify(this.toJSON())}toU8a(t){return u8aConcatStrict(this.toU8aInner(t))}}class UInt extends AbstractInt{static with(e,t){return class extends UInt{constructor(a,o){super(a,o,e)}toRawType(){return t||super.toRawType()}}}}const MAX_LENGTH$2=512*1024,l$b=logger("Vec");function decodeVecLength(n){if(Array.isArray(n))return[n,n.length,0];if(isU8a(n)||isHex(n)){const e=u8aToU8a(n),[t,a]=compactFromU8aLim(e);if(a>MAX_LENGTH$2)throw new Error(`Vec length ${a.toString()} exceeds ${MAX_LENGTH$2}`);return[e,a,t]}else if(!n)return[null,0,0];throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof n}: ${stringify(n)}`)}function decodeVec(n,e,t,a,o){if(Array.isArray(t)){const i=e.length;for(let r=0;r<i;r++){const s=t[r];try{e[r]=s instanceof o?s:new o(n,s)}catch(c){throw l$b.error(`Unable to decode on index ${r}`,c.message),c}}return[0,0]}else if(!t)return[0,0];return decodeU8aVec(n,e,u8aToU8a(t),a,o)}class Vec extends AbstractArray{constructor(t,a,o=[],{definition:i,setDefinition:r=identity$1}={}){const[s,c,d]=decodeVecLength(o);super(t,c);A(this,"__internal__Type");this.__internal__Type=i||r(typeToConstructor(t,a)),this.initialU8aLength=(isU8a(s)?decodeU8aVec(t,this,s,d,this.__internal__Type):decodeVec(t,this,s,d,this.__internal__Type))[0]}static with(t){let a;const o=i=>a=i;return class extends Vec{constructor(i,r){super(i,t,r,{definition:a,setDefinition:o})}}}get Type(){return this.__internal__Type.name}indexOf(t){const a=t instanceof this.__internal__Type?t:new this.__internal__Type(this.registry,t);for(let o=0,i=this.length;o<i;o++)if(a.eq(this[o]))return o;return-1}toRawType(){return`Vec<${this.registry.getClassName(this.__internal__Type)||new this.__internal__Type(this.registry).toRawType()}>`}}class VecFixed extends AbstractArray{constructor(t,a,o,i=[],{definition:r,setDefinition:s=identity$1}={}){super(t,o);A(this,"__internal__Type");this.__internal__Type=r||s(typeToConstructor(t,a)),this.initialU8aLength=(isU8a(i)?decodeU8aVec(t,this,i,0,this.__internal__Type):decodeVec(t,this,i,0,this.__internal__Type))[1]}static with(t,a){let o;const i=r=>o=r;return class extends VecFixed{constructor(r,s){super(r,t,a,s,{definition:o,setDefinition:i})}}}get Type(){return new this.__internal__Type(this.registry).toRawType()}get encodedLength(){let t=0;for(let a=0,o=this.length;a<o;a++)t+=this[a].encodedLength;return t}inspect(){return{inner:this.inspectInner()}}toU8a(){const t=this.toU8aInner();return t.length?u8aConcatStrict(t):new Uint8Array([])}toRawType(){return`[${this.Type};${this.length}]`}}class Raw extends Uint8Array{constructor(t,a,o){super(u8aToU8a(a));A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");this.registry=t,this.initialU8aLength=o}static get[Symbol.species](){return Uint8Array}get encodedLength(){return this.length}get hash(){return this.registry.hash(this.toU8a())}get isAscii(){return isAscii(this)}get isEmpty(){return!this.length||isUndefined(this.find(t=>!!t))}get isUtf8(){return isUtf8(this)}bitLength(){return this.length*8}eq(t){return t instanceof Uint8Array?this.length===t.length&&!this.some((a,o)=>a!==t[o]):this.eq(u8aToU8a(t))}inspect(){return{outer:[this.toU8a()]}}toHex(){return u8aToHex(this)}toHuman(t,a){return this.toPrimitive(a)}toJSON(){return this.toHex()}toPrimitive(t){if(!t&&this.isAscii){const a=this.toUtf8();if(isAscii(a))return a}return this.toJSON()}toRawType(){return"Raw"}toString(){return this.toHex()}toU8a(t){return Uint8Array.from(this)}toUtf8(){if(!this.isUtf8)throw new Error("The character sequence is not a valid Utf8 string");return u8aToString(this)}}function decodeBitVecU8a(n){if(!(n!=null&&n.length))return[0,new Uint8Array];const[e,t]=compactFromU8aLim(n),a=e+Math.ceil(t/8);if(a>n.length)throw new Error(`BitVec: required length less than remainder, expected at least ${a}, found ${n.length}`);return[t,n.subarray(e,a)]}function decodeBitVec(n){if(Array.isArray(n)||isString(n)){const e=u8aToU8a(n);return[e.length/8,e]}return decodeBitVecU8a(n)}class BitVec extends Raw{constructor(t,a,o=!1){const[i,r]=decodeBitVec(a);super(t,r);A(this,"__internal__decodedLength");A(this,"__internal__isMsb");this.__internal__decodedLength=i,this.__internal__isMsb=o}get encodedLength(){return this.length+compactToU8a(this.__internal__decodedLength).length}inspect(){return{outer:[compactToU8a(this.__internal__decodedLength),super.toU8a()]}}toBoolArray(){const t=[...this.toU8a(!0)].map(i=>[!!(i&128),!!(i&64),!!(i&32),!!(i&16),!!(i&8),!!(i&4),!!(i&2),!!(i&1)]),a=t.length,o=new Array(8*a);for(let i=0;i<a;i++){const r=i*8,s=t[i];for(let c=0;c<8;c++)o[r+c]=this.__internal__isMsb?s[c]:s[7-c]}return o}toHuman(){return`0b${[...this.toU8a(!0)].map(t=>`00000000${t.toString(2)}`.slice(-8)).map(t=>this.__internal__isMsb?t:t.split("").reverse().join("")).join("_")}`}toRawType(){return"BitVec"}toU8a(t){const a=super.toU8a(t);return t?a:u8aConcatStrict([compactToU8a(this.__internal__decodedLength),a])}}function noopSetDefinition(n){return n}function decodeStructFromObject(n,[e,t],a,o){let i;const r=Array.isArray(a),s=a instanceof Map,c=t.length;if(!r&&!s&&!isObject$2(a))throw new Error(`Struct: Cannot decode value ${stringify(a)} (typeof ${typeof a}), expected an input object, map or array`);if(r&&a.length!==c)throw new Error(`Struct: Unable to map ${stringify(a)} array to object with known keys ${t.join(", ")}`);const d=new Array(c);for(let p=0;p<c;p++){const h=t[p],I=o.get(h)||h,_=e[p];let k;try{if(r)k=a[p];else if(s)k=I&&a.get(I);else if(k=I&&a[I],isUndefined(k)){if(isUndefined(i)){const P=Object.entries(a);i={};for(let v=0,E=P.length;v<E;v++)i[stringCamelCase(P[v][0])]=P[v][1]}k=I&&i[I]}d[p]=[h,k instanceof _?k:new _(n,k)]}catch(P){let v=_.name;try{v=new _(n).toRawType()}catch{}throw new Error(`Struct: failed on ${I}: ${v}:: ${P.message}`)}}return[d,0]}class Struct extends Map{constructor(t,a,o,i=new Map,{definition:r,setDefinition:s=noopSetDefinition}={}){const c=r||s(mapToTypeMap(t,a)),[d,p]=isU8a(o)||isHex(o)?decodeU8aStruct(t,new Array(c[0].length),u8aToU8a(o),c):o instanceof Struct?[o,0]:decodeStructFromObject(t,c,o||{},i);super(d);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__jsonMap");A(this,"__internal__Types");this.initialU8aLength=p,this.registry=t,this.__internal__jsonMap=i,this.__internal__Types=c}static with(t,a){var r;let o;const i=s=>o=s;return r=class extends Struct{constructor(c,d){super(c,t,d,a,{definition:o,setDefinition:i})}},(()=>{const c=Object.keys(t);objectProperties(r.prototype,c,(d,p,h)=>h.get(d))})(),r}get defKeys(){return this.__internal__Types[1]}get isEmpty(){for(const t of this.values())if(!t.isEmpty)return!1;return!0}get encodedLength(){let t=0;for(const a of this.values())t+=a.encodedLength;return t}get hash(){return this.registry.hash(this.toU8a())}get Type(){const t={},[a,o]=this.__internal__Types;for(let i=0,r=o.length;i<r;i++)t[o[i]]=new a[i](this.registry).toRawType();return t}eq(t){return compareMap(this,t)}get(t){return super.get(t)}getAtIndex(t){return this.toArray()[t]}getT(t){return super.get(t)}inspect(t){const a=[];for(const[o,i]of this.entries())a.push({...i.inspect(!t||isBoolean(t)?t:t[o]),name:stringCamelCase(o)});return{inner:a}}toArray(){return[...this.values()]}toHex(){return u8aToHex(this.toU8a())}toHuman(t,a){const o={};for(const[i,r]of this.entries())o[i]=r.toHuman(t,a);return o}toJSON(){const t={};for(const[a,o]of this.entries())t[this.__internal__jsonMap.get(a)||a]=o.toJSON();return t}toPrimitive(t){const a={};for(const[o,i]of this.entries())a[o]=i.toPrimitive(t);return a}toRawType(){return stringify(typesToMap(this.registry,this.__internal__Types))}toString(){return stringify(this.toJSON())}toU8a(t){const a=[];for(const[o,i]of this.entries())a.push(i.toU8a(!t||isBoolean(t)?t:t[o]));return u8aConcatStrict(a)}}const l$a=logger("Map");function decodeMapFromU8a(n,e,t,a){const o=new Map,[i,r]=compactFromU8aLim(a),s=[];for(let p=0;p<r;p++)s.push(e,t);const[c,d]=decodeU8a$6(n,new Array(s.length),a.subarray(i),[s,[]]);for(let p=0,h=c.length;p<h;p+=2)o.set(c[p],c[p+1]);return[e,t,o,i+d]}function decodeMapFromMap(n,e,t,a){const o=new Map;for(const[i,r]of a.entries()){const s=e.prototype instanceof AbstractArray||e.prototype instanceof Struct||e.prototype instanceof Enum;try{o.set(i instanceof e?i:new e(n,s&&typeof i=="string"?JSON.parse(i):i),r instanceof t?r:new t(n,r))}catch(c){throw l$a.error("Failed to decode key or value:",c.message),c}}return[e,t,o,0]}function decodeMap(n,e,t,a){const o=typeToConstructor(n,e),i=typeToConstructor(n,t);if(a){if(isU8a(a)||isHex(a))return decodeMapFromU8a(n,o,i,u8aToU8a(a));if(a instanceof Map)return decodeMapFromMap(n,o,i,a);if(isObject$2(a))return decodeMapFromMap(n,o,i,new Map(Object.entries(a)))}else return[o,i,new Map,0];throw new Error("Map: cannot decode type")}class CodecMap extends Map{constructor(t,a,o,i,r="HashMap"){const[s,c,d,p]=decodeMap(t,a,o,i);super(r==="BTreeMap"?sortMap(d):d);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__KeyClass");A(this,"__internal__ValClass");A(this,"__internal__type");this.registry=t,this.initialU8aLength=p,this.__internal__KeyClass=s,this.__internal__ValClass=c,this.__internal__type=r}get encodedLength(){let t=compactToU8a(this.size).length;for(const[a,o]of this.entries())t+=a.encodedLength+o.encodedLength;return t}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.size===0}eq(t){return compareMap(this,t)}inspect(){const t=[];for(const[a,o]of this.entries())t.push(a.inspect()),t.push(o.inspect());return{inner:t,outer:[compactToU8a(this.size)]}}toHex(){return u8aToHex(this.toU8a())}toHuman(t,a){const o={};for(const[i,r]of this.entries())o[i instanceof Raw&&!a&&i.isAscii?i.toUtf8():i.toString()]=r.toHuman(t,a);return o}toJSON(){const t={};for(const[a,o]of this.entries())t[a.toString()]=o.toJSON();return t}toPrimitive(t){const a={};for(const[o,i]of this.entries())a[o instanceof Raw&&!t&&o.isAscii?o.toUtf8():o.toString()]=i.toPrimitive(t);return a}toRawType(){return`${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass)||new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass)||new this.__internal__ValClass(this.registry).toRawType()}>`}toString(){return stringify(this.toJSON())}toU8a(t){const a=[];t||a.push(compactToU8a(this.size));for(const[o,i]of this.entries())a.push(o.toU8a(t),i.toU8a(t));return u8aConcatStrict(a)}}class BTreeMap extends CodecMap{static with(e,t){return class extends BTreeMap{constructor(a,o){super(a,e,t,o,"BTreeMap")}}}}const l$9=logger("BTreeSet");function decodeSetFromU8a(n,e,t){const a=new Set,[o,i]=compactFromU8aLim(t),r=new Array(i),[s]=decodeU8aVec(n,r,t,o,e);for(let c=0;c<i;c++)a.add(r[c]);return[e,a,s]}function decodeSetFromSet(n,e,t){const a=new Set;return t.forEach(o=>{try{a.add(o instanceof e?o:new e(n,o))}catch(i){throw l$9.error("Failed to decode key or value:",i.message),i}}),[e,a,0]}function decodeSet$1(n,e,t){const a=typeToConstructor(n,e);if(t){if(isU8a(t)||isHex(t))return decodeSetFromU8a(n,a,u8aToU8a(t));if(Array.isArray(t)||t instanceof Set)return decodeSetFromSet(n,a,t)}else return[a,new Set,0];throw new Error("BTreeSet: cannot decode type")}class BTreeSet extends Set{constructor(t,a,o){const[i,r,s]=decodeSet$1(t,a,o);super(sortSet(r));A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__ValClass");this.registry=t,this.initialU8aLength=s,this.__internal__ValClass=i}static with(t){return class extends BTreeSet{constructor(a,o){super(a,t,o)}}}get encodedLength(){let t=compactToU8a(this.size).length;for(const a of this.values())t+=a.encodedLength;return t}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.size===0}get strings(){return[...super.values()].map(t=>t.toString())}eq(t){return compareSet(this,t)}inspect(){const t=[];for(const a of this.values())t.push(a.inspect());return{inner:t,outer:[compactToU8a(this.size)]}}toHex(){return u8aToHex(this.toU8a())}toHuman(t,a){const o=[];for(const i of this.values())o.push(i.toHuman(t,a));return o}toJSON(){const t=[];for(const a of this.values())t.push(a.toJSON());return t}toRawType(){return`BTreeSet<${this.registry.getClassName(this.__internal__ValClass)||new this.__internal__ValClass(this.registry).toRawType()}>`}toPrimitive(t){const a=[];for(const o of this.values())a.push(o.toPrimitive(t));return a}toString(){return stringify(this.toJSON())}toU8a(t){const a=[];t||a.push(compactToU8a(this.size));for(const o of this.values())a.push(o.toU8a(t));return u8aConcatStrict(a)}}const MAX_LENGTH$1=10*1024*1024;function decodeBytesU8a(n){if(!n.length)return[new Uint8Array,0];const[e,t]=compactFromU8aLim(n),a=e+t;if(t>MAX_LENGTH$1)throw new Error(`Bytes length ${t.toString()} exceeds ${MAX_LENGTH$1}`);if(a>n.length)throw new Error(`Bytes: required length less than remainder, expected at least ${a}, found ${n.length}`);return[n.subarray(e,a),a]}class Bytes extends Raw{constructor(e,t){const[a,o]=isU8a(t)&&!(t instanceof Raw)?decodeBytesU8a(t):Array.isArray(t)||isString(t)?[u8aToU8a(t),0]:[t,0];super(e,a,o)}get encodedLength(){return this.length+compactToU8a(this.length).length}inspect(e){const t=compactToU8a(this.length);return{outer:e?[super.toU8a()]:this.length?[t,super.toU8a()]:[t]}}toRawType(){return"Bytes"}toU8a(e){return e?super.toU8a(e):compactAddLength(this)}}class HashMap extends CodecMap{static with(e,t){return class extends HashMap{constructor(a,o){super(a,e,t,o)}}}}class bool extends Boolean{constructor(t,a=!1){super(isU8a(a)?a[0]===1:a instanceof Boolean?a.valueOf():!!a);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength",1);A(this,"isStorageFallback");this.registry=t}get encodedLength(){return 1}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.isFalse}get isFalse(){return!this.isTrue}get isTrue(){return this.valueOf()}eq(t){return this.valueOf()===(t instanceof Boolean?t.valueOf():t)}inspect(){return{outer:[this.toU8a()]}}toHex(){return u8aToHex(this.toU8a())}toHuman(){return this.toJSON()}toJSON(){return this.valueOf()}toPrimitive(){return this.toJSON()}toRawType(){return"bool"}toString(){return this.toJSON().toString()}toU8a(t){return new Uint8Array([this.valueOf()?1:0])}}function decodeU8a$5(n,e){return e[0]===0?null:new bool(n,e[0]===1)}class OptionBool extends Option{constructor(e,t){super(e,bool,isU8a(t)||isHex(t)?decodeU8a$5(e,u8aToU8a(t)):t),this.initialU8aLength=1}get encodedLength(){return 1}get isFalse(){return this.isSome?!this.value.valueOf():!1}get isTrue(){return this.isSome?this.value.valueOf():!1}inspect(){return{outer:[this.toU8a()]}}toRawType(e){return e?"bool":"Option<bool>"}toU8a(e){return e?super.toU8a(!0):this.isSome?new Uint8Array([this.isTrue?1:2]):new Uint8Array([0])}}class Range extends Tuple{constructor(t,a,o,{rangeName:i="Range"}={}){super(t,[a,a],o);A(this,"__internal__rangeName");this.__internal__rangeName=i}static with(t){return class extends Range{constructor(a,o){super(a,t,o)}}}get start(){return this[0]}get end(){return this[1]}toRawType(){return`${this.__internal__rangeName}<${this.start.toRawType()}>`}}class RangeInclusive extends Range{constructor(e,t,a){super(e,t,a,{rangeName:"RangeInclusive"})}static with(e){return class extends RangeInclusive{constructor(t,a){super(t,e,a)}}}}const MAX_LENGTH=128*1024;function decodeText(n){if(isU8a(n)){if(!n.length)return["",0];if(n instanceof Raw)return[u8aToString(n),0];const[e,t]=compactFromU8aLim(n),a=e+t;if(t>MAX_LENGTH)throw new Error(`Text: length ${t.toString()} exceeds ${MAX_LENGTH}`);if(a>n.length)throw new Error(`Text: required length less than remainder, expected at least ${a}, found ${n.length}`);return[u8aToString(n.subarray(e,a)),a]}else if(isHex(n))return[u8aToString(hexToU8a(n)),0];return[n?n.toString():"",0]}class Text extends String{constructor(t,a){const[o,i]=decodeText(a);super(o);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__override",null);this.registry=t,this.initialU8aLength=i}get encodedLength(){return this.toU8a().length}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.length===0}get length(){return super.length}eq(t){return isString(t)?this.toString()===t.toString():!1}inspect(){const t=stringToU8a(super.toString());return{outer:t.length?[compactToU8a(t.length),t]:[compactToU8a(t.length)]}}setOverride(t){this.__internal__override=t}toHex(){return u8aToHex(this.toU8a(!0))}toHuman(){return this.toJSON()}toJSON(){return this.toString()}toPrimitive(){return this.toJSON()}toRawType(){return"Text"}toString(){return this.__internal__override||super.toString()}toU8a(t){const a=stringToU8a(super.toString());return t?a:compactAddLength(a)}}class Type extends Text{constructor(e,t=""){super(e,t),this.setOverride(sanitize(this.toString()))}toRawType(){return"Type"}}function decodeU8aFixed(n,e){const t=u8aToU8a(n),a=e/8;if(!t.length)return[new Uint8Array(a),0];if(isU8a(n)?t.length<a:t.length!==a)throw new Error(`Expected input with ${a} bytes (${e} bits), found ${t.length} bytes`);return[t.subarray(0,a),a]}class U8aFixed extends Raw{constructor(e,t=new Uint8Array,a=256){const[o,i]=decodeU8aFixed(t,a);super(e,o,i)}static with(e,t){return class extends U8aFixed{constructor(a,o){super(a,o,e)}toRawType(){return t||super.toRawType()}}}toRawType(){return`[u8;${this.length}]`}}function decodeRaw(n,e,t){const a=typeToConstructor(n,e);if(isU8a(t)||isHex(t))try{const[,i]=isHex(t)?[0,u8aToU8a(t)]:t instanceof Raw?[0,t.subarray()]:compactStripLength(t);return[a,new a(n,i),t]}catch{return[a,null,t]}const o=new a(n,t);return[a,o,compactAddLength(o.toU8a())]}class WrapperKeepOpaque extends Bytes{constructor(t,a,o,{opaqueName:i="WrapperKeepOpaque"}={}){const[r,s,c]=decodeRaw(t,a,o);super(t,c);A(this,"__internal__Type");A(this,"__internal__decoded");A(this,"__internal__opaqueName");this.__internal__Type=r,this.__internal__decoded=s,this.__internal__opaqueName=i}static with(t){return class extends WrapperKeepOpaque{constructor(a,o){super(a,t,o)}}}get isDecoded(){return!!this.__internal__decoded}inspect(){return this.__internal__decoded?{inner:[this.__internal__decoded.inspect()],outer:[compactToU8a(this.length)]}:{outer:[compactToU8a(this.length),this.toU8a(!0)]}}toHuman(t,a){return this.__internal__decoded?this.__internal__decoded.toHuman(t,a):super.toHuman(t,a)}toPrimitive(t){return this.__internal__decoded?this.__internal__decoded.toPrimitive(t):super.toPrimitive(t)}toRawType(){return`${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type)||(this.__internal__decoded?this.__internal__decoded.toRawType():new this.__internal__Type(this.registry).toRawType())}>`}toString(){return this.__internal__decoded?this.__internal__decoded.toString():super.toString()}unwrap(){if(!this.__internal__decoded)throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);return this.__internal__decoded}}class WrapperOpaque extends WrapperKeepOpaque{constructor(e,t,a){super(e,t,a,{opaqueName:"WrapperOpaque"})}static with(e){return class extends WrapperOpaque{constructor(t,a){super(t,e,a)}}}get inner(){return this.unwrap()}}class Float extends Number{constructor(t,a,{bitLength:o=32}={}){super(isU8a(a)||isHex(a)?a.length===0?0:u8aToFloat(u8aToU8a(a),{bitLength:o}):a||0);A(this,"encodedLength");A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__bitLength");this.__internal__bitLength=o,this.encodedLength=o/8,this.initialU8aLength=this.encodedLength,this.registry=t}static with(t){return class extends Float{constructor(a,o){super(a,o,{bitLength:t})}}}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.valueOf()===0}eq(t){return this.valueOf()===Number(t)}inspect(){return{outer:[this.toU8a()]}}toHex(){return u8aToHex(this.toU8a())}toHuman(){return this.toString()}toJSON(){return this.toHex()}toNumber(){return this.valueOf()}toPrimitive(){return this.toNumber()}toRawType(){return`f${this.__internal__bitLength}`}toU8a(t){return floatToU8a(this,{bitLength:this.__internal__bitLength})}}function decodeJson(n){return Object.entries(n||{})}class Json extends Map{constructor(t,a){const o=decodeJson(a);super(o);A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");this.registry=t,objectProperties(this,o.map(([i])=>i),i=>this.get(i))}get encodedLength(){return 0}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return[...this.keys()].length===0}eq(t){return compareMap(this,t)}getT(t){return this.get(t)}inspect(){throw new Error("Unimplemented")}toHex(){throw new Error("Unimplemented")}toHuman(){return[...this.entries()].reduce((t,[a,o])=>(t[a]=isFunction$2(o==null?void 0:o.toHuman)?o.toHuman():o,t),{})}toJSON(){return[...this.entries()].reduce((t,[a,o])=>(t[a]=o,t),{})}toPrimitive(t){return[...this.entries()].reduce((a,[o,i])=>(a[o]=isFunction$2(i.toPrimitive)?i.toPrimitive(t):i,a),{})}toRawType(){return"Json"}toString(){return stringify(this.toJSON())}toU8a(t){throw new Error("Unimplemented")}}function encodeSet(n,e){const t=new BN(0);for(let a=0,o=e.length;a<o;a++)t.ior(bnToBn(n[e[a]]||0));return t}function decodeSetArray(n,e){const t=e.length,a=new Array(t);for(let o=0;o<t;o++){const i=e[o];if(isUndefined(n[i]))throw new Error(`Set: Invalid key '${i}' passed to Set, allowed ${Object.keys(n).join(", ")}`);a[o]=i}return a}function decodeSetNumber(n,e){const t=bnToBn(e),a=Object.keys(n),o=[];for(let r=0,s=a.length;r<s;r++){const c=a[r];t.and(bnToBn(n[c])).eq(bnToBn(n[c]))&&o.push(c)}const i=encodeSet(n,o);if(!t.eq(i))throw new Error(`Set: Mismatch decoding '${t.toString()}', computed as '${i.toString()}' with ${o.join(", ")}`);return o}function decodeSet(n,e=0,t){if(t%8!==0)throw new Error(`Expected valid bitLength, power of 8, found ${t}`);const a=t/8;if(isU8a(e))return e.length===0?[]:decodeSetNumber(n,u8aToBn(e.subarray(0,a),{isLe:!0}));if(isString(e))return decodeSet(n,u8aToU8a(e),a);if(e instanceof Set||Array.isArray(e)){const o=Array.isArray(e)?e:[...e.values()];return decodeSetArray(n,o)}return decodeSetNumber(n,e)}class CodecSet extends Set{constructor(t,a,o,i=8){super(decodeSet(a,o,i));A(this,"registry");A(this,"createdAtHash");A(this,"initialU8aLength");A(this,"isStorageFallback");A(this,"__internal__allowed");A(this,"__internal__byteLength");A(this,"add",t=>{if(this.__internal__allowed&&isUndefined(this.__internal__allowed[t]))throw new Error(`Set: Invalid key '${t}' on add`);return super.add(t),this});this.registry=t,this.__internal__allowed=a,this.__internal__byteLength=i/8}static with(t,a){var o;return o=class extends CodecSet{constructor(r,s){super(r,t,s,a)}},(()=>{const r=Object.keys(t),s=r.length,c=new Array(s);for(let d=0;d<s;d++)c[d]=`is${stringPascalCase(r[d])}`;objectProperties(o.prototype,c,(d,p,h)=>h.strings.includes(r[p]))})(),o}get encodedLength(){return this.__internal__byteLength}get hash(){return this.registry.hash(this.toU8a())}get isEmpty(){return this.size===0}get strings(){return[...super.values()]}get valueEncoded(){return encodeSet(this.__internal__allowed,this.strings)}eq(t){return Array.isArray(t)?compareArray(this.strings.sort(),t.sort()):t instanceof Set?this.eq([...t.values()]):isNumber(t)||isBn(t)?this.valueEncoded.eq(bnToBn(t)):!1}inspect(){return{outer:[this.toU8a()]}}toHex(){return u8aToHex(this.toU8a())}toHuman(){return this.toJSON()}toJSON(){return this.strings}toNumber(){return this.valueEncoded.toNumber()}toPrimitive(){return this.toJSON()}toRawType(){return stringify({_set:this.__internal__allowed})}toString(){return`[${this.strings.join(", ")}]`}toU8a(t){return bnToU8a(this.valueEncoded,{bitLength:this.__internal__byteLength*8,isLe:!0})}}class f32 extends Float.with(32){constructor(){super(...arguments);A(this,"__FloatType","f32")}}class f64 extends Float.with(64){constructor(){super(...arguments);A(this,"__FloatType","f64")}}class i8 extends Int.with(8){constructor(){super(...arguments);A(this,"__IntType","i8")}}class i16 extends Int.with(16){constructor(){super(...arguments);A(this,"__IntType","i16")}}class i32 extends Int.with(32){constructor(){super(...arguments);A(this,"__IntType","i32")}}class i64 extends Int.with(64){constructor(){super(...arguments);A(this,"__IntType","i64")}}class i128 extends Int.with(128){constructor(){super(...arguments);A(this,"__IntType","i128")}}class i256 extends Int.with(256){constructor(){super(...arguments);A(this,"__IntType","i256")}}class isize extends i32{constructor(e,t){throw super(e,t),new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.")}}let u8$1=class extends UInt.with(8){constructor(){super(...arguments);A(this,"__UIntType","u8")}},u16$1=class extends UInt.with(16){constructor(){super(...arguments);A(this,"__UIntType","u16")}},u32$2=class extends UInt.with(32){constructor(){super(...arguments);A(this,"__UIntType","u32")}},u64$1=class extends UInt.with(64){constructor(){super(...arguments);A(this,"__UIntType","u64")}};class u128 extends UInt.with(128){constructor(){super(...arguments);A(this,"__UIntType","u128")}}class u256 extends UInt.with(256){constructor(){super(...arguments);A(this,"__UIntType","u256")}}class usize extends u32$2{constructor(e,t){throw super(e,t),new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.")}}function typeSplit(n){const e=[];let t=0,a=0,o=0,i=0,r=0;for(let s=0,c=n.length;s<c;s++)switch(n[s]){case",":{t||a||o||i||(e.push(n.substring(r,s).trim()),r=s+1);break}case"<":t++;break;case">":t--;break;case"[":a++;break;case"]":a--;break;case"{":o++;break;case"}":o--;break;case"(":i++;break;case")":i--;break}if(t||a||o||i)throw new Error(`Invalid definition (missing terminators) found in ${n}`);return e.push(n.substring(r,n.length).trim()),e}const KNOWN_INTERNALS=["_alias","_fallback"];function getTypeString(n){return isString(n)?n.toString():stringify(n)}function isRustEnum(n){const e=Object.values(n);if(e.some(t=>isNumber(t))){if(!e.every(t=>isNumber(t)&&t>=0&&t<=255))throw new Error("Invalid number-indexed enum definition");return!1}return!0}function _decodeEnum(n,e,t,a){return n.info=TypeDefInfo.Enum,n.fallbackType=a,Array.isArray(e)?n.sub=e.map((o,i)=>({index:i,info:TypeDefInfo.Plain,name:o,type:"Null"})):isRustEnum(e)?n.sub=Object.entries(e).map(([o,i],r)=>objectSpread({},getTypeDef(getTypeString(i||"Null"),{name:o},t),{index:r})):n.sub=Object.entries(e).map(([o,i])=>({index:i,info:TypeDefInfo.Plain,name:o,type:"Null"})),n}function _decodeSet(n,e,t){return n.info=TypeDefInfo.Set,n.fallbackType=t,n.length=e._bitLength,n.sub=Object.entries(e).filter(([a])=>!a.startsWith("_")).map(([a,o])=>({index:o,info:TypeDefInfo.Plain,name:a,type:"Null"})),n}function _decodeStruct(n,e,t,a){const o=JSON.parse(e),i=Object.keys(o);return o._enum?_decodeEnum(n,o._enum,a,o._fallback):o._set?_decodeSet(n,o._set,o._fallback):(n.alias=o._alias?new Map(Object.entries(o._alias)):void 0,n.fallbackType=o._fallback,n.sub=i.filter(r=>!KNOWN_INTERNALS.includes(r)).map(r=>getTypeDef(getTypeString(o[r]),{name:r},a)),n)}function _decodeFixedVec(n,e,t,a){const o=e.length-1;let i=-1,r=0;for(let h=1;h<o&&i===-1;h++)switch(e[h]){case";":{r===0&&(i=h);break}case"[":case"(":case"<":r++;break;case"]":case")":case">":r--;break}if(i===-1)throw new Error(`${e}: Unable to extract location of ';'`);const s=e.substring(1,i),[c,d]=e.substring(i+1,o).split(";"),p=parseInt(c.trim(),10);if(p>2048)throw new Error(`${e}: Only support for [Type; <length>], where length <= 2048`);return n.displayName=d,n.length=p,n.sub=getTypeDef(s,{},a),n}function _decodeTuple(n,e,t,a){return n.sub=t.length===0?[]:typeSplit(t).map(o=>getTypeDef(o,{},a)),n}function _decodeAnyInt(n,e,t,a){const[o,i]=e.substring(a.length+1,e.length-1).split(","),r=parseInt(o.trim(),10);if(r>8192||r%8)throw new Error(`${e}: Only support for ${a}<bitLength>, where length <= 8192 and a power of 8, found ${r}`);return n.displayName=i,n.length=r,n}function _decodeInt(n,e,t){return _decodeAnyInt(n,e,t,"Int")}function _decodeUInt(n,e,t){return _decodeAnyInt(n,e,t,"UInt")}function _decodeDoNotConstruct(n,e,t){return n.displayName=e.substring(15,e.length-1),n}function hasWrapper(n,[e,t]){return n.startsWith(e)&&n.slice(-1*t.length)===t}const nestedExtraction=[["[","]",TypeDefInfo.VecFixed,_decodeFixedVec],["{","}",TypeDefInfo.Struct,_decodeStruct],["(",")",TypeDefInfo.Tuple,_decodeTuple],["BTreeMap<",">",TypeDefInfo.BTreeMap,_decodeTuple],["HashMap<",">",TypeDefInfo.HashMap,_decodeTuple],["Int<",">",TypeDefInfo.Int,_decodeInt],["Result<",">",TypeDefInfo.Result,_decodeTuple],["UInt<",">",TypeDefInfo.UInt,_decodeUInt],["DoNotConstruct<",">",TypeDefInfo.DoNotConstruct,_decodeDoNotConstruct]],wrappedExtraction=[["BTreeSet<",">",TypeDefInfo.BTreeSet],["Compact<",">",TypeDefInfo.Compact],["Linkage<",">",TypeDefInfo.Linkage],["Opaque<",">",TypeDefInfo.WrapperOpaque],["Option<",">",TypeDefInfo.Option],["Range<",">",TypeDefInfo.Range],["RangeInclusive<",">",TypeDefInfo.RangeInclusive],["Vec<",">",TypeDefInfo.Vec],["WrapperKeepOpaque<",">",TypeDefInfo.WrapperKeepOpaque],["WrapperOpaque<",">",TypeDefInfo.WrapperOpaque]];function extractSubType(n,[e,t]){return n.substring(e.length,n.length-t.length)}function getTypeDef(n,{displayName:e,name:t}={},a=0){const o=sanitize(n),i={displayName:e,info:TypeDefInfo.Plain,name:t,type:o};if(++a>64)throw new Error("getTypeDef: Maximum nested limit reached");const r=nestedExtraction.find(c=>hasWrapper(o,c));if(r)return i.info=r[2],r[3](i,o,extractSubType(o,r),a);const s=wrappedExtraction.find(c=>hasWrapper(o,c));return s&&(i.info=s[2],i.sub=getTypeDef(extractSubType(o,s),{},a)),i}function getTypeDefType({lookupName:n,type:e}){return n||e}function getSubDefArray(n){if(!Array.isArray(n.sub))throw new Error(`Expected subtype as TypeDef[] in ${stringify(n)}`);return n.sub}function getSubDef(n){if(!n.sub||Array.isArray(n.sub))throw new Error(`Expected subtype as TypeDef in ${stringify(n)}`);return n.sub}function getSubType(n){return getTypeDefType(getSubDef(n))}function getTypeClassMap(n){const e=getSubDefArray(n),t={};for(let a=0,o=e.length;a<o;a++){const i=e[a];if(!i.name)throw new Error(`No name found in definition ${stringify(i)}`);t[i.name]=getTypeDefType(i)}return t}function getTypeClassArray(n){return getSubDefArray(n).map(getTypeDefType)}function createInt(n,{displayName:e,length:t}){if(!isNumber(t))throw new Error(`Expected bitLength information for ${e||n.constructor.name}<bitLength>`);return n.with(t,e)}function createHashMap(n,e){const[t,a]=getTypeClassArray(e);return n.with(t,a)}function createWithSub(n,e){return n.with(getSubType(e))}const infoMapping={[TypeDefInfo.BTreeMap]:(n,e)=>createHashMap(BTreeMap,e),[TypeDefInfo.BTreeSet]:(n,e)=>createWithSub(BTreeSet,e),[TypeDefInfo.Compact]:(n,e)=>createWithSub(Compact,e),[TypeDefInfo.DoNotConstruct]:(n,e)=>DoNotConstruct.with(e.displayName||e.type),[TypeDefInfo.Enum]:(n,e)=>{const t=getSubDefArray(e);return Enum.with(t.every(({type:a})=>a==="Null")?t.reduce((a,{index:o,name:i},r)=>{if(!i)throw new Error("No name found in sub definition");return a[i]=o||r,a},{}):getTypeClassMap(e))},[TypeDefInfo.HashMap]:(n,e)=>createHashMap(HashMap,e),[TypeDefInfo.Int]:(n,e)=>createInt(Int,e),[TypeDefInfo.Linkage]:(n,e)=>{const t=`Option<${getSubType(e)}>`,a=Struct.with({previous:t,next:t});return a.prototype.toRawType=function(){return`Linkage<${this.next.toRawType(!0)}>`},a},[TypeDefInfo.Null]:(n,e)=>Null,[TypeDefInfo.Option]:(n,e)=>{if(!e.sub||Array.isArray(e.sub))throw new Error("Expected type information for Option");return createWithSub(Option,e)},[TypeDefInfo.Plain]:(n,e)=>n.getOrUnknown(e.type),[TypeDefInfo.Range]:(n,e)=>createWithSub(Range,e),[TypeDefInfo.RangeInclusive]:(n,e)=>createWithSub(RangeInclusive,e),[TypeDefInfo.Result]:(n,e)=>{const[t,a]=getTypeClassArray(e);return Result.with({Err:a,Ok:t})},[TypeDefInfo.Set]:(n,e)=>CodecSet.with(getSubDefArray(e).reduce((t,{index:a,name:o})=>{if(!o||!isNumber(a))throw new Error("No name found in sub definition");return t[o]=a,t},{}),e.length),[TypeDefInfo.Si]:(n,e)=>getTypeClass(n,n.lookup.getTypeDef(e.type)),[TypeDefInfo.Struct]:(n,e)=>Struct.with(getTypeClassMap(e),e.alias),[TypeDefInfo.Tuple]:(n,e)=>Tuple.with(getTypeClassArray(e)),[TypeDefInfo.UInt]:(n,e)=>createInt(UInt,e),[TypeDefInfo.Vec]:(n,{sub:e})=>{if(!e||Array.isArray(e))throw new Error("Expected type information for vector");return e.type==="u8"?Bytes:Vec.with(getTypeDefType(e))},[TypeDefInfo.VecFixed]:(n,{displayName:e,length:t,sub:a})=>{if(!isNumber(t)||!a||Array.isArray(a))throw new Error("Expected length & type information for fixed vector");return a.type==="u8"?U8aFixed.with(t*8,e):VecFixed.with(getTypeDefType(a),t)},[TypeDefInfo.WrapperKeepOpaque]:(n,e)=>createWithSub(WrapperKeepOpaque,e),[TypeDefInfo.WrapperOpaque]:(n,e)=>createWithSub(WrapperOpaque,e)};function constructTypeClass(n,e){try{const t=infoMapping[e.info](n,e);if(!t)throw new Error("No class created");return!t.__fallbackType&&e.fallbackType&&(t.__fallbackType=e.fallbackType),t}catch(t){throw new Error(`Unable to construct class from ${stringify(e)}: ${t.message}`)}}function getTypeClass(n,e){return n.getUnsafe(e.type,!1,e)}function createClassUnsafe(n,e){return n.getUnsafe(e)||getTypeClass(n,n.isLookupType(e)?n.lookup.getTypeDef(e):getTypeDef(e))}function checkInstance(n,e){const t=n.toU8a(),a=n.toRawType();if(!(u8aEq(t,e)||["Bytes","Text","Type"].includes(a)&&e.length===n.length||n.isEmpty&&e.every(i=>!i)))throw new Error(`${a}:: Decoded input doesn't match input, received ${u8aToHex(e,512)} (${e.length} bytes), created ${u8aToHex(t,512)} (${t.length} bytes)`)}function checkPedantic(n,[e]){isU8a(e)?checkInstance(n,e):isHex(e)&&checkInstance(n,u8aToU8a(e))}function initType(n,e,t=[],{blockHash:a,isFallback:o,isOptional:i,isPedantic:r}={}){const s=new(i?Option.with(e):e)(n,...t);return r&&checkPedantic(s,t),a&&(s.createdAtHash=createTypeUnsafe(n,"BlockHash",[a])),o&&(s.isStorageFallback=!0),s}function createTypeUnsafe(n,e,t=[],a={}){let o=null,i=null;try{return o=createClassUnsafe(n,e),initType(n,o,t,a)}catch(r){i=new Error(`createType(${e}):: ${r.message}`)}if(o!=null&&o.__fallbackType)try{return o=createClassUnsafe(n,o.__fallbackType),initType(n,o,t,a)}catch{}throw i}const stringIdentity=n=>n.toString(),INFO_WRAP=["BTreeMap","BTreeSet","Compact","HashMap","Option","Result","Vec"];function paramsNotation(n,e,t=stringIdentity){return`${n}${e?`<${(Array.isArray(e)?e:[e]).map(t).join(", ")}>`:""}`}function encodeWithParams(n,e,t){const{info:a,sub:o}=e;switch(a){case TypeDefInfo.BTreeMap:case TypeDefInfo.BTreeSet:case TypeDefInfo.Compact:case TypeDefInfo.HashMap:case TypeDefInfo.Linkage:case TypeDefInfo.Option:case TypeDefInfo.Range:case TypeDefInfo.RangeInclusive:case TypeDefInfo.Result:case TypeDefInfo.Vec:case TypeDefInfo.WrapperKeepOpaque:case TypeDefInfo.WrapperOpaque:return paramsNotation(t,o,i=>encodeTypeDef(n,i))}throw new Error(`Unable to encode ${stringify(e)} with params`)}function encodeSubTypes(n,e,t,a){const o=e.map(({name:r})=>r);if(!o.every(r=>!!r))throw new Error(`Subtypes does not have consistent names, ${o.join(", ")}`);const i=objectSpread({},a);for(let r=0,s=e.length;r<s;r++){const c=e[r];if(!c.name)throw new Error(`No name found in ${stringify(c)}`);i[c.name]=encodeTypeDef(n,c)}return stringify(t?{_enum:i}:i)}const encoders={[TypeDefInfo.BTreeMap]:(n,e)=>encodeWithParams(n,e,"BTreeMap"),[TypeDefInfo.BTreeSet]:(n,e)=>encodeWithParams(n,e,"BTreeSet"),[TypeDefInfo.Compact]:(n,e)=>encodeWithParams(n,e,"Compact"),[TypeDefInfo.DoNotConstruct]:(n,{displayName:e,lookupIndex:t,lookupName:a})=>`DoNotConstruct<${a||e||(isUndefined(t)?"Unknown":n.createLookupType(t))}>`,[TypeDefInfo.Enum]:(n,{sub:e})=>{if(!Array.isArray(e))throw new Error("Unable to encode Enum type");return e.every(({type:t})=>t==="Null")?stringify({_enum:e.map(({name:t},a)=>`${t||`Empty${a}`}`)}):encodeSubTypes(n,e,!0)},[TypeDefInfo.HashMap]:(n,e)=>encodeWithParams(n,e,"HashMap"),[TypeDefInfo.Int]:(n,{length:e=32})=>`Int<${e}>`,[TypeDefInfo.Linkage]:(n,e)=>encodeWithParams(n,e,"Linkage"),[TypeDefInfo.Null]:(n,e)=>"Null",[TypeDefInfo.Option]:(n,e)=>encodeWithParams(n,e,"Option"),[TypeDefInfo.Plain]:(n,{displayName:e,type:t})=>e||t,[TypeDefInfo.Range]:(n,e)=>encodeWithParams(n,e,"Range"),[TypeDefInfo.RangeInclusive]:(n,e)=>encodeWithParams(n,e,"RangeInclusive"),[TypeDefInfo.Result]:(n,e)=>encodeWithParams(n,e,"Result"),[TypeDefInfo.Set]:(n,{length:e=8,sub:t})=>{if(!Array.isArray(t))throw new Error("Unable to encode Set type");return stringify({_set:t.reduce((a,{index:o,name:i},r)=>objectSpread(a,{[`${i||`Unknown${o||r}`}`]:o||r}),{_bitLength:e||8})})},[TypeDefInfo.Si]:(n,{lookupName:e,type:t})=>e||t,[TypeDefInfo.Struct]:(n,{alias:e,sub:t})=>{if(!Array.isArray(t))throw new Error("Unable to encode Struct type");return encodeSubTypes(n,t,!1,e?{_alias:[...e.entries()].reduce((a,[o,i])=>objectSpread(a,{[o]:i}),{})}:{})},[TypeDefInfo.Tuple]:(n,{sub:e})=>{if(!Array.isArray(e))throw new Error("Unable to encode Tuple type");return`(${e.map(t=>encodeTypeDef(n,t)).join(",")})`},[TypeDefInfo.UInt]:(n,{length:e=32})=>`UInt<${e}>`,[TypeDefInfo.Vec]:(n,e)=>encodeWithParams(n,e,"Vec"),[TypeDefInfo.VecFixed]:(n,{length:e,sub:t})=>{if(!isNumber(e)||!t||Array.isArray(t))throw new Error("Unable to encode VecFixed type");return`[${t.type};${e}]`},[TypeDefInfo.WrapperKeepOpaque]:(n,e)=>encodeWithParams(n,e,"WrapperKeepOpaque"),[TypeDefInfo.WrapperOpaque]:(n,e)=>encodeWithParams(n,e,"WrapperOpaque")};function encodeType(n,e,t=!0){return t&&e.lookupName?e.lookupName:encoders[e.info](n,e)}function encodeTypeDef(n,e){return e.displayName&&!INFO_WRAP.some(t=>e.displayName===t)?e.displayName:encodeType(n,e)}function withTypeString(n,e){return objectSpread({},e,{type:encodeType(n,e,!1)})}const XCM_MAPPINGS=["AssetInstance","Fungibility","Junction","Junctions","MultiAsset","MultiAssetFilter","MultiLocation","Response","WildFungibility","WildMultiAsset","Xcm","XcmError","XcmOrder"];function mapXcmTypes(n){return XCM_MAPPINGS.reduce((e,t)=>objectSpread(e,{[t]:`${t}${n}`}),{})}const v0={FungibilityV0:"FungibilityV1",WildFungibilityV0:"WildFungibilityV1",AssetInstanceV0:{_enum:{Undefined:"Null",Index8:"u8",Index16:"Compact<u16>",Index32:"Compact<u32>",Index64:"Compact<u64>",Index128:"Compact<u128>",Array4:"[u8; 4]",Array8:"[u8; 8]",Array16:"[u8; 16]",Array32:"[u8; 32]",Blob:"Vec<u8>"}},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:{network:"NetworkId",id:"AccountId"},AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},AccountKey20:{network:"NetworkId",key:"[u8; 20]"},PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:{id:"BodyId",part:"BodyPart"}}},MultiAssetV0:{_enum:{None:"Null",All:"Null",AllFungible:"Null",AllNonFungible:"Null",AllAbstractFungible:"Vec<u8>",AllAbstractNonFungible:"Vec<u8>",AllConcreteFungible:"MultiLocationV0",AllConcreteNonFungible:"MultiLocationV0",AbstractFungible:{id:"Vec<u8>",instance:"Compact<u128>"},AbstractNonFungible:{class:"Vec<u8>",instance:"AssetInstanceV0"},ConcreteFungible:{id:"MultiLocationV0",amount:"Compact<u128>"},ConcreteNonFungible:{class:"MultiLocationV0",instance:"AssetInstanceV0"}}},MultiLocationV0:{_enum:{Here:"Null",X1:"JunctionV0",X2:"(JunctionV0, JunctionV0)",X3:"(JunctionV0, JunctionV0, JunctionV0)",X4:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X5:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X6:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X7:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X8:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"}},OriginKindV0:{_enum:["Native","SovereignAccount","Superuser","Xcm"]},ResponseV0:{_enum:{Assets:"Vec<MultiAssetV0>"}},XcmV0:{_enum:{WithdrawAsset:{assets:"Vec<MultiAssetV0>",effects:"Vec<XcmOrderV0>"},ReserveAssetDeposit:{assets:"Vec<MultiAssetV0>",effects:"Vec<XcmOrderV0>"},ReceiveTeleportedAsset:{assets:"Vec<MultiAssetV0>",effects:"Vec<XcmOrderV0>"},QueryResponse:{queryId:"Compact<u64>",response:"ResponseV0"},TransferAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0"},TransferReserveAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},Transact:{originType:"XcmOriginKind",requireWeightAtMost:"u64",call:"DoubleEncodedCall"},HrmpNewChannelOpenRequest:{sender:"Compact<u32>",maxMessageSize:"Compact<u32>",maxCapacity:"Compact<u32>"},HrmpChannelAccepted:{recipient:"Compact<u32>"},HrmpChannelClosing:{initiator:"Compact<u32>",sender:"Compact<u32>",recipient:"Compact<u32>"},RelayedFrom:{who:"MultiLocationV0",message:"XcmV0"}}},XcmErrorV0:{_enum:{Undefined:"Null",Overflow:"Null",Unimplemented:"Null",UnhandledXcmVersion:"Null",UnhandledXcmMessage:"Null",UnhandledEffect:"Null",EscalationOfPrivilege:"Null",UntrustedReserveLocation:"Null",UntrustedTeleportLocation:"Null",DestinationBufferOverflow:"Null",SendFailed:"Null",CannotReachDestination:"(MultiLocation, Xcm)",MultiLocationFull:"Null",FailedToDecode:"Null",BadOrigin:"Null",ExceedsMaxMessageSize:"Null",FailedToTransactAsset:"Null",WeightLimitReached:"Weight",Wildcard:"Null",TooMuchWeightRequired:"Null",NotHoldingFees:"Null",WeightNotComputable:"Null",Barrier:"Null",NotWithdrawable:"Null",LocationCannotHold:"Null",TooExpensive:"Null",AssetNotFound:"Null",RecursionLimitReached:"Null"}},XcmOrderV0:{_enum:{Null:"Null",DepositAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0"},DepositReserveAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},ExchangeAsset:{give:"Vec<MultiAssetV0>",receive:"Vec<MultiAssetV0>"},InitiateReserveWithdraw:{assets:"Vec<MultiAssetV0>",reserve:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},InitiateTeleport:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},QueryHolding:{queryId:"Compact<u64>",dest:"MultiLocationV0",assets:"Vec<MultiAssetV0>"},BuyExecution:{fees:"MultiAssetV0",weight:"u64",debt:"u64",haltOnError:"bool",xcm:"Vec<XcmV0>"}}}},v1={AssetInstanceV1:{_enum:{Undefined:"Null",Index:"Compact<u128>",Array4:"[u8; 4]",Array8:"[u8; 8]",Array16:"[u8; 16]",Array32:"[u8; 32]",Blob:"Bytes"}},FungibilityV1:{_enum:{Fungible:"Compact<u128>",NonFungible:"AssetInstanceV1"}},JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:{network:"NetworkId",id:"AccountId"},AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},AccountKey20:{network:"NetworkId",key:"[u8; 20]"},PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:{id:"BodyId",part:"BodyPart"}}},JunctionsV1:{_enum:{Here:"Null",X1:"JunctionV1",X2:"(JunctionV1, JunctionV1)",X3:"(JunctionV1, JunctionV1, JunctionV1)",X4:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X5:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X6:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X7:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X8:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"}},MultiAssetsV1:"Vec<MultiAssetV1>",MultiAssetV1:{id:"XcmAssetId",fungibility:"FungibilityV1"},MultiAssetFilterV1:{_enum:{Definite:"MultiAssetsV1",Wild:"WildMultiAssetV1"}},MultiLocationV1:{parents:"u8",interior:"JunctionsV1"},OriginKindV1:"OriginKindV0",ResponseV1:{_enum:{Assets:"MultiAssetsV1"}},WildFungibilityV1:{_enum:["Fungible","NonFungible"]},WildMultiAssetV1:{_enum:{All:"Null",AllOf:{id:"XcmAssetId",fungibility:"WildFungibilityV1"}}},XcmV1:{_enum:{WithdrawAsset:{assets:"MultiAssetsV1",effects:"Vec<XcmOrderV1>"},ReserveAssetDeposit:{assets:"MultiAssetsV1",effects:"Vec<XcmOrderV1>"},ReceiveTeleportedAsset:{assets:"MultiAssetsV1",effects:"Vec<XcmOrderV1>"},QueryResponse:{queryId:"Compact<u64>",response:"ResponseV1"},TransferAsset:{assets:"MultiAssetsV1",dest:"MultiLocationV1"},TransferReserveAsset:{assets:"MultiAssetsV1",dest:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},Transact:{originType:"XcmOriginKind",requireWeightAtMost:"u64",call:"DoubleEncodedCall"},HrmpNewChannelOpenRequest:{sender:"Compact<u32>",maxMessageSize:"Compact<u32>",maxCapacity:"Compact<u32>"},HrmpChannelAccepted:{recipient:"Compact<u32>"},HrmpChannelClosing:{initiator:"Compact<u32>",sender:"Compact<u32>",recipient:"Compact<u32>"},RelayedFrom:{who:"MultiLocationV1",message:"XcmV1"}}},XcmErrorV1:{_enum:{Undefined:"Null",Overflow:"Null",Unimplemented:"Null",UnhandledXcmVersion:"Null",UnhandledXcmMessage:"Null",UnhandledEffect:"Null",EscalationOfPrivilege:"Null",UntrustedReserveLocation:"Null",UntrustedTeleportLocation:"Null",DestinationBufferOverflow:"Null",SendFailed:"Null",CannotReachDestination:"(MultiLocationV1, XcmV1)",MultiLocationFull:"Null",FailedToDecode:"Null",BadOrigin:"Null",ExceedsMaxMessageSize:"Null",FailedToTransactAsset:"Null",WeightLimitReached:"Weight",Wildcard:"Null",TooMuchWeightRequired:"Null",NotHoldingFees:"Null",WeightNotComputable:"Null",Barrier:"Null",NotWithdrawable:"Null",LocationCannotHold:"Null",TooExpensive:"Null",AssetNotFound:"Null",DestinationUnsupported:"Null",RecursionLimitReached:"Null"}},XcmOrderV1:{_enum:{Noop:"Null",DepositAsset:{assets:"MultiAssetFilterV1",maxAssets:"u32",beneficiary:"MultiLocationV1"},DepositReserveAsset:{assets:"MultiAssetFilterV1",maxAssets:"u32",dest:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},ExchangeAsset:{give:"MultiAssetFilterV1",receive:"MultiAssetsV1"},InitiateReserveWithdraw:{assets:"MultiAssetFilterV1",reserve:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},InitiateTeleport:{assets:"MultiAssetFilterV1",dest:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},QueryHolding:{queryId:"Compact<u64>",dest:"MultiLocationV1",assets:"MultiAssetFilterV1"},BuyExecution:{fees:"MultiAssetV1",weight:"u64",debt:"u64",haltOnError:"bool",instructions:"Vec<XcmV1>"}}}},v2={AssetInstanceV2:"AssetInstanceV1",FungibilityV2:"FungibilityV1",JunctionV2:"JunctionV1",JunctionsV2:"JunctionsV1",MultiAssetsV2:"MultiAssetsV1",MultiAssetV2:"MultiAssetV1",MultiAssetFilterV2:"MultiAssetFilterV1",MultiLocationV2:"MultiLocationV1",OriginKindV2:"OriginKindV1",WildFungibilityV2:"WildFungibilityV1",ResponseV2:{_enum:{Null:"Null",Assets:"MultiAssetsV2",ExecutionResult:"ResponseV2Result"}},ResponseV2Error:"(u32, XcmErrorV2)",ResponseV2Result:"Result<Null, ResponseV2Error>",WeightLimitV2:{_enum:{Unlimited:"Null",Limited:"Compact<u64>"}},InstructionV2:{_enum:{WithdrawAsset:"MultiAssetsV2",ReserveAssetDeposited:"MultiAssetsV2",ReceiveTeleportedAsset:"MultiAssetsV2",QueryResponse:{queryId:"Compact<u64>",response:"ResponseV2",maxWeight:"Compact<u64>"},TransferAsset:{assets:"MultiAssetsV2",beneficiary:"MultiLocationV2"},TransferReserveAsset:{assets:"MultiAssetsV2",dest:"MultiLocationV2",xcm:"XcmV2"},Transact:{originType:"OriginKindV2",requireWeightAtMost:"u64",call:"DoubleEncodedCall"},HrmpNewChannelOpenRequest:{sender:"Compact<u32>",maxMessageSize:"Compact<u32>",maxCapacity:"Compact<u32>"},HrmpChannelAccepted:{recipient:"Compact<u32>"},HrmpChannelClosing:{initiator:"Compact<u32>",sender:"Compact<u32>",recipient:"Compact<u32>"},ClearOrigin:"Null",DescendOrigin:"InteriorMultiLocation",ReportError:{queryId:"Compact<u64>",dest:"MultiLocationV2",maxResponseWeight:"Compact<u64>"},DepositAsset:{assets:"MultiAssetFilterV2",maxAssets:"u32",beneficiary:"MultiLocationV2"},DepositReserveAsset:{assets:"MultiAssetFilterV2",maxAssets:"u32",dest:"MultiLocationV2",xcm:"XcmV2"},ExchangeAsset:{give:"MultiAssetFilterV2",receive:"MultiAssetsV2"},InitiateReserveWithdraw:{assets:"MultiAssetFilterV2",reserve:"MultiLocationV2",xcm:"XcmV2"},InitiateTeleport:{assets:"MultiAssetFilterV2",dest:"MultiLocationV2",xcm:"XcmV2"},QueryHolding:{query_id:"Compact<u64>",dest:"MultiLocationV2",assets:"MultiAssetFilterV2",maxResponse_Weight:"Compact<u64>"},BuyExecution:{fees:"MultiAssetV2",weightLimit:"WeightLimitV2"},RefundSurplus:"Null",SetErrorHandler:"XcmV2",SetAppendix:"XcmV2",ClearError:"Null",ClaimAsset:{assets:"MultiAssetsV2",ticket:"MultiLocationV2"},Trap:"u64"}},WildMultiAssetV2:"WildMultiAssetV1",XcmV2:"Vec<InstructionV2>",XcmErrorV2:{_enum:{Undefined:"Null",Overflow:"Null",Unimplemented:"Null",UnhandledXcmVersion:"Null",UnhandledXcmMessage:"Null",UnhandledEffect:"Null",EscalationOfPrivilege:"Null",UntrustedReserveLocation:"Null",UntrustedTeleportLocation:"Null",DestinationBufferOverflow:"Null",MultiLocationFull:"Null",MultiLocationNotInvertible:"Null",FailedToDecode:"Null",BadOrigin:"Null",ExceedsMaxMessageSize:"Null",FailedToTransactAsset:"Null",WeightLimitReached:"Weight",Wildcard:"Null",TooMuchWeightRequired:"Null",NotHoldingFees:"Null",WeightNotComputable:"Null",Barrier:"Null",NotWithdrawable:"Null",LocationCannotHold:"Null",TooExpensive:"Null",AssetNotFound:"Null",DestinationUnsupported:"Null",RecursionLimitReached:"Null",Transport:"Null",Unroutable:"Null",UnknownWeightRequired:"Null",Trap:"u64",UnknownClaim:"Null",InvalidLocation:"Null"}},XcmOrderV2:"XcmOrderV1"},XCM_LATEST="V2",xcm={XcmOrigin:{_enum:{Xcm:"MultiLocation"}},XcmpMessageFormat:{_enum:["ConcatenatedVersionedXcm","ConcatenatedEncodedBlob","Signals"]},XcmAssetId:{_enum:{Concrete:"MultiLocation",Abstract:"Bytes"}},InboundStatus:{_enum:["Ok","Suspended"]},OutboundStatus:{_enum:["Ok","Suspended"]},MultiAssets:"Vec<MultiAsset>"},location={BodyId:{_enum:{Unit:"Null",Named:"Vec<u8>",Index:"Compact<u32>",Executive:"Null",Technical:"Null",Legislative:"Null",Judicial:"Null"}},BodyPart:{_enum:{Voice:"Null",Members:"Compact<u32>",Fraction:{nom:"Compact<u32>",denom:"Compact<u32>"},AtLeastProportion:{nom:"Compact<u32>",denom:"Compact<u32>"},MoreThanProportion:{nom:"Compact<u32>",denom:"Compact<u32>"}}},InteriorMultiLocation:"Junctions",NetworkId:{_enum:{Any:"Null",Named:"Vec<u8>",Polkadot:"Null",Kusama:"Null"}}},definitions$k={rpc:{},types:{...location,...xcm,...v0,...v1,...v2,...mapXcmTypes(XCM_LATEST),DoubleEncodedCall:{encoded:"Vec<u8>"},XcmOriginKind:{_enum:["Native","SovereignAccount","Superuser","Xcm"]},Outcome:{_enum:{Complete:"Weight",Incomplete:"(Weight, XcmErrorV0)",Error:"XcmErrorV0"}},QueryId:"u64",QueryStatus:{_enum:{Pending:{responder:"VersionedMultiLocation",maybeNotify:"Option<(u8, u8)>",timeout:"BlockNumber"},Ready:{response:"VersionedResponse",at:"BlockNumber"}}},QueueConfigData:{suspendThreshold:"u32",dropThreshold:"u32",resumeThreshold:"u32",thresholdWeight:"Weight",weightRestrictDecay:"Weight"},VersionMigrationStage:{_enum:{MigrateSupportedVersion:"Null",MigrateVersionNotifiers:"Null",NotifyCurrentTargets:"Option<Bytes>",MigrateAndNotifyOldTargets:"Null"}},VersionedMultiAsset:{_enum:{V0:"MultiAssetV0",V1:"MultiAssetV1",V2:"MultiAssetV2"}},VersionedMultiAssets:{_enum:{V0:"Vec<MultiAssetV0>",V1:"MultiAssetsV1",V2:"MultiAssetsV2"}},VersionedMultiLocation:{_enum:{V0:"MultiLocationV0",V1:"MultiLocationV1",V2:"MultiLocationV2"}},VersionedResponse:{V0:"ResponseV0",V1:"ResponseV1",V2:"ResponseV2"},VersionedXcm:{_enum:{V0:"XcmV0",V1:"XcmV1",V2:"XcmV2"}},XcmVersion:"u32"}},runtime$7={XcmPaymentApi:[{methods:{query_acceptable_payment_assets:{description:"The API to query acceptable payment assets",params:[{name:"version",type:"u32"}],type:"Result<Vec<XcmVersionedAssetId>, XcmPaymentApiError>"},query_weight_to_asset_fee:{description:"",params:[{name:"weight",type:"WeightV2"},{name:"asset",type:"XcmVersionedAssetId"}],type:"Result<u128, XcmPaymentApiError>"},query_xcm_weight:{description:"",params:[{name:"message",type:"XcmVersionedXcm"}],type:"Result<WeightV2, XcmPaymentApiError>"}},version:1}]},definitions$j={rpc:{},runtime:runtime$7,types:{XcmPaymentApiError:{_enum:["Unimplemented","VersionedConversionFailed","WeightNotComputable","UnhandledXcmVersion","AssetNotFound"]}}},runtime$6={LocationToAccountApi:[{methods:{convert_location:{description:"Converts `Location` to `AccountId`",params:[{name:"location",type:"XcmVersionedLocation"}],type:"Result<AccountId, Error>"}},version:1}]},definitions$i={rpc:{},runtime:runtime$6,types:{Error:{_enum:["Unsupported","VersionedConversionFailed"]}}},layout={ContractCryptoHasher:{_enum:["Blake2x256","Sha2x256","Keccak256"]},ContractDiscriminant:"u32",ContractLayoutArray:{offset:"ContractLayoutKey",len:"u32",cellsPerElem:"u64",layout:"ContractStorageLayout"},ContractLayoutCell:{key:"ContractLayoutKey",ty:"SiLookupTypeId"},ContractLayoutEnum:{dispatchKey:"ContractLayoutKey",variants:"BTreeMap<ContractDiscriminant, ContractLayoutStruct>"},ContractLayoutHash:{offset:"ContractLayoutKey",strategy:"ContractLayoutHashingStrategy",layout:"ContractStorageLayout"},ContractLayoutHashingStrategy:{hasher:"ContractCryptoHasher",postfix:"Vec<u8>",prefix:"Vec<u8>"},ContractLayoutKey:"[u8; 32]",ContractLayoutStruct:{fields:"Vec<ContractLayoutStructField>"},ContractLayoutStructField:{layout:"ContractStorageLayout",name:"Text"},ContractStorageLayout:{_enum:{Cell:"ContractLayoutCell",Hash:"ContractLayoutHash",Array:"ContractLayoutArray",Struct:"ContractLayoutStruct",Enum:"ContractLayoutEnum"}}},spec={ContractConstructorSpecV0:{name:"Text",selector:"ContractSelector",args:"Vec<ContractMessageParamSpecV0>",docs:"Vec<Text>"},ContractConstructorSpecV1:{name:"Vec<Text>",selector:"ContractSelector",args:"Vec<ContractMessageParamSpecV0>",docs:"Vec<Text>"},ContractConstructorSpecV2:{label:"Text",selector:"ContractSelector",args:"Vec<ContractMessageParamSpecV2>",docs:"Vec<Text>"},ContractConstructorSpecV3:{label:"Text",selector:"ContractSelector",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",docs:"Vec<Text>"},ContractConstructorSpecV4:{label:"Text",selector:"ContractSelector",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",docs:"Vec<Text>",default:"bool",returnType:"Option<ContractTypeSpec>"},ContractContractSpecV0:{constructors:"Vec<ContractConstructorSpecV0>",messages:"Vec<ContractMessageSpecV0>",events:"Vec<ContractEventSpecV0>",docs:"Vec<Text>"},ContractContractSpecV1:{constructors:"Vec<ContractConstructorSpecV1>",messages:"Vec<ContractMessageSpecV1>",events:"Vec<ContractEventSpecV1>",docs:"Vec<Text>"},ContractContractSpecV2:{constructors:"Vec<ContractConstructorSpecV2>",messages:"Vec<ContractMessageSpecV2>",events:"Vec<ContractEventSpecV2>",docs:"Vec<Text>"},ContractContractSpecV3:{constructors:"Vec<ContractConstructorSpecV3>",messages:"Vec<ContractMessageSpecV2>",events:"Vec<ContractEventSpecV2>",docs:"Vec<Text>"},ContractContractSpecV4:{constructors:"Vec<ContractConstructorSpecV4>",messages:"Vec<ContractMessageSpecV3>",events:"Vec<ContractEventSpecV2>",docs:"Vec<Text>",environment:"ContractEnvironmentV4"},ContractContractSpecV5:{constructors:"Vec<ContractConstructorSpecV4>",messages:"Vec<ContractMessageSpecV3>",events:"Vec<ContractEventSpecV3>",docs:"Vec<Text>",environment:"ContractEnvironmentV4"},ContractDisplayName:"SiPath",ContractEventParamSpecV0:{name:"Text",indexed:"bool",type:"ContractTypeSpec",docs:"Vec<Text>"},ContractEventParamSpecV2:{label:"Text",indexed:"bool",type:"ContractTypeSpec",docs:"Vec<Text>"},ContractEventSpecV0:{name:"Text",args:"Vec<ContractEventParamSpecV0>",docs:"Vec<Text>"},ContractEventSpecV1:{name:"Text",args:"Vec<ContractEventParamSpecV0>",docs:"Vec<Text>"},ContractEventSpecV2:{label:"Text",args:"Vec<ContractEventParamSpecV2>",docs:"Vec<Text>"},ContractEventSpecV3:{label:"Text",args:"Vec<ContractEventParamSpecV2>",docs:"Vec<Text>",module_path:"Text",signature_topic:"Option<[u8; 32]>"},ContractMessageParamSpecV0:{name:"Text",type:"ContractTypeSpec"},ContractMessageParamSpecV2:{label:"Text",type:"ContractTypeSpec"},ContractMessageSpecV0:{name:"Text",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV0>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>"},ContractMessageSpecV1:{name:"Vec<Text>",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV0>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>"},ContractMessageSpecV2:{label:"Text",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>"},ContractMessageSpecV3:{label:"Text",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>",default:"bool"},ContractSelector:"[u8; 4]",ContractTypeSpec:{type:"SiLookupTypeId",displayName:"ContractDisplayName"}},latest={ContractConstructorSpecLatest:"ContractConstructorSpecV4",ContractEventSpecLatest:"ContractEventSpecV3",ContractEventParamSpecLatest:"ContractEventParamSpecV2",ContractMessageParamSpecLatest:"ContractMessageParamSpecV2",ContractMessageSpecLatest:"ContractMessageSpecV3",ContractMetadataLatest:"ContractMetadataV5"},definitions$h={rpc:{},types:{...layout,...spec,...latest,ContractProjectInfo:{source:"ContractProjectSource",contract:"ContractProjectContract"},ContractMetadataV0:{metadataVersion:"Text",types:"Vec<Si0Type>",spec:"ContractContractSpecV0"},ContractMetadataV1:{types:"Vec<PortableType>",spec:"ContractContractSpecV1"},ContractMetadataV2:{types:"Vec<PortableType>",spec:"ContractContractSpecV2"},ContractMetadataV3:{types:"Vec<PortableType>",spec:"ContractContractSpecV3"},ContractMetadataV4:{types:"Vec<PortableType>",spec:"ContractContractSpecV4",version:"Text"},ContractMetadataV5:{types:"Vec<PortableType>",spec:"ContractContractSpecV5",version:"u64"},ContractMetadata:{_enum:{V0:"ContractMetadataV0",V1:"ContractMetadataV1",V2:"ContractMetadataV2",V3:"ContractMetadataV3",V4:"ContractMetadataV4",V5:"ContractMetadataV5"}},ContractProjectV0:{metadataVersion:"Text",source:"ContractProjectSource",contract:"ContractProjectContract",types:"Vec<Si0Type>",spec:"ContractContractSpecV0"},ContractProject:"(ContractProjectInfo, ContractMetadata)",ContractProjectContract:{_alias:{docs:"documentation"},name:"Text",version:"Text",authors:"Vec<Text>",description:"Option<Text>",docs:"Option<Text>",repository:"Option<Text>",homepage:"Option<Text>",license:"Option<Text>"},ContractProjectSource:{_alias:{wasmHash:"hash"},wasmHash:"[u8; 32]",language:"Text",compiler:"Text",wasm:"Raw"},ContractEnvironmentV4:{_alias:{hashType:"hash"},accountId:"Option<ContractTypeSpec>",balance:"Option<ContractTypeSpec>",blockNumber:"Option<ContractTypeSpec>",hashType:"Option<ContractTypeSpec>",timestamp:"Option<ContractTypeSpec>",maxEventTopics:"Option<u32>"}}},netRpc={listening:{aliasSection:"net",description:"Returns true if client is actively listening for network connections. Otherwise false.",params:[],type:"bool"},peerCount:{aliasSection:"net",description:"Returns number of peers connected to node.",params:[],type:"Text"},version:{aliasSection:"net",description:"Returns protocol version.",params:[],type:"Text"}},web3Rpc={clientVersion:{aliasSection:"web3",description:"Returns current client version.",params:[],type:"Text"},sha3:{aliasSection:"web3",description:"Returns sha3 of the given data",params:[{name:"data",type:"Bytes"}],type:"H256"}},rpc$7={...netRpc,...web3Rpc,accounts:{description:"Returns accounts list.",params:[],type:"Vec<H160>"},blockNumber:{description:"Returns the blockNumber",params:[],type:"U256"},call:{description:"Call contract, returning the output data.",params:[{name:"request",type:"EthCallRequest"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"Bytes"},chainId:{description:"Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",params:[],type:"U64"},coinbase:{description:"Returns block author.",params:[],type:"H160"},estimateGas:{description:"Estimate gas needed for execution of given contract.",params:[{name:"request",type:"EthCallRequest"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"U256"},feeHistory:{description:"Returns fee history for given block count & reward percentiles",params:[{name:"blockCount",type:"U256"},{name:"newestBlock",type:"BlockNumber"},{name:"rewardPercentiles",type:"Option<Vec<f64>>"}],type:"EthFeeHistory"},gasPrice:{description:"Returns current gas price.",params:[],type:"U256"},getBalance:{description:"Returns balance of the given account.",params:[{name:"address",type:"H160"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"U256"},getBlockByHash:{description:"Returns block with given hash.",params:[{name:"hash",type:"H256"},{name:"full",type:"bool"}],type:"Option<EthRichBlock>"},getBlockByNumber:{description:"Returns block with given number.",params:[{name:"block",type:"BlockNumber"},{name:"full",type:"bool"}],type:"Option<EthRichBlock>"},getBlockTransactionCountByHash:{description:"Returns the number of transactions in a block with given hash.",params:[{name:"hash",type:"H256"}],type:"U256"},getBlockTransactionCountByNumber:{description:"Returns the number of transactions in a block with given block number.",params:[{name:"block",type:"BlockNumber"}],type:"U256"},getCode:{description:"Returns the code at given address at given time (block number).",params:[{name:"address",type:"H160"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"Bytes"},getFilterChanges:{description:"Returns filter changes since last poll.",params:[{name:"index",type:"U256"}],type:"EthFilterChanges"},getFilterLogs:{description:"Returns all logs matching given filter (in a range 'from' - 'to').",params:[{name:"index",type:"U256"}],type:"Vec<EthLog>"},getLogs:{description:"Returns logs matching given filter object.",params:[{name:"filter",type:"EthFilter"}],type:"Vec<EthLog>"},getProof:{description:"Returns proof for account and storage.",params:[{name:"address",type:"H160"},{name:"storageKeys",type:"Vec<H256>"},{name:"number",type:"BlockNumber"}],type:"EthAccount"},getStorageAt:{description:"Returns content of the storage at given address.",params:[{name:"address",type:"H160"},{name:"index",type:"U256"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"H256"},getTransactionByBlockHashAndIndex:{description:"Returns transaction at given block hash and index.",params:[{name:"hash",type:"H256"},{name:"index",type:"U256"}],type:"EthTransaction"},getTransactionByBlockNumberAndIndex:{description:"Returns transaction by given block number and index.",params:[{name:"number",type:"BlockNumber"},{name:"index",type:"U256"}],type:"EthTransaction"},getTransactionByHash:{description:"Get transaction by its hash.",params:[{name:"hash",type:"H256"}],type:"EthTransaction"},getTransactionCount:{description:"Returns the number of transactions sent from given address at given time (block number).",params:[{name:"address",type:"H160"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"U256"},getTransactionReceipt:{description:"Returns transaction receipt by transaction hash.",params:[{name:"hash",type:"H256"}],type:"EthReceipt"},getUncleByBlockHashAndIndex:{description:"Returns an uncles at given block and index.",params:[{name:"hash",type:"H256"},{name:"index",type:"U256"}],type:"EthRichBlock"},getUncleByBlockNumberAndIndex:{description:"Returns an uncles at given block and index.",params:[{name:"number",type:"BlockNumber"},{name:"index",type:"U256"}],type:"EthRichBlock"},getUncleCountByBlockHash:{description:"Returns the number of uncles in a block with given hash.",params:[{name:"hash",type:"H256"}],type:"U256"},getUncleCountByBlockNumber:{description:"Returns the number of uncles in a block with given block number.",params:[{name:"number",type:"BlockNumber"}],type:"U256"},getWork:{description:"Returns the hash of the current block, the seedHash, and the boundary condition to be met.",params:[],type:"EthWork"},hashrate:{description:"Returns the number of hashes per second that the node is mining with.",params:[],type:"U256"},maxPriorityFeePerGas:{description:"Returns max priority fee per gas",params:[],type:"U256"},mining:{description:"Returns true if client is actively mining new blocks.",params:[],type:"bool"},newBlockFilter:{description:"Returns id of new block filter.",params:[],type:"U256"},newFilter:{description:"Returns id of new filter.",params:[{name:"filter",type:"EthFilter"}],type:"U256"},newPendingTransactionFilter:{description:"Returns id of new block filter.",params:[],type:"U256"},protocolVersion:{description:"Returns protocol version encoded as a string (quotes are necessary).",params:[],type:"u64"},sendRawTransaction:{description:"Sends signed transaction, returning its hash.",params:[{name:"bytes",type:"Bytes"}],type:"H256"},sendTransaction:{description:"Sends transaction; will block waiting for signer to return the transaction hash",params:[{name:"tx",type:"EthTransactionRequest"}],type:"H256"},submitHashrate:{description:"Used for submitting mining hashrate.",params:[{name:"index",type:"U256"},{name:"hash",type:"H256"}],type:"bool"},submitWork:{description:"Used for submitting a proof-of-work solution.",params:[{name:"nonce",type:"H64"},{name:"headerHash",type:"H256"},{name:"mixDigest",type:"H256"}],type:"bool"},subscribe:{description:"Subscribe to Eth subscription.",params:[{name:"kind",type:"EthSubKind"},{isOptional:!0,name:"params",type:"EthSubParams"}],pubsub:["subscription","subscribe","unsubscribe"],type:"Null"},syncing:{description:"Returns an object with data about the sync status or false.",params:[],type:"EthSyncStatus"},uninstallFilter:{description:"Uninstalls filter.",params:[{name:"index",type:"U256"}],type:"bool"}},ethMethodsV4={account_basic:{description:"Returns pallet_evm::Accounts by address.",params:[{name:"address",type:"H160"}],type:"EvmAccount"},account_code_at:{description:"For a given account address, returns pallet_evm::AccountCodes.",params:[{name:"address",type:"H160"}],type:"Bytes"},author:{description:"Returns the converted FindAuthor::find_author authority id.",params:[],type:"H160"},call:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"to",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCallInfo, DispatchError>"},chain_id:{description:"Returns runtime defined pallet_evm::ChainId.",params:[],type:"u64"},create:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCreateInfo, DispatchError>"},current_all:{description:"Return all the current data for a block in a single runtime call.",params:[],type:"(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"},current_block:{description:"Return the current block.",params:[],type:"BlockV2"},current_receipts:{description:"Return the current receipt.",params:[],type:"Option<Vec<EthReceiptV3>>"},current_transaction_statuses:{description:"Return the current transaction status.",params:[],type:"Option<Vec<EthTransactionStatus>>"},elasticity:{description:"Return the elasticity multiplier.",params:[],type:"Option<Permill>"},extrinsic_filter:{description:"Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",params:[{name:"xts",type:"Vec<Extrinsic>"}],type:"Vec<TransactionV2>"},gas_price:{description:"Returns FixedGasPrice::min_gas_price",params:[],type:"u256"},storage_at:{description:"For a given account address and index, returns pallet_evm::AccountStorages.",params:[{name:"address",type:"H160"},{name:"index",type:"u256"}],type:"H256"}},ethMethodsV5={call:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"to",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCallInfoV2, DispatchError>"},create:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCreateInfoV2, DispatchError>"}},runtime$5={ConvertTransactionRuntimeApi:[{methods:{convert_transaction:{description:"Converts an Ethereum-style transaction to Extrinsic",params:[{name:"transaction",type:"TransactionV2"}],type:"Extrinsic"}},version:2}],DebugRuntimeApi:[{methods:{trace_block:{description:"Trace all block extrinsics",params:[{name:"extrinsics",type:"Vec<Extrinsic>"},{name:"knownTransactions",type:"Vec<H256>"}],type:"Result<(), DispatchError>"},trace_transaction:{description:"Trace transaction extrinsics",params:[{name:"extrinsics",type:"Vec<Extrinsic>"},{name:"transaction",type:"EthTransaction"}],type:"Result<(), DispatchError>"}},version:4}],EthereumRuntimeRPCApi:[{methods:{...ethMethodsV4},version:4},{methods:{...ethMethodsV4,...ethMethodsV5},version:5}]},V0={BlockV0:{header:"EthHeader",transactions:"Vec<TransactionV0>",ommers:"Vec<EthHeader>"},LegacyTransaction:{nonce:"U256",gasPrice:"U256",gasLimit:"U256",action:"EthTransactionAction",value:"U256",input:"Bytes",signature:"EthTransactionSignature"},TransactionV0:"LegacyTransaction"},V1={BlockV1:{header:"EthHeader",transactions:"Vec<TransactionV1>",ommers:"Vec<EthHeader>"},EIP2930Transaction:{chainId:"u64",nonce:"U256",gasPrice:"U256",gasLimit:"U256",action:"EthTransactionAction",value:"U256",input:"Bytes",accessList:"EthAccessList",oddYParity:"bool",r:"H256",s:"H256"},TransactionV1:{_enum:{Legacy:"LegacyTransaction",EIP2930:"EIP2930Transaction"}}},V2={BlockV2:{header:"EthHeader",transactions:"Vec<TransactionV2>",ommers:"Vec<EthHeader>"},EIP1559Transaction:{chainId:"u64",nonce:"U256",maxPriorityFeePerGas:"U256",maxFeePerGas:"U256",gasLimit:"U256",action:"EthTransactionAction",value:"U256",input:"Bytes",accessList:"EthAccessList",oddYParity:"bool",r:"H256",s:"H256"},TransactionV2:{_enum:{Legacy:"LegacyTransaction",EIP2930:"EIP2930Transaction",EIP1559:"EIP1559Transaction"}}},types={...V0,...V1,...V2,EthereumAccountId:"GenericEthereumAccountId",EthereumAddress:"GenericEthereumAccountId",EthereumLookupSource:"GenericEthereumLookupSource",EthereumSignature:"[u8; 65]",EthAccessListItem:{address:"EthAddress",slots:"Vec<H256>"},EthAccessList:"Vec<EthAccessListItem>",EthAccount:{address:"EthAddress",balance:"U256",nonce:"U256",codeHash:"H256",storageHash:"H256",accountProof:"Vec<Bytes>",storageProof:"Vec<EthStorageProof>"},EthAddress:"H160",EthBlock:{header:"EthHeader",transactions:"Vec<EthTransaction>",ommers:"Vec<EthHeader>"},EthHeader:{parentHash:"H256",ommersHash:"H256",beneficiary:"EthAddress",stateRoot:"H256",transactionsRoot:"H256",receiptsRoot:"H256",logsBloom:"EthBloom",difficulty:"U256",number:"U256",gasLimit:"U256",gasUsed:"U256",timestamp:"u64",extraData:"Bytes",mixMash:"H256",nonce:"H64"},EthRichBlock:{_alias:{blockHash:"hash",blockSize:"size"},blockHash:"Option<H256>",parentHash:"H256",sha3Uncles:"H256",author:"EthAddress",miner:"EthAddress",stateRoot:"H256",transactionsRoot:"H256",receiptsRoot:"H256",number:"Option<U256>",gasUsed:"U256",gasLimit:"U256",extraData:"Bytes",logsBloom:"EthBloom",timestamp:"U256",difficulty:"U256",totalDifficulty:"Option<U256>",sealFields:"Vec<Bytes>",uncles:"Vec<H256>",transactions:"Vec<EthTransaction>",blockSize:"Option<U256>"},EthBloom:"H2048",EthCallRequest:{from:"Option<EthAddress>",to:"Option<EthAddress>",gasPrice:"Option<U256>",gas:"Option<U256>",value:"Option<U256>",data:"Option<Bytes>",nonce:"Option<U256>"},EthFeeHistory:{oldestBlock:"U256",baseFeePerGas:"Vec<U256>",gasUsedRatio:"Vec<f64>",reward:"Option<Vec<Vec<U256>>>"},EthFilter:{fromBlock:"Option<BlockNumber>",toBlock:"Option<BlockNumber>",blockHash:"Option<H256>",address:"Option<EthFilterAddress>",topics:"Option<EthFilterTopic>"},EthFilterAddress:{_enum:{Single:"EthAddress",Multiple:"Vec<EthAddress>",Null:"Null"}},EthFilterChanges:{_enum:{Logs:"Vec<EthLog>",Hashes:"Vec<H256>",Empty:"Null"}},EthFilterTopic:{_enum:{Single:"EthFilterTopicInner",Multiple:"Vec<EthFilterTopicInner>",Null:"Null"}},EthFilterTopicEntry:"Option<H256>",EthFilterTopicInner:{_enum:{Single:"EthFilterTopicEntry",Multiple:"Vec<EthFilterTopicEntry>",Null:"Null"}},EthRichHeader:{_alias:{blockHash:"hash",blockSize:"size"},blockHash:"Option<H256>",parentHash:"H256",sha3Uncles:"H256",author:"EthAddress",miner:"EthAddress",stateRoot:"H256",transactionsRoot:"H256",receiptsRoot:"H256",number:"Option<U256>",gasUsed:"U256",gasLimit:"U256",extraData:"Bytes",logsBloom:"EthBloom",timestamp:"U256",difficulty:"U256",sealFields:"Vec<Bytes>",blockSize:"Option<U256>"},EthLog:{address:"EthAddress",topics:"Vec<H256>",data:"Bytes",blockHash:"Option<H256>",blockNumber:"Option<U256>",transactionHash:"Option<H256>",transactionIndex:"Option<U256>",logIndex:"Option<U256>",transactionLogIndex:"Option<U256>",removed:"bool"},EthReceipt:{transactionHash:"Option<H256>",transactionIndex:"Option<U256>",blockHash:"Option<H256>",from:"Option<EthAddress>",to:"Option<EthAddress>",blockNumber:"Option<U256>",cumulativeGasUsed:"U256",gasUsed:"Option<U256>",contractAddress:"Option<EthAddress>",logs:"Vec<EthLog>",root:"Option<H256>",logsBloom:"EthBloom",statusCode:"Option<U64>"},EthReceiptV0:"EthReceipt",EthReceiptV3:"EthReceipt",EthStorageProof:{key:"U256",value:"U256",proof:"Vec<Bytes>"},EthSubKind:{_enum:["newHeads","logs","newPendingTransactions","syncing"]},EthSubParams:{_enum:{None:"Null",Logs:"EthFilter"}},EthSubResult:{_enum:{Header:"EthRichHeader",Log:"EthLog",TransactionHash:"H256",SyncState:"EthSyncStatus"}},EthSyncInfo:{startingBlock:"U256",currentBlock:"U256",highestBlock:"U256",warpChunksAmount:"Option<U256>",warpChunksProcessed:"Option<U256>"},EthSyncStatus:{_enum:{Info:"EthSyncInfo",None:"Null"}},EthTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",transactionIndex:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"Option<U256>",maxFeePerGas:"Option<U256>",maxPriorityFeePerGas:"Option<U256>",gas:"U256",input:"Bytes",creates:"Option<H160>",raw:"Bytes",publicKey:"Option<H512>",chainId:"Option<U64>",standardV:"U256",v:"U256",r:"U256",s:"U256",accessList:"Option<Vec<EthAccessListItem>>",transactionType:"Option<U256>"},EthTransactionSignature:{v:"u64",r:"H256",s:"H256"},EthTransactionAction:{_enum:{Call:"H160",Create:"Null"}},EthTransactionCondition:{_enum:{block:"u64",time:"u64"}},EthTransactionRequest:{from:"Option<EthAddress>",to:"Option<EthAddress>",gasPrice:"Option<U256>",gas:"Option<U256>",value:"Option<U256>",data:"Option<Bytes>",nonce:"Option<U256>"},EthTransactionStatus:{transactionHash:"H256",transactionIndex:"u32",from:"EthAddress",to:"Option<EthAddress>",contractAddress:"Option<EthAddress>",logs:"Vec<EthLog>",logsBloom:"EthBloom"},EthWork:{powHash:"H256",seedHash:"H256",target:"H256",number:"Option<u64>"}},definitions$g={rpc:rpc$7,runtime:runtime$5,types},runtime$4={AuthorFilterAPI:[{methods:{can_author:{description:"The runtime api used to predict whether an author will be eligible in the given slot",params:[{name:"author",type:"AccountId"},{name:"relayParent",type:"u32"},{name:"parentHeader",type:"Header"}],type:"bool"}},version:2},{methods:{can_author:{description:"The runtime api used to predict whether an author will be eligible in the given slot",params:[{name:"author",type:"AccountId"},{name:"relayParent",type:"u32"}],type:"bool"}},version:1}],NimbusApi:[{methods:{can_author:{description:"The runtime api used to predict whether a Nimbus author will be eligible in the given slot",params:[{name:"author",type:"AccountId"},{name:"relayParent",type:"u32"},{name:"parentHeader",type:"Header"}],type:"bool"}},version:1}]},definitions$f={rpc:{},runtime:runtime$4,types:{}},runtime$3={OracleApi:[{methods:{get_all_values:{description:"Retrieves all values",params:[{name:"providerId",type:"Raw"}],type:"Raw"},get_value:{description:"Retrieves a single value",params:[{name:"providerId",type:"Raw"},{name:"key",type:"Raw"}],type:"Option<Raw>"}},version:1}]},definitions$e={rpc:{},runtime:runtime$3,types:{}},runtime$2={TokensApi:[{methods:{query_existential_deposit:{description:"Query the existential amount for a specific currency",params:[{name:"currencyId",type:"Raw"}],type:"u128"}},version:1}]},definitions$d={rpc:{},runtime:runtime$2,types:{}},rpc$6={methods:{description:"Retrieves the list of RPC methods that are exposed by the node",params:[],type:"RpcMethods"}},definitions$c={rpc:rpc$6,types:{RpcMethods:{version:"u32",methods:"Vec<Text>"}}},rpc$5={hasKey:{description:"Returns true if the keystore has private keys for the given public key and key type.",isUnsafe:!0,params:[{name:"publicKey",type:"Bytes"},{name:"keyType",type:"Text"}],type:"bool"},hasSessionKeys:{description:"Returns true if the keystore has private keys for the given session public keys.",isUnsafe:!0,params:[{name:"sessionKeys",type:"Bytes"}],type:"bool"},insertKey:{description:"Insert a key into the keystore.",isUnsafe:!0,params:[{name:"keyType",type:"Text"},{name:"suri",type:"Text"},{name:"publicKey",type:"Bytes"}],type:"Bytes"},pendingExtrinsics:{description:"Returns all pending extrinsics, potentially grouped by sender",params:[],type:"Vec<Extrinsic>"},removeExtrinsic:{description:"Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",isUnsafe:!0,params:[{name:"bytesOrHash",type:"Vec<ExtrinsicOrHash>"}],type:"Vec<Hash>"},rotateKeys:{description:"Generate new session keys and returns the corresponding public keys",isUnsafe:!0,params:[],type:"Bytes"},submitAndWatchExtrinsic:{description:"Submit and subscribe to watch an extrinsic until unsubscribed",isSigned:!0,params:[{name:"extrinsic",type:"Extrinsic"}],pubsub:["extrinsicUpdate","submitAndWatchExtrinsic","unwatchExtrinsic"],type:"ExtrinsicStatus"},submitExtrinsic:{description:"Submit a fully formatted extrinsic for block inclusion",isSigned:!0,params:[{name:"extrinsic",type:"Extrinsic"}],type:"Hash"}},definitions$b={rpc:rpc$5,types:{ExtrinsicOrHash:{_enum:{Hash:"Hash",Extrinsic:"Bytes"}},ExtrinsicStatus:{_enum:{Future:"Null",Ready:"Null",Broadcast:"Vec<Text>",InBlock:"Hash",Retracted:"Hash",FinalityTimeout:"Hash",Finalized:"Hash",Usurped:"Hash",Dropped:"Null",Invalid:"Null"}}}},rpc$4={getBlock:{description:"Get header and body of a relay chain block",params:[{isHistoric:!0,isOptional:!0,name:"hash",type:"BlockHash"}],type:"SignedBlock"},getBlockHash:{description:"Get the block hash for a specific block",params:[{isOptional:!0,name:"blockNumber",type:"BlockNumber"}],type:"BlockHash"},getFinalizedHead:{alias:["chain_getFinalisedHead"],description:"Get hash of the last finalized block in the canon chain",params:[],type:"BlockHash"},getHeader:{alias:["chain_getHead"],description:"Retrieves the header for a specific block",params:[{isHistoric:!0,isOptional:!0,name:"hash",type:"BlockHash"}],type:"Header"},subscribeAllHeads:{description:"Retrieves the newest header via subscription",params:[],pubsub:["allHead","subscribeAllHeads","unsubscribeAllHeads"],type:"Header"},subscribeFinalizedHeads:{alias:["chain_subscribeFinalisedHeads","chain_unsubscribeFinalisedHeads"],description:"Retrieves the best finalized header via subscription",params:[],pubsub:["finalizedHead","subscribeFinalizedHeads","unsubscribeFinalizedHeads"],type:"Header"},subscribeNewHeads:{alias:["chain_unsubscribeNewHeads","subscribe_newHead","unsubscribe_newHead"],description:"Retrieves the best header via subscription",params:[],pubsub:["newHead","subscribeNewHead","unsubscribeNewHead"],type:"Header"}},definitions$a={rpc:rpc$4,types:{BlockHash:"Hash"}},rpc$3={getKeys:{description:"Returns the keys with prefix from a child storage, leave empty to get all the keys",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"prefix",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Vec<StorageKey>"},getKeysPaged:{alias:["childstate_getKeysPagedAt"],description:"Returns the keys with prefix from a child storage with pagination support",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"prefix",type:"StorageKey"},{name:"count",type:"u32"},{isOptional:!0,name:"startKey",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Vec<StorageKey>"},getStorage:{description:"Returns a child storage entry at a specific block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Option<StorageData>"},getStorageEntries:{description:"Returns child storage entries for multiple keys at a specific block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Vec<Option<StorageData>>"},getStorageHash:{description:"Returns the hash of a child storage entry at a block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Option<Hash>"},getStorageSize:{description:"Returns the size of a child storage entry at a block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Option<u64>"}},definitions$9={rpc:rpc$3,types:{PrefixedStorageKey:"StorageKey"}},rpc$2={localStorageGet:{description:"Get offchain local storage under given key and prefix",isUnsafe:!0,params:[{name:"kind",type:"StorageKind"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},localStorageSet:{description:"Set offchain local storage under given key and prefix",isUnsafe:!0,params:[{name:"kind",type:"StorageKind"},{name:"key",type:"Bytes"},{name:"value",type:"Bytes"}],type:"Null"}},runtime$1={OffchainWorkerApi:[{methods:{offchain_worker:{description:"Starts the off-chain task for given block header.",params:[{name:"header",type:"Header"}],type:"Null"}},version:2},{methods:{offchain_worker:{description:"Starts the off-chain task for given block header.",params:[{name:"number",type:"BlockNumber"}],type:"Null"}},version:1}]},definitions$8={rpc:rpc$2,runtime:runtime$1,types:{StorageKind:{_enum:{PERSISTENT:1,LOCAL:2}}}},rpc$1={queryFeeDetails:{deprecated:"Use `api.call.transactionPaymentApi.queryFeeDetails` instead",description:"Query the detailed fee of a given encoded extrinsic",params:[{name:"extrinsic",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"FeeDetails"},queryInfo:{deprecated:"Use `api.call.transactionPaymentApi.queryInfo` instead",description:"Retrieves the fee information for an encoded extrinsic",params:[{name:"extrinsic",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"RuntimeDispatchInfoV1"}},V1_TO_V4_SHARED_PAY={query_fee_details:{description:"The transaction fee details",params:[{name:"uxt",type:"Extrinsic"},{name:"len",type:"u32"}],type:"FeeDetails"}},V1_TO_V3_SHARED_CALL={query_call_fee_details:{description:"The call fee details",params:[{name:"call",type:"Call"},{name:"len",type:"u32"}],type:"FeeDetails"}},V2_TO_V4_SHARED_PAY={query_info:{description:"The transaction info",params:[{name:"uxt",type:"Extrinsic"},{name:"len",type:"u32"}],type:"RuntimeDispatchInfo"}},V2_V3_SHARED_CALL={query_call_info:{description:"The call info",params:[{name:"call",type:"Call"},{name:"len",type:"u32"}],type:"RuntimeDispatchInfo"}},V3_SHARED_PAY_CALL={query_length_to_fee:{description:"Query the output of the current LengthToFee given some input",params:[{name:"length",type:"u32"}],type:"Balance"},query_weight_to_fee:{description:"Query the output of the current WeightToFee given some input",params:[{name:"weight",type:"Weight"}],type:"Balance"}},runtime={TransactionPaymentApi:[{methods:{...V3_SHARED_PAY_CALL,...V2_TO_V4_SHARED_PAY,...V1_TO_V4_SHARED_PAY},version:4},{methods:{...V3_SHARED_PAY_CALL,...V2_TO_V4_SHARED_PAY,...V1_TO_V4_SHARED_PAY},version:3},{methods:{...V2_TO_V4_SHARED_PAY,...V1_TO_V4_SHARED_PAY},version:2},{methods:{query_info:{description:"The transaction info",params:[{name:"uxt",type:"Extrinsic"},{name:"len",type:"u32"}],type:"RuntimeDispatchInfo"},...V1_TO_V4_SHARED_PAY},version:1}],TransactionPaymentCallApi:[{methods:{...V3_SHARED_PAY_CALL,...V2_V3_SHARED_CALL,...V1_TO_V3_SHARED_CALL},version:3},{methods:{...V2_V3_SHARED_CALL,...V1_TO_V3_SHARED_CALL},version:2},{methods:{CALL:{description:"The call info",params:[{name:"call",type:"Call"},{name:"len",type:"u32"}],type:"RuntimeDispatchInfo"},...V1_TO_V3_SHARED_CALL},version:1}]},definitions$7={rpc:rpc$1,runtime,types:{FeeDetails:{inclusionFee:"Option<InclusionFee>"},InclusionFee:{baseFee:"Balance",lenFee:"Balance",adjustedWeightFee:"Balance"},RuntimeDispatchInfo:{weight:"Weight",class:"DispatchClass",partialFee:"Balance"},RuntimeDispatchInfoV1:{weight:"WeightV1",class:"DispatchClass",partialFee:"Balance"},RuntimeDispatchInfoV2:{weight:"WeightV2",class:"DispatchClass",partialFee:"Balance"}}},rpc={call:{alias:["state_callAt"],description:"Perform a call to a builtin on the chain",params:[{name:"method",type:"Text"},{name:"data",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Bytes"},getChildKeys:{description:"Retrieves the keys with prefix of a specific child storage",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageKey>"},getChildReadProof:{description:"Returns proof of storage for child key entries at a specific block state.",params:[{name:"childStorageKey",type:"PrefixedStorageKey"},{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ReadProof"},getChildStorage:{description:"Retrieves the child storage for a key",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"StorageData"},getChildStorageHash:{description:"Retrieves the child storage hash",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Hash"},getChildStorageSize:{description:"Retrieves the child storage size",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"u64"},getKeys:{deprecated:"Use `api.rpc.state.getKeysPaged` to retrieve keys",description:"Retrieves the keys with a certain prefix",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageKey>"},getKeysPaged:{alias:["state_getKeysPagedAt"],description:"Returns the keys with prefix with pagination support.",params:[{name:"key",type:"StorageKey"},{name:"count",type:"u32"},{isOptional:!0,name:"startKey",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageKey>"},getMetadata:{description:"Returns the runtime metadata",params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Metadata"},getPairs:{deprecated:"Use `api.rpc.state.getKeysPaged` to retrieve keys",description:"Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",isUnsafe:!0,params:[{name:"prefix",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<KeyValue>"},getReadProof:{description:"Returns proof of storage entries at a specific block state",params:[{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ReadProof"},getRuntimeVersion:{alias:["chain_getRuntimeVersion"],description:"Get the runtime version",params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"RuntimeVersion"},getStorage:{alias:["state_getStorageAt"],description:"Retrieves the storage for a key",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"StorageData"},getStorageHash:{alias:["state_getStorageHashAt"],description:"Retrieves the storage hash",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Hash"},getStorageSize:{alias:["state_getStorageSizeAt"],description:"Retrieves the storage size",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"u64"},queryStorage:{description:"Query historical storage entries (by key) starting from a start block",isUnsafe:!0,params:[{name:"keys",type:"Vec<StorageKey>"},{name:"fromBlock",type:"Hash"},{isOptional:!0,name:"toBlock",type:"BlockHash"}],type:"Vec<StorageChangeSet>"},queryStorageAt:{description:"Query storage entries (by key) starting at block hash given as the second parameter",params:[{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageChangeSet>"},subscribeRuntimeVersion:{alias:["chain_subscribeRuntimeVersion","chain_unsubscribeRuntimeVersion"],description:"Retrieves the runtime version via subscription",params:[],pubsub:["runtimeVersion","subscribeRuntimeVersion","unsubscribeRuntimeVersion"],type:"RuntimeVersion"},subscribeStorage:{description:"Subscribes to storage changes for the provided keys",params:[{isOptional:!0,name:"keys",type:"Vec<StorageKey>"}],pubsub:["storage","subscribeStorage","unsubscribeStorage"],type:"StorageChangeSet"},traceBlock:{description:"Provides a way to trace the re-execution of a single block",isUnsafe:!0,params:[{name:"block",type:"Hash"},{name:"targets",type:"Option<Text>"},{name:"storageKeys",type:"Option<Text>"},{name:"methods",type:"Option<Text>"}],type:"TraceBlockResponse"},trieMigrationStatus:{description:"Check current migration state",isUnsafe:!0,params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"MigrationStatusResult"}},definitions$6={rpc,types:{ApiId:"[u8; 8]",BlockTrace:{blockHash:"Text",parentHash:"Text",tracingTargets:"Text",storageKeys:"Text",spans:"Vec<BlockTraceSpan>",events:"Vec<BlockTraceEvent>"},BlockTraceEvent:{target:"Text",data:"BlockTraceEventData",parentId:"Option<u64>"},BlockTraceEventData:{stringValues:"HashMap<Text, Text>"},BlockTraceSpan:{id:"u64",parentId:"Option<u64>",name:"Text",target:"Text",wasm:"bool"},KeyValueOption:"(StorageKey, Option<StorageData>)",MigrationStatusResult:{topRemainingToMigrate:"u64",childRemainingToMigrate:"u64"},ReadProof:{at:"Hash",proof:"Vec<Bytes>"},RuntimeVersionApi:"(ApiId, u32)",RuntimeVersion:{specName:"Text",implName:"Text",authoringVersion:"u32",specVersion:"u32",implVersion:"u32",apis:"Vec<RuntimeVersionApi>",transactionVersion:"u32",stateVersion:"u8"},RuntimeVersionPre4:{specName:"Text",implName:"Text",authoringVersion:"u32",specVersion:"u32",implVersion:"u32",apis:"Vec<RuntimeVersionApi>",transactionVersion:"u32"},RuntimeVersionPre3:{specName:"Text",implName:"Text",authoringVersion:"u32",specVersion:"u32",implVersion:"u32",apis:"Vec<RuntimeVersionApi>"},RuntimeVersionPartial:{specName:"Text",specVersion:"u32",apis:"Vec<RuntimeVersionApi>"},SpecVersion:"u32",StorageChangeSet:{block:"Hash",changes:"Vec<KeyValueOption>"},TraceBlockResponse:{_enum:{TraceError:"TraceError",BlockTrace:"BlockTrace"}},TraceError:{error:"Text"}}},typeDefinitions=Object.freeze(Object.defineProperty({__proto__:null,assetConversion:definitions$1e,assets:definitions$1d,attestations:definitions$t,aura:definitions$1c,author:definitions$b,authorship:definitions$1b,babe:definitions$1a,balances:definitions$19,beefy:definitions$18,benchmark:definitions$17,blockbuilder:definitions$16,bridges:definitions$s,chain:definitions$a,childstate:definitions$9,claims:definitions$r,collective:definitions$15,consensus:definitions$14,contracts:definitions$13,contractsAbi:definitions$h,crowdloan:definitions$q,cumulus:definitions$p,democracy:definitions$12,dev:definitions$11,discovery:definitions$10,elections:definitions$$,engine:definitions$_,eth:definitions$g,evm:definitions$Z,extrinsics:definitions$Y,finality:definitions$o,fungibles:definitions$X,genericAsset:definitions$W,genesisBuilder:definitions$V,gilt:definitions$U,grandpa:definitions$T,identity:definitions$S,imOnline:definitions$R,lottery:definitions$Q,metadata:definitions$1h,mixnet:definitions$P,mmr:definitions$O,nfts:definitions$N,nimbus:definitions$f,nompools:definitions$M,offchain:definitions$8,offences:definitions$L,ormlOracle:definitions$e,ormlTokens:definitions$d,parachains:definitions$n,payment:definitions$7,poll:definitions$m,pow:definitions$K,proxy:definitions$J,purchase:definitions$l,recovery:definitions$I,rpc:definitions$c,runtime:definitions$1g,scaleInfo:definitions$1f,scheduler:definitions$H,session:definitions$G,society:definitions$F,staking:definitions$E,state:definitions$6,statement:definitions$D,support:definitions$C,syncstate:definitions$B,system:definitions$A,treasury:definitions$z,txpayment:definitions$y,txqueue:definitions$x,uniques:definitions$w,utility:definitions$v,vesting:definitions$u,xcm:definitions$k,xcmPaymentApi:definitions$j,xcmRuntimeApi:definitions$i},Symbol.toStringTag,{value:"Module"})),jsonrpc={};Object.keys(typeDefinitions).forEach(n=>Object.entries(typeDefinitions[n].rpc||{}).forEach(([e,t])=>{const a=t.aliasSection||n;jsonrpc[a]||(jsonrpc[a]={}),jsonrpc[a][e]=objectSpread({},t,{isSubscription:!!t.pubsub,jsonrpc:`${a}_${e}`,method:e,section:a})}));const l$8=logger("PortableRegistry"),TYPE_UNWRAP={toNumber:()=>-1},PRIMITIVE_ALIAS={Char:"u32",Str:"Text"},PATHS_ALIAS=splitNamespace(["sp_core::crypto::AccountId32","sp_runtime::generic::era::Era","sp_runtime::multiaddress::MultiAddress","fp_account::AccountId20","account::AccountId20","polkadot_runtime_common::claims::EthereumAddress","frame_support::weights::weight_v2::Weight","sp_weights::weight_v2::Weight","*_democracy::vote::Vote","*_conviction_voting::vote::Vote","*_identity::types::Data","sp_core::OpaqueMetadata","sp_core::OpaquePeerId","sp_core::offchain::OpaqueMultiaddr","primitive_types::*","sp_arithmetic::per_things::*","*_runtime::RuntimeCall","*_runtime::RuntimeEvent","ink::env::types::*","ink::primitives::types::*","ink_env::types::*","ink_primitives::types::*"]),PATHS_SET=splitNamespace(["pallet_identity::types::BitFlags"]),BITVEC_NS_LSB=["bitvec::order::Lsb0","BitOrderLsb0"],BITVEC_NS_MSB=["bitvec::order::Msb0","BitOrderMsb0"],BITVEC_NS=[...BITVEC_NS_LSB,...BITVEC_NS_MSB],WRAPPERS=["BoundedBTreeMap","BoundedBTreeSet","BoundedVec","Box","BTreeMap","BTreeSet","Cow","Option","Range","RangeInclusive","Result","WeakBoundedVec","WrapperKeepOpaque","WrapperOpaque"],RESERVED=["entries","keys","new","size","hash","registry"],PATH_RM_INDEX_1=["generic","misc","pallet","traits","types"];function sanitizeDocs(n){const e=n.length,t=new Array(e);for(let a=0;a<e;a++)t[a]=n[a].toString();return t}function splitNamespace(n){const e=n.length,t=new Array(e);for(let a=0;a<e;a++)t[a]=n[a].split("::");return t}function matchParts(n,e){return n.length===e.length&&n.every((t,a)=>{const o=e[a].toString();if(t==="*"||t===o)return!0;if(t.includes("*")&&t.includes("_")&&o.includes("_")){let i=t.split("_"),r=o.split("_");if(i[0]==="*"){const s=r.indexOf(i[1]);s!==-1&&(i=i.slice(1),r=r.slice(s))}return i.length===2&&i[1]==="*"&&i[0]===r[0]?!0:matchParts(i,r)}return!1})}function getAliasPath({def:n,path:e}){return["frame_support::weights::weight_v2::Weight","sp_weights::weight_v2::Weight"].includes(e.join("::"))?!n.isComposite||n.asComposite.fields.length===1?"WeightV1":null:e.length&&PATHS_ALIAS.some(t=>matchParts(t,e))?e[e.length-1].toString():null}function extractNameFlat(n,e,t,a,o=!1){const i=a.length;if(i===0||WRAPPERS.includes(a[i-1].toString()))return null;const r=new Array(i),s=new Array(i);for(let d=0;d<i;d++){const p=stringPascalCase(o?a[d].replace("pallet_",""):a[d]),h=p.toLowerCase();r[d]=p,s[d]=h}let c="";for(let d=0;d<i;d++){const p=s[d];(d!==1||!PATH_RM_INDEX_1.includes(p))&&p!==s[d+1]&&(c+=r[d])}if(r[1]==="RawOrigin"&&i===2&&t.length===2&&t[1].type.isSome){const d=n[t[1].type.unwrap().toNumber()];d.type.path.length===2&&(c=`${c}${d.type.path[1].toString()}`)}return{lookupIndex:e,name:c,params:t}}function extractName(n,e,{type:{params:t,path:a}}){return extractNameFlat(n,e,t,a)}function nextDupeMatches(n,e,t){const a=[t[e]];for(let o=e+1,i=t.length;o<i;o++){const r=t[o];r.name===n&&a.push(r)}return a}function rewriteDupes(n,e){const t=n.length;for(let a=0;a<t;a++){const o=n[a];for(let i=a+1;i<t;i++){const r=n[i];if(o.lookupIndex!==r.lookupIndex&&o.name===r.name)return!1}}for(let a=0;a<t;a++){const o=n[a];e[o.lookupIndex]=o.name}return!0}function removeDupeNames(n,e,t){const a={};return t.map((o,i)=>{const{lookupIndex:r,name:s,params:c}=o;if(s){if(a[r])return o}else return null;const d=nextDupeMatches(s,i,t);if(d.length===1||!d.some(k=>c.length!==k.params.length||c.some((P,v)=>!P.name.eq(k.params[v].name)||P.type.unwrapOr(TYPE_UNWRAP).toNumber()!==k.params[v].type.unwrapOr(TYPE_UNWRAP).toNumber())))return o;const h=c.findIndex(({type:k},P)=>d.every(({params:v},E)=>v[P].type.isSome&&(E===0||!v[P].type.eq(k))));if(h===-1)return o;const I=d.length,_=new Array(I);for(let k=0;k<I;k++){const{lookupIndex:P,name:v,params:E}=d[k],{def:M,path:R}=n.getSiType(E[h].type.unwrap());if(!M.isPrimitive&&!R.length)return null;_[k]={lookupIndex:P,name:M.isPrimitive?`${v}${M.asPrimitive.toString()}`:`${v}${R[R.length-1].toString()}`}}if(rewriteDupes(_,a))return o;for(let k=0;k<I;k++){const{lookupIndex:P,name:v,params:E}=d[k],{def:M,path:R}=n.getSiType(E[h].type.unwrap()),H=extractNameFlat(e,P,E,R,!0);if(M.isPrimitive||!H)return null;_[k]={lookupIndex:P,name:`${v}${H.name}`}}return rewriteDupes(_,a)?o:null}).filter(o=>!!o).map(({lookupIndex:o,name:i,params:r})=>({lookupIndex:o,name:a[o]||i,params:r}))}function registerTypes(n,e,t,a){if(n.registry.register(e),a.SpRuntimeUncheckedExtrinsic){const[o,,i]=a.SpRuntimeUncheckedExtrinsic,r=n.getSiType(o.type.unwrap()),c=n.getSiType(i.type.unwrap()).path.join("::");let d=r.path.join("::");const p=d==="sp_runtime::multiaddress::MultiAddress";if(p){const[h]=r.params;d=n.getSiType(h.type.unwrap()).path.join("::")}n.registry.register({AccountId:d.endsWith("::AccountId20")||d.endsWith("::H160")?"AccountId20":"AccountId32",Address:p?"MultiAddress":"AccountId",ExtrinsicSignature:["sp_runtime::MultiSignature"].includes(c)?"MultiSignature":t[i.type.unwrap().toNumber()]||"MultiSignature"})}}function extractAliases(n,e){const t=Object.keys(n).some(o=>!o.startsWith("Pallet")),a={};if(n.SpRuntimeUncheckedExtrinsic){const[,{type:o}]=n.SpRuntimeUncheckedExtrinsic;a[o.unwrap().toNumber()]="Call"}else t&&!e&&l$8.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");if(n.FrameSystemEventRecord){const[{type:o}]=n.FrameSystemEventRecord;a[o.unwrap().toNumber()]="Event"}else t&&!e&&l$8.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");return a}function extractTypeInfo(n,e){const t=[],a={};for(let c=0,d=e.length;c<d;c++){const p=e[c],h=p.id.toNumber(),I=extractName(e,h,e[c]);I&&t.push(I),a[h]=p}const o={},i={},r={},s=removeDupeNames(n,e,t);for(let c=0,d=s.length;c<d;c++){const{lookupIndex:p,name:h,params:I}=s[c];i[p]=h,o[h]=n.registry.createLookupType(p),r[h]=I}return{lookups:o,names:i,params:r,types:a}}class PortableRegistry extends Struct{constructor(t,a,o){super(t,{types:"Vec<PortableType>"},a);A(this,"__internal__alias");A(this,"__internal__lookups");A(this,"__internal__names");A(this,"__internal__params");A(this,"__internal__typeDefs",{});A(this,"__internal__types");const{lookups:i,names:r,params:s,types:c}=extractTypeInfo(this,this.types);this.__internal__alias=extractAliases(s,o),this.__internal__lookups=i,this.__internal__names=r,this.__internal__params=s,this.__internal__types=c}get names(){return Object.values(this.__internal__names).sort()}get paramTypes(){return this.__internal__params}get types(){return this.getT("types")}register(){registerTypes(this,this.__internal__lookups,this.__internal__names,this.__internal__params)}getName(t){return this.__internal__names[this.__internal__getLookupId(t)]}getSiType(t){const a=(this.__internal__types||this.types)[this.__internal__getLookupId(t)];if(!a)throw new Error(`PortableRegistry: Unable to find type with lookupId ${t.toString()}`);return a.type}getTypeDef(t){const a=this.__internal__getLookupId(t);if(!this.__internal__typeDefs[a]){const o=this.__internal__names[a],i={info:TypeDefInfo.DoNotConstruct,lookupIndex:a,lookupName:o,type:this.registry.createLookupType(a)};o&&(this.__internal__typeDefs[a]=i);const r=this.__internal__extract(this.getSiType(t),a);o||(this.__internal__typeDefs[a]=i),Object.keys(r).forEach(s=>{(s!=="lookupName"||r[s])&&(this.__internal__typeDefs[a][s]=r[s])}),r.info===TypeDefInfo.Plain&&(this.__internal__typeDefs[a].lookupNameRoot=this.__internal__typeDefs[a].lookupName,delete this.__internal__typeDefs[a].lookupName)}return this.__internal__typeDefs[a]}sanitizeField(t){let a=null,o=null;return t.isSome&&(a=stringCamelCase(t.unwrap()),a.includes("#")?(o=a,a=o.replace(/#/g,"_")):RESERVED.includes(a)&&(o=a,a=`${a}_`)),[a,o]}__internal__createSiDef(t){const a=this.getTypeDef(t),o=t.toNumber();return[TypeDefInfo.DoNotConstruct,TypeDefInfo.Enum,TypeDefInfo.Struct].includes(a.info)&&a.lookupName?{docs:a.docs,info:TypeDefInfo.Si,lookupIndex:o,lookupName:this.__internal__names[o],type:this.registry.createLookupType(t)}:a}__internal__getLookupId(t){if(isString(t)){if(!this.registry.isLookupType(t))throw new Error(`PortableRegistry: Expected a lookup string type, found ${t}`);return parseInt(t.replace("Lookup",""),10)}else if(isNumber(t))return t;return t.toNumber()}__internal__extract(t,a){const o=t.path.join("::");let i;const r=this.__internal__alias[a]||getAliasPath(t);try{if(r)i=this.__internal__extractAliasPath(a,r);else switch(t.def.type){case"Array":i=this.__internal__extractArray(a,t.def.asArray);break;case"BitSequence":i=this.__internal__extractBitSequence(a,t.def.asBitSequence);break;case"Compact":i=this.__internal__extractCompact(a,t.def.asCompact);break;case"Composite":i=this.__internal__extractComposite(a,t,t.def.asComposite);break;case"HistoricMetaCompat":i=this.__internal__extractHistoric(a,t.def.asHistoricMetaCompat);break;case"Primitive":i=this.__internal__extractPrimitive(a,t);break;case"Sequence":i=this.__internal__extractSequence(a,t.def.asSequence);break;case"Tuple":i=this.__internal__extractTuple(a,t.def.asTuple);break;case"Variant":i=this.__internal__extractVariant(a,t,t.def.asVariant);break;default:assertUnreachable(t.def.type)}}catch(s){throw new Error(`PortableRegistry: ${a}${o?` (${o})`:""}: Error extracting ${stringify(t)}: ${s.message}`)}return objectSpread({docs:sanitizeDocs(t.docs),namespace:o},i)}__internal__extractArray(t,{len:a,type:o}){const i=a.toNumber();if(i>2048)throw new Error("Only support for [Type; <length>], where length <= 2048");return withTypeString(this.registry,{info:TypeDefInfo.VecFixed,length:i,sub:this.__internal__createSiDef(o)})}__internal__extractBitSequence(t,{bitOrderType:a,bitStoreType:o}){const i=this.__internal__createSiDef(a),r=this.__internal__createSiDef(o),[s,c]=BITVEC_NS.includes(i.namespace||"")?[i,r]:[r,i];if(!s.namespace||!BITVEC_NS.includes(s.namespace))throw new Error(`Unexpected bitOrder found as ${s.namespace||"<unknown>"}`);if(c.info!==TypeDefInfo.Plain||c.type!=="u8")throw new Error(`Only u8 bitStore is currently supported, found ${c.type}`);return BITVEC_NS_LSB.includes(s.namespace),{info:TypeDefInfo.Plain,type:"BitVec"}}__internal__extractCompact(t,{type:a}){return withTypeString(this.registry,{info:TypeDefInfo.Compact,sub:this.__internal__createSiDef(a)})}__internal__extractComposite(t,{params:a,path:o},{fields:i}){if(o.length){const r=o[0].toString(),s=o[o.length-1].toString();if(o.length===1&&r==="BTreeMap"){if(a.length!==2)throw new Error(`BTreeMap requires 2 parameters, found ${a.length}`);return withTypeString(this.registry,{info:TypeDefInfo.BTreeMap,sub:a.map(({type:c})=>this.__internal__createSiDef(c.unwrap()))})}else if(o.length===1&&r==="BTreeSet"){if(a.length!==1)throw new Error(`BTreeSet requires 1 parameter, found ${a.length}`);return withTypeString(this.registry,{info:TypeDefInfo.BTreeSet,sub:this.__internal__createSiDef(a[0].type.unwrap())})}else if(["Range","RangeInclusive"].includes(r)){if(a.length!==1)throw new Error(`Range requires 1 parameter, found ${a.length}`);return withTypeString(this.registry,{info:r==="Range"?TypeDefInfo.Range:TypeDefInfo.RangeInclusive,sub:this.__internal__createSiDef(a[0].type.unwrap()),type:r})}else if(["WrapperKeepOpaque","WrapperOpaque"].includes(s)){if(a.length!==1)throw new Error(`WrapperOpaque requires 1 parameter, found ${a.length}`);return withTypeString(this.registry,{info:s==="WrapperKeepOpaque"?TypeDefInfo.WrapperKeepOpaque:TypeDefInfo.WrapperOpaque,sub:this.__internal__createSiDef(a[0].type.unwrap()),type:s})}}return PATHS_SET.some(r=>matchParts(r,o))?this.__internal__extractCompositeSet(t,a,i):this.__internal__extractFields(t,i)}__internal__extractCompositeSet(t,a,o){if(a.length!==1||o.length!==1)throw new Error("Set handling expects param/field as single entries");return withTypeString(this.registry,{info:TypeDefInfo.Set,length:this.registry.createTypeUnsafe(this.registry.createLookupType(o[0].type),[]).bitLength(),sub:this.getSiType(a[0].type.unwrap()).def.asVariant.variants.map(({index:i,name:r})=>({index:i.toNumber(),info:TypeDefInfo.Plain,name:r.toString(),type:"Null"}))})}__internal__extractFields(t,a){let o=!0,i=!0;const r=a.length;for(let d=0;d<r;d++){const{name:p}=a[d];o=o&&p.isSome,i=i&&p.isNone}if(!i&&!o)throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");if(r===0)return{info:TypeDefInfo.Null,type:"Null"};if(i&&r===1){const d=this.__internal__createSiDef(a[0].type);return objectSpread({},d,t===-1?null:{lookupIndex:t,lookupName:this.__internal__names[t],lookupNameRoot:d.lookupName},a[0].typeName.isSome?{typeName:sanitize(a[0].typeName.unwrap())}:null)}const[s,c]=this.__internal__extractFieldsAlias(a);return withTypeString(this.registry,objectSpread({info:i?TypeDefInfo.Tuple:TypeDefInfo.Struct,sub:s},c.size?{alias:c}:null,t===-1?null:{lookupIndex:t,lookupName:this.__internal__names[t]}))}__internal__extractFieldsAlias(t){const a=new Map,o=t.length,i=new Array(o);for(let r=0;r<o;r++){const{docs:s,name:c,type:d,typeName:p}=t[r],h=this.__internal__createSiDef(d);if(c.isNone)i[r]=h;else{const[I,_]=this.sanitizeField(c);I&&_&&a.set(I,_),i[r]=objectSpread({docs:sanitizeDocs(s),name:I},h,p.isSome?{typeName:sanitize(p.unwrap())}:null)}}return[i,a]}__internal__extractHistoric(t,a){return objectSpread({displayName:a.toString(),isFromSi:!0},getTypeDef(a))}__internal__extractPrimitive(t,a){const o=a.def.asPrimitive.type.toString();return{info:TypeDefInfo.Plain,type:PRIMITIVE_ALIAS[o]||o.toLowerCase()}}__internal__extractAliasPath(t,a){return{info:TypeDefInfo.Plain,type:a}}__internal__extractSequence(t,{type:a}){const o=this.__internal__createSiDef(a);return o.type==="u8"?{info:TypeDefInfo.Plain,type:"Bytes"}:withTypeString(this.registry,{info:TypeDefInfo.Vec,lookupIndex:t,lookupName:this.__internal__names[t],sub:o})}__internal__extractTuple(t,a){if(a.length===0)return{info:TypeDefInfo.Null,type:"Null"};if(a.length===1)return this.getTypeDef(a[0]);const o=a.map(i=>this.__internal__createSiDef(i));return withTypeString(this.registry,{info:TypeDefInfo.Tuple,lookupIndex:t,lookupName:this.__internal__names[t],sub:o})}__internal__extractVariant(t,{params:a,path:o},{variants:i}){if(o.length){const r=o[0].toString();if(r==="Option"){if(a.length!==1)throw new Error(`Option requires 1 parameter, found ${a.length}`);return withTypeString(this.registry,{info:TypeDefInfo.Option,sub:this.__internal__createSiDef(a[0].type.unwrap())})}else if(r==="Result"){if(a.length!==2)throw new Error(`Result requires 2 parameters, found ${a.length}`);return withTypeString(this.registry,{info:TypeDefInfo.Result,sub:a.map(({type:s},c)=>objectSpread({name:["Ok","Error"][c]},this.__internal__createSiDef(s.unwrap())))})}}return i.length===0?{info:TypeDefInfo.Null,type:"Null"}:this.__internal__extractVariantEnum(t,i)}__internal__extractVariantEnum(t,a){const o=[];return a.slice().sort((i,r)=>i.index.cmp(r.index)).forEach(({fields:i,index:r,name:s})=>{const c=r.toNumber();for(;o.length!==c;)o.push({index:o.length,info:TypeDefInfo.Null,name:`__Unused${o.length}`,type:"Null"});o.push(objectSpread(this.__internal__extractFields(-1,i),{index:c,name:s.toString()}))}),withTypeString(this.registry,{info:TypeDefInfo.Enum,lookupIndex:t,lookupName:this.__internal__names[t],sub:o})}}function flattenUniq(n,e=[]){for(let t=0,a=n.length;t<a;t++){const o=n[t];Array.isArray(o)?flattenUniq(o,e):e.push(o)}return[...new Set(e)]}function getSiName(n,e){const t=n.getTypeDef(e);return t.lookupName||t.type}function extractSubSingle(n,{sub:e}){const{lookupName:t,type:a}=e;return extractTypes$1([t||a])}function extractSubArray(n,{sub:e}){return extractTypes$1(e.map(({lookupName:t,type:a})=>t||a))}function unhandled(n,{info:e}){throw new Error(`Unhandled: Unable to create and validate type from ${n} (info=${TypeDefInfo[e]})`)}const mapping$1={[TypeDefInfo.BTreeMap]:extractSubArray,[TypeDefInfo.BTreeSet]:extractSubSingle,[TypeDefInfo.Compact]:extractSubSingle,[TypeDefInfo.DoNotConstruct]:unhandled,[TypeDefInfo.Enum]:extractSubArray,[TypeDefInfo.HashMap]:extractSubArray,[TypeDefInfo.Int]:unhandled,[TypeDefInfo.Linkage]:extractSubSingle,[TypeDefInfo.Null]:unhandled,[TypeDefInfo.Option]:extractSubSingle,[TypeDefInfo.Plain]:(n,e)=>e.lookupName||e.type,[TypeDefInfo.Range]:extractSubSingle,[TypeDefInfo.RangeInclusive]:extractSubSingle,[TypeDefInfo.Result]:extractSubArray,[TypeDefInfo.Set]:extractSubArray,[TypeDefInfo.Si]:unhandled,[TypeDefInfo.Struct]:extractSubArray,[TypeDefInfo.Tuple]:extractSubArray,[TypeDefInfo.UInt]:unhandled,[TypeDefInfo.Vec]:extractSubSingle,[TypeDefInfo.VecFixed]:extractSubSingle,[TypeDefInfo.WrapperKeepOpaque]:extractSubSingle,[TypeDefInfo.WrapperOpaque]:extractSubSingle};function extractTypes$1(n){const e=n.length,t=new Array(e);for(let a=0;a<e;a++){const o=n[a],i=getTypeDef(o);t[a]=mapping$1[i.info](o,i)}return t}const l$7=logger("metadata");function validateTypes(n,e,t){const a=flattenUniq(extractTypes$1(t)).filter(o=>!n.hasType(o)&&!n.isLookupType(o)).sort();if(a.length!==0){const o=`Unknown types found, no types for ${a.join(", ")}`;if(e)throw new Error(o);l$7.warn(o)}return t}function extractTypes(n,e){return e.map(({type:t})=>n.getTypeDef(t).type)}function extractFieldTypes(n,e){return n.getSiType(e).def.asVariant.variants.map(({fields:t})=>extractTypes(n,t))}function getPalletNames({lookup:n,pallets:e}){return e.reduce((t,{calls:a,constants:o,events:i,storage:r})=>(t.push([extractTypes(n,o)]),a.isSome&&t.push(extractFieldTypes(n,a.unwrap().type)),i.isSome&&t.push(extractFieldTypes(n,i.unwrap().type)),r.isSome&&t.push(r.unwrap().items.map(({type:s})=>{if(s.isPlain)return[n.getTypeDef(s.asPlain).type];const{hashers:c,key:d,value:p}=s.asMap;return c.length===1?[n.getTypeDef(p).type,n.getTypeDef(d).type]:[n.getTypeDef(p).type,...n.getSiType(d).def.asTuple.map(h=>n.getTypeDef(h).type)]})),t),[])}function getUniqTypes(n,e,t){return validateTypes(n,t,flattenUniq(getPalletNames(e)))}function trimDocs(n){const e=n.map(a=>a.toString().trim()),t=e.findIndex(a=>!a.length);return t===-1?e:e.slice(0,t)}function toCallsOnly(n,{extrinsic:e,lookup:t,pallets:a}){return n.createTypeUnsafe("MetadataLatest",[{extrinsic:e,lookup:{types:t.types.map(({id:o,type:i})=>n.createTypeUnsafe("PortableType",[{id:o,type:objectSpread({},i,{docs:trimDocs(i.docs)})}]))},pallets:a.map(({calls:o,index:i,name:r})=>({calls:n.createTypeUnsafe("Option<PalletCallMetadataLatest>",[o.unwrapOr(null)]),index:i,name:r}))}]).toJSON()}function unwrapStorageSi(n){return n.isPlain?n.asPlain:n.asMap.value}function unwrapStorageType(n,e,t){const a=getSiName(n.lookup,unwrapStorageSi(e));return t?`Option<${a}>`:a}function lazyVariants(n,{type:e},t,a){const o={},i=n.getSiType(e).def.asVariant.variants;for(let r=0,s=i.length;r<s;r++)lazyMethod(o,i[r],a,t,r);return o}const crypto$1=xglobal.crypto;function getRandomValues(n){return crypto$1.getRandomValues(n)}const DEFAULT_CRYPTO={getRandomValues},DEFAULT_SELF={crypto:DEFAULT_CRYPTO};class Wbg{constructor(e){A(this,"__internal__bridge");A(this,"abort",()=>{throw new Error("abort")});A(this,"__wbindgen_is_undefined",e=>this.__internal__bridge.getObject(e)===void 0);A(this,"__wbindgen_throw",(e,t)=>{throw new Error(this.__internal__bridge.getString(e,t))});A(this,"__wbg_self_1b7a39e3a92c949c",()=>this.__internal__bridge.addObject(DEFAULT_SELF));A(this,"__wbg_require_604837428532a733",(e,t)=>{throw new Error(`Unable to require ${this.__internal__bridge.getString(e,t)}`)});A(this,"__wbg_crypto_968f1772287e2df0",e=>this.__internal__bridge.addObject(DEFAULT_CRYPTO));A(this,"__wbg_getRandomValues_a3d34b4fee3c2869",e=>this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues));A(this,"__wbg_getRandomValues_f5e14ab7ac8e995d",(e,t,a)=>{DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(t,a))});A(this,"__wbg_randomFillSync_d5bd2d655fdf256a",(e,t,a)=>{throw new Error("randomFillsync is not available")});A(this,"__wbindgen_object_drop_ref",e=>{this.__internal__bridge.takeObject(e)});this.__internal__bridge=e}}class Bridge{constructor(e){A(this,"__internal__createWasm");A(this,"__internal__heap");A(this,"__internal__wbg");A(this,"__internal__cachegetInt32");A(this,"__internal__cachegetUint8");A(this,"__internal__heapNext");A(this,"__internal__wasm");A(this,"__internal__wasmError");A(this,"__internal__wasmPromise");A(this,"__internal__type");this.__internal__createWasm=e,this.__internal__cachegetInt32=null,this.__internal__cachegetUint8=null,this.__internal__heap=new Array(32).fill(void 0).concat(void 0,null,!0,!1),this.__internal__heapNext=this.__internal__heap.length,this.__internal__type="none",this.__internal__wasm=null,this.__internal__wasmError=null,this.__internal__wasmPromise=null,this.__internal__wbg={...new Wbg(this)}}get error(){return this.__internal__wasmError}get type(){return this.__internal__type}get wasm(){return this.__internal__wasm}async init(e){(!this.__internal__wasmPromise||e)&&(this.__internal__wasmPromise=(e||this.__internal__createWasm)(this.__internal__wbg));const{error:t,type:a,wasm:o}=await this.__internal__wasmPromise;return this.__internal__type=a,this.__internal__wasm=o,this.__internal__wasmError=t,this.__internal__wasm}getObject(e){return this.__internal__heap[e]}dropObject(e){e<36||(this.__internal__heap[e]=this.__internal__heapNext,this.__internal__heapNext=e)}takeObject(e){const t=this.getObject(e);return this.dropObject(e),t}addObject(e){this.__internal__heapNext===this.__internal__heap.length&&this.__internal__heap.push(this.__internal__heap.length+1);const t=this.__internal__heapNext;return this.__internal__heapNext=this.__internal__heap[t],this.__internal__heap[t]=e,t}getInt32(){return(this.__internal__cachegetInt32===null||this.__internal__cachegetInt32.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetInt32=new Int32Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetInt32}getUint8(){return(this.__internal__cachegetUint8===null||this.__internal__cachegetUint8.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetUint8=new Uint8Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetUint8}getU8a(e,t){return this.getUint8().subarray(e/1,e/1+t)}getString(e,t){return u8aToString(this.getU8a(e,t))}allocU8a(e){const t=this.__internal__wasm.__wbindgen_malloc(e.length*1);return this.getUint8().set(e,t/1),[t,e.length]}allocString(e){return this.allocU8a(stringToU8a(e))}resultU8a(){const e=this.getInt32()[2],t=this.getInt32()[8/4+1],a=this.getU8a(e,t).slice();return this.__internal__wasm.__wbindgen_free(e,t*1),a}resultString(){return u8aToString(this.resultU8a())}}function createWasmFn(n,e,t){return async a=>{const o={error:null,type:"none",wasm:null};try{if(e!=null&&e.length){if(typeof WebAssembly!="object"||typeof WebAssembly.instantiate!="function")throw new Error("WebAssembly is not available in your environment")}else throw new Error("No WebAssembly provided for initialization");const i=await WebAssembly.instantiate(e,{wbg:a});o.wasm=i.instance.exports,o.type="wasm"}catch(i){o.error=`FATAL: Unable to initialize @polkadot/wasm-${n}:: ${i.message}`,console.error(o.error)}return o}}const CHR="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",map$1=new Array(256);for(let n=0,e=CHR.length;n<e;n++)map$1[CHR.charCodeAt(n)]=n;function base64Decode$1(n,e){let t=0,a=0,o=-1;for(let i=0,r=e.length-1;o!==r;i++)t=t<<6|map$1[n.charCodeAt(i)],(a+=6)>=8&&(e[++o]=t>>>(a-=8)&255);return e}const u8=Uint8Array,u16=Uint16Array,u32$1=Uint32Array,clim=new u8([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),fleb=new u8([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),fdeb=new u8([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),freb=(n,e)=>{const t=new u16(31);for(let o=0;o<31;++o)t[o]=e+=1<<n[o-1];const a=new u32$1(t[30]);for(let o=1;o<30;++o)for(let i=t[o];i<t[o+1];++i)a[i]=i-t[o]<<5|o;return[t,a]},[fl,revfl]=freb(fleb,2);fl[28]=258,revfl[258]=28;const[fd]=freb(fdeb,0),rev=new u16(32768);for(let n=0;n<32768;++n){let e=(n&43690)>>>1|(n&21845)<<1;e=(e&52428)>>>2|(e&13107)<<2,e=(e&61680)>>>4|(e&3855)<<4,rev[n]=((e&65280)>>>8|(e&255)<<8)>>>1}const hMap=(n,e,t)=>{const a=n.length;let o=0;const i=new u16(e);for(;o<a;++o)n[o]&&++i[n[o]-1];const r=new u16(e);for(o=1;o<e;++o)r[o]=r[o-1]+i[o-1]<<1;let s;{s=new u16(1<<e);const c=15-e;for(o=0;o<a;++o)if(n[o]){const d=o<<4|n[o],p=e-n[o];let h=r[n[o]-1]++<<p;for(const I=h|(1<<p)-1;h<=I;++h)s[rev[h]>>c]=d}}return s},flt=new u8(288);for(let n=0;n<144;++n)flt[n]=8;for(let n=144;n<256;++n)flt[n]=9;for(let n=256;n<280;++n)flt[n]=7;for(let n=280;n<288;++n)flt[n]=8;const fdt=new u8(32);for(let n=0;n<32;++n)fdt[n]=5;const flrm=hMap(flt,9),fdrm=hMap(fdt,5),bits=(n,e,t)=>{const a=e>>>3;return(n[a]|n[a+1]<<8)>>>(e&7)&t},bits16=(n,e)=>{const t=e>>>3;return(n[t]|n[t+1]<<8|n[t+2]<<16)>>>(e&7)},shft=n=>(n>>>3)+(n&7&&1),slc=(n,e,t)=>{(t==null||t>n.length)&&(t=n.length);const a=new(n instanceof u16?u16:n instanceof u32$1?u32$1:u8)(t-e);return a.set(n.subarray(e,t)),a},max=n=>{let e=n[0];for(let t=1,a=n.length;t<a;++t)n[t]>e&&(e=n[t]);return e},inflt=(n,e,t)=>{const a=!t||t.i;t||(t={});const o=n.length,i=!e||!a;e||(e=new u8(o*3));const r=P=>{let v=e.length;if(P>v){const E=new u8(Math.max(v<<1,P));E.set(e),e=E}};let s=t.f||0,c=t.p||0,d=t.b||0,p=t.l,h=t.d,I=t.m,_=t.n;if(s&&!p)return e;const k=o<<3;do{if(!p){t.f=s=bits(n,c,1);const M=bits(n,c+1,3);if(c+=3,M)if(M==1)p=flrm,h=fdrm,I=9,_=5;else if(M==2){const R=bits(n,c,31)+257,H=bits(n,c+10,15)+4,K=R+bits(n,c+5,31)+1;c+=14;const w=new u8(K),U=new u8(19);for(let O=0;O<H;++O)U[clim[O]]=bits(n,c+O*3,7);c+=H*3;const F=max(U),X=(1<<F)-1;if(!a&&c+K*(F+7)>k)break;const z=hMap(U,F);for(let O=0;O<K;){const u=z[bits(n,c,X)];c+=u&15;const m=u>>>4;if(m<16)w[O++]=m;else{let g=0,b=0;for(m==16?(b=3+bits(n,c,3),c+=2,g=w[O-1]):m==17?(b=3+bits(n,c,7),c+=3):m==18&&(b=11+bits(n,c,127),c+=7);b--;)w[O++]=g}}const L=w.subarray(0,R),J=w.subarray(R);I=max(L),_=max(J),p=hMap(L,I),h=hMap(J,_)}else throw"invalid block type";else{const R=shft(c)+4,H=n[R-4]|n[R-3]<<8,K=R+H;if(K>o){if(a)throw"unexpected EOF";break}i&&r(d+H),e.set(n.subarray(R,K),d),t.b=d+=H,t.p=c=K<<3;continue}if(c>k)throw"unexpected EOF"}i&&r(d+131072);const P=(1<<I)-1,v=(1<<_)-1,E=I+_+18;for(;a||c+E<k;){const M=p[bits16(n,c)&P],R=M>>>4;if(c+=M&15,c>k)throw"unexpected EOF";if(!M)throw"invalid length/literal";if(R<256)e[d++]=R;else if(R==256){p=void 0;break}else{let H=R-254;if(R>264){const X=R-257,z=fleb[X];H=bits(n,c,(1<<z)-1)+fl[X],c+=z}const K=h[bits16(n,c)&v],w=K>>>4;if(!K)throw"invalid distance";c+=K&15;let U=fd[w];if(w>3){const X=fdeb[w];U+=bits16(n,c)&(1<<X)-1,c+=X}if(c>k)throw"unexpected EOF";i&&r(d+131072);const F=d+H;for(;d<F;d+=4)e[d]=e[d-U],e[d+1]=e[d+1-U],e[d+2]=e[d+2-U],e[d+3]=e[d+3-U];d=F}}t.l=p,t.p=c,t.b=d,p&&(s=1,t.m=I,t.d=h,t.n=_)}while(!s);return d==e.length?e:slc(e,0,d)},zlv=n=>{if((n[0]&15)!=8||n[0]>>>4>7||(n[0]<<8|n[1])%31)throw"invalid zlib data";if(n[1]&32)throw"invalid zlib data: preset dictionaries not supported"};function unzlibSync(n,e){return inflt((zlv(n),n.subarray(2,-4)),e)}var lenIn=171008,lenOut=339468,bytes_1="";const wasmBytes=unzlibSync(base64Decode$1(bytes_1,new Uint8Array(lenIn)),new Uint8Array(lenOut)),createWasm=createWasmFn("crypto",wasmBytes),bridge=new Bridge(createWasm);async function initBridge(n){return bridge.init(n)}function withWasm(n){return(...e)=>{if(!bridge.wasm)throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return n(bridge.wasm,...e)}}const bip39ToEntropy=withWasm((n,e)=>(n.ext_bip39_to_entropy(8,...bridge.allocString(e)),bridge.resultU8a())),bip39ToMiniSecret=withWasm((n,e,t)=>(n.ext_bip39_to_mini_secret(8,...bridge.allocString(e),...bridge.allocString(t)),bridge.resultU8a())),bip39ToSeed=withWasm((n,e,t)=>(n.ext_bip39_to_seed(8,...bridge.allocString(e),...bridge.allocString(t)),bridge.resultU8a())),bip39Validate=withWasm((n,e)=>n.ext_bip39_validate(...bridge.allocString(e))!==0),ed25519KeypairFromSeed=withWasm((n,e)=>(n.ext_ed_from_seed(8,...bridge.allocU8a(e)),bridge.resultU8a())),ed25519Sign$1=withWasm((n,e,t,a)=>(n.ext_ed_sign(8,...bridge.allocU8a(e),...bridge.allocU8a(t),...bridge.allocU8a(a)),bridge.resultU8a())),ed25519Verify$1=withWasm((n,e,t,a)=>n.ext_ed_verify(...bridge.allocU8a(e),...bridge.allocU8a(t),...bridge.allocU8a(a))!==0),secp256k1FromSeed=withWasm((n,e)=>(n.ext_secp_from_seed(8,...bridge.allocU8a(e)),bridge.resultU8a())),secp256k1Compress$1=withWasm((n,e)=>(n.ext_secp_pub_compress(8,...bridge.allocU8a(e)),bridge.resultU8a())),secp256k1Expand$1=withWasm((n,e)=>(n.ext_secp_pub_expand(8,...bridge.allocU8a(e)),bridge.resultU8a())),secp256k1Recover$1=withWasm((n,e,t,a)=>(n.ext_secp_recover(8,...bridge.allocU8a(e),...bridge.allocU8a(t),a),bridge.resultU8a())),secp256k1Sign$1=withWasm((n,e,t)=>(n.ext_secp_sign(8,...bridge.allocU8a(e),...bridge.allocU8a(t)),bridge.resultU8a())),sr25519DeriveKeypairHard=withWasm((n,e,t)=>(n.ext_sr_derive_keypair_hard(8,...bridge.allocU8a(e),...bridge.allocU8a(t)),bridge.resultU8a())),sr25519DeriveKeypairSoft=withWasm((n,e,t)=>(n.ext_sr_derive_keypair_soft(8,...bridge.allocU8a(e),...bridge.allocU8a(t)),bridge.resultU8a())),sr25519KeypairFromSeed=withWasm((n,e)=>(n.ext_sr_from_seed(8,...bridge.allocU8a(e)),bridge.resultU8a())),sr25519Sign$1=withWasm((n,e,t,a)=>(n.ext_sr_sign(8,...bridge.allocU8a(e),...bridge.allocU8a(t),...bridge.allocU8a(a)),bridge.resultU8a())),sr25519Verify$1=withWasm((n,e,t,a)=>n.ext_sr_verify(...bridge.allocU8a(e),...bridge.allocU8a(t),...bridge.allocU8a(a))!==0),vrfSign=withWasm((n,e,t,a,o)=>(n.ext_vrf_sign(8,...bridge.allocU8a(e),...bridge.allocU8a(t),...bridge.allocU8a(a),...bridge.allocU8a(o)),bridge.resultU8a())),vrfVerify=withWasm((n,e,t,a,o,i)=>n.ext_vrf_verify(...bridge.allocU8a(e),...bridge.allocU8a(t),...bridge.allocU8a(a),...bridge.allocU8a(o),...bridge.allocU8a(i))!==0),blake2b$1=withWasm((n,e,t,a)=>(n.ext_blake2b(8,...bridge.allocU8a(e),...bridge.allocU8a(t),a),bridge.resultU8a())),hmacSha256=withWasm((n,e,t)=>(n.ext_hmac_sha256(8,...bridge.allocU8a(e),...bridge.allocU8a(t)),bridge.resultU8a())),hmacSha512=withWasm((n,e,t)=>(n.ext_hmac_sha512(8,...bridge.allocU8a(e),...bridge.allocU8a(t)),bridge.resultU8a())),keccak256=withWasm((n,e)=>(n.ext_keccak256(8,...bridge.allocU8a(e)),bridge.resultU8a())),keccak512=withWasm((n,e)=>(n.ext_keccak512(8,...bridge.allocU8a(e)),bridge.resultU8a())),pbkdf2$1=withWasm((n,e,t,a)=>(n.ext_pbkdf2(8,...bridge.allocU8a(e),...bridge.allocU8a(t),a),bridge.resultU8a())),scrypt$1=withWasm((n,e,t,a,o,i)=>(n.ext_scrypt(8,...bridge.allocU8a(e),...bridge.allocU8a(t),a,o,i),bridge.resultU8a())),sha256$1=withWasm((n,e)=>(n.ext_sha256(8,...bridge.allocU8a(e)),bridge.resultU8a())),sha512$1=withWasm((n,e)=>(n.ext_sha512(8,...bridge.allocU8a(e)),bridge.resultU8a())),twox=withWasm((n,e,t)=>(n.ext_twox(8,...bridge.allocU8a(e),t),bridge.resultU8a()));function isReady(){return!!bridge.wasm}async function waitReady(){try{return!!await initBridge()}catch{return!1}}function cryptoWaitReady(){return waitReady().then(()=>{if(!isReady())throw new Error("Unable to initialize @polkadot/util-crypto");return!0}).catch(()=>!1)}/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */function isBytes$2(n){return n instanceof Uint8Array||n!=null&&typeof n=="object"&&n.constructor.name==="Uint8Array"}function chain$1(...n){const e=i=>i,t=(i,r)=>s=>i(r(s)),a=n.map(i=>i.encode).reduceRight(t,e),o=n.map(i=>i.decode).reduce(t,e);return{encode:a,decode:o}}function alphabet(n){return{encode:e=>{if(!Array.isArray(e)||e.length&&typeof e[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return e.map(t=>{if(t<0||t>=n.length)throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${n.length})`);return n[t]})},decode:e=>{if(!Array.isArray(e)||e.length&&typeof e[0]!="string")throw new Error("alphabet.decode input should be array of strings");return e.map(t=>{if(typeof t!="string")throw new Error(`alphabet.decode: not string element=${t}`);const a=n.indexOf(t);if(a===-1)throw new Error(`Unknown letter: "${t}". Allowed: ${n}`);return a})}}}function join(n=""){if(typeof n!="string")throw new Error("join separator should be string");return{encode:e=>{if(!Array.isArray(e)||e.length&&typeof e[0]!="string")throw new Error("join.encode input should be array of strings");for(let t of e)if(typeof t!="string")throw new Error(`join.encode: non-string input=${t}`);return e.join(n)},decode:e=>{if(typeof e!="string")throw new Error("join.decode input should be string");return e.split(n)}}}function padding(n,e="="){if(typeof e!="string")throw new Error("padding chr should be string");return{encode(t){if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("padding.encode input should be array of strings");for(let a of t)if(typeof a!="string")throw new Error(`padding.encode: non-string input=${a}`);for(;t.length*n%8;)t.push(e);return t},decode(t){if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("padding.encode input should be array of strings");for(let o of t)if(typeof o!="string")throw new Error(`padding.decode: non-string input=${o}`);let a=t.length;if(a*n%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;a>0&&t[a-1]===e;a--)if(!((a-1)*n%8))throw new Error("Invalid padding: string has too much padding");return t.slice(0,a)}}}function convertRadix(n,e,t){if(e<2)throw new Error(`convertRadix: wrong from=${e}, base cannot be less than 2`);if(t<2)throw new Error(`convertRadix: wrong to=${t}, base cannot be less than 2`);if(!Array.isArray(n))throw new Error("convertRadix: data should be array");if(!n.length)return[];let a=0;const o=[],i=Array.from(n);for(i.forEach(r=>{if(r<0||r>=e)throw new Error(`Wrong integer: ${r}`)});;){let r=0,s=!0;for(let c=a;c<i.length;c++){const d=i[c],p=e*r+d;if(!Number.isSafeInteger(p)||e*r/e!==r||p-d!==e*r)throw new Error("convertRadix: carry overflow");r=p%t;const h=Math.floor(p/t);if(i[c]=h,!Number.isSafeInteger(h)||h*t+r!==p)throw new Error("convertRadix: carry overflow");if(s)h?s=!1:a=c;else continue}if(o.push(r),s)break}for(let r=0;r<n.length-1&&n[r]===0;r++)o.push(0);return o.reverse()}const gcd=(n,e)=>e?gcd(e,n%e):n,radix2carry=(n,e)=>n+(e-gcd(n,e));function convertRadix2(n,e,t,a){if(!Array.isArray(n))throw new Error("convertRadix2: data should be array");if(e<=0||e>32)throw new Error(`convertRadix2: wrong from=${e}`);if(t<=0||t>32)throw new Error(`convertRadix2: wrong to=${t}`);if(radix2carry(e,t)>32)throw new Error(`convertRadix2: carry overflow from=${e} to=${t} carryBits=${radix2carry(e,t)}`);let o=0,i=0;const r=2**t-1,s=[];for(const c of n){if(c>=2**e)throw new Error(`convertRadix2: invalid data word=${c} from=${e}`);if(o=o<<e|c,i+e>32)throw new Error(`convertRadix2: carry overflow pos=${i} from=${e}`);for(i+=e;i>=t;i-=t)s.push((o>>i-t&r)>>>0);o&=2**i-1}if(o=o<<t-i&r,!a&&i>=e)throw new Error("Excess padding");if(!a&&o)throw new Error(`Non-zero padding: ${o}`);return a&&i>0&&s.push(o>>>0),s}function radix(n){return{encode:e=>{if(!isBytes$2(e))throw new Error("radix.encode input should be Uint8Array");return convertRadix(Array.from(e),2**8,n)},decode:e=>{if(!Array.isArray(e)||e.length&&typeof e[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(convertRadix(e,n,2**8))}}}function radix2(n,e=!1){if(n<=0||n>32)throw new Error("radix2: bits should be in (0..32]");if(radix2carry(8,n)>32||radix2carry(n,8)>32)throw new Error("radix2: carry overflow");return{encode:t=>{if(!isBytes$2(t))throw new Error("radix2.encode input should be Uint8Array");return convertRadix2(Array.from(t),8,n,!e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix2.decode input should be array of numbers");return Uint8Array.from(convertRadix2(t,n,8,e))}}}const base64=chain$1(radix2(6),alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),padding(6),join("")),genBase58=n=>chain$1(radix(58),alphabet(n),join("")),base58=genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");function createDecode({coder:n,ipfs:e},t){return(a,o)=>(t(a,o),n.decode(e&&o?a.substring(1):a))}function createEncode({coder:n,ipfs:e}){return(t,a)=>{const o=n.encode(u8aToU8a(t));return e&&a?`${e}${o}`:o}}function createValidate({chars:n,ipfs:e,type:t,withPadding:a}){return(o,i)=>{if(typeof o!="string")throw new Error(`Expected ${t} string input`);if(e&&i&&!o.startsWith(e))throw new Error(`Expected ipfs-compatible ${t} to start with '${e}'`);for(let r=i?1:0,s=o.length;r<s;r++)if(!n.includes(o[r]))if(a&&o[r]==="="){if(r!==s-1){if(o[r+1]!=="=")throw new Error(`Invalid ${t} padding sequence "${o[r]}${o[r+1]}" at index ${r}`)}}else throw new Error(`Invalid ${t} character "${o[r]}" (0x${o.charCodeAt(r).toString(16)}) at index ${r}`);return!0}}const config$1={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:base58,ipfs:"z",type:"base58"},base58Validate=createValidate(config$1),base58Decode=createDecode(config$1,base58Validate),base58Encode=createEncode(config$1);function number(n){if(!Number.isSafeInteger(n)||n<0)throw new Error(`positive integer expected, not ${n}`)}function isBytes$1(n){return n instanceof Uint8Array||n!=null&&typeof n=="object"&&n.constructor.name==="Uint8Array"}function bytes(n,...e){if(!isBytes$1(n))throw new Error("Uint8Array expected");if(e.length>0&&!e.includes(n.length))throw new Error(`Uint8Array expected of length ${e}, not of length=${n.length}`)}function hash(n){if(typeof n!="function"||typeof n.create!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");number(n.outputLen),number(n.blockLen)}function exists(n,e=!0){if(n.destroyed)throw new Error("Hash instance has been destroyed");if(e&&n.finished)throw new Error("Hash#digest() has already been called")}function output(n,e){bytes(n);const t=e.outputLen;if(n.length<t)throw new Error(`digestInto() expects output buffer of length at least ${t}`)}const crypto=typeof globalThis=="object"&&"crypto"in globalThis?globalThis.crypto:void 0;/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */const u32=n=>new Uint32Array(n.buffer,n.byteOffset,Math.floor(n.byteLength/4)),createView=n=>new DataView(n.buffer,n.byteOffset,n.byteLength),rotr=(n,e)=>n<<32-e|n>>>e,rotl$1=(n,e)=>n<<e|n>>>32-e>>>0,isLE=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68,byteSwap=n=>n<<24&4278190080|n<<8&16711680|n>>>8&65280|n>>>24&255,byteSwapIfBE=isLE?n=>n:n=>byteSwap(n);function byteSwap32(n){for(let e=0;e<n.length;e++)n[e]=byteSwap(n[e])}function utf8ToBytes$1(n){if(typeof n!="string")throw new Error(`utf8ToBytes expected string, got ${typeof n}`);return new Uint8Array(new TextEncoder().encode(n))}function toBytes(n){return typeof n=="string"&&(n=utf8ToBytes$1(n)),bytes(n),n}function concatBytes$1(...n){let e=0;for(let a=0;a<n.length;a++){const o=n[a];bytes(o),e+=o.length}const t=new Uint8Array(e);for(let a=0,o=0;a<n.length;a++){const i=n[a];t.set(i,o),o+=i.length}return t}class Hash{clone(){return this._cloneInto()}}const toStr={}.toString;function checkOpts(n,e){if(e!==void 0&&toStr.call(e)!=="[object Object]")throw new Error("Options should be object or undefined");return Object.assign(n,e)}function wrapConstructor(n){const e=a=>n().update(toBytes(a)).digest(),t=n();return e.outputLen=t.outputLen,e.blockLen=t.blockLen,e.create=()=>n(),e}function wrapConstructorWithOpts(n){const e=(a,o)=>n(o).update(toBytes(a)).digest(),t=n({});return e.outputLen=t.outputLen,e.blockLen=t.blockLen,e.create=a=>n(a),e}function randomBytes(n=32){if(crypto&&typeof crypto.getRandomValues=="function")return crypto.getRandomValues(new Uint8Array(n));throw new Error("crypto.getRandomValues must be defined")}const SIGMA=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3]);class BLAKE extends Hash{constructor(e,t,a={},o,i,r){if(super(),this.blockLen=e,this.outputLen=t,this.length=0,this.pos=0,this.finished=!1,this.destroyed=!1,number(e),number(t),number(o),t<0||t>o)throw new Error("outputLen bigger than keyLen");if(a.key!==void 0&&(a.key.length<1||a.key.length>o))throw new Error(`key must be up 1..${o} byte long or undefined`);if(a.salt!==void 0&&a.salt.length!==i)throw new Error(`salt must be ${i} byte long or undefined`);if(a.personalization!==void 0&&a.personalization.length!==r)throw new Error(`personalization must be ${r} byte long or undefined`);this.buffer32=u32(this.buffer=new Uint8Array(e))}update(e){exists(this);const{blockLen:t,buffer:a,buffer32:o}=this;e=toBytes(e);const i=e.length,r=e.byteOffset,s=e.buffer;for(let c=0;c<i;){this.pos===t&&(isLE||byteSwap32(o),this.compress(o,0,!1),isLE||byteSwap32(o),this.pos=0);const d=Math.min(t-this.pos,i-c),p=r+c;if(d===t&&!(p%4)&&c+d<i){const h=new Uint32Array(s,p,Math.floor((i-c)/4));isLE||byteSwap32(h);for(let I=0;c+t<i;I+=o.length,c+=t)this.length+=t,this.compress(h,I,!1);isLE||byteSwap32(h);continue}a.set(e.subarray(c,c+d),this.pos),this.pos+=d,this.length+=d,c+=d}return this}digestInto(e){exists(this),output(e,this);const{pos:t,buffer32:a}=this;this.finished=!0,this.buffer.subarray(t).fill(0),isLE||byteSwap32(a),this.compress(a,0,!0),isLE||byteSwap32(a);const o=u32(e);this.get().forEach((i,r)=>o[r]=byteSwapIfBE(i))}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const a=e.slice(0,t);return this.destroy(),a}_cloneInto(e){const{buffer:t,length:a,finished:o,destroyed:i,outputLen:r,pos:s}=this;return e||(e=new this.constructor({dkLen:r})),e.set(...this.get()),e.length=a,e.finished=o,e.destroyed=i,e.outputLen=r,e.buffer.set(t),e.pos=s,e}}const U32_MASK64=BigInt(2**32-1),_32n$1=BigInt(32);function fromBig(n,e=!1){return e?{h:Number(n&U32_MASK64),l:Number(n>>_32n$1&U32_MASK64)}:{h:Number(n>>_32n$1&U32_MASK64)|0,l:Number(n&U32_MASK64)|0}}function split(n,e=!1){let t=new Uint32Array(n.length),a=new Uint32Array(n.length);for(let o=0;o<n.length;o++){const{h:i,l:r}=fromBig(n[o],e);[t[o],a[o]]=[i,r]}return[t,a]}const toBig=(n,e)=>BigInt(n>>>0)<<_32n$1|BigInt(e>>>0),shrSH=(n,e,t)=>n>>>t,shrSL=(n,e,t)=>n<<32-t|e>>>t,rotrSH=(n,e,t)=>n>>>t|e<<32-t,rotrSL=(n,e,t)=>n<<32-t|e>>>t,rotrBH=(n,e,t)=>n<<64-t|e>>>t-32,rotrBL=(n,e,t)=>n>>>t-32|e<<64-t,rotr32H=(n,e)=>e,rotr32L=(n,e)=>n,rotlSH=(n,e,t)=>n<<t|e>>>32-t,rotlSL=(n,e,t)=>e<<t|n>>>32-t,rotlBH=(n,e,t)=>e<<t-32|n>>>64-t,rotlBL=(n,e,t)=>n<<t-32|e>>>64-t;function add(n,e,t,a){const o=(e>>>0)+(a>>>0);return{h:n+t+(o/2**32|0)|0,l:o|0}}const add3L=(n,e,t)=>(n>>>0)+(e>>>0)+(t>>>0),add3H=(n,e,t,a)=>e+t+a+(n/2**32|0)|0,add4L=(n,e,t,a)=>(n>>>0)+(e>>>0)+(t>>>0)+(a>>>0),add4H=(n,e,t,a,o)=>e+t+a+o+(n/2**32|0)|0,add5L=(n,e,t,a,o)=>(n>>>0)+(e>>>0)+(t>>>0)+(a>>>0)+(o>>>0),add5H=(n,e,t,a,o,i)=>e+t+a+o+i+(n/2**32|0)|0,u64={fromBig,split,toBig,shrSH,shrSL,rotrSH,rotrSL,rotrBH,rotrBL,rotr32H,rotr32L,rotlSH,rotlSL,rotlBH,rotlBL,add,add3L,add3H,add4L,add4H,add5H,add5L},B2B_IV=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),BBUF=new Uint32Array(32);function G1b(n,e,t,a,o,i){const r=o[i],s=o[i+1];let c=BBUF[2*n],d=BBUF[2*n+1],p=BBUF[2*e],h=BBUF[2*e+1],I=BBUF[2*t],_=BBUF[2*t+1],k=BBUF[2*a],P=BBUF[2*a+1],v=u64.add3L(c,p,r);d=u64.add3H(v,d,h,s),c=v|0,{Dh:P,Dl:k}={Dh:P^d,Dl:k^c},{Dh:P,Dl:k}={Dh:u64.rotr32H(P,k),Dl:u64.rotr32L(P,k)},{h:_,l:I}=u64.add(_,I,P,k),{Bh:h,Bl:p}={Bh:h^_,Bl:p^I},{Bh:h,Bl:p}={Bh:u64.rotrSH(h,p,24),Bl:u64.rotrSL(h,p,24)},BBUF[2*n]=c,BBUF[2*n+1]=d,BBUF[2*e]=p,BBUF[2*e+1]=h,BBUF[2*t]=I,BBUF[2*t+1]=_,BBUF[2*a]=k,BBUF[2*a+1]=P}function G2b(n,e,t,a,o,i){const r=o[i],s=o[i+1];let c=BBUF[2*n],d=BBUF[2*n+1],p=BBUF[2*e],h=BBUF[2*e+1],I=BBUF[2*t],_=BBUF[2*t+1],k=BBUF[2*a],P=BBUF[2*a+1],v=u64.add3L(c,p,r);d=u64.add3H(v,d,h,s),c=v|0,{Dh:P,Dl:k}={Dh:P^d,Dl:k^c},{Dh:P,Dl:k}={Dh:u64.rotrSH(P,k,16),Dl:u64.rotrSL(P,k,16)},{h:_,l:I}=u64.add(_,I,P,k),{Bh:h,Bl:p}={Bh:h^_,Bl:p^I},{Bh:h,Bl:p}={Bh:u64.rotrBH(h,p,63),Bl:u64.rotrBL(h,p,63)},BBUF[2*n]=c,BBUF[2*n+1]=d,BBUF[2*e]=p,BBUF[2*e+1]=h,BBUF[2*t]=I,BBUF[2*t+1]=_,BBUF[2*a]=k,BBUF[2*a+1]=P}class BLAKE2b extends BLAKE{constructor(e={}){super(128,e.dkLen===void 0?64:e.dkLen,e,64,16,16),this.v0l=B2B_IV[0]|0,this.v0h=B2B_IV[1]|0,this.v1l=B2B_IV[2]|0,this.v1h=B2B_IV[3]|0,this.v2l=B2B_IV[4]|0,this.v2h=B2B_IV[5]|0,this.v3l=B2B_IV[6]|0,this.v3h=B2B_IV[7]|0,this.v4l=B2B_IV[8]|0,this.v4h=B2B_IV[9]|0,this.v5l=B2B_IV[10]|0,this.v5h=B2B_IV[11]|0,this.v6l=B2B_IV[12]|0,this.v6h=B2B_IV[13]|0,this.v7l=B2B_IV[14]|0,this.v7h=B2B_IV[15]|0;const t=e.key?e.key.length:0;if(this.v0l^=this.outputLen|t<<8|65536|1<<24,e.salt){const a=u32(toBytes(e.salt));this.v4l^=byteSwapIfBE(a[0]),this.v4h^=byteSwapIfBE(a[1]),this.v5l^=byteSwapIfBE(a[2]),this.v5h^=byteSwapIfBE(a[3])}if(e.personalization){const a=u32(toBytes(e.personalization));this.v6l^=byteSwapIfBE(a[0]),this.v6h^=byteSwapIfBE(a[1]),this.v7l^=byteSwapIfBE(a[2]),this.v7h^=byteSwapIfBE(a[3])}if(e.key){const a=new Uint8Array(this.blockLen);a.set(toBytes(e.key)),this.update(a)}}get(){let{v0l:e,v0h:t,v1l:a,v1h:o,v2l:i,v2h:r,v3l:s,v3h:c,v4l:d,v4h:p,v5l:h,v5h:I,v6l:_,v6h:k,v7l:P,v7h:v}=this;return[e,t,a,o,i,r,s,c,d,p,h,I,_,k,P,v]}set(e,t,a,o,i,r,s,c,d,p,h,I,_,k,P,v){this.v0l=e|0,this.v0h=t|0,this.v1l=a|0,this.v1h=o|0,this.v2l=i|0,this.v2h=r|0,this.v3l=s|0,this.v3h=c|0,this.v4l=d|0,this.v4h=p|0,this.v5l=h|0,this.v5h=I|0,this.v6l=_|0,this.v6h=k|0,this.v7l=P|0,this.v7h=v|0}compress(e,t,a){this.get().forEach((c,d)=>BBUF[d]=c),BBUF.set(B2B_IV,16);let{h:o,l:i}=u64.fromBig(BigInt(this.length));BBUF[24]=B2B_IV[8]^i,BBUF[25]=B2B_IV[9]^o,a&&(BBUF[28]=~BBUF[28],BBUF[29]=~BBUF[29]);let r=0;const s=SIGMA;for(let c=0;c<12;c++)G1b(0,4,8,12,e,t+2*s[r++]),G2b(0,4,8,12,e,t+2*s[r++]),G1b(1,5,9,13,e,t+2*s[r++]),G2b(1,5,9,13,e,t+2*s[r++]),G1b(2,6,10,14,e,t+2*s[r++]),G2b(2,6,10,14,e,t+2*s[r++]),G1b(3,7,11,15,e,t+2*s[r++]),G2b(3,7,11,15,e,t+2*s[r++]),G1b(0,5,10,15,e,t+2*s[r++]),G2b(0,5,10,15,e,t+2*s[r++]),G1b(1,6,11,12,e,t+2*s[r++]),G2b(1,6,11,12,e,t+2*s[r++]),G1b(2,7,8,13,e,t+2*s[r++]),G2b(2,7,8,13,e,t+2*s[r++]),G1b(3,4,9,14,e,t+2*s[r++]),G2b(3,4,9,14,e,t+2*s[r++]);this.v0l^=BBUF[0]^BBUF[16],this.v0h^=BBUF[1]^BBUF[17],this.v1l^=BBUF[2]^BBUF[18],this.v1h^=BBUF[3]^BBUF[19],this.v2l^=BBUF[4]^BBUF[20],this.v2h^=BBUF[5]^BBUF[21],this.v3l^=BBUF[6]^BBUF[22],this.v3h^=BBUF[7]^BBUF[23],this.v4l^=BBUF[8]^BBUF[24],this.v4h^=BBUF[9]^BBUF[25],this.v5l^=BBUF[10]^BBUF[26],this.v5h^=BBUF[11]^BBUF[27],this.v6l^=BBUF[12]^BBUF[28],this.v6h^=BBUF[13]^BBUF[29],this.v7l^=BBUF[14]^BBUF[30],this.v7h^=BBUF[15]^BBUF[31],BBUF.fill(0)}destroy(){this.destroyed=!0,this.buffer32.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const blake2b=wrapConstructorWithOpts(n=>new BLAKE2b(n));function createAsHex(n){return(...e)=>u8aToHex(n(...e))}function createBitHasher(n,e){return(t,a)=>e(t,n,a)}function createDualHasher(n,e){return(t,a=256,o)=>{const i=u8aToU8a(t);return!hasBigInt||!o&&isReady()?n[a](i):e[a](i)}}function blake2AsU8a(n,e=256,t,a){const o=Math.ceil(e/8),i=u8aToU8a(n);return!hasBigInt||!a&&isReady()?blake2b$1(i,u8aToU8a(t),o):t?blake2b(i,{dkLen:o,key:t}):blake2b(i,{dkLen:o})}const blake2AsHex=createAsHex(blake2AsU8a),SS58_PREFIX=stringToU8a("SS58PRE");function sshash(n){return blake2AsU8a(u8aConcat(SS58_PREFIX,n),512)}function checkAddressChecksum(n){const e=n[0]&64?2:1,t=e===1?n[0]:(n[0]&63)<<2|n[1]>>6|(n[1]&63)<<8,a=[34+e,35+e].includes(n.length),o=n.length-(a?2:1),i=sshash(n.subarray(0,o));return[(n[0]&128)===0&&![46,47].includes(n[0])&&(a?n[n.length-2]===i[0]&&n[n.length-1]===i[1]:n[n.length-1]===i[0]),o,e,t]}const knownSubstrate=[{prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},{prefix:1,network:"BareSr25519",displayName:"Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",symbols:[],decimals:[],standardAccount:"Sr25519",website:null},{prefix:2,network:"kusama",displayName:"Kusama Relay Chain",symbols:["KSM"],decimals:[12],standardAccount:"*25519",website:"https://kusama.network"},{prefix:3,network:"BareEd25519",displayName:"Bare 32-bit Ed25519 public key.",symbols:[],decimals:[],standardAccount:"Ed25519",website:null},{prefix:4,network:"katalchain",displayName:"Katal Chain",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:5,network:"astar",displayName:"Astar Network",symbols:["ASTR"],decimals:[18],standardAccount:"*25519",website:"https://astar.network"},{prefix:6,network:"bifrost",displayName:"Bifrost",symbols:["BNC"],decimals:[12],standardAccount:"*25519",website:"https://bifrost.finance/"},{prefix:7,network:"edgeware",displayName:"Edgeware",symbols:["EDG"],decimals:[18],standardAccount:"*25519",website:"https://edgewa.re"},{prefix:8,network:"karura",displayName:"Karura",symbols:["KAR"],decimals:[12],standardAccount:"*25519",website:"https://karura.network/"},{prefix:9,network:"reynolds",displayName:"Laminar Reynolds Canary",symbols:["REY"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:10,network:"acala",displayName:"Acala",symbols:["ACA"],decimals:[12],standardAccount:"*25519",website:"https://acala.network/"},{prefix:11,network:"laminar",displayName:"Laminar",symbols:["LAMI"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:12,network:"polymesh",displayName:"Polymesh",symbols:["POLYX"],decimals:[6],standardAccount:"*25519",website:"https://polymath.network/"},{prefix:13,network:"integritee",displayName:"Integritee",symbols:["TEER"],decimals:[12],standardAccount:"*25519",website:"https://integritee.network"},{prefix:14,network:"totem",displayName:"Totem",symbols:["TOTEM"],decimals:[0],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:15,network:"synesthesia",displayName:"Synesthesia",symbols:["SYN"],decimals:[12],standardAccount:"*25519",website:"https://synesthesia.network/"},{prefix:16,network:"kulupu",displayName:"Kulupu",symbols:["KLP"],decimals:[12],standardAccount:"*25519",website:"https://kulupu.network/"},{prefix:17,network:"dark",displayName:"Dark Mainnet",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:18,network:"darwinia",displayName:"Darwinia Network",symbols:["RING"],decimals:[18],standardAccount:"secp256k1",website:"https://darwinia.network"},{prefix:19,network:"watr",displayName:"Watr Protocol",symbols:["WATR"],decimals:[18],standardAccount:"*25519",website:"https://www.watr.org"},{prefix:20,network:"stafi",displayName:"Stafi",symbols:["FIS"],decimals:[12],standardAccount:"*25519",website:"https://stafi.io"},{prefix:21,network:"karmachain",displayName:"Karmacoin",symbols:["KCOIN"],decimals:[6],standardAccount:"*25519",website:"https://karmaco.in"},{prefix:22,network:"dock-pos-mainnet",displayName:"Dock Mainnet",symbols:["DCK"],decimals:[6],standardAccount:"*25519",website:"https://dock.io"},{prefix:23,network:"shift",displayName:"ShiftNrg",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:24,network:"zero",displayName:"ZERO",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:25,network:"zero-alphaville",displayName:"ZERO Alphaville",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:26,network:"jupiter",displayName:"Jupiter",symbols:["jDOT"],decimals:[10],standardAccount:"*25519",website:"https://jupiter.patract.io"},{prefix:27,network:"kabocha",displayName:"Kabocha",symbols:["KAB"],decimals:[12],standardAccount:"*25519",website:"https://kabocha.network"},{prefix:28,network:"subsocial",displayName:"Subsocial",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:29,network:"cord",displayName:"CORD Network",symbols:["DHI","WAY"],decimals:[12,12],standardAccount:"*25519",website:"https://cord.network/"},{prefix:30,network:"phala",displayName:"Phala Network",symbols:["PHA"],decimals:[12],standardAccount:"*25519",website:"https://phala.network"},{prefix:31,network:"litentry",displayName:"Litentry Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:32,network:"robonomics",displayName:"Robonomics",symbols:["XRT"],decimals:[9],standardAccount:"*25519",website:"https://robonomics.network"},{prefix:33,network:"datahighway",displayName:"DataHighway",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:34,network:"ares",displayName:"Ares Protocol",symbols:["ARES"],decimals:[12],standardAccount:"*25519",website:"https://www.aresprotocol.com/"},{prefix:35,network:"vln",displayName:"Valiu Liquidity Network",symbols:["USDv"],decimals:[15],standardAccount:"*25519",website:"https://valiu.com/"},{prefix:36,network:"centrifuge",displayName:"Centrifuge Chain",symbols:["CFG"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:37,network:"nodle",displayName:"Nodle Chain",symbols:["NODL"],decimals:[11],standardAccount:"*25519",website:"https://nodle.io/"},{prefix:38,network:"kilt",displayName:"KILT Spiritnet",symbols:["KILT"],decimals:[15],standardAccount:"*25519",website:"https://kilt.io/"},{prefix:39,network:"mathchain",displayName:"MathChain mainnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:40,network:"mathchain-testnet",displayName:"MathChain testnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:41,network:"polimec",displayName:"Polimec Protocol",symbols:["PLMC"],decimals:[10],standardAccount:"*25519",website:"https://www.polimec.org/"},{prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},{prefix:43,network:"BareSecp256k1",displayName:"Bare 32-bit ECDSA SECP-256k1 public key.",symbols:[],decimals:[],standardAccount:"secp256k1",website:null},{prefix:44,network:"chainx",displayName:"ChainX",symbols:["PCX"],decimals:[8],standardAccount:"*25519",website:"https://chainx.org/"},{prefix:45,network:"uniarts",displayName:"UniArts Network",symbols:["UART","UINK"],decimals:[12,12],standardAccount:"*25519",website:"https://uniarts.me"},{prefix:46,network:"reserved46",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:47,network:"reserved47",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:48,network:"neatcoin",displayName:"Neatcoin Mainnet",symbols:["NEAT"],decimals:[12],standardAccount:"*25519",website:"https://neatcoin.org"},{prefix:49,network:"picasso",displayName:"Picasso",symbols:["PICA"],decimals:[12],standardAccount:"*25519",website:"https://picasso.composable.finance"},{prefix:50,network:"composable",displayName:"Composable Finance",symbols:["LAYR"],decimals:[12],standardAccount:"*25519",website:"https://composable.finance"},{prefix:51,network:"oak",displayName:"OAK Network",symbols:["OAK","TUR"],decimals:[10,10],standardAccount:"*25519",website:"https://oak.tech"},{prefix:52,network:"KICO",displayName:"KICO",symbols:["KICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:53,network:"DICO",displayName:"DICO",symbols:["DICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:54,network:"cere",displayName:"Cere Network",symbols:["CERE"],decimals:[10],standardAccount:"*25519",website:"https://cere.network"},{prefix:55,network:"xxnetwork",displayName:"xx network",symbols:["XX"],decimals:[9],standardAccount:"*25519",website:"https://xx.network"},{prefix:56,network:"pendulum",displayName:"Pendulum chain",symbols:["PEN"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:57,network:"amplitude",displayName:"Amplitude chain",symbols:["AMPE"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:58,network:"eternal-civilization",displayName:"Eternal Civilization",symbols:["ECC"],decimals:[12],standardAccount:"*25519",website:"http://www.ysknfr.cn/"},{prefix:63,network:"hydradx",displayName:"Hydration",symbols:["HDX"],decimals:[12],standardAccount:"*25519",website:"https://hydration.net"},{prefix:65,network:"aventus",displayName:"Aventus Mainnet",symbols:["AVT"],decimals:[18],standardAccount:"*25519",website:"https://aventus.io"},{prefix:66,network:"crust",displayName:"Crust Network",symbols:["CRU"],decimals:[12],standardAccount:"*25519",website:"https://crust.network"},{prefix:67,network:"genshiro",displayName:"Genshiro Network",symbols:["GENS","EQD","LPT0"],decimals:[9,9,9],standardAccount:"*25519",website:"https://genshiro.equilibrium.io"},{prefix:68,network:"equilibrium",displayName:"Equilibrium Network",symbols:["EQ"],decimals:[9],standardAccount:"*25519",website:"https://equilibrium.io"},{prefix:69,network:"sora",displayName:"SORA Network",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:71,network:"p3d",displayName:"3DP network",symbols:["P3D"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:72,network:"p3dt",displayName:"3DP test network",symbols:["P3Dt"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:73,network:"zeitgeist",displayName:"Zeitgeist",symbols:["ZTG"],decimals:[10],standardAccount:"*25519",website:"https://zeitgeist.pm"},{prefix:77,network:"manta",displayName:"Manta network",symbols:["MANTA"],decimals:[18],standardAccount:"*25519",website:"https://manta.network"},{prefix:78,network:"calamari",displayName:"Calamari: Manta Canary Network",symbols:["KMA"],decimals:[12],standardAccount:"*25519",website:"https://manta.network"},{prefix:81,network:"sora_dot_para",displayName:"SORA Polkadot Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:88,network:"polkadex",displayName:"Polkadex Mainnet",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:89,network:"polkadexparachain",displayName:"Polkadex Parachain",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:90,network:"frequency",displayName:"Frequency",symbols:["FRQCY"],decimals:[8],standardAccount:"*25519",website:"https://www.frequency.xyz"},{prefix:92,network:"anmol",displayName:"Anmol Network",symbols:["ANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:93,network:"fragnova",displayName:"Fragnova Network",symbols:["NOVA"],decimals:[12],standardAccount:"*25519",website:"https://fragnova.com"},{prefix:98,network:"polkasmith",displayName:"PolkaSmith Canary Network",symbols:["PKS"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:99,network:"polkafoundry",displayName:"PolkaFoundry Network",symbols:["PKF"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:100,network:"ibtida",displayName:"Anmol Network Ibtida Canary network",symbols:["IANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:101,network:"origintrail-parachain",displayName:"OriginTrail Parachain",symbols:["OTP"],decimals:[12],standardAccount:"*25519",website:"https://parachain.origintrail.io/"},{prefix:105,network:"pontem-network",displayName:"Pontem Network",symbols:["PONT"],decimals:[10],standardAccount:"*25519",website:"https://pontem.network"},{prefix:110,network:"heiko",displayName:"Heiko",symbols:["HKO"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:113,network:"integritee-incognito",displayName:"Integritee Incognito",symbols:[],decimals:[],standardAccount:"*25519",website:"https://integritee.network"},{prefix:117,network:"tinker",displayName:"Tinker",symbols:["TNKR"],decimals:[12],standardAccount:"*25519",website:"https://invarch.network"},{prefix:126,network:"joystream",displayName:"Joystream",symbols:["JOY"],decimals:[10],standardAccount:"*25519",website:"https://www.joystream.org"},{prefix:128,network:"clover",displayName:"Clover Finance",symbols:["CLV"],decimals:[18],standardAccount:"*25519",website:"https://clover.finance"},{prefix:129,network:"dorafactory-polkadot",displayName:"Dorafactory Polkadot Network",symbols:["DORA"],decimals:[12],standardAccount:"*25519",website:"https://dorafactory.org"},{prefix:131,network:"litmus",displayName:"Litmus Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:136,network:"altair",displayName:"Altair",symbols:["AIR"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:137,network:"vara",displayName:"Vara Network",symbols:["VARA"],decimals:[12],standardAccount:"*25519",website:"https://vara.network/"},{prefix:172,network:"parallel",displayName:"Parallel",symbols:["PARA"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:252,network:"social-network",displayName:"Social Network",symbols:["NET"],decimals:[18],standardAccount:"*25519",website:"https://social.network"},{prefix:255,network:"quartz_mainnet",displayName:"QUARTZ by UNIQUE",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:268,network:"pioneer_network",displayName:"Pioneer Network by Bit.Country",symbols:["NEER"],decimals:[18],standardAccount:"*25519",website:"https://bit.country"},{prefix:420,network:"sora_kusama_para",displayName:"SORA Kusama Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:440,network:"allfeat_network",displayName:"Allfeat Network",symbols:["AFT"],decimals:[12],standardAccount:"*25519",website:"https://allfeat.network"},{prefix:666,network:"metaquity_network",displayName:"Metaquity Network",symbols:["MQTY"],decimals:[18],standardAccount:"*25519",website:"https://metaquity.xyz/"},{prefix:777,network:"curio",displayName:"Curio",symbols:["CGT"],decimals:[18],standardAccount:"*25519",website:"https://parachain.capitaldex.exchange/"},{prefix:789,network:"geek",displayName:"GEEK Network",symbols:["GEEK"],decimals:[18],standardAccount:"*25519",website:"https://geek.gl"},{prefix:995,network:"ternoa",displayName:"Ternoa",symbols:["CAPS"],decimals:[18],standardAccount:"*25519",website:"https://www.ternoa.network"},{prefix:1110,network:"efinity",displayName:"Efinity",symbols:["EFI"],decimals:[18],standardAccount:"*25519",website:"https://efinity.io/"},{prefix:1221,network:"peaq",displayName:"Peaq Network",symbols:["PEAQ"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1222,network:"krest",displayName:"Krest Network",symbols:["KREST"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1284,network:"moonbeam",displayName:"Moonbeam",symbols:["GLMR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1285,network:"moonriver",displayName:"Moonriver",symbols:["MOVR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1328,network:"ajuna",displayName:"Ajuna Network",symbols:["AJUN"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1337,network:"bajun",displayName:"Bajun Network",symbols:["BAJU"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1516,network:"societal",displayName:"Societal",symbols:["SCTL"],decimals:[12],standardAccount:"*25519",website:"https://www.sctl.xyz"},{prefix:1985,network:"seals",displayName:"Seals Network",symbols:["SEAL"],decimals:[9],standardAccount:"*25519",website:"https://seals.app"},{prefix:2007,network:"kapex",displayName:"Kapex",symbols:["KAPEX"],decimals:[12],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:2009,network:"cloudwalk_mainnet",displayName:"CloudWalk Network Mainnet",symbols:["CWN"],decimals:[18],standardAccount:"*25519",website:"https://explorer.mainnet.cloudwalk.io"},{prefix:2021,network:"logion",displayName:"logion network",symbols:["LGNT"],decimals:[18],standardAccount:"*25519",website:"https://logion.network"},{prefix:2024,network:"vow-chain",displayName:"Enigmatic Smile",symbols:["VOW"],decimals:[18],standardAccount:"*25519",website:"https://www.vow.foundation/"},{prefix:2032,network:"interlay",displayName:"Interlay",symbols:["INTR"],decimals:[10],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2092,network:"kintsugi",displayName:"Kintsugi",symbols:["KINT"],decimals:[12],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2106,network:"bitgreen",displayName:"Bitgreen",symbols:["BBB"],decimals:[18],standardAccount:"*25519",website:"https://bitgreen.org/"},{prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},{prefix:2199,network:"moonsama",displayName:"Moonsama",symbols:["SAMA"],decimals:[18],standardAccount:"secp256k1",website:"https://moonsama.com"},{prefix:2206,network:"ICE",displayName:"ICE Network",symbols:["ICY"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2207,network:"SNOW",displayName:"SNOW: ICE Canary Network",symbols:["ICZ"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2254,network:"subspace_testnet",displayName:"Subspace testnet",symbols:["tSSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:3333,network:"peerplays",displayName:"Peerplays",symbols:["PPY"],decimals:[18],standardAccount:"secp256k1",website:"https://www.peerplays.com/"},{prefix:4450,network:"g1",displayName:"Ğ1",symbols:["G1"],decimals:[2],standardAccount:"*25519",website:"https://duniter.org"},{prefix:5234,network:"humanode",displayName:"Humanode Network",symbols:["HMND"],decimals:[18],standardAccount:"*25519",website:"https://humanode.io"},{prefix:5845,network:"tangle",displayName:"Tangle Network",symbols:["TNT"],decimals:[18],standardAccount:"*25519",website:"https://www.tangle.tools/"},{prefix:6094,network:"subspace",displayName:"Subspace",symbols:["SSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:7007,network:"tidefi",displayName:"Tidefi",symbols:["TDFY"],decimals:[12],standardAccount:"*25519",website:"https://tidefi.com"},{prefix:7013,network:"gm",displayName:"GM",symbols:["FREN","GM","GN"],decimals:[12,0,0],standardAccount:"*25519",website:"https://gmordie.com"},{prefix:7306,network:"krigan",displayName:"Krigan Network",symbols:["KRGN"],decimals:[9],standardAccount:"*25519",website:"https://krigan.network"},{prefix:7391,network:"unique_mainnet",displayName:"Unique Network",symbols:["UNQ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8866,network:"golden_gate",displayName:"Golden Gate",symbols:["GGX"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:8883,network:"sapphire_mainnet",displayName:"Sapphire by Unique",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8886,network:"golden_gate_sydney",displayName:"Golden Gate Sydney",symbols:["GGXT"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:9072,network:"hashed",displayName:"Hashed Network",symbols:["HASH"],decimals:[18],standardAccount:"*25519",website:"https://hashed.network"},{prefix:9807,network:"dentnet",displayName:"DENTNet",symbols:["DENTX"],decimals:[18],standardAccount:"*25519",website:"https://www.dentnet.io"},{prefix:9935,network:"t3rn",displayName:"t3rn",symbols:["TRN"],decimals:[12],standardAccount:"*25519",website:"https://t3rn.io/"},{prefix:10041,network:"basilisk",displayName:"Basilisk",symbols:["BSX"],decimals:[12],standardAccount:"*25519",website:"https://bsx.fi"},{prefix:11330,network:"cess-testnet",displayName:"CESS Testnet",symbols:["TCESS"],decimals:[18],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11331,network:"cess",displayName:"CESS",symbols:["CESS"],decimals:[18],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11486,network:"luhn",displayName:"Luhn Network",symbols:["LUHN"],decimals:[18],standardAccount:"*25519",website:"https://luhn.network"},{prefix:11820,network:"contextfree",displayName:"Automata ContextFree",symbols:["CTX"],decimals:[18],standardAccount:"*25519",website:"https://ata.network"},{prefix:12155,network:"impact",displayName:"Impact Protocol Network",symbols:["BSTY"],decimals:[18],standardAccount:"*25519",website:"https://impactprotocol.network/"},{prefix:12191,network:"nftmart",displayName:"NFTMart",symbols:["NMT"],decimals:[12],standardAccount:"*25519",website:"https://nftmart.io"},{prefix:12850,network:"analog-timechain",displayName:"Analog Timechain",symbols:["ANLOG"],decimals:[12],standardAccount:"*25519",website:"https://analog.one"},{prefix:13116,network:"bittensor",displayName:"Bittensor",symbols:["TAO"],decimals:[9],standardAccount:"*25519",website:"https://bittensor.com"},{prefix:14697,network:"goro",displayName:"GORO Network",symbols:["GORO"],decimals:[9],standardAccount:"*25519",website:"https://goro.network"},{prefix:14998,network:"mosaic-chain",displayName:"Mosaic Chain",symbols:["MOS"],decimals:[18],standardAccount:"*25519",website:"https://mosaicchain.io"},{prefix:29972,network:"mythos",displayName:"Mythos",symbols:["MYTH"],decimals:[18],standardAccount:"secp256k1",website:"https://mythos.foundation"},{prefix:8888,network:"xcavate",displayName:"Xcavate Protocol",symbols:["XCAV"],decimals:[12],standardAccount:"*25519",website:"https://xcavate.io/"}],knownGenesis={acala:["0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"],ajuna:["0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"],"aleph-node":["0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"],astar:["0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"],basilisk:["0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"],bifrost:["0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"],"bifrost-kusama":["0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"],bittensor:["0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"],centrifuge:["0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82","0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"],cere:["0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"],composable:["0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"],darwinia:["0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"],"dock-mainnet":["0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae","0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"],edgeware:["0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"],enjin:["0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"],equilibrium:["0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"],genshiro:["0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"],hydradx:["0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d","0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc","0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9","0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047","0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"],"interlay-parachain":["0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"],karura:["0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"],khala:["0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"],kulupu:["0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"],kusama:["0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe","0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636","0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"],matrixchain:["0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"],nodle:["0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"],origintrail:["0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"],p3d:["0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"],parallel:["0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"],peaq:["0xd2a5d385932d1f650dae03ef8e2748983779ee342c614f80854d32b8cd8fa48c"],pendulum:["0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"],phala:["0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"],picasso:["0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc","0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"],polkadex:["0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"],polkadot:["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],polymesh:["0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"],quartz:["0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"],rococo:["0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e","0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897","0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770","0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff","0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a","0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9","0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779","0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215","0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9","0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147","0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd","0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"],sora:["0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"],stafi:["0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"],statemine:["0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"],statemint:["0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"],subsocial:["0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"],ternoa:["0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"],unique:["0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"],vtb:["0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f","0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"],westend:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"],xxnetwork:["0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"],zeitgeist:["0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"]},knownIcon={centrifuge:"polkadot",kusama:"polkadot",polkadot:"polkadot",sora:"polkadot",statemine:"polkadot",statemint:"polkadot",westmint:"polkadot"},knownLedger={acala:787,ajuna:354,"aleph-node":643,astar:810,bifrost:788,"bifrost-kusama":788,centrifuge:747,composable:354,darwinia:354,"dock-mainnet":594,edgeware:523,enjin:1155,equilibrium:99999997,genshiro:99999996,hydradx:354,"interlay-parachain":354,karura:686,khala:434,kusama:434,matrixchain:1155,nodle:1003,origintrail:354,parallel:354,peaq:3338,pendulum:354,phala:354,picasso:434,polkadex:799,polkadot:354,polymesh:595,quartz:631,sora:617,stafi:907,statemine:434,statemint:354,ternoa:995,unique:661,vtb:694,xxnetwork:1955,zeitgeist:354},knownTestnet={"":!0,"cess-testnet":!0,"dock-testnet":!0,jupiter:!0,"mathchain-testnet":!0,p3dt:!0,subspace_testnet:!0,"zero-alphaville":!0},UNSORTED=[0,2,42],TESTNETS=["testnet"];function toExpanded(n){var o,i;const e=n.network||"",t=e.replace(/_/g,"-").split("-"),a=n;return a.slip44=knownLedger[e],a.hasLedgerSupport=!!a.slip44,a.genesisHash=knownGenesis[e]||[],a.icon=knownIcon[e]||"substrate",a.isTestnet=!!knownTestnet[e]||TESTNETS.includes(t[t.length-1]),a.isIgnored=a.isTestnet||!(n.standardAccount&&((o=n.decimals)!=null&&o.length)&&((i=n.symbols)!=null&&i.length))&&n.prefix!==42,a}function filterSelectable({genesisHash:n,prefix:e}){return!!n.length||e===42}function filterAvailable(n){return!n.isIgnored&&!!n.network}function sortNetworks(n,e){const t=UNSORTED.includes(n.prefix),a=UNSORTED.includes(e.prefix);return t===a?t?0:n.displayName.localeCompare(e.displayName):t?-1:1}const allNetworks=knownSubstrate.map(toExpanded),availableNetworks=allNetworks.filter(filterAvailable).sort(sortNetworks),selectableNetworks=availableNetworks.filter(filterSelectable),defaults$1={allowedDecodedLengths:[1,2,4,8,32,33],allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:availableNetworks.map(({prefix:n})=>n),prefix:42};function decodeAddress(n,e,t=-1){if(!n)throw new Error("Invalid empty address passed");if(isU8a(n)||isHex(n))return u8aToU8a(n);try{const a=base58Decode(n);if(!defaults$1.allowedEncodedLengths.includes(a.length))throw new Error("Invalid decoded address length");const[o,i,r,s]=checkAddressChecksum(a);if(!o&&!e)throw new Error("Invalid decoded address checksum");if(t!==-1&&t!==s)throw new Error(`Expected ss58Format ${t}, received ${s}`);return a.slice(r,i)}catch(a){throw new Error(`Decoding ${n}: ${a.message}`)}}const BN_BE_OPTS={isLe:!1},BN_LE_OPTS={isLe:!0},BN_LE_16_OPTS={bitLength:16,isLe:!0},BN_BE_32_OPTS={bitLength:32,isLe:!1},BN_LE_32_OPTS={bitLength:32,isLe:!0},BN_BE_256_OPTS={bitLength:256,isLe:!1},BN_LE_256_OPTS={bitLength:256,isLe:!0},RE_NUMBER=/^\d+$/,JUNCTION_ID_LEN=32;class DeriveJunction{constructor(){A(this,"__internal__chainCode",new Uint8Array(32));A(this,"__internal__isHard",!1)}static from(e){const t=new DeriveJunction,[a,o]=e.startsWith("/")?[e.substring(1),!0]:[e,!1];return t.soft(RE_NUMBER.test(a)?new BN(a,10):a),o?t.harden():t}get chainCode(){return this.__internal__chainCode}get isHard(){return this.__internal__isHard}get isSoft(){return!this.__internal__isHard}hard(e){return this.soft(e).harden()}harden(){return this.__internal__isHard=!0,this}soft(e){return isNumber(e)||isBn(e)||isBigInt(e)?this.soft(bnToU8a(e,BN_LE_256_OPTS)):isHex(e)?this.soft(hexToU8a(e)):isString(e)?this.soft(compactAddLength(stringToU8a(e))):e.length>JUNCTION_ID_LEN?this.soft(blake2AsU8a(e)):(this.__internal__chainCode.fill(0),this.__internal__chainCode.set(e,0),this)}soften(){return this.__internal__isHard=!1,this}}const RE_JUNCTION=/\/(\/?)([^/]+)/g;function keyExtractPath(n){const e=n.match(RE_JUNCTION),t=[];let a="";if(e){a=e.join("");for(const o of e)t.push(DeriveJunction.from(o.substring(1)))}if(a!==n)throw new Error(`Re-constructed path "${a}" does not match input`);return{parts:e,path:t}}const RE_CAPTURE=/^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;function keyExtractSuri(n){const e=n.match(RE_CAPTURE);if(e===null)throw new Error("Unable to match provided value to a secret URI");const[,t,,a,,,o]=e,{path:i}=keyExtractPath(a);return{derivePath:a,password:o,path:i,phrase:t}}const HDKD$1=compactAddLength(stringToU8a("Secp256k1HDKD"));function secp256k1DeriveHard(n,e){if(!isU8a(e)||e.length!==32)throw new Error("Invalid chainCode passed to derive");return blake2AsU8a(u8aConcat(HDKD$1,n,e),256)}function setBigUint64(n,e,t,a){if(typeof n.setBigUint64=="function")return n.setBigUint64(e,t,a);const o=BigInt(32),i=BigInt(4294967295),r=Number(t>>o&i),s=Number(t&i),c=a?4:0,d=a?0:4;n.setUint32(e+c,r,a),n.setUint32(e+d,s,a)}const Chi=(n,e,t)=>n&e^~n&t,Maj=(n,e,t)=>n&e^n&t^e&t;class HashMD extends Hash{constructor(e,t,a,o){super(),this.blockLen=e,this.outputLen=t,this.padOffset=a,this.isLE=o,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=createView(this.buffer)}update(e){exists(this);const{view:t,buffer:a,blockLen:o}=this;e=toBytes(e);const i=e.length;for(let r=0;r<i;){const s=Math.min(o-this.pos,i-r);if(s===o){const c=createView(e);for(;o<=i-r;r+=o)this.process(c,r);continue}a.set(e.subarray(r,r+s),this.pos),this.pos+=s,r+=s,this.pos===o&&(this.process(t,0),this.pos=0)}return this.length+=e.length,this.roundClean(),this}digestInto(e){exists(this),output(e,this),this.finished=!0;const{buffer:t,view:a,blockLen:o,isLE:i}=this;let{pos:r}=this;t[r++]=128,this.buffer.subarray(r).fill(0),this.padOffset>o-r&&(this.process(a,0),r=0);for(let h=r;h<o;h++)t[h]=0;setBigUint64(a,o-8,BigInt(this.length*8),i),this.process(a,0);const s=createView(e),c=this.outputLen;if(c%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const d=c/4,p=this.get();if(d>p.length)throw new Error("_sha2: outputLen bigger than state");for(let h=0;h<d;h++)s.setUint32(4*h,p[h],i)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const a=e.slice(0,t);return this.destroy(),a}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:a,length:o,finished:i,destroyed:r,pos:s}=this;return e.length=o,e.pos=s,e.finished=i,e.destroyed=r,o%t&&e.buffer.set(a),e}}const SHA256_K=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),SHA256_IV=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),SHA256_W=new Uint32Array(64);class SHA256 extends HashMD{constructor(){super(64,32,8,!1),this.A=SHA256_IV[0]|0,this.B=SHA256_IV[1]|0,this.C=SHA256_IV[2]|0,this.D=SHA256_IV[3]|0,this.E=SHA256_IV[4]|0,this.F=SHA256_IV[5]|0,this.G=SHA256_IV[6]|0,this.H=SHA256_IV[7]|0}get(){const{A:e,B:t,C:a,D:o,E:i,F:r,G:s,H:c}=this;return[e,t,a,o,i,r,s,c]}set(e,t,a,o,i,r,s,c){this.A=e|0,this.B=t|0,this.C=a|0,this.D=o|0,this.E=i|0,this.F=r|0,this.G=s|0,this.H=c|0}process(e,t){for(let h=0;h<16;h++,t+=4)SHA256_W[h]=e.getUint32(t,!1);for(let h=16;h<64;h++){const I=SHA256_W[h-15],_=SHA256_W[h-2],k=rotr(I,7)^rotr(I,18)^I>>>3,P=rotr(_,17)^rotr(_,19)^_>>>10;SHA256_W[h]=P+SHA256_W[h-7]+k+SHA256_W[h-16]|0}let{A:a,B:o,C:i,D:r,E:s,F:c,G:d,H:p}=this;for(let h=0;h<64;h++){const I=rotr(s,6)^rotr(s,11)^rotr(s,25),_=p+I+Chi(s,c,d)+SHA256_K[h]+SHA256_W[h]|0,P=(rotr(a,2)^rotr(a,13)^rotr(a,22))+Maj(a,o,i)|0;p=d,d=c,c=s,s=r+_|0,r=i,i=o,o=a,a=_+P|0}a=a+this.A|0,o=o+this.B|0,i=i+this.C|0,r=r+this.D|0,s=s+this.E|0,c=c+this.F|0,d=d+this.G|0,p=p+this.H|0,this.set(a,o,i,r,s,c,d,p)}roundClean(){SHA256_W.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const sha256=wrapConstructor(()=>new SHA256);class HMAC extends Hash{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,hash(e);const a=toBytes(t);if(this.iHash=e.create(),typeof this.iHash.update!="function")throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const o=this.blockLen,i=new Uint8Array(o);i.set(a.length>o?e.create().update(a).digest():a);for(let r=0;r<i.length;r++)i[r]^=54;this.iHash.update(i),this.oHash=e.create();for(let r=0;r<i.length;r++)i[r]^=106;this.oHash.update(i),i.fill(0)}update(e){return exists(this),this.iHash.update(e),this}digestInto(e){exists(this),bytes(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:a,finished:o,destroyed:i,blockLen:r,outputLen:s}=this;return e=e,e.finished=o,e.destroyed=i,e.blockLen=r,e.outputLen=s,e.oHash=t._cloneInto(e.oHash),e.iHash=a._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const hmac=(n,e,t)=>new HMAC(n,e).update(t).digest();hmac.create=(n,e)=>new HMAC(n,e);/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const _0n$5=BigInt(0),_1n$7=BigInt(1),_2n$5=BigInt(2);function isBytes(n){return n instanceof Uint8Array||n!=null&&typeof n=="object"&&n.constructor.name==="Uint8Array"}function abytes(n){if(!isBytes(n))throw new Error("Uint8Array expected")}function abool(n,e){if(typeof e!="boolean")throw new Error(`${n} must be valid boolean, got "${e}".`)}const hexes=Array.from({length:256},(n,e)=>e.toString(16).padStart(2,"0"));function bytesToHex(n){abytes(n);let e="";for(let t=0;t<n.length;t++)e+=hexes[n[t]];return e}function numberToHexUnpadded(n){const e=n.toString(16);return e.length&1?`0${e}`:e}function hexToNumber(n){if(typeof n!="string")throw new Error("hex string expected, got "+typeof n);return BigInt(n===""?"0":`0x${n}`)}const asciis={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function asciiToBase16(n){if(n>=asciis._0&&n<=asciis._9)return n-asciis._0;if(n>=asciis._A&&n<=asciis._F)return n-(asciis._A-10);if(n>=asciis._a&&n<=asciis._f)return n-(asciis._a-10)}function hexToBytes(n){if(typeof n!="string")throw new Error("hex string expected, got "+typeof n);const e=n.length,t=e/2;if(e%2)throw new Error("padded hex string expected, got unpadded hex of length "+e);const a=new Uint8Array(t);for(let o=0,i=0;o<t;o++,i+=2){const r=asciiToBase16(n.charCodeAt(i)),s=asciiToBase16(n.charCodeAt(i+1));if(r===void 0||s===void 0){const c=n[i]+n[i+1];throw new Error('hex string expected, got non-hex character "'+c+'" at index '+i)}a[o]=r*16+s}return a}function bytesToNumberBE(n){return hexToNumber(bytesToHex(n))}function bytesToNumberLE(n){return abytes(n),hexToNumber(bytesToHex(Uint8Array.from(n).reverse()))}function numberToBytesBE(n,e){return hexToBytes(n.toString(16).padStart(e*2,"0"))}function numberToBytesLE(n,e){return numberToBytesBE(n,e).reverse()}function numberToVarBytesBE(n){return hexToBytes(numberToHexUnpadded(n))}function ensureBytes(n,e,t){let a;if(typeof e=="string")try{a=hexToBytes(e)}catch(i){throw new Error(`${n} must be valid hex string, got "${e}". Cause: ${i}`)}else if(isBytes(e))a=Uint8Array.from(e);else throw new Error(`${n} must be hex string or Uint8Array`);const o=a.length;if(typeof t=="number"&&o!==t)throw new Error(`${n} expected ${t} bytes, got ${o}`);return a}function concatBytes(...n){let e=0;for(let a=0;a<n.length;a++){const o=n[a];abytes(o),e+=o.length}const t=new Uint8Array(e);for(let a=0,o=0;a<n.length;a++){const i=n[a];t.set(i,o),o+=i.length}return t}function equalBytes(n,e){if(n.length!==e.length)return!1;let t=0;for(let a=0;a<n.length;a++)t|=n[a]^e[a];return t===0}function utf8ToBytes(n){if(typeof n!="string")throw new Error(`utf8ToBytes expected string, got ${typeof n}`);return new Uint8Array(new TextEncoder().encode(n))}const isPosBig=n=>typeof n=="bigint"&&_0n$5<=n;function inRange(n,e,t){return isPosBig(n)&&isPosBig(e)&&isPosBig(t)&&e<=n&&n<t}function aInRange(n,e,t,a){if(!inRange(e,t,a))throw new Error(`expected valid ${n}: ${t} <= n < ${a}, got ${typeof e} ${e}`)}function bitLen(n){let e;for(e=0;n>_0n$5;n>>=_1n$7,e+=1);return e}function bitGet(n,e){return n>>BigInt(e)&_1n$7}function bitSet(n,e,t){return n|(t?_1n$7:_0n$5)<<BigInt(e)}const bitMask=n=>(_2n$5<<BigInt(n-1))-_1n$7,u8n=n=>new Uint8Array(n),u8fr=n=>Uint8Array.from(n);function createHmacDrbg(n,e,t){if(typeof n!="number"||n<2)throw new Error("hashLen must be a number");if(typeof e!="number"||e<2)throw new Error("qByteLen must be a number");if(typeof t!="function")throw new Error("hmacFn must be a function");let a=u8n(n),o=u8n(n),i=0;const r=()=>{a.fill(1),o.fill(0),i=0},s=(...h)=>t(o,a,...h),c=(h=u8n())=>{o=s(u8fr([0]),h),a=s(),h.length!==0&&(o=s(u8fr([1]),h),a=s())},d=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let h=0;const I=[];for(;h<e;){a=s();const _=a.slice();I.push(_),h+=a.length}return concatBytes(...I)};return(h,I)=>{r(),c(h);let _;for(;!(_=I(d()));)c();return r(),_}}const validatorFns={bigint:n=>typeof n=="bigint",function:n=>typeof n=="function",boolean:n=>typeof n=="boolean",string:n=>typeof n=="string",stringOrUint8Array:n=>typeof n=="string"||isBytes(n),isSafeInteger:n=>Number.isSafeInteger(n),array:n=>Array.isArray(n),field:(n,e)=>e.Fp.isValid(n),hash:n=>typeof n=="function"&&Number.isSafeInteger(n.outputLen)};function validateObject(n,e,t={}){const a=(o,i,r)=>{const s=validatorFns[i];if(typeof s!="function")throw new Error(`Invalid validator "${i}", expected function`);const c=n[o];if(!(r&&c===void 0)&&!s(c,n))throw new Error(`Invalid param ${String(o)}=${c} (${typeof c}), expected ${i}`)};for(const[o,i]of Object.entries(e))a(o,i,!1);for(const[o,i]of Object.entries(t))a(o,i,!0);return n}const notImplemented=()=>{throw new Error("not implemented")};function memoized(n){const e=new WeakMap;return(t,...a)=>{const o=e.get(t);if(o!==void 0)return o;const i=n(t,...a);return e.set(t,i),i}}const ut=Object.freeze(Object.defineProperty({__proto__:null,aInRange,abool,abytes,bitGet,bitLen,bitMask,bitSet,bytesToHex,bytesToNumberBE,bytesToNumberLE,concatBytes,createHmacDrbg,ensureBytes,equalBytes,hexToBytes,hexToNumber,inRange,isBytes,memoized,notImplemented,numberToBytesBE,numberToBytesLE,numberToHexUnpadded,numberToVarBytesBE,utf8ToBytes,validateObject},Symbol.toStringTag,{value:"Module"}));/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const _0n$4=BigInt(0),_1n$6=BigInt(1),_2n$4=BigInt(2),_3n$1=BigInt(3),_4n=BigInt(4),_5n$1=BigInt(5),_8n$2=BigInt(8);BigInt(9);BigInt(16);function mod(n,e){const t=n%e;return t>=_0n$4?t:e+t}function pow(n,e,t){if(t<=_0n$4||e<_0n$4)throw new Error("Expected power/modulo > 0");if(t===_1n$6)return _0n$4;let a=_1n$6;for(;e>_0n$4;)e&_1n$6&&(a=a*n%t),n=n*n%t,e>>=_1n$6;return a}function pow2(n,e,t){let a=n;for(;e-- >_0n$4;)a*=a,a%=t;return a}function invert(n,e){if(n===_0n$4||e<=_0n$4)throw new Error(`invert: expected positive integers, got n=${n} mod=${e}`);let t=mod(n,e),a=e,o=_0n$4,i=_1n$6;for(;t!==_0n$4;){const s=a/t,c=a%t,d=o-i*s;a=t,t=c,o=i,i=d}if(a!==_1n$6)throw new Error("invert: does not exist");return mod(o,e)}function tonelliShanks(n){const e=(n-_1n$6)/_2n$4;let t,a,o;for(t=n-_1n$6,a=0;t%_2n$4===_0n$4;t/=_2n$4,a++);for(o=_2n$4;o<n&&pow(o,e,n)!==n-_1n$6;o++);if(a===1){const r=(n+_1n$6)/_4n;return function(c,d){const p=c.pow(d,r);if(!c.eql(c.sqr(p),d))throw new Error("Cannot find square root");return p}}const i=(t+_1n$6)/_2n$4;return function(s,c){if(s.pow(c,e)===s.neg(s.ONE))throw new Error("Cannot find square root");let d=a,p=s.pow(s.mul(s.ONE,o),t),h=s.pow(c,i),I=s.pow(c,t);for(;!s.eql(I,s.ONE);){if(s.eql(I,s.ZERO))return s.ZERO;let _=1;for(let P=s.sqr(I);_<d&&!s.eql(P,s.ONE);_++)P=s.sqr(P);const k=s.pow(p,_1n$6<<BigInt(d-_-1));p=s.sqr(k),h=s.mul(h,k),I=s.mul(I,p),d=_}return h}}function FpSqrt(n){if(n%_4n===_3n$1){const e=(n+_1n$6)/_4n;return function(a,o){const i=a.pow(o,e);if(!a.eql(a.sqr(i),o))throw new Error("Cannot find square root");return i}}if(n%_8n$2===_5n$1){const e=(n-_5n$1)/_8n$2;return function(a,o){const i=a.mul(o,_2n$4),r=a.pow(i,e),s=a.mul(o,r),c=a.mul(a.mul(s,_2n$4),r),d=a.mul(s,a.sub(c,a.ONE));if(!a.eql(a.sqr(d),o))throw new Error("Cannot find square root");return d}}return tonelliShanks(n)}const isNegativeLE=(n,e)=>(mod(n,e)&_1n$6)===_1n$6,FIELD_FIELDS=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function validateField(n){const e={ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"},t=FIELD_FIELDS.reduce((a,o)=>(a[o]="function",a),e);return validateObject(n,t)}function FpPow(n,e,t){if(t<_0n$4)throw new Error("Expected power > 0");if(t===_0n$4)return n.ONE;if(t===_1n$6)return e;let a=n.ONE,o=e;for(;t>_0n$4;)t&_1n$6&&(a=n.mul(a,o)),o=n.sqr(o),t>>=_1n$6;return a}function FpInvertBatch(n,e){const t=new Array(e.length),a=e.reduce((i,r,s)=>n.is0(r)?i:(t[s]=i,n.mul(i,r)),n.ONE),o=n.inv(a);return e.reduceRight((i,r,s)=>n.is0(r)?i:(t[s]=n.mul(i,t[s]),n.mul(i,r)),o),t}function nLength(n,e){const t=e!==void 0?e:n.toString(2).length,a=Math.ceil(t/8);return{nBitLength:t,nByteLength:a}}function Field(n,e,t=!1,a={}){if(n<=_0n$4)throw new Error(`Expected Field ORDER > 0, got ${n}`);const{nBitLength:o,nByteLength:i}=nLength(n,e);if(i>2048)throw new Error("Field lengths over 2048 bytes are not supported");const r=FpSqrt(n),s=Object.freeze({ORDER:n,BITS:o,BYTES:i,MASK:bitMask(o),ZERO:_0n$4,ONE:_1n$6,create:c=>mod(c,n),isValid:c=>{if(typeof c!="bigint")throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);return _0n$4<=c&&c<n},is0:c=>c===_0n$4,isOdd:c=>(c&_1n$6)===_1n$6,neg:c=>mod(-c,n),eql:(c,d)=>c===d,sqr:c=>mod(c*c,n),add:(c,d)=>mod(c+d,n),sub:(c,d)=>mod(c-d,n),mul:(c,d)=>mod(c*d,n),pow:(c,d)=>FpPow(s,c,d),div:(c,d)=>mod(c*invert(d,n),n),sqrN:c=>c*c,addN:(c,d)=>c+d,subN:(c,d)=>c-d,mulN:(c,d)=>c*d,inv:c=>invert(c,n),sqrt:a.sqrt||(c=>r(s,c)),invertBatch:c=>FpInvertBatch(s,c),cmov:(c,d,p)=>p?d:c,toBytes:c=>t?numberToBytesLE(c,i):numberToBytesBE(c,i),fromBytes:c=>{if(c.length!==i)throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);return t?bytesToNumberLE(c):bytesToNumberBE(c)}});return Object.freeze(s)}function getFieldBytesLength(n){if(typeof n!="bigint")throw new Error("field order must be bigint");const e=n.toString(2).length;return Math.ceil(e/8)}function getMinHashLength(n){const e=getFieldBytesLength(n);return e+Math.ceil(e/2)}function mapHashToField(n,e,t=!1){const a=n.length,o=getFieldBytesLength(e),i=getMinHashLength(e);if(a<16||a<i||a>1024)throw new Error(`expected ${i}-1024 bytes of input, got ${a}`);const r=t?bytesToNumberBE(n):bytesToNumberLE(n),s=mod(r,e-_1n$6)+_1n$6;return t?numberToBytesLE(s,o):numberToBytesBE(s,o)}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const _0n$3=BigInt(0),_1n$5=BigInt(1),pointPrecomputes=new WeakMap,pointWindowSizes=new WeakMap;function wNAF(n,e){const t=(i,r)=>{const s=r.negate();return i?s:r},a=i=>{if(!Number.isSafeInteger(i)||i<=0||i>e)throw new Error(`Wrong window size=${i}, should be [1..${e}]`)},o=i=>{a(i);const r=Math.ceil(e/i)+1,s=2**(i-1);return{windows:r,windowSize:s}};return{constTimeNegate:t,unsafeLadder(i,r){let s=n.ZERO,c=i;for(;r>_0n$3;)r&_1n$5&&(s=s.add(c)),c=c.double(),r>>=_1n$5;return s},precomputeWindow(i,r){const{windows:s,windowSize:c}=o(r),d=[];let p=i,h=p;for(let I=0;I<s;I++){h=p,d.push(h);for(let _=1;_<c;_++)h=h.add(p),d.push(h);p=h.double()}return d},wNAF(i,r,s){const{windows:c,windowSize:d}=o(i);let p=n.ZERO,h=n.BASE;const I=BigInt(2**i-1),_=2**i,k=BigInt(i);for(let P=0;P<c;P++){const v=P*d;let E=Number(s&I);s>>=k,E>d&&(E-=_,s+=_1n$5);const M=v,R=v+Math.abs(E)-1,H=P%2!==0,K=E<0;E===0?h=h.add(t(H,r[M])):p=p.add(t(K,r[R]))}return{p,f:h}},wNAFCached(i,r,s){const c=pointWindowSizes.get(i)||1;let d=pointPrecomputes.get(i);return d||(d=this.precomputeWindow(i,c),c!==1&&pointPrecomputes.set(i,s(d))),this.wNAF(c,d,r)},setWindowSize(i,r){a(r),pointWindowSizes.set(i,r),pointPrecomputes.delete(i)}}}function validateBasic(n){return validateField(n.Fp),validateObject(n,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...nLength(n.n,n.nBitLength),...n,p:n.Fp.ORDER})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */function validateSigVerOpts(n){n.lowS!==void 0&&abool("lowS",n.lowS),n.prehash!==void 0&&abool("prehash",n.prehash)}function validatePointOpts(n){const e=validateBasic(n);validateObject(e,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:t,Fp:a,a:o}=e;if(t){if(!a.eql(o,a.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if(typeof t!="object"||typeof t.beta!="bigint"||typeof t.splitScalar!="function")throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...e})}const{bytesToNumberBE:b2n,hexToBytes:h2b}=ut,DER={Err:class extends Error{constructor(e=""){super(e)}},_parseInt(n){const{Err:e}=DER;if(n.length<2||n[0]!==2)throw new e("Invalid signature integer tag");const t=n[1],a=n.subarray(2,t+2);if(!t||a.length!==t)throw new e("Invalid signature integer: wrong length");if(a[0]&128)throw new e("Invalid signature integer: negative");if(a[0]===0&&!(a[1]&128))throw new e("Invalid signature integer: unnecessary leading zero");return{d:b2n(a),l:n.subarray(t+2)}},toSig(n){const{Err:e}=DER,t=typeof n=="string"?h2b(n):n;abytes(t);let a=t.length;if(a<2||t[0]!=48)throw new e("Invalid signature tag");if(t[1]!==a-2)throw new e("Invalid signature: incorrect length");const{d:o,l:i}=DER._parseInt(t.subarray(2)),{d:r,l:s}=DER._parseInt(i);if(s.length)throw new e("Invalid signature: left bytes after parsing");return{r:o,s:r}},hexFromSig(n){const e=d=>Number.parseInt(d[0],16)&8?"00"+d:d,t=d=>{const p=d.toString(16);return p.length&1?`0${p}`:p},a=e(t(n.s)),o=e(t(n.r)),i=a.length/2,r=o.length/2,s=t(i),c=t(r);return`30${t(r+i+4)}02${c}${o}02${s}${a}`}},_0n$2=BigInt(0),_1n$4=BigInt(1);BigInt(2);const _3n=BigInt(3);BigInt(4);function weierstrassPoints(n){const e=validatePointOpts(n),{Fp:t}=e,a=e.toBytes||((k,P,v)=>{const E=P.toAffine();return concatBytes(Uint8Array.from([4]),t.toBytes(E.x),t.toBytes(E.y))}),o=e.fromBytes||(k=>{const P=k.subarray(1),v=t.fromBytes(P.subarray(0,t.BYTES)),E=t.fromBytes(P.subarray(t.BYTES,2*t.BYTES));return{x:v,y:E}});function i(k){const{a:P,b:v}=e,E=t.sqr(k),M=t.mul(E,k);return t.add(t.add(M,t.mul(k,P)),v)}if(!t.eql(t.sqr(e.Gy),i(e.Gx)))throw new Error("bad generator point: equation left != right");function r(k){return inRange(k,_1n$4,e.n)}function s(k){const{allowedPrivateKeyLengths:P,nByteLength:v,wrapPrivateKey:E,n:M}=e;if(P&&typeof k!="bigint"){if(isBytes(k)&&(k=bytesToHex(k)),typeof k!="string"||!P.includes(k.length))throw new Error("Invalid key");k=k.padStart(v*2,"0")}let R;try{R=typeof k=="bigint"?k:bytesToNumberBE(ensureBytes("private key",k,v))}catch{throw new Error(`private key must be ${v} bytes, hex or bigint, not ${typeof k}`)}return E&&(R=mod(R,M)),aInRange("private key",R,_1n$4,M),R}function c(k){if(!(k instanceof h))throw new Error("ProjectivePoint expected")}const d=memoized((k,P)=>{const{px:v,py:E,pz:M}=k;if(t.eql(M,t.ONE))return{x:v,y:E};const R=k.is0();P==null&&(P=R?t.ONE:t.inv(M));const H=t.mul(v,P),K=t.mul(E,P),w=t.mul(M,P);if(R)return{x:t.ZERO,y:t.ZERO};if(!t.eql(w,t.ONE))throw new Error("invZ was invalid");return{x:H,y:K}}),p=memoized(k=>{if(k.is0()){if(e.allowInfinityPoint&&!t.is0(k.py))return;throw new Error("bad point: ZERO")}const{x:P,y:v}=k.toAffine();if(!t.isValid(P)||!t.isValid(v))throw new Error("bad point: x or y not FE");const E=t.sqr(v),M=i(P);if(!t.eql(E,M))throw new Error("bad point: equation left != right");if(!k.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0});class h{constructor(P,v,E){if(this.px=P,this.py=v,this.pz=E,P==null||!t.isValid(P))throw new Error("x required");if(v==null||!t.isValid(v))throw new Error("y required");if(E==null||!t.isValid(E))throw new Error("z required");Object.freeze(this)}static fromAffine(P){const{x:v,y:E}=P||{};if(!P||!t.isValid(v)||!t.isValid(E))throw new Error("invalid affine point");if(P instanceof h)throw new Error("projective point not allowed");const M=R=>t.eql(R,t.ZERO);return M(v)&&M(E)?h.ZERO:new h(v,E,t.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(P){const v=t.invertBatch(P.map(E=>E.pz));return P.map((E,M)=>E.toAffine(v[M])).map(h.fromAffine)}static fromHex(P){const v=h.fromAffine(o(ensureBytes("pointHex",P)));return v.assertValidity(),v}static fromPrivateKey(P){return h.BASE.multiply(s(P))}_setWindowSize(P){_.setWindowSize(this,P)}assertValidity(){p(this)}hasEvenY(){const{y:P}=this.toAffine();if(t.isOdd)return!t.isOdd(P);throw new Error("Field doesn't support isOdd")}equals(P){c(P);const{px:v,py:E,pz:M}=this,{px:R,py:H,pz:K}=P,w=t.eql(t.mul(v,K),t.mul(R,M)),U=t.eql(t.mul(E,K),t.mul(H,M));return w&&U}negate(){return new h(this.px,t.neg(this.py),this.pz)}double(){const{a:P,b:v}=e,E=t.mul(v,_3n),{px:M,py:R,pz:H}=this;let K=t.ZERO,w=t.ZERO,U=t.ZERO,F=t.mul(M,M),X=t.mul(R,R),z=t.mul(H,H),L=t.mul(M,R);return L=t.add(L,L),U=t.mul(M,H),U=t.add(U,U),K=t.mul(P,U),w=t.mul(E,z),w=t.add(K,w),K=t.sub(X,w),w=t.add(X,w),w=t.mul(K,w),K=t.mul(L,K),U=t.mul(E,U),z=t.mul(P,z),L=t.sub(F,z),L=t.mul(P,L),L=t.add(L,U),U=t.add(F,F),F=t.add(U,F),F=t.add(F,z),F=t.mul(F,L),w=t.add(w,F),z=t.mul(R,H),z=t.add(z,z),F=t.mul(z,L),K=t.sub(K,F),U=t.mul(z,X),U=t.add(U,U),U=t.add(U,U),new h(K,w,U)}add(P){c(P);const{px:v,py:E,pz:M}=this,{px:R,py:H,pz:K}=P;let w=t.ZERO,U=t.ZERO,F=t.ZERO;const X=e.a,z=t.mul(e.b,_3n);let L=t.mul(v,R),J=t.mul(E,H),O=t.mul(M,K),u=t.add(v,E),m=t.add(R,H);u=t.mul(u,m),m=t.add(L,J),u=t.sub(u,m),m=t.add(v,M);let g=t.add(R,K);return m=t.mul(m,g),g=t.add(L,O),m=t.sub(m,g),g=t.add(E,M),w=t.add(H,K),g=t.mul(g,w),w=t.add(J,O),g=t.sub(g,w),F=t.mul(X,m),w=t.mul(z,O),F=t.add(w,F),w=t.sub(J,F),F=t.add(J,F),U=t.mul(w,F),J=t.add(L,L),J=t.add(J,L),O=t.mul(X,O),m=t.mul(z,m),J=t.add(J,O),O=t.sub(L,O),O=t.mul(X,O),m=t.add(m,O),L=t.mul(J,m),U=t.add(U,L),L=t.mul(g,m),w=t.mul(u,w),w=t.sub(w,L),L=t.mul(u,J),F=t.mul(g,F),F=t.add(F,L),new h(w,U,F)}subtract(P){return this.add(P.negate())}is0(){return this.equals(h.ZERO)}wNAF(P){return _.wNAFCached(this,P,h.normalizeZ)}multiplyUnsafe(P){aInRange("scalar",P,_0n$2,e.n);const v=h.ZERO;if(P===_0n$2)return v;if(P===_1n$4)return this;const{endo:E}=e;if(!E)return _.unsafeLadder(this,P);let{k1neg:M,k1:R,k2neg:H,k2:K}=E.splitScalar(P),w=v,U=v,F=this;for(;R>_0n$2||K>_0n$2;)R&_1n$4&&(w=w.add(F)),K&_1n$4&&(U=U.add(F)),F=F.double(),R>>=_1n$4,K>>=_1n$4;return M&&(w=w.negate()),H&&(U=U.negate()),U=new h(t.mul(U.px,E.beta),U.py,U.pz),w.add(U)}multiply(P){const{endo:v,n:E}=e;aInRange("scalar",P,_1n$4,E);let M,R;if(v){const{k1neg:H,k1:K,k2neg:w,k2:U}=v.splitScalar(P);let{p:F,f:X}=this.wNAF(K),{p:z,f:L}=this.wNAF(U);F=_.constTimeNegate(H,F),z=_.constTimeNegate(w,z),z=new h(t.mul(z.px,v.beta),z.py,z.pz),M=F.add(z),R=X.add(L)}else{const{p:H,f:K}=this.wNAF(P);M=H,R=K}return h.normalizeZ([M,R])[0]}multiplyAndAddUnsafe(P,v,E){const M=h.BASE,R=(K,w)=>w===_0n$2||w===_1n$4||!K.equals(M)?K.multiplyUnsafe(w):K.multiply(w),H=R(this,v).add(R(P,E));return H.is0()?void 0:H}toAffine(P){return d(this,P)}isTorsionFree(){const{h:P,isTorsionFree:v}=e;if(P===_1n$4)return!0;if(v)return v(h,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:P,clearCofactor:v}=e;return P===_1n$4?this:v?v(h,this):this.multiplyUnsafe(e.h)}toRawBytes(P=!0){return abool("isCompressed",P),this.assertValidity(),a(h,this,P)}toHex(P=!0){return abool("isCompressed",P),bytesToHex(this.toRawBytes(P))}}h.BASE=new h(e.Gx,e.Gy,t.ONE),h.ZERO=new h(t.ZERO,t.ONE,t.ZERO);const I=e.nBitLength,_=wNAF(h,e.endo?Math.ceil(I/2):I);return{CURVE:e,ProjectivePoint:h,normPrivateKeyToScalar:s,weierstrassEquation:i,isWithinCurveOrder:r}}function validateOpts$1(n){const e=validateBasic(n);return validateObject(e,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...e})}function weierstrass(n){const e=validateOpts$1(n),{Fp:t,n:a}=e,o=t.BYTES+1,i=2*t.BYTES+1;function r(u){return mod(u,a)}function s(u){return invert(u,a)}const{ProjectivePoint:c,normPrivateKeyToScalar:d,weierstrassEquation:p,isWithinCurveOrder:h}=weierstrassPoints({...e,toBytes(u,m,g){const b=m.toAffine(),B=t.toBytes(b.x),D=concatBytes;return abool("isCompressed",g),g?D(Uint8Array.from([m.hasEvenY()?2:3]),B):D(Uint8Array.from([4]),B,t.toBytes(b.y))},fromBytes(u){const m=u.length,g=u[0],b=u.subarray(1);if(m===o&&(g===2||g===3)){const B=bytesToNumberBE(b);if(!inRange(B,_1n$4,t.ORDER))throw new Error("Point is not on curve");const D=p(B);let V;try{V=t.sqrt(D)}catch(T){const q=T instanceof Error?": "+T.message:"";throw new Error("Point is not on curve"+q)}const x=(V&_1n$4)===_1n$4;return(g&1)===1!==x&&(V=t.neg(V)),{x:B,y:V}}else if(m===i&&g===4){const B=t.fromBytes(b.subarray(0,t.BYTES)),D=t.fromBytes(b.subarray(t.BYTES,2*t.BYTES));return{x:B,y:D}}else throw new Error(`Point of length ${m} was invalid. Expected ${o} compressed bytes or ${i} uncompressed bytes`)}}),I=u=>bytesToHex(numberToBytesBE(u,e.nByteLength));function _(u){const m=a>>_1n$4;return u>m}function k(u){return _(u)?r(-u):u}const P=(u,m,g)=>bytesToNumberBE(u.slice(m,g));class v{constructor(m,g,b){this.r=m,this.s=g,this.recovery=b,this.assertValidity()}static fromCompact(m){const g=e.nByteLength;return m=ensureBytes("compactSignature",m,g*2),new v(P(m,0,g),P(m,g,2*g))}static fromDER(m){const{r:g,s:b}=DER.toSig(ensureBytes("DER",m));return new v(g,b)}assertValidity(){aInRange("r",this.r,_1n$4,a),aInRange("s",this.s,_1n$4,a)}addRecoveryBit(m){return new v(this.r,this.s,m)}recoverPublicKey(m){const{r:g,s:b,recovery:B}=this,D=w(ensureBytes("msgHash",m));if(B==null||![0,1,2,3].includes(B))throw new Error("recovery id invalid");const V=B===2||B===3?g+e.n:g;if(V>=t.ORDER)throw new Error("recovery id 2 or 3 invalid");const x=B&1?"03":"02",y=c.fromHex(x+I(V)),T=s(V),q=r(-D*T),G=r(b*T),W=c.BASE.multiplyAndAddUnsafe(y,q,G);if(!W)throw new Error("point at infinify");return W.assertValidity(),W}hasHighS(){return _(this.s)}normalizeS(){return this.hasHighS()?new v(this.r,r(-this.s),this.recovery):this}toDERRawBytes(){return hexToBytes(this.toDERHex())}toDERHex(){return DER.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return hexToBytes(this.toCompactHex())}toCompactHex(){return I(this.r)+I(this.s)}}const E={isValidPrivateKey(u){try{return d(u),!0}catch{return!1}},normPrivateKeyToScalar:d,randomPrivateKey:()=>{const u=getMinHashLength(e.n);return mapHashToField(e.randomBytes(u),e.n)},precompute(u=8,m=c.BASE){return m._setWindowSize(u),m.multiply(BigInt(3)),m}};function M(u,m=!0){return c.fromPrivateKey(u).toRawBytes(m)}function R(u){const m=isBytes(u),g=typeof u=="string",b=(m||g)&&u.length;return m?b===o||b===i:g?b===2*o||b===2*i:u instanceof c}function H(u,m,g=!0){if(R(u))throw new Error("first arg must be private key");if(!R(m))throw new Error("second arg must be public key");return c.fromHex(m).multiply(d(u)).toRawBytes(g)}const K=e.bits2int||function(u){const m=bytesToNumberBE(u),g=u.length*8-e.nBitLength;return g>0?m>>BigInt(g):m},w=e.bits2int_modN||function(u){return r(K(u))},U=bitMask(e.nBitLength);function F(u){return aInRange(`num < 2^${e.nBitLength}`,u,_0n$2,U),numberToBytesBE(u,e.nByteLength)}function X(u,m,g=z){if(["recovered","canonical"].some(Y=>Y in g))throw new Error("sign() legacy options not supported");const{hash:b,randomBytes:B}=e;let{lowS:D,prehash:V,extraEntropy:x}=g;D==null&&(D=!0),u=ensureBytes("msgHash",u),validateSigVerOpts(g),V&&(u=ensureBytes("prehashed msgHash",b(u)));const y=w(u),T=d(m),q=[F(T),F(y)];if(x!=null&&x!==!1){const Y=x===!0?B(t.BYTES):x;q.push(ensureBytes("extraEntropy",Y))}const G=concatBytes(...q),W=y;function te(Y){const Q=K(Y);if(!h(Q))return;const Me=s(Q),ee=c.BASE.multiply(Q).toAffine(),$=r(ee.x);if($===_0n$2)return;const we=r(Me*r(W+$*T));if(we===_0n$2)return;let ne=(ee.x===$?0:2)|Number(ee.y&_1n$4),ae=we;return D&&_(we)&&(ae=k(we),ne^=1),new v($,ae,ne)}return{seed:G,k2sig:te}}const z={lowS:e.lowS,prehash:!1},L={lowS:e.lowS,prehash:!1};function J(u,m,g=z){const{seed:b,k2sig:B}=X(u,m,g),D=e;return createHmacDrbg(D.hash.outputLen,D.nByteLength,D.hmac)(b,B)}c.BASE._setWindowSize(8);function O(u,m,g,b=L){var ee;const B=u;if(m=ensureBytes("msgHash",m),g=ensureBytes("publicKey",g),"strict"in b)throw new Error("options.strict was renamed to lowS");validateSigVerOpts(b);const{lowS:D,prehash:V}=b;let x,y;try{if(typeof B=="string"||isBytes(B))try{x=v.fromDER(B)}catch($){if(!($ instanceof DER.Err))throw $;x=v.fromCompact(B)}else if(typeof B=="object"&&typeof B.r=="bigint"&&typeof B.s=="bigint"){const{r:$,s:we}=B;x=new v($,we)}else throw new Error("PARSE");y=c.fromHex(g)}catch($){if($.message==="PARSE")throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(D&&x.hasHighS())return!1;V&&(m=e.hash(m));const{r:T,s:q}=x,G=w(m),W=s(q),te=r(G*W),Y=r(T*W),Q=(ee=c.BASE.multiplyAndAddUnsafe(y,te,Y))==null?void 0:ee.toAffine();return Q?r(Q.x)===T:!1}return{CURVE:e,getPublicKey:M,getSharedSecret:H,sign:J,verify:O,ProjectivePoint:c,Signature:v,utils:E}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */function getHash(n){return{hash:n,hmac:(e,...t)=>hmac(n,e,concatBytes$1(...t)),randomBytes}}function createCurve(n,e){const t=a=>weierstrass({...n,...getHash(a)});return Object.freeze({...t(e),create:t})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const secp256k1P=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),secp256k1N=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),_1n$3=BigInt(1),_2n$3=BigInt(2),divNearest=(n,e)=>(n+e/_2n$3)/e;function sqrtMod(n){const e=secp256k1P,t=BigInt(3),a=BigInt(6),o=BigInt(11),i=BigInt(22),r=BigInt(23),s=BigInt(44),c=BigInt(88),d=n*n*n%e,p=d*d*n%e,h=pow2(p,t,e)*p%e,I=pow2(h,t,e)*p%e,_=pow2(I,_2n$3,e)*d%e,k=pow2(_,o,e)*_%e,P=pow2(k,i,e)*k%e,v=pow2(P,s,e)*P%e,E=pow2(v,c,e)*v%e,M=pow2(E,s,e)*P%e,R=pow2(M,t,e)*p%e,H=pow2(R,r,e)*k%e,K=pow2(H,a,e)*d%e,w=pow2(K,_2n$3,e);if(!Fp$1.eql(Fp$1.sqr(w),n))throw new Error("Cannot find square root");return w}const Fp$1=Field(secp256k1P,void 0,void 0,{sqrt:sqrtMod}),secp256k1=createCurve({a:BigInt(0),b:BigInt(7),Fp:Fp$1,n:secp256k1N,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:n=>{const e=secp256k1N,t=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),a=-_1n$3*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=t,r=BigInt("0x100000000000000000000000000000000"),s=divNearest(i*n,e),c=divNearest(-a*n,e);let d=mod(n-s*t-c*o,e),p=mod(-s*a-c*i,e);const h=d>r,I=p>r;if(h&&(d=e-d),I&&(p=e-p),d>r||p>r)throw new Error("splitScalar: Endomorphism failed, k="+n);return{k1neg:h,k1:d,k2neg:I,k2:p}}}},sha256);BigInt(0);secp256k1.ProjectivePoint;function secp256k1PairFromSeed(n,e){if(n.length!==32)throw new Error("Expected valid 32-byte private key as a seed");if(!hasBigInt||!e&&isReady()){const t=secp256k1FromSeed(n),a=t.slice(32);if(u8aEmpty(a))throw new Error("Invalid publicKey generated from WASM interface");return{publicKey:a,secretKey:t.slice(0,32)}}return{publicKey:secp256k1.getPublicKey(n,!0),secretKey:n}}function createSeedDeriveFn(n,e){return(t,{chainCode:a,isHard:o})=>{if(!o)throw new Error("A soft key was found in the path and is not supported");return n(e(t.secretKey.subarray(0,32),a))}}const keyHdkdEcdsa=createSeedDeriveFn(secp256k1PairFromSeed,secp256k1DeriveHard),HDKD=compactAddLength(stringToU8a("Ed25519HDKD"));function ed25519DeriveHard(n,e){if(!isU8a(e)||e.length!==32)throw new Error("Invalid chainCode passed to derive");return blake2AsU8a(u8aConcat(HDKD,n,e))}function randomAsU8a(n=32){return getRandomValues(new Uint8Array(n))}const[SHA512_Kh,SHA512_Kl]=u64.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(n=>BigInt(n))),SHA512_W_H=new Uint32Array(80),SHA512_W_L=new Uint32Array(80);class SHA512 extends HashMD{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:t,Bh:a,Bl:o,Ch:i,Cl:r,Dh:s,Dl:c,Eh:d,El:p,Fh:h,Fl:I,Gh:_,Gl:k,Hh:P,Hl:v}=this;return[e,t,a,o,i,r,s,c,d,p,h,I,_,k,P,v]}set(e,t,a,o,i,r,s,c,d,p,h,I,_,k,P,v){this.Ah=e|0,this.Al=t|0,this.Bh=a|0,this.Bl=o|0,this.Ch=i|0,this.Cl=r|0,this.Dh=s|0,this.Dl=c|0,this.Eh=d|0,this.El=p|0,this.Fh=h|0,this.Fl=I|0,this.Gh=_|0,this.Gl=k|0,this.Hh=P|0,this.Hl=v|0}process(e,t){for(let R=0;R<16;R++,t+=4)SHA512_W_H[R]=e.getUint32(t),SHA512_W_L[R]=e.getUint32(t+=4);for(let R=16;R<80;R++){const H=SHA512_W_H[R-15]|0,K=SHA512_W_L[R-15]|0,w=u64.rotrSH(H,K,1)^u64.rotrSH(H,K,8)^u64.shrSH(H,K,7),U=u64.rotrSL(H,K,1)^u64.rotrSL(H,K,8)^u64.shrSL(H,K,7),F=SHA512_W_H[R-2]|0,X=SHA512_W_L[R-2]|0,z=u64.rotrSH(F,X,19)^u64.rotrBH(F,X,61)^u64.shrSH(F,X,6),L=u64.rotrSL(F,X,19)^u64.rotrBL(F,X,61)^u64.shrSL(F,X,6),J=u64.add4L(U,L,SHA512_W_L[R-7],SHA512_W_L[R-16]),O=u64.add4H(J,w,z,SHA512_W_H[R-7],SHA512_W_H[R-16]);SHA512_W_H[R]=O|0,SHA512_W_L[R]=J|0}let{Ah:a,Al:o,Bh:i,Bl:r,Ch:s,Cl:c,Dh:d,Dl:p,Eh:h,El:I,Fh:_,Fl:k,Gh:P,Gl:v,Hh:E,Hl:M}=this;for(let R=0;R<80;R++){const H=u64.rotrSH(h,I,14)^u64.rotrSH(h,I,18)^u64.rotrBH(h,I,41),K=u64.rotrSL(h,I,14)^u64.rotrSL(h,I,18)^u64.rotrBL(h,I,41),w=h&_^~h&P,U=I&k^~I&v,F=u64.add5L(M,K,U,SHA512_Kl[R],SHA512_W_L[R]),X=u64.add5H(F,E,H,w,SHA512_Kh[R],SHA512_W_H[R]),z=F|0,L=u64.rotrSH(a,o,28)^u64.rotrBH(a,o,34)^u64.rotrBH(a,o,39),J=u64.rotrSL(a,o,28)^u64.rotrBL(a,o,34)^u64.rotrBL(a,o,39),O=a&i^a&s^i&s,u=o&r^o&c^r&c;E=P|0,M=v|0,P=_|0,v=k|0,_=h|0,k=I|0,{h,l:I}=u64.add(d|0,p|0,X|0,z|0),d=s|0,p=c|0,s=i|0,c=r|0,i=a|0,r=o|0;const m=u64.add3L(z,J,u);a=u64.add3H(m,X,L,O),o=m|0}({h:a,l:o}=u64.add(this.Ah|0,this.Al|0,a|0,o|0)),{h:i,l:r}=u64.add(this.Bh|0,this.Bl|0,i|0,r|0),{h:s,l:c}=u64.add(this.Ch|0,this.Cl|0,s|0,c|0),{h:d,l:p}=u64.add(this.Dh|0,this.Dl|0,d|0,p|0),{h,l:I}=u64.add(this.Eh|0,this.El|0,h|0,I|0),{h:_,l:k}=u64.add(this.Fh|0,this.Fl|0,_|0,k|0),{h:P,l:v}=u64.add(this.Gh|0,this.Gl|0,P|0,v|0),{h:E,l:M}=u64.add(this.Hh|0,this.Hl|0,E|0,M|0),this.set(a,o,i,r,s,c,d,p,h,I,_,k,P,v,E,M)}roundClean(){SHA512_W_H.fill(0),SHA512_W_L.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const sha512=wrapConstructor(()=>new SHA512);/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const _0n$1=BigInt(0),_1n$2=BigInt(1),_2n$2=BigInt(2),_8n$1=BigInt(8),VERIFY_DEFAULT={zip215:!0};function validateOpts(n){const e=validateBasic(n);return validateObject(n,{hash:"function",a:"bigint",d:"bigint",randomBytes:"function"},{adjustScalarBytes:"function",domain:"function",uvRatio:"function",mapToCurve:"function"}),Object.freeze({...e})}function twistedEdwards(n){const e=validateOpts(n),{Fp:t,n:a,prehash:o,hash:i,randomBytes:r,nByteLength:s,h:c}=e,d=_2n$2<<BigInt(s*8)-_1n$2,p=t.create,h=e.uvRatio||((m,g)=>{try{return{isValid:!0,value:t.sqrt(m*t.inv(g))}}catch{return{isValid:!1,value:_0n$1}}}),I=e.adjustScalarBytes||(m=>m),_=e.domain||((m,g,b)=>{if(abool("phflag",b),g.length||b)throw new Error("Contexts/pre-hash are not supported");return m});function k(m,g){aInRange("coordinate "+m,g,_0n$1,d)}function P(m){if(!(m instanceof M))throw new Error("ExtendedPoint expected")}const v=memoized((m,g)=>{const{ex:b,ey:B,ez:D}=m,V=m.is0();g==null&&(g=V?_8n$1:t.inv(D));const x=p(b*g),y=p(B*g),T=p(D*g);if(V)return{x:_0n$1,y:_1n$2};if(T!==_1n$2)throw new Error("invZ was invalid");return{x,y}}),E=memoized(m=>{const{a:g,d:b}=e;if(m.is0())throw new Error("bad point: ZERO");const{ex:B,ey:D,ez:V,et:x}=m,y=p(B*B),T=p(D*D),q=p(V*V),G=p(q*q),W=p(y*g),te=p(q*p(W+T)),Y=p(G+p(b*p(y*T)));if(te!==Y)throw new Error("bad point: equation left != right (1)");const Q=p(B*D),Me=p(V*x);if(Q!==Me)throw new Error("bad point: equation left != right (2)");return!0});class M{constructor(g,b,B,D){this.ex=g,this.ey=b,this.ez=B,this.et=D,k("x",g),k("y",b),k("z",B),k("t",D),Object.freeze(this)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(g){if(g instanceof M)throw new Error("extended point not allowed");const{x:b,y:B}=g||{};return k("x",b),k("y",B),new M(b,B,_1n$2,p(b*B))}static normalizeZ(g){const b=t.invertBatch(g.map(B=>B.ez));return g.map((B,D)=>B.toAffine(b[D])).map(M.fromAffine)}_setWindowSize(g){K.setWindowSize(this,g)}assertValidity(){E(this)}equals(g){P(g);const{ex:b,ey:B,ez:D}=this,{ex:V,ey:x,ez:y}=g,T=p(b*y),q=p(V*D),G=p(B*y),W=p(x*D);return T===q&&G===W}is0(){return this.equals(M.ZERO)}negate(){return new M(p(-this.ex),this.ey,this.ez,p(-this.et))}double(){const{a:g}=e,{ex:b,ey:B,ez:D}=this,V=p(b*b),x=p(B*B),y=p(_2n$2*p(D*D)),T=p(g*V),q=b+B,G=p(p(q*q)-V-x),W=T+x,te=W-y,Y=T-x,Q=p(G*te),Me=p(W*Y),ee=p(G*Y),$=p(te*W);return new M(Q,Me,$,ee)}add(g){P(g);const{a:b,d:B}=e,{ex:D,ey:V,ez:x,et:y}=this,{ex:T,ey:q,ez:G,et:W}=g;if(b===BigInt(-1)){const Ke=p((V-D)*(q+T)),ie=p((V+D)*(q-T)),oe=p(ie-Ke);if(oe===_0n$1)return this.double();const He=p(x*_2n$2*W),re=p(y*_2n$2*G),se=re+He,Ue=ie+Ke,ce=re-He,ue=p(se*oe),Fe=p(Ue*ce),pe=p(se*ce),me=p(oe*Ue);return new M(ue,Fe,me,pe)}const te=p(D*T),Y=p(V*q),Q=p(y*B*W),Me=p(x*G),ee=p((D+V)*(T+q)-te-Y),$=Me-Q,we=Me+Q,ne=p(Y-b*te),ae=p(ee*$),Le=p(we*ne),le=p(ee*ne),de=p($*we);return new M(ae,Le,de,le)}subtract(g){return this.add(g.negate())}wNAF(g){return K.wNAFCached(this,g,M.normalizeZ)}multiply(g){const b=g;aInRange("scalar",b,_1n$2,a);const{p:B,f:D}=this.wNAF(b);return M.normalizeZ([B,D])[0]}multiplyUnsafe(g){const b=g;return aInRange("scalar",b,_0n$1,a),b===_0n$1?H:this.equals(H)||b===_1n$2?this:this.equals(R)?this.wNAF(b).p:K.unsafeLadder(this,b)}isSmallOrder(){return this.multiplyUnsafe(c).is0()}isTorsionFree(){return K.unsafeLadder(this,a).is0()}toAffine(g){return v(this,g)}clearCofactor(){const{h:g}=e;return g===_1n$2?this:this.multiplyUnsafe(g)}static fromHex(g,b=!1){const{d:B,a:D}=e,V=t.BYTES;g=ensureBytes("pointHex",g,V),abool("zip215",b);const x=g.slice(),y=g[V-1];x[V-1]=y&-129;const T=bytesToNumberLE(x),q=b?d:t.ORDER;aInRange("pointHex.y",T,_0n$1,q);const G=p(T*T),W=p(G-_1n$2),te=p(B*G-D);let{isValid:Y,value:Q}=h(W,te);if(!Y)throw new Error("Point.fromHex: invalid y coordinate");const Me=(Q&_1n$2)===_1n$2,ee=(y&128)!==0;if(!b&&Q===_0n$1&&ee)throw new Error("Point.fromHex: x=0 and x_0=1");return ee!==Me&&(Q=p(-Q)),M.fromAffine({x:Q,y:T})}static fromPrivateKey(g){return F(g).point}toRawBytes(){const{x:g,y:b}=this.toAffine(),B=numberToBytesLE(b,t.BYTES);return B[B.length-1]|=g&_1n$2?128:0,B}toHex(){return bytesToHex(this.toRawBytes())}}M.BASE=new M(e.Gx,e.Gy,_1n$2,p(e.Gx*e.Gy)),M.ZERO=new M(_0n$1,_1n$2,_1n$2,_0n$1);const{BASE:R,ZERO:H}=M,K=wNAF(M,s*8);function w(m){return mod(m,a)}function U(m){return w(bytesToNumberLE(m))}function F(m){const g=s;m=ensureBytes("private key",m,g);const b=ensureBytes("hashed private key",i(m),2*g),B=I(b.slice(0,g)),D=b.slice(g,2*g),V=U(B),x=R.multiply(V),y=x.toRawBytes();return{head:B,prefix:D,scalar:V,point:x,pointBytes:y}}function X(m){return F(m).pointBytes}function z(m=new Uint8Array,...g){const b=concatBytes(...g);return U(i(_(b,ensureBytes("context",m),!!o)))}function L(m,g,b={}){m=ensureBytes("message",m),o&&(m=o(m));const{prefix:B,scalar:D,pointBytes:V}=F(g),x=z(b.context,B,m),y=R.multiply(x).toRawBytes(),T=z(b.context,y,V,m),q=w(x+T*D);aInRange("signature.s",q,_0n$1,a);const G=concatBytes(y,numberToBytesLE(q,t.BYTES));return ensureBytes("result",G,s*2)}const J=VERIFY_DEFAULT;function O(m,g,b,B=J){const{context:D,zip215:V}=B,x=t.BYTES;m=ensureBytes("signature",m,2*x),g=ensureBytes("message",g),V!==void 0&&abool("zip215",V),o&&(g=o(g));const y=bytesToNumberLE(m.slice(x,2*x));let T,q,G;try{T=M.fromHex(b,V),q=M.fromHex(m.slice(0,x),V),G=R.multiplyUnsafe(y)}catch{return!1}if(!V&&T.isSmallOrder())return!1;const W=z(D,q.toRawBytes(),T.toRawBytes(),g);return q.add(T.multiplyUnsafe(W)).subtract(G).clearCofactor().equals(M.ZERO)}return R._setWindowSize(8),{CURVE:e,getPublicKey:X,sign:L,verify:O,ExtendedPoint:M,utils:{getExtendedPublicKey:F,randomPrivateKey:()=>r(t.BYTES),precompute(m=8,g=M.BASE){return g._setWindowSize(m),g.multiply(BigInt(3)),g}}}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const ED25519_P=BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"),ED25519_SQRT_M1=BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");BigInt(0);const _1n$1=BigInt(1),_2n$1=BigInt(2);BigInt(3);const _5n=BigInt(5),_8n=BigInt(8);function ed25519_pow_2_252_3(n){const e=BigInt(10),t=BigInt(20),a=BigInt(40),o=BigInt(80),i=ED25519_P,s=n*n%i*n%i,c=pow2(s,_2n$1,i)*s%i,d=pow2(c,_1n$1,i)*n%i,p=pow2(d,_5n,i)*d%i,h=pow2(p,e,i)*p%i,I=pow2(h,t,i)*h%i,_=pow2(I,a,i)*I%i,k=pow2(_,o,i)*_%i,P=pow2(k,o,i)*_%i,v=pow2(P,e,i)*p%i;return{pow_p_5_8:pow2(v,_2n$1,i)*n%i,b2:s}}function adjustScalarBytes(n){return n[0]&=248,n[31]&=127,n[31]|=64,n}function uvRatio(n,e){const t=ED25519_P,a=mod(e*e*e,t),o=mod(a*a*e,t),i=ed25519_pow_2_252_3(n*o).pow_p_5_8;let r=mod(n*a*i,t);const s=mod(e*r*r,t),c=r,d=mod(r*ED25519_SQRT_M1,t),p=s===n,h=s===mod(-n,t),I=s===mod(-n*ED25519_SQRT_M1,t);return p&&(r=c),(h||I)&&(r=d),isNegativeLE(r,t)&&(r=mod(-r,t)),{isValid:p||h,value:r}}const Fp=Field(ED25519_P,void 0,!0),ed25519Defaults={a:BigInt(-1),d:BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),Fp,n:BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),h:_8n,Gx:BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),Gy:BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),hash:sha512,randomBytes,adjustScalarBytes,uvRatio},ed25519=twistedEdwards(ed25519Defaults);function ed25519PairFromSeed(n,e){if(!hasBigInt||!e&&isReady()){const a=ed25519KeypairFromSeed(n);return{publicKey:a.slice(32),secretKey:a.slice(0,64)}}const t=ed25519.getPublicKey(n);return{publicKey:t,secretKey:u8aConcatStrict([n,t])}}function ed25519Sign(n,{publicKey:e,secretKey:t},a){if(t){if(!e)throw new Error("Expected a valid publicKey")}else throw new Error("Expected a valid secretKey");const o=u8aToU8a(n),i=t.subarray(0,32);return!hasBigInt||!a&&isReady()?ed25519Sign$1(e,i,o):ed25519.sign(o,i)}function ed25519Verify(n,e,t,a){const o=u8aToU8a(n),i=u8aToU8a(t),r=u8aToU8a(e);if(i.length!==32)throw new Error(`Invalid publicKey, received ${i.length}, expected 32`);if(r.length!==64)throw new Error(`Invalid signature, received ${r.length} bytes, expected 64`);try{return!hasBigInt||!a&&isReady()?ed25519Verify$1(r,o,i):ed25519.verify(r,o,i)}catch{return!1}}const keyHdkdEd25519=createSeedDeriveFn(ed25519PairFromSeed,ed25519DeriveHard),SEC_LEN=64,PUB_LEN=32,TOT_LEN=SEC_LEN+PUB_LEN;function sr25519PairFromU8a(n){const e=u8aToU8a(n);if(e.length!==TOT_LEN)throw new Error(`Expected keypair with ${TOT_LEN} bytes, found ${e.length}`);return{publicKey:e.slice(SEC_LEN,TOT_LEN),secretKey:e.slice(0,SEC_LEN)}}function sr25519KeypairToU8a({publicKey:n,secretKey:e}){return u8aConcat(e,n).slice()}function createDeriveFn(n){return(e,t)=>{if(!isU8a(t)||t.length!==32)throw new Error("Invalid chainCode passed to derive");return sr25519PairFromU8a(n(sr25519KeypairToU8a(e),t))}}const sr25519DeriveHard=createDeriveFn(sr25519DeriveKeypairHard),sr25519DeriveSoft=createDeriveFn(sr25519DeriveKeypairSoft);function keyHdkdSr25519(n,{chainCode:e,isSoft:t}){return t?sr25519DeriveSoft(n,e):sr25519DeriveHard(n,e)}const generators={ecdsa:keyHdkdEcdsa,ed25519:keyHdkdEd25519,ethereum:keyHdkdEcdsa,sr25519:keyHdkdSr25519};function keyFromPath(n,e,t){const a=generators[t];let o=n;for(const i of e)o=a(o,i);return o}function sr25519PairFromSeed(n){const e=u8aToU8a(n);if(e.length!==32)throw new Error(`Expected a seed matching 32 bytes, found ${e.length}`);return sr25519PairFromU8a(sr25519KeypairFromSeed(e))}function sr25519Sign(n,{publicKey:e,secretKey:t}){if((e==null?void 0:e.length)!==32)throw new Error("Expected a valid publicKey, 32-bytes");if((t==null?void 0:t.length)!==64)throw new Error("Expected a valid secretKey, 64-bytes");return sr25519Sign$1(e,t,u8aToU8a(n))}function sr25519Verify(n,e,t){const a=u8aToU8a(t),o=u8aToU8a(e);if(a.length!==32)throw new Error(`Invalid publicKey, received ${a.length} bytes, expected 32`);if(o.length!==64)throw new Error(`Invalid signature, received ${o.length} bytes, expected 64`);return sr25519Verify$1(o,u8aToU8a(n),a)}const EMPTY_U8A$2=new Uint8Array;function sr25519VrfSign(n,{secretKey:e},t=EMPTY_U8A$2,a=EMPTY_U8A$2){if((e==null?void 0:e.length)!==64)throw new Error("Invalid secretKey, expected 64-bytes");return vrfSign(e,u8aToU8a(t),u8aToU8a(n),u8aToU8a(a))}const EMPTY_U8A$1=new Uint8Array;function sr25519VrfVerify(n,e,t,a=EMPTY_U8A$1,o=EMPTY_U8A$1){const i=u8aToU8a(t),r=u8aToU8a(e);if(i.length!==32)throw new Error("Invalid publicKey, expected 32-bytes");if(r.length!==96)throw new Error("Invalid vrfSign output, expected 96 bytes");return vrfVerify(i,u8aToU8a(a),u8aToU8a(n),u8aToU8a(o),r)}function encodeAddress(n,e=defaults$1.prefix){const t=decodeAddress(n);if(e<0||e>16383||[46,47].includes(e))throw new Error("Out of range ss58Format specified");if(!defaults$1.allowedDecodedLengths.includes(t.length))throw new Error(`Expected a valid key to convert, with length ${defaults$1.allowedDecodedLengths.join(", ")}`);const a=u8aConcat(e<64?[e]:[(e&252)>>2|64,e>>8|(e&3)<<6],t);return base58Encode(u8aConcat(a,sshash(a).subarray(0,[32,33].includes(t.length)?2:1)))}function addressToU8a(n){return decodeAddress(n)}const PREFIX=stringToU8a("modlpy/utilisuba");function createKeyMulti(n,e){return blake2AsU8a(u8aConcat(PREFIX,compactToU8a(n.length),...u8aSorted(n.map(addressToU8a)),bnToU8a(e,BN_LE_16_OPTS)))}function encodeMultiAddress(n,e,t){return encodeAddress(createKeyMulti(n,e),t)}function addressEq(n,e){return u8aEq(decodeAddress(n),decodeAddress(e))}const SHA3_PI=[],SHA3_ROTL=[],_SHA3_IOTA=[],_0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2),_7n$1=BigInt(7),_256n$1=BigInt(256),_0x71n=BigInt(113);for(let n=0,e=_1n,t=1,a=0;n<24;n++){[t,a]=[a,(2*t+3*a)%5],SHA3_PI.push(2*(5*a+t)),SHA3_ROTL.push((n+1)*(n+2)/2%64);let o=_0n;for(let i=0;i<7;i++)e=(e<<_1n^(e>>_7n$1)*_0x71n)%_256n$1,e&_2n&&(o^=_1n<<(_1n<<BigInt(i))-_1n);_SHA3_IOTA.push(o)}const[SHA3_IOTA_H,SHA3_IOTA_L]=split(_SHA3_IOTA,!0),rotlH=(n,e,t)=>t>32?rotlBH(n,e,t):rotlSH(n,e,t),rotlL=(n,e,t)=>t>32?rotlBL(n,e,t):rotlSL(n,e,t);function keccakP(n,e=24){const t=new Uint32Array(10);for(let a=24-e;a<24;a++){for(let r=0;r<10;r++)t[r]=n[r]^n[r+10]^n[r+20]^n[r+30]^n[r+40];for(let r=0;r<10;r+=2){const s=(r+8)%10,c=(r+2)%10,d=t[c],p=t[c+1],h=rotlH(d,p,1)^t[s],I=rotlL(d,p,1)^t[s+1];for(let _=0;_<50;_+=10)n[r+_]^=h,n[r+_+1]^=I}let o=n[2],i=n[3];for(let r=0;r<24;r++){const s=SHA3_ROTL[r],c=rotlH(o,i,s),d=rotlL(o,i,s),p=SHA3_PI[r];o=n[p],i=n[p+1],n[p]=c,n[p+1]=d}for(let r=0;r<50;r+=10){for(let s=0;s<10;s++)t[s]=n[r+s];for(let s=0;s<10;s++)n[r+s]^=~t[(s+2)%10]&t[(s+4)%10]}n[0]^=SHA3_IOTA_H[a],n[1]^=SHA3_IOTA_L[a]}t.fill(0)}class Keccak extends Hash{constructor(e,t,a,o=!1,i=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=a,this.enableXOF=o,this.rounds=i,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,number(a),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=u32(this.state)}keccak(){isLE||byteSwap32(this.state32),keccakP(this.state32,this.rounds),isLE||byteSwap32(this.state32),this.posOut=0,this.pos=0}update(e){exists(this);const{blockLen:t,state:a}=this;e=toBytes(e);const o=e.length;for(let i=0;i<o;){const r=Math.min(t-this.pos,o-i);for(let s=0;s<r;s++)a[this.pos++]^=e[i++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:e,suffix:t,pos:a,blockLen:o}=this;e[a]^=t,t&128&&a===o-1&&this.keccak(),e[o-1]^=128,this.keccak()}writeInto(e){exists(this,!1),bytes(e),this.finish();const t=this.state,{blockLen:a}=this;for(let o=0,i=e.length;o<i;){this.posOut>=a&&this.keccak();const r=Math.min(a-this.posOut,i-o);e.set(t.subarray(this.posOut,this.posOut+r),o),this.posOut+=r,o+=r}return e}xofInto(e){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return number(e),this.xofInto(new Uint8Array(e))}digestInto(e){if(output(e,this),this.finished)throw new Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){const{blockLen:t,suffix:a,outputLen:o,rounds:i,enableXOF:r}=this;return e||(e=new Keccak(t,a,o,r,i)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=i,e.suffix=a,e.outputLen=o,e.enableXOF=r,e.destroyed=this.destroyed,e}}const gen=(n,e,t)=>wrapConstructor(()=>new Keccak(e,n,t)),keccak_256=gen(1,136,256/8),keccak_512=gen(1,72,512/8),keccakAsU8a=createDualHasher({256:keccak256,512:keccak512},{256:keccak_256,512:keccak_512});function hasher(n,e,t){return n==="keccak"?keccakAsU8a(e,void 0,t):blake2AsU8a(e,void 0,void 0,t)}function validateAddress(n,e,t){return!!decodeAddress(n,e,t)}function isAddress(n,e,t){try{return validateAddress(n,e,t)}catch{return!1}}const config={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",coder:base64,type:"base64",withPadding:!0},base64Validate=createValidate(config),base64Decode=createDecode(config,base64Validate),base64Encode=createEncode(config);function secp256k1Compress(n,e){if(![33,65].includes(n.length))throw new Error(`Invalid publicKey provided, received ${n.length} bytes input`);return n.length===33?n:!hasBigInt||isReady()?secp256k1Compress$1(n):secp256k1.ProjectivePoint.fromHex(n).toRawBytes(!0)}function secp256k1Expand(n,e){if(![33,65].includes(n.length))throw new Error(`Invalid publicKey provided, received ${n.length} bytes input`);if(n.length===65)return n.subarray(1);if(!hasBigInt||isReady())return secp256k1Expand$1(n).subarray(1);const{px:t,py:a}=secp256k1.ProjectivePoint.fromHex(n);return u8aConcat(bnToU8a(t,BN_BE_256_OPTS),bnToU8a(a,BN_BE_256_OPTS))}function secp256k1Recover(n,e,t,a="blake2",o){const i=u8aToU8a(e).subarray(0,64),r=u8aToU8a(n),s=!hasBigInt||isReady()?secp256k1Recover$1(r,i,t):secp256k1.Signature.fromCompact(i).addRecoveryBit(t).recoverPublicKey(r).toRawBytes();if(!s)throw new Error("Unable to recover publicKey from signature");return a==="keccak"?secp256k1Expand(s):secp256k1Compress(s)}function secp256k1Sign(n,{secretKey:e},t="blake2",a){if((e==null?void 0:e.length)!==32)throw new Error("Expected valid secp256k1 secretKey, 32-bytes");const o=hasher(t,n,a);if(!hasBigInt||isReady())return secp256k1Sign$1(o,e);const i=secp256k1.sign(o,e,{lowS:!0});return u8aConcat(bnToU8a(i.r,BN_BE_256_OPTS),bnToU8a(i.s,BN_BE_256_OPTS),new Uint8Array([i.recovery||0]))}const N="ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g,""),N_BI=BigInt$1(`0x${N}`),N_BN=new BN(N,"hex");function addBi(n,e){let t=u8aToBigInt(e,BN_BE_OPTS);if(t>=N_BI)throw new Error("Tweak parameter is out of range");if(t+=u8aToBigInt(n,BN_BE_OPTS),t>=N_BI&&(t-=N_BI),t===_0n$6)throw new Error("Invalid resulting private key");return nToU8a(t,BN_BE_256_OPTS)}function addBn(n,e){const t=new BN(e);if(t.cmp(N_BN)>=0)throw new Error("Tweak parameter is out of range");if(t.iadd(new BN(n)),t.cmp(N_BN)>=0&&t.isub(N_BN),t.isZero())throw new Error("Invalid resulting private key");return bnToU8a(t,BN_BE_256_OPTS)}function secp256k1PrivateKeyTweakAdd(n,e,t){if(!isU8a(n)||n.length!==32)throw new Error("Expected seckey to be an Uint8Array with length 32");if(!isU8a(e)||e.length!==32)throw new Error("Expected tweak to be an Uint8Array with length 32");return!hasBigInt||t?addBn(n,e):addBi(n,e)}function secp256k1Verify(n,e,t,a="blake2",o){const i=u8aToU8a(e);if(i.length!==65)throw new Error(`Expected signature with 65 bytes, ${i.length} found instead`);const r=secp256k1Recover(hasher(a,n),i,i[64],a),s=hasher(a,r,o),c=u8aToU8a(t);return u8aEq(r,c)||(a==="keccak"?u8aEq(s.slice(-20),c.slice(-20)):u8aEq(s,c))}function getH160(n){return[33,65].includes(n.length)&&(n=keccakAsU8a(secp256k1Expand(n))),n.slice(-20)}function ethereumEncode(n){if(!n)return"0x";const e=u8aToU8a(n);if(![20,32,33,65].includes(e.length))throw new Error(`Invalid address or publicKey provided, received ${e.length} bytes input`);const t=u8aToHex(getH160(e),-1,!1),a=u8aToHex(keccakAsU8a(t),-1,!1);let o="";for(let i=0;i<40;i++)o=`${o}${parseInt(a[i],16)>7?t[i].toUpperCase():t[i]}`;return`0x${o}`}function isInvalidChar(n,e){return n!==(e>7?n.toUpperCase():n.toLowerCase())}function isEthereumChecksum(n){const e=n.replace("0x",""),t=u8aToHex(keccakAsU8a(e.toLowerCase()),-1,!1);for(let a=0;a<40;a++)if(isInvalidChar(e[a],parseInt(t[a],16)))return!1;return!0}function isEthereumAddress(n){return!n||n.length!==42||!isHex(n)?!1:/^(0x)?[0-9a-f]{40}$/.test(n)||/^(0x)?[0-9A-F]{40}$/.test(n)?!0:isEthereumChecksum(n)}const JS_HASH={256:sha256,512:sha512},WA_MHAC={256:hmacSha256,512:hmacSha512};function hmacShaAsU8a(n,e,t=256,a){const o=u8aToU8a(n);return!hasBigInt||isReady()?WA_MHAC[t](o,e):hmac(JS_HASH[t],o,e)}const HARDENED=2147483648;function hdValidatePath(n){if(!n.startsWith("m/"))return!1;const e=n.split("/").slice(1);for(const t of e){const a=/^\d+'?$/.test(t)?parseInt(t.replace(/'$/,""),10):Number.NaN;if(isNaN(a)||a>=HARDENED||a<0)return!1}return!0}const MASTER_SECRET=stringToU8a("Bitcoin seed");function createCoded(n,e){return{chainCode:e,publicKey:secp256k1PairFromSeed(n).publicKey,secretKey:n}}function deriveChild(n,e){const t=bnToU8a(e,BN_BE_32_OPTS),a=e>=HARDENED?u8aConcat(new Uint8Array(1),n.secretKey,t):u8aConcat(n.publicKey,t);try{const o=hmacShaAsU8a(n.chainCode,a,512);return createCoded(secp256k1PrivateKeyTweakAdd(n.secretKey,o.slice(0,32)),o.slice(32))}catch{return deriveChild(n,e+1)}}function hdEthereum(n,e=""){const t=hmacShaAsU8a(MASTER_SECRET,n,512);let a=createCoded(t.slice(0,32),t.slice(32));if(!e||e==="m"||e==="M"||e==="m'"||e==="M'")return a;if(!hdValidatePath(e))throw new Error("Invalid derivation path");const o=e.split("/").slice(1);for(const i of o)a=deriveChild(a,parseInt(i,10)+(i.length>1&&i.endsWith("'")?HARDENED:0));return a}function pbkdf2Init(n,e,t,a){hash(n);const o=checkOpts({dkLen:32,asyncTick:10},a),{c:i,dkLen:r,asyncTick:s}=o;if(number(i),number(r),number(s),i<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const c=toBytes(e),d=toBytes(t),p=new Uint8Array(r),h=hmac.create(n,c),I=h._cloneInto().update(d);return{c:i,dkLen:r,asyncTick:s,DK:p,PRF:h,PRFSalt:I}}function pbkdf2Output(n,e,t,a,o){return n.destroy(),e.destroy(),a&&a.destroy(),o.fill(0),t}function pbkdf2(n,e,t,a){const{c:o,dkLen:i,DK:r,PRF:s,PRFSalt:c}=pbkdf2Init(n,e,t,a);let d;const p=new Uint8Array(4),h=createView(p),I=new Uint8Array(s.outputLen);for(let _=1,k=0;k<i;_++,k+=s.outputLen){const P=r.subarray(k,k+s.outputLen);h.setInt32(0,_,!1),(d=c._cloneInto(d)).update(p).digestInto(I),P.set(I.subarray(0,P.length));for(let v=1;v<o;v++){s._cloneInto(d).update(I).digestInto(I);for(let E=0;E<P.length;E++)P[E]^=I[E]}}return pbkdf2Output(s,c,r,d,I)}function pbkdf2Encode(n,e=randomAsU8a(),t=2048,a){const o=u8aToU8a(n),i=u8aToU8a(e);return{password:!hasBigInt||isReady()?pbkdf2$1(o,i,t):pbkdf2(sha512,o,i,{c:t,dkLen:64}),rounds:t,salt:e}}const shaAsU8a=createDualHasher({256:sha256$1,512:sha512$1},{256:sha256,512:sha512}),sha256AsU8a=createBitHasher(256,shaAsU8a),DEFAULT_WORDLIST="abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|"),INVALID_MNEMONIC="Invalid mnemonic",INVALID_ENTROPY="Invalid entropy",INVALID_CHECKSUM="Invalid mnemonic checksum";function normalize(n){return(n||"").normalize("NFKD")}function binaryToByte(n){return parseInt(n,2)}function bytesToBinary(n){return n.map(e=>e.toString(2).padStart(8,"0")).join("")}function deriveChecksumBits(n){return bytesToBinary(Array.from(sha256AsU8a(n))).slice(0,n.length*8/32)}function mnemonicToSeedSync(n,e){return pbkdf2Encode(stringToU8a(normalize(n)),stringToU8a(`mnemonic${normalize(e)}`)).password}function mnemonicToEntropy$1(n,e=DEFAULT_WORDLIST){const t=normalize(n).split(" ");if(t.length%3!==0)throw new Error(INVALID_MNEMONIC);const a=t.map(p=>{const h=e.indexOf(p);if(h===-1)throw new Error(INVALID_MNEMONIC);return h.toString(2).padStart(11,"0")}).join(""),o=Math.floor(a.length/33)*32,i=a.slice(0,o),r=a.slice(o),s=i.match(/(.{1,8})/g),c=s==null?void 0:s.map(binaryToByte);if(!c||c.length%4!==0||c.length<16||c.length>32)throw new Error(INVALID_ENTROPY);const d=u8aToU8a(c);if(deriveChecksumBits(d)!==r)throw new Error(INVALID_CHECKSUM);return d}function validateMnemonic(n,e){try{mnemonicToEntropy$1(n,e)}catch{return!1}return!0}function mnemonicToEntropy(n,e,t){return!hasBigInt||isReady()?bip39ToEntropy(n):mnemonicToEntropy$1(n,e)}function mnemonicValidate(n,e,t){return!hasBigInt||isReady()?bip39Validate(n):validateMnemonic(n,e)}function mnemonicToLegacySeed(n,e="",t,a=32){if(mnemonicValidate(n)){if(![32,64].includes(a))throw new Error(`Invalid seed length ${a}, expected 32 or 64`)}else throw new Error("Invalid bip39 mnemonic specified");return a===32?!hasBigInt||isReady()?bip39ToSeed(n,e):mnemonicToSeedSync(n,e).subarray(0,32):mnemonicToSeedSync(n,e)}function mnemonicToMiniSecret(n,e="",t,a){if(mnemonicValidate(n,t)){if(isReady())return bip39ToMiniSecret(n,e)}else throw new Error("Invalid bip39 mnemonic specified");const o=mnemonicToEntropy(n,t),i=stringToU8a(`mnemonic${e}`);return pbkdf2Encode(o,i).password.slice(0,32)}function L32(n,e){return n<<e|n>>>32-e}function ld32(n,e){let t=n[e+3]&255;return t=t<<8|n[e+2]&255,t=t<<8|n[e+1]&255,t<<8|n[e+0]&255}function st32(n,e,t){for(let a=0;a<4;a++)n[e+a]=t&255,t>>>=8}function vn(n,e,t,a,o){let i=0;for(let r=0;r<o;r++)i|=n[e+r]^t[a+r];return(1&i-1>>>8)-1}function core(n,e,t,a,o){const i=new Uint32Array(16),r=new Uint32Array(16),s=new Uint32Array(16),c=new Uint32Array(4);let d,p,h;for(d=0;d<4;d++)r[5*d]=ld32(a,4*d),r[1+d]=ld32(t,4*d),r[6+d]=ld32(e,4*d),r[11+d]=ld32(t,16+4*d);for(d=0;d<16;d++)s[d]=r[d];for(d=0;d<20;d++){for(p=0;p<4;p++){for(h=0;h<4;h++)c[h]=r[(5*p+4*h)%16];for(c[1]^=L32(c[0]+c[3]|0,7),c[2]^=L32(c[1]+c[0]|0,9),c[3]^=L32(c[2]+c[1]|0,13),c[0]^=L32(c[3]+c[2]|0,18),h=0;h<4;h++)i[4*p+(p+h)%4]=c[h]}for(h=0;h<16;h++)r[h]=i[h]}if(o){for(d=0;d<16;d++)r[d]=r[d]+s[d]|0;for(d=0;d<4;d++)r[5*d]=r[5*d]-ld32(a,4*d)|0,r[6+d]=r[6+d]-ld32(e,4*d)|0;for(d=0;d<4;d++)st32(n,4*d,r[5*d]),st32(n,16+4*d,r[6+d])}else for(d=0;d<16;d++)st32(n,4*d,r[d]+s[d]|0)}const sigma=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function crypto_stream_salsa20_xor(n,e,t,a,o,i,r){const s=new Uint8Array(16),c=new Uint8Array(64);let d,p;if(!o)return 0;for(p=0;p<16;p++)s[p]=0;for(p=0;p<8;p++)s[p]=i[p];for(;o>=64;){for(core(c,s,r,sigma,!1),p=0;p<64;p++)n[e+p]=(t?t[a+p]:0)^c[p];for(d=1,p=8;p<16;p++)d=d+(s[p]&255)|0,s[p]=d&255,d>>>=8;o-=64,e+=64,t&&(a+=64)}if(o>0)for(core(c,s,r,sigma,!1),p=0;p<o;p++)n[e+p]=(t?t[a+p]:0)^c[p];return 0}function crypto_stream_xor(n,e,t,a,o,i,r){const s=new Uint8Array(32);return core(s,i,r,sigma,!0),crypto_stream_salsa20_xor(n,e,t,a,o,i.subarray(16),s)}function add1305(n,e){let t=0;for(let a=0;a<17;a++)t=t+(n[a]+e[a]|0)|0,n[a]=t&255,t>>>=8}const minusp=new Uint32Array([5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252]);function crypto_onetimeauth(n,e,t,a,o,i){let r,s,c;const d=new Uint32Array(17),p=new Uint32Array(17),h=new Uint32Array(17),I=new Uint32Array(17),_=new Uint32Array(17);for(s=0;s<17;s++)p[s]=h[s]=0;for(s=0;s<16;s++)p[s]=i[s];for(p[3]&=15,p[4]&=252,p[7]&=15,p[8]&=252,p[11]&=15,p[12]&=252,p[15]&=15;o>0;){for(s=0;s<17;s++)I[s]=0;for(s=0;s<16&&s<o;++s)I[s]=t[a+s];for(I[s]=1,a+=s,o-=s,add1305(h,I),r=0;r<17;r++)for(d[r]=0,s=0;s<17;s++)d[r]=d[r]+h[s]*(s<=r?p[r-s]:320*p[r+17-s]|0)|0|0;for(r=0;r<17;r++)h[r]=d[r];for(c=0,s=0;s<16;s++)c=c+h[s]|0,h[s]=c&255,c>>>=8;for(c=c+h[16]|0,h[16]=c&3,c=5*(c>>>2)|0,s=0;s<16;s++)c=c+h[s]|0,h[s]=c&255,c>>>=8;c=c+h[16]|0,h[16]=c}for(s=0;s<17;s++)_[s]=h[s];add1305(h,minusp);const k=-(h[16]>>>7)|0;for(s=0;s<17;s++)h[s]^=k&(_[s]^h[s]);for(s=0;s<16;s++)I[s]=i[s+16];for(I[16]=0,add1305(h,I),s=0;s<16;s++)n[e+s]=h[s];return 0}function crypto_onetimeauth_verify(n,e,t,a,o,i){const r=new Uint8Array(16);return crypto_onetimeauth(r,0,t,a,o,i),vn(n,e,r,0,16)}function crypto_secretbox(n,e,t,a,o){if(t<32)return-1;crypto_stream_xor(n,0,e,0,t,a,o),crypto_onetimeauth(n,16,n,32,t-32,n);for(let i=0;i<16;i++)n[i]=0;return 0}function crypto_secretbox_open(n,e,t,a,o){const i=new Uint8Array(32);if(t<32||(crypto_stream_xor(i,0,null,0,32,a,o),crypto_onetimeauth_verify(e,16,e,32,t-32,i)!==0))return-1;crypto_stream_xor(n,0,e,0,t,a,o);for(let r=0;r<32;r++)n[r]=0;return 0}const crypto_secretbox_KEYBYTES=32,crypto_secretbox_NONCEBYTES=24,crypto_secretbox_ZEROBYTES=32,crypto_secretbox_BOXZEROBYTES=16;function checkLengths(n,e){if(n.length!==crypto_secretbox_KEYBYTES)throw new Error("bad key size");if(e.length!==crypto_secretbox_NONCEBYTES)throw new Error("bad nonce size")}function checkArrayTypes(...n){for(let e=0,t=n.length;e<t;e++)if(!(n[e]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function naclSecretbox(n,e,t){checkArrayTypes(n,e,t),checkLengths(t,e);const a=new Uint8Array(crypto_secretbox_ZEROBYTES+n.length),o=new Uint8Array(a.length);for(let i=0;i<n.length;i++)a[i+crypto_secretbox_ZEROBYTES]=n[i];return crypto_secretbox(o,a,a.length,e,t),o.subarray(crypto_secretbox_BOXZEROBYTES)}function naclSecretboxOpen(n,e,t){checkArrayTypes(n,e,t),checkLengths(t,e);const a=new Uint8Array(crypto_secretbox_BOXZEROBYTES+n.length),o=new Uint8Array(a.length);for(let i=0;i<n.length;i++)a[i+crypto_secretbox_BOXZEROBYTES]=n[i];return a.length<32||crypto_secretbox_open(o,a,a.length,e,t)!==0?null:o.subarray(crypto_secretbox_ZEROBYTES)}function naclDecrypt(n,e,t){return naclSecretboxOpen(n,e,t)}function naclEncrypt(n,e,t=randomAsU8a(24)){return{encrypted:naclSecretbox(n,t,e),nonce:t}}function XorAndSalsa(n,e,t,a,o,i){let r=n[e++]^t[a++],s=n[e++]^t[a++],c=n[e++]^t[a++],d=n[e++]^t[a++],p=n[e++]^t[a++],h=n[e++]^t[a++],I=n[e++]^t[a++],_=n[e++]^t[a++],k=n[e++]^t[a++],P=n[e++]^t[a++],v=n[e++]^t[a++],E=n[e++]^t[a++],M=n[e++]^t[a++],R=n[e++]^t[a++],H=n[e++]^t[a++],K=n[e++]^t[a++],w=r,U=s,F=c,X=d,z=p,L=h,J=I,O=_,u=k,m=P,g=v,b=E,B=M,D=R,V=H,x=K;for(let y=0;y<8;y+=2)z^=rotl$1(w+B|0,7),u^=rotl$1(z+w|0,9),B^=rotl$1(u+z|0,13),w^=rotl$1(B+u|0,18),m^=rotl$1(L+U|0,7),D^=rotl$1(m+L|0,9),U^=rotl$1(D+m|0,13),L^=rotl$1(U+D|0,18),V^=rotl$1(g+J|0,7),F^=rotl$1(V+g|0,9),J^=rotl$1(F+V|0,13),g^=rotl$1(J+F|0,18),X^=rotl$1(x+b|0,7),O^=rotl$1(X+x|0,9),b^=rotl$1(O+X|0,13),x^=rotl$1(b+O|0,18),U^=rotl$1(w+X|0,7),F^=rotl$1(U+w|0,9),X^=rotl$1(F+U|0,13),w^=rotl$1(X+F|0,18),J^=rotl$1(L+z|0,7),O^=rotl$1(J+L|0,9),z^=rotl$1(O+J|0,13),L^=rotl$1(z+O|0,18),b^=rotl$1(g+m|0,7),u^=rotl$1(b+g|0,9),m^=rotl$1(u+b|0,13),g^=rotl$1(m+u|0,18),B^=rotl$1(x+V|0,7),D^=rotl$1(B+x|0,9),V^=rotl$1(D+B|0,13),x^=rotl$1(V+D|0,18);o[i++]=r+w|0,o[i++]=s+U|0,o[i++]=c+F|0,o[i++]=d+X|0,o[i++]=p+z|0,o[i++]=h+L|0,o[i++]=I+J|0,o[i++]=_+O|0,o[i++]=k+u|0,o[i++]=P+m|0,o[i++]=v+g|0,o[i++]=E+b|0,o[i++]=M+B|0,o[i++]=R+D|0,o[i++]=H+V|0,o[i++]=K+x|0}function BlockMix(n,e,t,a,o){let i=a+0,r=a+16*o;for(let s=0;s<16;s++)t[r+s]=n[e+(2*o-1)*16+s];for(let s=0;s<o;s++,i+=16,e+=16)XorAndSalsa(t,r,n,e,t,i),s>0&&(r+=16),XorAndSalsa(t,i,n,e+=16,t,r)}function scryptInit(n,e,t){const a=checkOpts({dkLen:32,asyncTick:10,maxmem:1073742848},t),{N:o,r:i,p:r,dkLen:s,asyncTick:c,maxmem:d,onProgress:p}=a;if(number(o),number(i),number(r),number(s),number(c),number(d),p!==void 0&&typeof p!="function")throw new Error("progressCb should be function");const h=128*i,I=h/4;if(o<=1||o&o-1||o>=2**(h/8)||o>2**32)throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");if(r<0||r>(2**32-1)*32/h)throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");if(s<0||s>(2**32-1)*32)throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");const _=h*(o+r);if(_>d)throw new Error(`Scrypt: parameters too large, ${_} (128 * r * (N + p)) > ${d} (maxmem)`);const k=pbkdf2(sha256,n,e,{c:1,dkLen:h*r}),P=u32(k),v=u32(new Uint8Array(h*o)),E=u32(new Uint8Array(h));let M=()=>{};if(p){const R=2*o*r,H=Math.max(Math.floor(R/1e4),1);let K=0;M=()=>{K++,p&&(!(K%H)||K===R)&&p(K/R)}}return{N:o,r:i,p:r,dkLen:s,blockSize32:I,V:v,B32:P,B:k,tmp:E,blockMixCb:M,asyncTick:c}}function scryptOutput(n,e,t,a,o){const i=pbkdf2(sha256,n,t,{c:1,dkLen:e});return t.fill(0),a.fill(0),o.fill(0),i}function scrypt(n,e,t){const{N:a,r:o,p:i,dkLen:r,blockSize32:s,V:c,B32:d,B:p,tmp:h,blockMixCb:I}=scryptInit(n,e,t);isLE||byteSwap32(d);for(let _=0;_<i;_++){const k=s*_;for(let P=0;P<s;P++)c[P]=d[k+P];for(let P=0,v=0;P<a-1;P++)BlockMix(c,v,c,v+=s,o),I();BlockMix(c,(a-1)*s,d,k,o),I();for(let P=0;P<a;P++){const v=d[k+s-16]%a;for(let E=0;E<s;E++)h[E]=d[k+E]^c[v*s+E];BlockMix(h,0,d,k,o),I()}}return isLE||byteSwap32(d),scryptOutput(n,r,p,c,h)}const DEFAULT_PARAMS={N:32768,p:1,r:8};function scryptEncode(n,e=randomAsU8a(),t=DEFAULT_PARAMS,a){const o=u8aToU8a(n);return{params:t,password:!hasBigInt||isReady()?scrypt$1(o,e,Math.log2(t.N),t.r,t.p):scrypt(o,e,objectSpread({dkLen:64},t)),salt:e}}function scryptFromU8a(n){const e=n.subarray(0,32),t=u8aToBn(n.subarray(32,36),BN_LE_OPTS).toNumber(),a=u8aToBn(n.subarray(36,40),BN_LE_OPTS).toNumber(),o=u8aToBn(n.subarray(40,44),BN_LE_OPTS).toNumber();if(t!==DEFAULT_PARAMS.N||a!==DEFAULT_PARAMS.p||o!==DEFAULT_PARAMS.r)throw new Error("Invalid injected scrypt params found");return{params:{N:t,p:a,r:o},salt:e}}function scryptToU8a(n,{N:e,p:t,r:a}){return u8aConcat(n,bnToU8a(e,BN_LE_32_OPTS),bnToU8a(t,BN_LE_32_OPTS),bnToU8a(a,BN_LE_32_OPTS))}const ENCODING=["scrypt","xsalsa20-poly1305"],ENCODING_NONE=["none"],ENCODING_VERSION="3",NONCE_LENGTH=24,SCRYPT_LENGTH=32+3*4;function jsonDecryptData(n,e,t=ENCODING){if(n){if(t.includes("xsalsa20-poly1305")&&!e)throw new Error("Password required to decode encrypted data")}else throw new Error("No encrypted data available to decode");let a=n;if(e){let o;if(t.includes("scrypt")){const{params:i,salt:r}=scryptFromU8a(n);o=scryptEncode(e,r,i).password,n=n.subarray(SCRYPT_LENGTH)}else o=stringToU8a(e);a=naclDecrypt(n.subarray(NONCE_LENGTH),n.subarray(0,NONCE_LENGTH),u8aFixLength(o,256,!0))}if(!a)throw new Error("Unable to decode using the supplied passphrase");return a}function jsonDecrypt({encoded:n,encoding:e},t){if(!n)throw new Error("No encrypted data available to decode");return jsonDecryptData(isHex(n)?hexToU8a(n):base64Decode(n),t,Array.isArray(e.type)?e.type:[e.type])}function jsonEncryptFormat(n,e,t){return{encoded:base64Encode(n),encoding:{content:e,type:t?ENCODING:ENCODING_NONE,version:ENCODING_VERSION}}}function jsonEncrypt(n,e,t){let a=!1,o=n;if(t){const{params:i,password:r,salt:s}=scryptEncode(t),{encrypted:c,nonce:d}=naclEncrypt(o,r.subarray(0,32));a=!0,o=u8aConcat(scryptToU8a(s,i),d,c)}return jsonEncryptFormat(o,e,a)}const secp256k1VerifyHasher=n=>(e,t,a)=>secp256k1Verify(e,t,a,n),VERIFIERS_ECDSA=[["ecdsa",secp256k1VerifyHasher("blake2")],["ethereum",secp256k1VerifyHasher("keccak")]],VERIFIERS=[["ed25519",ed25519Verify],["sr25519",sr25519Verify],...VERIFIERS_ECDSA],CRYPTO_TYPES=["ed25519","sr25519","ecdsa"];function verifyDetect(n,{message:e,publicKey:t,signature:a},o=VERIFIERS){return n.isValid=o.some(([i,r])=>{try{if(r(e,a,t))return n.crypto=i,!0}catch{}return!1}),n}function verifyMultisig(n,{message:e,publicKey:t,signature:a}){if(![0,1,2].includes(a[0]))throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${a[0]}`);const o=CRYPTO_TYPES[a[0]]||"none";n.crypto=o;try{n.isValid={ecdsa:()=>verifyDetect(n,{message:e,publicKey:t,signature:a.subarray(1)},VERIFIERS_ECDSA).isValid,ed25519:()=>ed25519Verify(e,a.subarray(1),t),none:()=>{throw Error("no verify for `none` crypto type")},sr25519:()=>sr25519Verify(e,a.subarray(1),t)}[o]()}catch{}return n}function getVerifyFn(n){return[0,1,2].includes(n[0])&&[65,66].includes(n.length)?verifyMultisig:verifyDetect}function signatureVerify(n,e,t){const a=u8aToU8a(e);if(![64,65,66].includes(a.length))throw new Error(`Invalid signature length, expected [64..66] bytes, found ${a.length}`);const o=decodeAddress(t),i={message:u8aToU8a(n),publicKey:o,signature:a},r={crypto:"none",isValid:!1,isWrapped:u8aIsWrapped(i.message,!0),publicKey:o},s=u8aIsWrapped(i.message,!1),c=getVerifyFn(a);return c(r,i),r.crypto!=="none"||r.isWrapped&&!s?r:(i.message=s?u8aUnwrapBytes(i.message):u8aWrapBytes(i.message),c(r,i))}const P64_1=BigInt$1("11400714785074694791"),P64_2=BigInt$1("14029467366897019727"),P64_3=BigInt$1("1609587929392839161"),P64_4=BigInt$1("9650029242287828579"),P64_5=BigInt$1("2870177450012600261"),U64=BigInt$1("0xffffffffffffffff"),_7n=BigInt$1(7),_11n=BigInt$1(11),_12n=BigInt$1(12),_16n=BigInt$1(16),_18n=BigInt$1(18),_23n=BigInt$1(23),_27n=BigInt$1(27),_29n=BigInt$1(29),_31n=BigInt$1(31),_32n=BigInt$1(32),_33n=BigInt$1(33),_64n=BigInt$1(64),_256n=BigInt$1(256);function rotl(n,e){const t=n&U64;return(t<<e|t>>_64n-e)&U64}function fromU8a(n,e,t){const a=new Array(t);let o=0;for(let r=0;r<t;r++,o+=2)a[r]=BigInt$1(n[e+o]|n[e+1+o]<<8);let i=_0n$6;for(let r=t-1;r>=0;r--)i=(i<<_16n)+a[r];return i}function init(n,e){const t={seed:n,u8a:new Uint8Array(32),u8asize:0,v1:n+P64_1+P64_2,v2:n+P64_2,v3:n,v4:n-P64_1};if(e.length<32)return t.u8a.set(e),t.u8asize=e.length,t;const a=e.length-32;let o=0;if(a>=0){const i=r=>P64_1*rotl(r+P64_2*fromU8a(e,o,4),_31n);do t.v1=i(t.v1),o+=8,t.v2=i(t.v2),o+=8,t.v3=i(t.v3),o+=8,t.v4=i(t.v4),o+=8;while(o<=a)}return o<e.length&&(t.u8a.set(e.subarray(o,e.length)),t.u8asize=e.length-o),t}function xxhash64(n,e){const{seed:t,u8a:a,u8asize:o,v1:i,v2:r,v3:s,v4:c}=init(BigInt$1(e),n);let d=0,p=U64&BigInt$1(n.length)+(n.length>=32?((((rotl(i,_1n$8)+rotl(r,_7n)+rotl(s,_12n)+rotl(c,_18n)^P64_1*rotl(i*P64_2,_31n))*P64_1+P64_4^P64_1*rotl(r*P64_2,_31n))*P64_1+P64_4^P64_1*rotl(s*P64_2,_31n))*P64_1+P64_4^P64_1*rotl(c*P64_2,_31n))*P64_1+P64_4:t+P64_5);for(;d<=o-8;)p=U64&P64_4+P64_1*rotl(p^P64_1*rotl(P64_2*fromU8a(a,d,4),_31n),_27n),d+=8;for(d+4<=o&&(p=U64&P64_3+P64_2*rotl(p^P64_1*fromU8a(a,d,2),_23n),d+=4);d<o;)p=U64&P64_1*rotl(p^P64_5*BigInt$1(a[d++]),_11n);p=U64&P64_2*(p^p>>_33n),p=U64&P64_3*(p^p>>_29n),p=U64&(p^p>>_32n);const h=new Uint8Array(8);for(let I=7;I>=0;I--)h[I]=Number(p%_256n),p=p/_256n;return h}function xxhashAsU8a(n,e=64,t){const a=Math.ceil(e/64),o=u8aToU8a(n);if(!hasBigInt||!t&&isReady())return twox(o,a);const i=new Uint8Array(a*8);for(let r=0;r<a;r++)i.set(xxhash64(o,r).reverse(),r*8);return i}const emptyCheck={extrinsic:{},payload:{}},polkadot={LimitParathreadCommits:emptyCheck,OnlyStakingAndClaims:emptyCheck,PrevalidateAttests:emptyCheck,RestrictFunctionality:emptyCheck,TransactionCallFilter:emptyCheck,ValidateDoubleVoteReports:emptyCheck},shell={DisallowSigned:emptyCheck},statemint={ChargeAssetTxPayment:{extrinsic:{tip:"Compact<Balance>",assetId:"TAssetConversion"},payload:{}}},CheckMetadataHash={extrinsic:{mode:"u8"},payload:{metadataHash:"Option<[u8;32]>"}},CheckMortality={extrinsic:{era:"ExtrinsicEra"},payload:{blockHash:"Hash"}},ChargeTransactionPayment={extrinsic:{tip:"Compact<Balance>"},payload:{}},substrate$1={ChargeTransactionPayment,CheckBlockGasLimit:emptyCheck,CheckEra:CheckMortality,CheckGenesis:{extrinsic:{},payload:{genesisHash:"Hash"}},CheckMetadataHash,CheckMortality,CheckNonZeroSender:emptyCheck,CheckNonce:{extrinsic:{nonce:"Compact<Index>"},payload:{}},CheckSpecVersion:{extrinsic:{},payload:{specVersion:"u32"}},CheckTxVersion:{extrinsic:{},payload:{transactionVersion:"u32"}},CheckVersion:{extrinsic:{},payload:{specVersion:"u32"}},CheckWeight:emptyCheck,LockStakingStatus:emptyCheck,SkipCheckIfFeeless:ChargeTransactionPayment,ValidateEquivocationReport:emptyCheck},allExtensions=objectSpread({},substrate$1,polkadot,shell,statemint),fallbackExtensions=["CheckVersion","CheckGenesis","CheckEra","CheckNonce","CheckWeight","ChargeTransactionPayment","CheckBlockGasLimit"];function findUnknownExtensions(n,e={}){const t=[...Object.keys(allExtensions),...Object.keys(e)];return n.filter(a=>!t.includes(a))}function expandExtensionTypes(n,e,t={}){return n.map(a=>t[a]||allExtensions[a]).filter(a=>!!a).reduce((a,o)=>objectSpread(a,o[e]),{})}function decodeEvent(n,e){if(!(e!=null&&e.length))return{DataType:Null};const t=e.subarray(0,2);return{DataType:n.findMetaEvent(t),value:{data:e.subarray(2),index:t}}}class GenericEventData extends Tuple{constructor(t,a,o,i="<unknown>",r="<unknown>"){const s=(o==null?void 0:o.fields)||[];super(t,s.map(({type:d})=>t.createLookupType(d)),a);A(this,"__internal__meta");A(this,"__internal__method");A(this,"__internal__names",null);A(this,"__internal__section");A(this,"__internal__typeDef");this.__internal__meta=o,this.__internal__method=r,this.__internal__section=i,this.__internal__typeDef=s.map(({type:d})=>t.lookup.getTypeDef(d));const c=s.map(({name:d})=>t.lookup.sanitizeField(d)[0]).filter(d=>!!d);c.length===s.length&&(this.__internal__names=c,objectProperties(this,c,(d,p)=>this[p]))}get meta(){return this.__internal__meta}get method(){return this.__internal__method}get names(){return this.__internal__names}get section(){return this.__internal__section}get typeDef(){return this.__internal__typeDef}toHuman(t,a){if(this.__internal__names!==null){const o={};for(let i=0,r=this.__internal__names.length;i<r;i++)o[this.__internal__names[i]]=this[i].toHuman(t,a);return o}return super.toHuman(t)}}class GenericEvent extends Struct{constructor(e,t){const{DataType:a,value:o}=decodeEvent(e,t);super(e,{index:"EventId",data:a},o)}get data(){return this.getT("data")}get index(){return this.getT("index")}get meta(){return this.data.meta}get method(){return this.data.method}get section(){return this.data.section}get typeDef(){return this.data.typeDef}toHuman(e,t){return objectSpread({method:this.method,section:this.section},e?{docs:this.meta.docs.map(a=>a.toString())}:null,super.toHuman(e,t))}}const EXTRINSIC_VERSION=4;class GenericExtrinsicV4 extends Struct{constructor(e,t,{isSigned:a}={}){super(e,{signature:"ExtrinsicSignatureV4",method:"Call"},GenericExtrinsicV4.decodeExtrinsic(e,t,a))}static decodeExtrinsic(e,t,a=!1){if(t instanceof GenericExtrinsicV4)return t;if(t instanceof e.createClassUnsafe("Call"))return{method:t};if(isU8a(t)){const o=e.createTypeUnsafe("ExtrinsicSignatureV4",[t,{isSigned:a}]);return{method:e.createTypeUnsafe("Call",[t.subarray(o.encodedLength)]),signature:o}}return t||{}}get encodedLength(){return this.toU8a().length}get method(){return this.getT("method")}get signature(){return this.getT("signature")}get version(){return EXTRINSIC_VERSION}addSignature(e,t,a){return this.signature.addSignature(e,t,a),this}sign(e,t){return this.signature.sign(this.method,e,t),this}signFake(e,t){return this.signature.signFake(this.method,e,t),this}}const BIT_SIGNED=128,BIT_UNSIGNED=0,EMPTY_U8A=new Uint8Array,DEFAULT_VERSION=4,IMMORTAL_ERA=new Uint8Array([0]),UNMASK_VERSION=127,VERSIONS$1=["ExtrinsicUnknown","ExtrinsicUnknown","ExtrinsicUnknown","ExtrinsicUnknown","ExtrinsicV4"];function newFromValue(n,e,t){if(e instanceof GenericExtrinsic)return e.unwrap();const a=(t&BIT_SIGNED)===BIT_SIGNED,o=VERSIONS$1[t&UNMASK_VERSION]||VERSIONS$1[0];return n.createTypeUnsafe(o,[e,{isSigned:a,version:t}])}function decodeExtrinsic(n,e,t=DEFAULT_VERSION){return isU8a(e)||Array.isArray(e)||isHex(e)?decodeU8a$4(n,u8aToU8a(e),t):e instanceof n.createClassUnsafe("Call")?newFromValue(n,{method:e},t):newFromValue(n,e,t)}function decodeU8a$4(n,e,t){if(!e.length)return newFromValue(n,new Uint8Array,t);const[a,o]=compactFromU8a(e),i=a+o.toNumber();if(i>e.length)throw new Error(`Extrinsic: length less than remainder, expected at least ${i}, found ${e.length}`);const r=e.subarray(a,i);return newFromValue(n,r.subarray(1),r[0])}class ExtrinsicBase extends AbstractBase{constructor(e,t,a){super(e,t,a);const o=Object.keys(e.getSignedExtensionTypes()),i=r=>this.inner.signature[r];for(let r=0,s=o.length;r<s;r++)objectProperty(this,o[r],i)}get args(){return this.method.args}get argsDef(){return this.method.argsDef}get callIndex(){return this.method.callIndex}get data(){return this.method.data}get era(){return this.inner.signature.era}get encodedLength(){return this.toU8a().length}get isSigned(){return this.inner.signature.isSigned}get length(){return this.toU8a(!0).length}get meta(){return this.method.meta}get method(){return this.inner.method}get nonce(){return this.inner.signature.nonce}get signature(){return this.inner.signature.signature}get signer(){return this.inner.signature.signer}get tip(){return this.inner.signature.tip}get assetId(){return this.inner.signature.assetId}get metadataHash(){return this.inner.signature.metadataHash}get mode(){return this.inner.signature.mode}get type(){return this.inner.version}get inner(){return this.unwrap()}get version(){return this.type|(this.isSigned?BIT_SIGNED:BIT_UNSIGNED)}is(e){return this.method.is(e)}unwrap(){return super.unwrap()}}class GenericExtrinsic extends ExtrinsicBase{constructor(t,a,{version:o}={}){super(t,decodeExtrinsic(t,a,o));A(this,"__internal__hashCache")}get hash(){return this.__internal__hashCache||(this.__internal__hashCache=super.hash),this.__internal__hashCache}addSignature(t,a,o){return this.inner.addSignature(t,a,o),this.__internal__hashCache=void 0,this}inspect(){const t=u8aConcat(...this.toU8aInner());return{inner:this.isSigned?this.inner.inspect().inner:this.inner.method.inspect().inner,outer:[compactToU8a(t.length),new Uint8Array([this.version])]}}sign(t,a){return this.inner.sign(t,a),this.__internal__hashCache=void 0,this}signFake(t,a){return this.inner.signFake(t,a),this.__internal__hashCache=void 0,this}toHex(t){return u8aToHex(this.toU8a(t))}toHuman(t,a){return objectSpread({},{isSigned:this.isSigned,method:this.method.toHuman(t,a)},this.isSigned?{assetId:this.assetId?this.assetId.toHuman(t,a):null,era:this.era.toHuman(t,a),metadataHash:this.metadataHash?this.metadataHash.toHex():null,mode:this.mode?this.mode.toHuman():null,nonce:this.nonce.toHuman(t,a),signature:this.signature.toHex(),signer:this.signer.toHuman(t,a),tip:this.tip.toHuman(t,a)}:null)}toJSON(){return this.toHex()}toRawType(){return"Extrinsic"}toU8a(t){const a=u8aConcat(...this.toU8aInner());return t?a:compactAddLength(a)}toU8aInner(){return[new Uint8Array([this.version]),this.inner.toU8a()]}}A(GenericExtrinsic,"LATEST_EXTRINSIC_VERSION",EXTRINSIC_VERSION);function getTrailingZeros(n){const e=n.toString(2);let t=0;for(;e[e.length-1-t]==="0";)t++;return t}function decodeMortalEra(n,e){if(isU8a(e)||isHex(e)||Array.isArray(e))return decodeMortalU8a(n,u8aToU8a(e));if(e){if(isObject$2(e))return decodeMortalObject(n,e)}else return[new u64$1(n),new u64$1(n)];throw new Error("Invalid data passed to Mortal era")}function decodeMortalObject(n,e){const{current:t,period:a}=e;let o=Math.pow(2,Math.ceil(Math.log2(a)));o=Math.min(Math.max(o,4),65536);const i=t%o,r=Math.max(o>>12,1),s=i/r*r;return[new u64$1(n,o),new u64$1(n,s)]}function decodeMortalU8a(n,e){if(e.length===0)return[new u64$1(n),new u64$1(n)];const t=u8aToBn(e.subarray(0,1)).toNumber(),a=u8aToBn(e.subarray(1,2)).toNumber(),o=t+(a<<8),i=2<<o%16,r=Math.max(i>>12,1),s=(o>>4)*r;if(i<4||s>=i)throw new Error("Invalid data passed to Mortal era");return[new u64$1(n,i),new u64$1(n,s)]}function decodeExtrinsicEra(n=new Uint8Array){if(isU8a(n))return!n.length||n[0]===0?new Uint8Array([0]):new Uint8Array([1,n[0],n[1]]);if(n){if(n instanceof GenericExtrinsicEra)return decodeExtrinsicEra(n.toU8a());if(isHex(n))return decodeExtrinsicEra(hexToU8a(n));if(isObject$2(n)){const e=Object.entries(n).map(([o,i])=>[o.toLowerCase(),i]),t=e.find(([o])=>o.toLowerCase()==="mortalera"),a=e.find(([o])=>o.toLowerCase()==="immortalera");return t?{MortalEra:t[1]}:a?{ImmortalEra:a[1]}:{MortalEra:n}}}else return new Uint8Array([0]);throw new Error("Invalid data passed to Era")}class ImmortalEra extends Raw{constructor(e,t){super(e,IMMORTAL_ERA)}}class MortalEra extends Tuple{constructor(e,t){super(e,{period:u64$1,phase:u64$1},decodeMortalEra(e,t))}get encodedLength(){return 2}get period(){return this[0]}get phase(){return this[1]}toHuman(){return{period:formatNumber(this.period),phase:formatNumber(this.phase)}}toJSON(){return this.toHex()}toU8a(e){const t=this.period.toNumber(),a=Math.min(15,Math.max(1,getTrailingZeros(t)-1))+(this.phase.toNumber()/Math.max(t>>12,1)<<4);return new Uint8Array([a&255,a>>8])}birth(e){const t=this.phase.toNumber(),a=this.period.toNumber();return~~((Math.max(bnToBn(e).toNumber(),t)-t)/a)*a+t}death(e){return this.birth(e)+this.period.toNumber()}}class GenericExtrinsicEra extends Enum{constructor(e,t){super(e,{ImmortalEra,MortalEra},decodeExtrinsicEra(t))}get encodedLength(){return this.isImmortalEra?this.asImmortalEra.encodedLength:this.asMortalEra.encodedLength}get asImmortalEra(){if(!this.isImmortalEra)throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);return this.inner}get asMortalEra(){if(!this.isMortalEra)throw new Error(`Cannot convert '${this.type}' via asMortalEra`);return this.inner}get isImmortalEra(){return this.index===0}get isMortalEra(){return this.index>0}toU8a(e){return this.isMortalEra?this.asMortalEra.toU8a(e):this.asImmortalEra.toU8a(e)}}const VERSIONS=["ExtrinsicPayloadUnknown","ExtrinsicPayloadUnknown","ExtrinsicPayloadUnknown","ExtrinsicPayloadUnknown","ExtrinsicPayloadV4"];function decodeExtrinsicPayload(n,e,t=DEFAULT_VERSION){return e instanceof GenericExtrinsicPayload?e.unwrap():n.createTypeUnsafe(VERSIONS[t]||VERSIONS[0],[e,{version:t}])}class GenericExtrinsicPayload extends AbstractBase{constructor(e,t,{version:a}={}){super(e,decodeExtrinsicPayload(e,t,a))}get blockHash(){return this.inner.blockHash}get era(){return this.inner.era}get genesisHash(){return this.inner.genesisHash||this.registry.createTypeUnsafe("Hash",[])}get method(){return this.inner.method}get nonce(){return this.inner.nonce}get specVersion(){return this.inner.specVersion||this.registry.createTypeUnsafe("u32",[])}get tip(){return this.inner.tip||this.registry.createTypeUnsafe("Compact<Balance>",[])}get transactionVersion(){return this.inner.transactionVersion||this.registry.createTypeUnsafe("u32",[])}get assetId(){return this.inner.assetId}get metadataHash(){return this.inner.metadataHash}eq(e){return this.inner.eq(e)}sign(e){const t=this.inner.sign(e);return{signature:u8aToHex(t)}}toHuman(e,t){return this.inner.toHuman(e,t)}toJSON(){return this.toHex()}toRawType(){return"ExtrinsicPayload"}toString(){return this.toHex()}toU8a(e){return super.toU8a(e?{method:!0}:!1)}}class GenericExtrinsicPayloadUnknown extends Struct{constructor(e,t,{version:a=0}={}){throw super(e,{}),new Error(`Unsupported extrinsic payload version ${a}`)}}class GenericExtrinsicUnknown extends Struct{constructor(e,t,{isSigned:a=!1,version:o=0}={}){throw super(e,{}),new Error(`Unsupported ${a?"":"un"}signed extrinsic version ${o&UNMASK_VERSION}`)}}const knownTypes={address:"Address",assetId:"Option<TAssetConversion>",blockHash:"Hash",blockNumber:"BlockNumber",era:"ExtrinsicEra",genesisHash:"Hash",metadataHash:"Option<[u8;32]>",method:"Call",mode:"u8",nonce:"Compact<Index>",runtimeVersion:"RuntimeVersion",signedExtensions:"Vec<Text>",tip:"Compact<Balance>",version:"u8"};class GenericSignerPayload extends Struct{constructor(t,a){const o=objectSpread({},t.getSignedExtensionTypes(),t.getSignedExtensionExtra());super(t,objectSpread({},o,knownTypes,{withSignedTransaction:"bool"}),a);A(this,"__internal__extraTypes");this.__internal__extraTypes={};const i=r=>this.get(r);for(const[r,s]of Object.entries(o))knownTypes[r]||(this.__internal__extraTypes[r]=s),objectProperty(this,r,i)}get address(){return this.getT("address")}get blockHash(){return this.getT("blockHash")}get blockNumber(){return this.getT("blockNumber")}get era(){return this.getT("era")}get genesisHash(){return this.getT("genesisHash")}get method(){return this.getT("method")}get nonce(){return this.getT("nonce")}get runtimeVersion(){return this.getT("runtimeVersion")}get signedExtensions(){return this.getT("signedExtensions")}get tip(){return this.getT("tip")}get assetId(){return this.getT("assetId")}get version(){return this.getT("version")}get mode(){return this.getT("mode")}get metadataHash(){return this.getT("metadataHash")}get withSignedTransaction(){return this.getT("withSignedTransaction").isTrue}toPayload(){const t={},a=Object.keys(this.__internal__extraTypes);for(let o=0,i=a.length;o<i;o++){const r=a[o],s=this.getT(r);(!(s instanceof Option)||s.isSome)&&(t[r]=s.toJSON())}return objectSpread(t,{address:this.address.toString(),assetId:this.assetId?this.assetId.toJSON():null,blockHash:this.blockHash.toHex(),blockNumber:this.blockNumber.toHex(),era:this.era.toHex(),genesisHash:this.genesisHash.toHex(),metadataHash:this.metadataHash.isSome?this.metadataHash.toHex():null,method:this.method.toHex(),mode:this.mode.toNumber(),nonce:this.nonce.toHex(),signedExtensions:this.signedExtensions.map(o=>o.toString()),specVersion:this.runtimeVersion.specVersion.toHex(),tip:this.tip.toHex(),transactionVersion:this.runtimeVersion.transactionVersion.toHex(),version:this.version.toNumber(),withSignedTransaction:this.withSignedTransaction})}toRaw(){const t=this.toPayload(),a=u8aToHex(this.registry.createTypeUnsafe("ExtrinsicPayload",[t,{version:t.version}]).toU8a({method:!0}));return{address:t.address,data:a,type:"payload"}}}function sign(n,e,t,a){const o=t.length>256?n.hash(t):t;return e.sign(o,a)}class GenericExtrinsicPayloadV4 extends Struct{constructor(t,a){super(t,objectSpread({method:"Bytes"},t.getSignedExtensionTypes(),t.getSignedExtensionExtra()),a);A(this,"__internal__signOptions");this.__internal__signOptions={withType:t.createTypeUnsafe("ExtrinsicSignature",[])instanceof Enum}}inspect(){return super.inspect({method:!0})}get blockHash(){return this.getT("blockHash")}get era(){return this.getT("era")}get genesisHash(){return this.getT("genesisHash")}get method(){return this.getT("method")}get nonce(){return this.getT("nonce")}get specVersion(){return this.getT("specVersion")}get tip(){return this.getT("tip")}get transactionVersion(){return this.getT("transactionVersion")}get assetId(){return this.getT("assetId")}get metadataHash(){return this.getT("metadataHash")}sign(t){return sign(this.registry,t,this.toU8a({method:!0}),this.__internal__signOptions)}}const FAKE_SIGNATURE=new Uint8Array(256).fill(1);function toAddress(n,e){return n.createTypeUnsafe("Address",[isU8a(e)?u8aToHex(e):e])}class GenericExtrinsicSignatureV4 extends Struct{constructor(t,a,{isSigned:o}={}){const i=t.getSignedExtensionTypes();super(t,objectSpread({signer:"Address",signature:"ExtrinsicSignature"},i),GenericExtrinsicSignatureV4.decodeExtrinsicSignature(a,o));A(this,"__internal__signKeys");this.__internal__signKeys=Object.keys(i),objectProperties(this,this.__internal__signKeys,r=>this.get(r))}static decodeExtrinsicSignature(t,a=!1){if(t){if(t instanceof GenericExtrinsicSignatureV4)return t}else return EMPTY_U8A;return a?t:EMPTY_U8A}get encodedLength(){return this.isSigned?super.encodedLength:0}get isSigned(){return!this.signature.isEmpty}get era(){return this.getT("era")}get nonce(){return this.getT("nonce")}get signature(){return this.multiSignature.value||this.multiSignature}get multiSignature(){return this.getT("signature")}get signer(){return this.getT("signer")}get tip(){return this.getT("tip")}get assetId(){return this.getT("assetId")}get mode(){return this.getT("mode")}get metadataHash(){return this.getT("metadataHash")}_injectSignature(t,a,o){for(let i=0,r=this.__internal__signKeys.length;i<r;i++){const s=this.__internal__signKeys[i],c=o.get(s);isUndefined(c)||this.set(s,c)}return this.set("signer",t),this.set("signature",a),this}addSignature(t,a,o){return this._injectSignature(toAddress(this.registry,t),this.registry.createTypeUnsafe("ExtrinsicSignature",[a]),new GenericExtrinsicPayloadV4(this.registry,o))}createPayload(t,a){const{era:o,runtimeVersion:{specVersion:i,transactionVersion:r}}=a;return new GenericExtrinsicPayloadV4(this.registry,objectSpread({},a,{era:o||IMMORTAL_ERA,method:t.toHex(),specVersion:i,transactionVersion:r}))}sign(t,a,o){if(!(a!=null&&a.addressRaw))throw new Error(`Expected a valid keypair for signing, found ${stringify(a)}`);const i=this.createPayload(t,o);return this._injectSignature(toAddress(this.registry,a.addressRaw),this.registry.createTypeUnsafe("ExtrinsicSignature",[i.sign(a)]),i)}signFake(t,a,o){if(!a)throw new Error(`Expected a valid address for signing, found ${stringify(a)}`);const i=this.createPayload(t,o);return this._injectSignature(toAddress(this.registry,a),this.registry.createTypeUnsafe("ExtrinsicSignature",[FAKE_SIGNATURE]),i)}toU8a(t){return this.isSigned?super.toU8a(t):EMPTY_U8A}}function decodeAccountId$1(n){if(isU8a(n)||Array.isArray(n))return u8aToU8a(n);if(n){if(isHex(n))return hexToU8a(n);if(isString(n))return decodeAddress(n.toString())}else return new Uint8Array;throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof n}`)}class BaseAccountId extends U8aFixed{constructor(e,t=264,a){const o=decodeAccountId$1(a);if(o.length*8<t&&o.some(r=>r))throw new Error(`Invalid AccountId provided, expected ${t>>3} bytes, found ${o.length}`);super(e,o,t)}eq(e){return super.eq(decodeAccountId$1(e))}toHuman(){return this.toJSON()}toJSON(){return this.toString()}toPrimitive(){return this.toJSON()}toString(){return encodeAddress(this,this.registry.chainSS58)}toRawType(){return"AccountId"}}class GenericAccountId extends BaseAccountId{constructor(e,t){super(e,256,t)}}class GenericAccountId33 extends BaseAccountId{constructor(e,t){super(e,264,t)}}const PREFIX_1BYTE=239,PREFIX_2BYTE=252,PREFIX_4BYTE=253,PREFIX_8BYTE=254,MAX_1BYTE=new BN(PREFIX_1BYTE),MAX_2BYTE=new BN(1).shln(16),MAX_4BYTE=new BN(1).shln(32);function decodeAccountIndex(n){return n instanceof GenericAccountIndex?n.toBn():isBn(n)||isNumber(n)||isHex(n)||isU8a(n)||isBigInt(n)?n:decodeAccountIndex(decodeAddress(n))}class GenericAccountIndex extends u32$2{constructor(e,t=new BN(0)){super(e,decodeAccountIndex(t))}static calcLength(e){const t=bnToBn(e);return t.lte(MAX_1BYTE)?1:t.lt(MAX_2BYTE)?2:t.lt(MAX_4BYTE)?4:8}static readLength(e){const t=e[0];return t===PREFIX_2BYTE?[1,2]:t===PREFIX_4BYTE?[1,4]:t===PREFIX_8BYTE?[1,8]:[0,1]}static writeLength(e){switch(e.length){case 2:return new Uint8Array([PREFIX_2BYTE]);case 4:return new Uint8Array([PREFIX_4BYTE]);case 8:return new Uint8Array([PREFIX_8BYTE]);default:return new Uint8Array([])}}eq(e){return isBn(e)||isNumber(e)?super.eq(e):super.eq(this.registry.createTypeUnsafe("AccountIndex",[e]))}toHuman(){return this.toJSON()}toJSON(){return this.toString()}toPrimitive(){return this.toJSON()}toString(){const e=GenericAccountIndex.calcLength(this);return encodeAddress(this.toU8a().subarray(0,e),this.registry.chainSS58)}toRawType(){return"AccountIndex"}}class GenericBlock extends Struct{constructor(e,t){super(e,{header:"Header",extrinsics:"Vec<Extrinsic>"},t)}get contentHash(){return this.registry.hash(this.toU8a())}get extrinsics(){return this.getT("extrinsics")}get hash(){return this.header.hash}get header(){return this.getT("header")}}function getArgsDef(n,e){return e.fields.reduce((t,{name:a,type:o},i)=>(t[a.unwrapOr(`param${i}`).toString()]=n.createLookupType(o),t),{})}function decodeCallViaObject(n,e,t){const{args:a,callIndex:o}=e,i=o instanceof GenericCallIndex?o.toU8a():o,r=t||n.findMetaCall(i).meta;return{args:a,argsDef:getArgsDef(n,r),callIndex:o,meta:r}}function decodeCallViaU8a(n,e,t){const a=n.firstCallIndex.slice();a.set(e.subarray(0,2),0);const o=t||n.findMetaCall(a).meta;return{args:e.subarray(2),argsDef:getArgsDef(n,o),callIndex:a,meta:o}}function decodeCall(n,e=new Uint8Array,t){if(isU8a(e)||isHex(e))return decodeCallViaU8a(n,u8aToU8a(e),t);if(isObject$2(e)&&e.callIndex&&e.args)return decodeCallViaObject(n,e,t);throw new Error(`Call: Cannot decode value '${e}' of type ${typeof e}`)}class GenericCallIndex extends U8aFixed{constructor(e,t){super(e,t,16)}toPrimitive(){return this.toHex()}}class GenericCall extends Struct{constructor(t,a,o){var e=(...Qt)=>(super(...Qt),A(this,"_meta"),this);const i=decodeCall(t,a,o);try{e(t,{callIndex:GenericCallIndex,args:Struct.with(i.argsDef)},i)}catch(r){let s="unknown.unknown";try{const c=t.findMetaCall(i.callIndex);s=`${c.section}.${c.method}`}catch{}throw new Error(`Call: failed decoding ${s}:: ${r.message}`)}this._meta=i.meta}get args(){return[...this.getT("args").values()]}get argsDef(){return getArgsDef(this.registry,this.meta)}get argsEntries(){return[...this.getT("args").entries()]}get callIndex(){return this.getT("callIndex").toU8a()}get data(){return this.getT("args").toU8a()}get meta(){return this._meta}get method(){return this.registry.findMetaCall(this.callIndex).method}get section(){return this.registry.findMetaCall(this.callIndex).section}is(t){return t.callIndex[0]===this.callIndex[0]&&t.callIndex[1]===this.callIndex[1]}toHuman(t,a){let o;try{o=this.registry.findMetaCall(this.callIndex)}catch{}return objectSpread({args:this.argsEntries.reduce((i,[r,s])=>objectSpread(i,{[r]:s.toHuman(t,a)}),{}),method:o==null?void 0:o.method,section:o==null?void 0:o.section},t&&o?{docs:o.meta.docs.map(i=>i.toString())}:null)}toRawType(){return"Call"}}function createValue(n,e,t,a=!0){return t&&isFunction$2(t.unwrapOrDefault)?t:n.createTypeUnsafe(e,[a?isNull(t)||isUndefined(t)?null:Array.isArray(t)?t:[t]:t])}function decodeValue(n,e,t){return e==="ss58Format"?createValue(n,"Option<u32>",t,!1):e==="tokenDecimals"?createValue(n,"Option<Vec<u32>>",t):e==="tokenSymbol"?createValue(n,"Option<Vec<Text>>",t):e==="isEthereum"?createValue(n,"Bool",t,!1):t}function decode(n,e){return(e&&isFunction$2(e.entries)?[...e.entries()]:Object.entries(e||{})).reduce((t,[a,o])=>(t[a]=decodeValue(n,a,o),t),{isEthereum:n.createTypeUnsafe("Bool",[]),ss58Format:n.createTypeUnsafe("Option<u32>",[]),tokenDecimals:n.createTypeUnsafe("Option<Vec<u32>>",[]),tokenSymbol:n.createTypeUnsafe("Option<Vec<Text>>",[])})}class GenericChainProperties extends Json{constructor(e,t){super(e,decode(e,t))}get isEthereum(){return this.getT("isEthereum")}get ss58Format(){return this.getT("ss58Format")}get tokenDecimals(){return this.getT("tokenDecimals")}get tokenSymbol(){return this.getT("tokenSymbol")}}const CID_AURA=stringToU8a("aura"),CID_BABE=stringToU8a("BABE"),CID_GRPA=stringToU8a("FRNK"),CID_POW=stringToU8a("pow_"),CID_NMBS=stringToU8a("nmbs");function getAuraAuthor(n,e,t){return t[n.createTypeUnsafe("RawAuraPreDigest",[e.toU8a(!0)]).slotNumber.mod(new BN(t.length)).toNumber()]}function getBabeAuthor(n,e,t){const a=n.createTypeUnsafe("RawBabePreDigestCompat",[e.toU8a(!0)]);return t[a.value.toNumber()]}function getBytesAsAuthor(n,e){return n.createTypeUnsafe("AccountId",[e])}class GenericConsensusEngineId extends U8aFixed{constructor(e,t){super(e,isNumber(t)?bnToU8a(t,{isLe:!1}):t,32)}get isAura(){return this.eq(CID_AURA)}get isBabe(){return this.eq(CID_BABE)}get isGrandpa(){return this.eq(CID_GRPA)}get isPow(){return this.eq(CID_POW)}get isNimbus(){return this.eq(CID_NMBS)}extractAuthor(e,t){if(t!=null&&t.length){if(this.isAura)return getAuraAuthor(this.registry,e,t);if(this.isBabe)return getBabeAuthor(this.registry,e,t)}if(this.isPow||this.isNimbus)return getBytesAsAuthor(this.registry,e)}toHuman(){return this.toString()}toRawType(){return"ConsensusEngineId"}toString(){return this.isAscii?u8aToString(this):u8aToHex(this)}}const ACCOUNT_ID_PREFIX$1=new Uint8Array([255]);function decodeString$1(n,e){const t=decodeAddress(e);return t.length===32?n.createTypeUnsafe("AccountId",[t]):n.createTypeUnsafe("AccountIndex",[u8aToBn(t)])}function decodeU8a$3(n,e){if(e.length===32)return n.createTypeUnsafe("AccountId",[e]);if(e[0]===255)return n.createTypeUnsafe("AccountId",[e.subarray(1)]);const[t,a]=GenericAccountIndex.readLength(e);return n.createTypeUnsafe("AccountIndex",[u8aToBn(e.subarray(t,t+a))])}function decodeAddressOrIndex$1(n,e){return e instanceof GenericLookupSource?e.inner:e instanceof GenericAccountId||e instanceof GenericAccountIndex?e:isBn(e)||isNumber(e)||isBigInt(e)?n.createTypeUnsafe("AccountIndex",[e]):Array.isArray(e)||isHex(e)||isU8a(e)?decodeU8a$3(n,u8aToU8a(e)):decodeString$1(n,e)}class GenericLookupSource extends AbstractBase{constructor(e,t=new Uint8Array){super(e,decodeAddressOrIndex$1(e,t))}get encodedLength(){const e=this._rawLength;return e+(e>1?1:0)}get _rawLength(){return this.inner instanceof GenericAccountIndex?GenericAccountIndex.calcLength(this.inner):this.inner.encodedLength}inspect(){const e=this.inner.toU8a().subarray(0,this._rawLength);return{outer:[new Uint8Array(this.inner instanceof GenericAccountIndex?GenericAccountIndex.writeLength(e):ACCOUNT_ID_PREFIX$1),e]}}toHex(){return u8aToHex(this.toU8a())}toRawType(){return"Address"}toU8a(e){const t=this.inner.toU8a().subarray(0,this._rawLength);return e?t:u8aConcat(this.inner instanceof GenericAccountIndex?GenericAccountIndex.writeLength(t):ACCOUNT_ID_PREFIX$1,t)}}function decodeU8a$2(n,e){return[0,32].includes(e.length)?{Id:e}:e.length===20?{Address20:e}:e.length<=8?{Index:n.createTypeUnsafe("AccountIndex",[e]).toNumber()}:e}function decodeMultiAny(n,e){return e instanceof GenericAccountId?{Id:e}:isU8a(e)?decodeU8a$2(n,e):e instanceof GenericMultiAddress?e:e instanceof GenericAccountIndex||isBn(e)||isNumber(e)?{Index:isNumber(e)?e:e.toNumber()}:isString(e)?decodeU8a$2(n,decodeAddress(e.toString())):e}class GenericMultiAddress extends Enum{constructor(e,t){super(e,{Id:"AccountId",Index:"Compact<AccountIndex>",Raw:"Bytes",Address32:"H256",Address20:"H160"},decodeMultiAny(e,t))}inspect(){const{inner:e,outer:t=[]}=this.inner.inspect();return{inner:e,outer:[new Uint8Array([this.index]),...t]}}toString(){return this.value.toString()}}const AYE_BITS=128,NAY_BITS=0,CON_MASK=127,DEF_CONV=0;function decodeVoteBool(n){return n?new Uint8Array([AYE_BITS|DEF_CONV]):new Uint8Array([NAY_BITS])}function decodeVoteU8a(n){return n.length?n.subarray(0,1):new Uint8Array([NAY_BITS])}function decodeVoteType(n,e){return new Uint8Array([(new bool(n,e.aye).isTrue?AYE_BITS:NAY_BITS)|n.createTypeUnsafe("Conviction",[e.conviction||DEF_CONV]).index])}function decodeVote(n,e){return isU8a(e)?decodeVoteU8a(e):isUndefined(e)||e instanceof Boolean||isBoolean(e)?decodeVoteBool(new bool(n,e).isTrue):isNumber(e)?decodeVoteBool(e<0):decodeVoteType(n,e)}class GenericVote extends U8aFixed{constructor(t,a){const o=decodeVote(t,a);super(t,o,8);A(this,"__internal__aye");A(this,"__internal__conviction");this.__internal__aye=(o[0]&AYE_BITS)===AYE_BITS,this.__internal__conviction=this.registry.createTypeUnsafe("Conviction",[o[0]&CON_MASK])}get conviction(){return this.__internal__conviction}get isAye(){return this.__internal__aye}get isNay(){return!this.isAye}toHuman(t){return{conviction:this.conviction.toHuman(t),vote:this.isAye?"Aye":"Nay"}}toPrimitive(){return{aye:this.isAye,conviction:this.conviction.toPrimitive()}}toRawType(){return"Vote"}}function decodeAccountId(n){return isU8a(n)||Array.isArray(n)?u8aToU8a(n):isHex(n)||isEthereumAddress(n.toString())?hexToU8a(n.toString()):isString(n)?u8aToU8a(n):n}class GenericEthereumAccountId extends U8aFixed{constructor(e,t=new Uint8Array){super(e,decodeAccountId(t),160)}eq(e){return!!e&&super.eq(decodeAccountId(e))}toHuman(){return this.toJSON()}toJSON(){return this.toString()}toPrimitive(){return this.toJSON()}toString(){return ethereumEncode(this)}toRawType(){return"AccountId"}}const ACCOUNT_ID_PREFIX=new Uint8Array([255]);function decodeString(n,e){const t=decodeAddress(e);return t.length===20?n.createTypeUnsafe("EthereumAccountId",[t]):n.createTypeUnsafe("AccountIndex",[u8aToBn(t)])}function decodeU8a$1(n,e){if(e.length===20)return n.createTypeUnsafe("EthereumAccountId",[e]);if(e[0]===255)return n.createTypeUnsafe("EthereumAccountId",[e.subarray(1)]);const[t,a]=GenericAccountIndex.readLength(e);return n.createTypeUnsafe("AccountIndex",[u8aToBn(e.subarray(t,t+a))])}function decodeAddressOrIndex(n,e){return e instanceof GenericEthereumLookupSource?e.inner:e instanceof GenericEthereumAccountId||e instanceof GenericAccountIndex?e:isU8a(e)||Array.isArray(e)||isHex(e)?decodeU8a$1(n,u8aToU8a(e)):isBn(e)||isNumber(e)||isBigInt(e)?n.createTypeUnsafe("AccountIndex",[e]):decodeString(n,e)}class GenericEthereumLookupSource extends AbstractBase{constructor(e,t=new Uint8Array){super(e,decodeAddressOrIndex(e,t))}get encodedLength(){const e=this._rawLength;return e+(e>1?1:0)}get _rawLength(){return this.inner instanceof GenericAccountIndex?GenericAccountIndex.calcLength(this.inner):this.inner.encodedLength}toHex(){return u8aToHex(this.toU8a())}toRawType(){return"Address"}toU8a(e){const t=this.inner.toU8a().subarray(0,this._rawLength);return e?t:u8aConcat(this.inner instanceof GenericAccountIndex?GenericAccountIndex.writeLength(t):ACCOUNT_ID_PREFIX,t)}}function decodeDataU8a(n,e){const t=e[0];if(t){if(t>=1&&t<=33){const a=t-1,o=e.subarray(1,a+1);return[n.createTypeUnsafe("Raw",[o]),1]}else if(t>=34&&t<=37)return[e.subarray(1,33),t-32]}else return[void 0,void 0];throw new Error(`Unable to decode Data, invalid indicator byte ${t}`)}function decodeData(n,e){return isU8a(e)||isString(e)?decodeDataU8a(n,u8aToU8a(e)):e?[e,void 0]:[void 0,void 0]}class Data extends Enum{constructor(e,t){if(super(e,{None:"Null",Raw:"Bytes",BlakeTwo256:"H256",Sha256:"H256",Keccak256:"H256",ShaThree256:"H256"},...decodeData(e,t)),this.isRaw&&this.asRaw.length>32)throw new Error("Data.Raw values are limited to a maximum length of 32 bytes")}get asBlakeTwo256(){return this.value}get asKeccak256(){return this.value}get asRaw(){return this.value}get asSha256(){return this.value}get asShaThree256(){return this.value}get isBlakeTwo256(){return this.index===2}get isKeccak256(){return this.index===4}get isNone(){return this.index===0}get isRaw(){return this.index===1}get isSha256(){return this.index===3}get isShaThree256(){return this.index===5}get encodedLength(){return this.toU8a().length}toU8a(){if(this.index===0)return new Uint8Array(1);if(this.index===1){const t=this.value.toU8a(!0),a=Math.min(t.length,32),o=new Uint8Array(a+1);return o.set([a+1],0),o.set(t.subarray(0,a),1),o}const e=new Uint8Array(33);return e.set([this.index+32],0),e.set(this.value.toU8a(),1),e}}const HASHER_MAP={Blake2_128:[16,!1],Blake2_128Concat:[16,!0],Blake2_256:[32,!1],Identity:[0,!0],Twox128:[16,!1],Twox256:[32,!1],Twox64Concat:[8,!0]};function decodeStorageKey(n){if(isU8a(n)||!n||isString(n))return{key:n};if(n instanceof StorageKey)return{key:n,method:n.method,section:n.section};if(isFunction$2(n))return{key:n(),method:n.method,section:n.section};if(Array.isArray(n)){const[e,t=[]]=n;if(!isFunction$2(e))throw new Error("Expected function input for key construction");if(e.meta&&e.meta.type.isMap){const a=e.meta.type.asMap;if(!Array.isArray(t)||t.length!==a.hashers.length)throw new Error(`Expected an array of ${a.hashers.length} values as params to a Map query`)}return{key:e(...t),method:e.method,section:e.section}}throw new Error(`Unable to convert input ${n} to StorageKey`)}function decodeHashers(n,e,t){let a=32;const o=t.length,i=new Array(o);for(let r=0;r<o;r++){const[s,c]=t[r],[d,p]=HASHER_MAP[s.type],h=p?n.createTypeUnsafe(getSiName(n.lookup,c),[e.subarray(a+d)]):n.createTypeUnsafe("Raw",[e.subarray(a,a+d)]);a+=d+(p?h.encodedLength:0),i[r]=h}return i}function decodeArgsFromMeta(n,e,t){if(!t||!t.type.isMap)return[];const{hashers:a,key:o}=t.type.asMap,i=a.length===1?[o]:n.lookup.getSiType(o).def.asTuple;return decodeHashers(n,e,a.map((r,s)=>[r,i[s]]))}function getMeta(n){if(n instanceof StorageKey)return n.meta;if(isFunction$2(n))return n.meta;if(Array.isArray(n)){const[e]=n;return e.meta}}function getType(n,e){if(e instanceof StorageKey)return e.outputType;if(isFunction$2(e))return unwrapStorageType(n,e.meta.type);if(Array.isArray(e)){const[t]=e;if(t.meta)return unwrapStorageType(n,t.meta.type)}return"Raw"}class StorageKey extends Bytes{constructor(t,a,o={}){const{key:i,method:r,section:s}=decodeStorageKey(a);super(t,i);A(this,"__internal__args");A(this,"__internal__meta");A(this,"__internal__outputType");A(this,"__internal__method");A(this,"__internal__section");this.__internal__outputType=getType(t,a),this.setMeta(getMeta(a),o.section||s,o.method||r)}get args(){return this.__internal__args}get meta(){return this.__internal__meta}get method(){return this.__internal__method}get outputType(){return this.__internal__outputType}get section(){return this.__internal__section}is(t){return t.section===this.section&&t.method===this.method}setMeta(t,a,o){this.__internal__meta=t,this.__internal__method=o||this.__internal__method,this.__internal__section=a||this.__internal__section,t&&(this.__internal__outputType=unwrapStorageType(this.registry,t.type));try{this.__internal__args=decodeArgsFromMeta(this.registry,this.toU8a(!0),t)}catch{}return this}toHuman(t,a){return this.__internal__args.length?this.__internal__args.map(o=>o.toHuman(void 0,a)):super.toHuman(void 0,a)}toRawType(){return"StorageKey"}}const baseTypes=Object.freeze(Object.defineProperty({__proto__:null,BitVec,Bool:bool,Bytes,Data,F32:f32,F64:f64,GenericAccountId,GenericAccountId32:GenericAccountId,GenericAccountId33,GenericAccountIndex,GenericAddress:GenericMultiAddress,GenericBlock,GenericCall,GenericChainProperties,GenericConsensusEngineId,GenericEthereumAccountId,GenericEthereumLookupSource,GenericEvent,GenericEventData,GenericExtrinsic,GenericExtrinsicEra,GenericExtrinsicPayload,GenericExtrinsicPayloadUnknown,GenericExtrinsicPayloadV4,GenericExtrinsicSignatureV4,GenericExtrinsicUnknown,GenericExtrinsicV4,GenericImmortalEra:ImmortalEra,GenericLookupSource,GenericMortalEra:MortalEra,GenericMultiAddress,GenericSignerPayload,GenericVote,I128:i128,I16:i16,I256:i256,I32:i32,I64:i64,I8:i8,ISize:isize,Null,OptionBool,StorageKey,Text,Type,U128:u128,U16:u16$1,U256:u256,U32:u32$2,U64:u64$1,U8:u8$1,USize:usize,bool,f32,f64,i128,i16,i256,i32,i64,i8,isize,u128,u16:u16$1,u256,u32:u32$2,u64:u64$1,u8:u8$1,usize},Symbol.toStringTag,{value:"Module"}));function convert(n){return({name:e})=>n(e)}const objectNameToCamel=convert(stringCamelCase),objectNameToString=convert(n=>n.toString());function isTx(n,e){return n.callIndex[0]===e[0]&&n.callIndex[1]===e[1]}function createUnchecked(n,e,t,a){const o=a.fields,i=stringCamelCase(a.name),r=(...s)=>{if(o.length!==s.length)throw new Error(`Extrinsic ${e}.${i} expects ${o.length} arguments, got ${s.length}.`);return n.createTypeUnsafe("Call",[{args:s,callIndex:t},a])};return r.is=s=>isTx(s,t),r.callIndex=t,r.meta=a,r.method=i,r.section=e,r.toJSON=()=>a.toJSON(),r}function filterCallsSome({calls:n}){return n.isSome}function createCallFunction(n,e,t,a,o){const{fields:i,index:r}=t,s=i.length,c=new Array(s);for(let d=0;d<s;d++){const{name:p,type:h,typeName:I}=i[d];c[d]=objectSpread({name:stringCamelCase(p.unwrapOr(`param${d}`)),type:getSiName(e,h)},I.isSome?{typeName:I.unwrap()}:null)}return createUnchecked(n,a,new Uint8Array([o,r.toNumber()]),n.createTypeUnsafe("FunctionMetadataLatest",[objectSpread({args:c},t)]))}function decorateExtrinsics(n,{lookup:e,pallets:t},a){const o={},i=t.filter(filterCallsSome);for(let r=0,s=i.length;r<s;r++){const{calls:c,index:d,name:p}=i[r],h=stringCamelCase(p),I=a>=12?d.toNumber():r;lazyMethod(o,h,()=>lazyVariants(e,c.unwrap(),objectNameToCamel,_=>createCallFunction(n,e,_,h,I)))}return o}function createStorageHasher(n,e){return e.toNumber()>=2?n.createTypeUnsafe("StorageHasherV10",[e.toNumber()+1]):n.createTypeUnsafe("StorageHasherV10",[e])}function createStorageType(n,e){return e.isMap?[objectSpread({},e.asMap,{hasher:createStorageHasher(n,e.asMap.hasher)}),1]:e.isDoubleMap?[objectSpread({},e.asDoubleMap,{hasher:createStorageHasher(n,e.asDoubleMap.hasher),key2Hasher:createStorageHasher(n,e.asDoubleMap.key2Hasher)}),2]:[e.asPlain,0]}function convertModule(n,e){const t=e.storage.unwrapOr(null);return n.createTypeUnsafe("ModuleMetadataV10",[objectSpread({},e,{storage:t?objectSpread({},t,{items:t.items.map(a=>objectSpread({},a,{type:n.createTypeUnsafe("StorageEntryTypeV10",createStorageType(n,a.type))}))}):null})])}function toV10(n,{modules:e}){return n.createTypeUnsafe("MetadataV10",[{modules:e.map(t=>convertModule(n,t))}])}function toV11(n,{modules:e}){return n.createTypeUnsafe("MetadataV11",[{extrinsic:{signedExtensions:[],version:0},modules:e}])}function toV12(n,{extrinsic:e,modules:t}){return n.createTypeUnsafe("MetadataV12",[{extrinsic:e,modules:t.map(a=>n.createTypeUnsafe("ModuleMetadataV12",[objectSpread({},a,{index:255})]))}])}function toV13(n,e){return n.createTypeUnsafe("MetadataV13",[e])}const typesAlias={assets:{Approval:"AssetApproval",ApprovalKey:"AssetApprovalKey",Balance:"TAssetBalance",DestroyWitness:"AssetDestroyWitness"},babe:{EquivocationProof:"BabeEquivocationProof"},balances:{Status:"BalanceStatus"},beefy:{AuthorityId:"BeefyId"},contracts:{StorageKey:"ContractStorageKey"},electionProviderMultiPhase:{Phase:"ElectionPhase"},ethereum:{Block:"EthBlock",Header:"EthHeader",Receipt:"EthReceipt",Transaction:"EthTransaction",TransactionStatus:"EthTransactionStatus"},evm:{Account:"EvmAccount",Log:"EvmLog",Vicinity:"EvmVicinity"},grandpa:{Equivocation:"GrandpaEquivocation",EquivocationProof:"GrandpaEquivocationProof"},identity:{Judgement:"IdentityJudgement"},inclusion:{ValidatorIndex:"ParaValidatorIndex"},paraDisputes:{ValidatorIndex:"ParaValidatorIndex"},paraInclusion:{ValidatorIndex:"ParaValidatorIndex"},paraScheduler:{ValidatorIndex:"ParaValidatorIndex"},paraShared:{ValidatorIndex:"ParaValidatorIndex"},parachains:{Id:"ParaId"},parasDisputes:{ValidatorIndex:"ParaValidatorIndex"},parasInclusion:{ValidatorIndex:"ParaValidatorIndex"},parasScheduler:{ValidatorIndex:"ParaValidatorIndex"},parasShared:{ValidatorIndex:"ParaValidatorIndex"},proposeParachain:{Proposal:"ParachainProposal"},proxy:{Announcement:"ProxyAnnouncement"},scheduler:{ValidatorIndex:"ParaValidatorIndex"},shared:{ValidatorIndex:"ParaValidatorIndex"},society:{Judgement:"SocietyJudgement",Vote:"SocietyVote"},staking:{Compact:"CompactAssignments"},treasury:{Proposal:"TreasuryProposal"},xcm:{AssetId:"XcmAssetId"},xcmPallet:{AssetId:"XcmAssetId"}};function getAliasTypes({knownTypes:n},e){var t;return{...typesAlias[e]??{},...((t=n.typesAlias)==null?void 0:t[e])??{}}}const BOXES=[["<",">"],["<",","],[",",">"],["(",")"],["(",","],[",",","],[",",")"]];function compatType(n,e){const t=e.toString(),a=n.findIndex(({def:o})=>o.HistoricMetaCompat===t);return a!==-1?a:n.push({def:{HistoricMetaCompat:t}})-1}function compatTypes(n,...e){for(let t=0,a=e.length;t<a;t++)compatType(n,e[t])}function makeTupleType(n,e){return n.push({def:{Tuple:e}})-1}function makeVariantType(n,e,t,a){return t.push({def:{Variant:{variants:a}},path:[`pallet_${n.toString()}`,"pallet",e]})-1}function registerOriginCaller(n,e,t){n.register({OriginCaller:{_enum:e.map((a,o)=>[a.name.toString(),t>=12?a.index.toNumber():o]).sort((a,o)=>a[1]-o[1]).reduce((a,[o,i])=>{for(let r=Object.keys(a).length;r<i;r++)a[`Empty${r}`]="Null";return a[o]=knownOrigins[o]||"Null",a},{})}})}function setTypeOverride(n,e){e.forEach(t=>{const a=Object.keys(n).find(o=>t.eq(o));if(a)t.setOverride(n[a]);else{const o=t.toString(),i=Object.entries(n).reduce((r,[s,c])=>BOXES.reduce((d,[p,h])=>d.replace(`${p}${s}${h}`,`${p}${c}${h}`),r),o);o!==i&&t.setOverride(i)}})}function convertCalls(n,e,t,a,o){const i=a.map(({args:r,docs:s,name:c},d)=>(setTypeOverride(o,r.map(({type:p})=>p)),e.createTypeUnsafe("SiVariant",[{docs:s,fields:r.map(({name:p,type:h})=>e.createTypeUnsafe("SiField",[{name:p,type:compatType(n,h)}])),index:d,name:c}])));return e.createTypeUnsafe("PalletCallMetadataV14",[{type:makeVariantType(t,"Call",n,i)}])}function convertConstants(n,e,t,a){return t.map(({docs:o,name:i,type:r,value:s})=>(setTypeOverride(a,[r]),e.createTypeUnsafe("PalletConstantMetadataV14",[{docs:o,name:i,type:compatType(n,r),value:s}])))}function convertErrors(n,e,t,a,o){const i=a.map(({docs:r,name:s},c)=>e.createTypeUnsafe("SiVariant",[{docs:r,fields:[],index:c,name:s}]));return e.createTypeUnsafe("PalletErrorMetadataV14",[{type:makeVariantType(t,"Error",n,i)}])}function convertEvents(n,e,t,a,o){const i=a.map(({args:r,docs:s,name:c},d)=>(setTypeOverride(o,r),e.createTypeUnsafe("SiVariant",[{docs:s,fields:r.map(p=>e.createTypeUnsafe("SiField",[{type:compatType(n,p)}])),index:d,name:c}])));return e.createTypeUnsafe("PalletEventMetadataV14",[{type:makeVariantType(t,"Event",n,i)}])}function createMapEntry(n,e,t,{hashers:a,isLinked:o,isOptional:i,keys:r,value:s}){return setTypeOverride(t,[s,...Array.isArray(r)?r:[r]]),e.createTypeUnsafe("StorageEntryTypeV14",[{Map:{hashers:a,key:a.length===1?compatType(n,r[0]):makeTupleType(n,r.map(c=>compatType(n,c))),value:o?compatType(n,`(${i?`Option<${s.toString()}>`:s.toString()}, Linkage<${r[0].toString()}>)`):compatType(n,s)}}])}function convertStorage(n,e,{items:t,prefix:a},o){return e.createTypeUnsafe("PalletStorageMetadataV14",[{items:t.map(({docs:i,fallback:r,modifier:s,name:c,type:d})=>{let p;if(d.isPlain){const h=d.asPlain;setTypeOverride(o,[h]),p=e.createTypeUnsafe("StorageEntryTypeV14",[{Plain:compatType(n,h)}])}else if(d.isMap){const h=d.asMap;p=createMapEntry(n,e,o,{hashers:[h.hasher],isLinked:h.linked.isTrue,isOptional:s.isOptional,keys:[h.key],value:h.value})}else if(d.isDoubleMap){const h=d.asDoubleMap;p=createMapEntry(n,e,o,{hashers:[h.hasher,h.key2Hasher],isLinked:!1,isOptional:s.isOptional,keys:[h.key1,h.key2],value:h.value})}else{const h=d.asNMap;p=createMapEntry(n,e,o,{hashers:h.hashers,isLinked:!1,isOptional:s.isOptional,keys:h.keyVec,value:h.value})}return e.createTypeUnsafe("StorageEntryMetadataV14",[{docs:i,fallback:r,modifier:s,name:c,type:p}])}),prefix:a}])}function convertExtrinsic(n,{signedExtensions:e,version:t}){return n.createTypeUnsafe("ExtrinsicMetadataV14",[{signedExtensions:e.map(a=>({identifier:a,type:0})),type:0,version:t}])}function createPallet(n,e,t,{calls:a,constants:o,errors:i,events:r,storage:s}){const c=getAliasTypes(e,stringCamelCase(t.name));return e.createTypeUnsafe("PalletMetadataV14",[{calls:a&&convertCalls(n,e,t.name,a,c),constants:convertConstants(n,e,o,c),errors:i&&convertErrors(n,e,t.name,i),events:r&&convertEvents(n,e,t.name,r,c),index:t.index,name:t.name,storage:s&&convertStorage(n,e,s,c)}])}function toV14(n,e,t){const a=[];compatTypes(a,"Null","u8","u16","u32","u64"),registerOriginCaller(n,e.modules,t);const o=convertExtrinsic(n,e.extrinsic),i=e.modules.map(r=>createPallet(a,n,r,{calls:r.calls.unwrapOr(null),constants:r.constants,errors:r.errors.length?r.errors:null,events:r.events.unwrapOr(null),storage:r.storage.unwrapOr(null)}));return n.createTypeUnsafe("MetadataV14",[{extrinsic:o,lookup:{types:a.map((r,s)=>n.createTypeUnsafe("PortableType",[{id:s,type:r}]))},pallets:i}])}function toV15(n,e,t){var o;const a=e.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;return n.createTypeUnsafe("MetadataV15",[objectSpread({},e,{extrinsic:n.createTypeUnsafe("ExtrinsicMetadataV15",[objectSpread({},e.extrinsic,{addressType:a==null?void 0:a[0].type.unwrapOr(0),callType:a==null?void 0:a[1].type.unwrapOr(0),extraType:a==null?void 0:a[3].type.unwrapOr(0),signatureType:a==null?void 0:a[2].type.unwrapOr(0)})]),outerEnums:n.createTypeUnsafe("OuterEnums15",[{callType:a==null?void 0:a[1].type.unwrapOr(0),eventType:(o=e.lookup.paramTypes.FrameSystemEventRecord)==null?void 0:o[0].type.unwrapOr(0)}])})])}function toLatest(n,e,t){return e}const MAGIC_NUMBER=1635018093;class MagicNumber extends u32$2{constructor(e,t){if(super(e,t),!this.isEmpty&&!this.eq(MAGIC_NUMBER))throw new Error(`MagicNumber mismatch: expected ${e.createTypeUnsafe("u32",[MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`)}}const KNOWN_VERSIONS=[15,14,13,12,11,10,9],LATEST_VERSION=KNOWN_VERSIONS[0],TO_CALLS_VERSION=14;class MetadataVersioned extends Struct{constructor(t,a){super(t,{magicNumber:MagicNumber,metadata:"MetadataAll"},a);A(this,"__internal__converted",new Map);A(this,"__internal__assertVersion",t=>{if(this.version>t)throw new Error(`Cannot convert metadata from version ${this.version} to ${t}`);return this.version===t});A(this,"__internal__getVersion",(t,a)=>{if(t!=="latest"&&this.__internal__assertVersion(t)){const o=`asV${t}`;return this.__internal__metadata()[o]}if(!this.__internal__converted.has(t)){const o=t==="latest"?`asV${LATEST_VERSION}`:`asV${t-1}`;this.__internal__converted.set(t,a(this.registry,this[o],this.version))}return this.__internal__converted.get(t)});A(this,"__internal__metadata",()=>this.getT("metadata"))}get asCallsOnly(){return new MetadataVersioned(this.registry,{magicNumber:this.magicNumber,metadata:this.registry.createTypeUnsafe("MetadataAll",[toCallsOnly(this.registry,this.asLatest),TO_CALLS_VERSION])})}get asV9(){return this.__internal__assertVersion(9),this.__internal__metadata().asV9}get asV10(){return this.__internal__getVersion(10,toV10)}get asV11(){return this.__internal__getVersion(11,toV11)}get asV12(){return this.__internal__getVersion(12,toV12)}get asV13(){return this.__internal__getVersion(13,toV13)}get asV14(){return this.__internal__getVersion(14,toV14)}get asV15(){return this.__internal__getVersion(15,toV15)}get asLatest(){return this.__internal__getVersion("latest",toLatest)}get magicNumber(){return this.getT("magicNumber")}get version(){return this.__internal__metadata().index}getUniqTypes(t){return getUniqTypes(this.registry,this.asLatest,t)}toJSON(){return this.asLatest,super.toJSON()}}const EMPTY_METADATA=new Uint8Array([109,101,116,97,9]),VERSION_IDX=EMPTY_METADATA.length-1;function decodeU8a(n,e){if(e.length===0)return EMPTY_METADATA;if(e[VERSION_IDX]===9)try{return new MetadataVersioned(n,e)}catch{e[VERSION_IDX]=10}return e}class Metadata extends MetadataVersioned{constructor(e,t){super(e,isU8a(t)||isString(t)?decodeU8a(e,u8aToU8a(t)):t)}}function decorateConstants(n,{pallets:e},t){const a={};for(let o=0,i=e.length;o<i;o++){const{constants:r,name:s}=e[o];r.isEmpty||lazyMethod(a,stringCamelCase(s),()=>lazyMethods({},r,c=>{const d=n.createTypeUnsafe(n.createLookupType(c.type),[hexToU8a(c.value.toHex())]);return d.meta=c,d},objectNameToCamel))}return a}function variantToMeta(n,e){return objectSpread({args:e.fields.map(({type:t})=>n.getTypeDef(t).type)},e)}function decorateErrors(n,{lookup:e,pallets:t},a){const o={};for(let i=0,r=t.length;i<r;i++){const{errors:s,index:c,name:d}=t[i];if(s.isSome){const p=a>=12?c.toNumber():i;lazyMethod(o,stringCamelCase(d),()=>lazyVariants(e,s.unwrap(),objectNameToString,h=>({is:I=>isCodec(I)&&isCodec(I.index)&&I.index.eq(p)&&(isU8a(I.error)?I.error[0]===h.index.toNumber():isCodec(I.error)&&I.error.eq(h.index)),meta:n.createTypeUnsafe("ErrorMetadataLatest",[variantToMeta(e,h)])})))}}return o}function filterEventsSome({events:n}){return n.isSome}function decorateEvents(n,{lookup:e,pallets:t},a){const o={},i=t.filter(filterEventsSome);for(let r=0,s=i.length;r<s;r++){const{events:c,index:d,name:p}=i[r],h=a>=12?d.toNumber():r;lazyMethod(o,stringCamelCase(p),()=>lazyVariants(e,c.unwrap(),objectNameToString,I=>({is:_=>isCodec(_)&&isU8a(_.index)&&h===_.index[0]&&I.index.eq(_.index[1]),meta:n.createTypeUnsafe("EventMetadataLatest",[variantToMeta(e,I)])})))}return o}const DEFAULT_FN=n=>xxhashAsU8a(n,128),HASHERS={Blake2_128:n=>blake2AsU8a(n,128),Blake2_128Concat:n=>u8aConcat(blake2AsU8a(n,128),u8aToU8a(n)),Blake2_256:n=>blake2AsU8a(n,256),Identity:n=>u8aToU8a(n),Twox128:n=>xxhashAsU8a(n,128),Twox256:n=>xxhashAsU8a(n,256),Twox64Concat:n=>u8aConcat(xxhashAsU8a(n,64),u8aToU8a(n))};function getHasher(n){return HASHERS[n.type]||DEFAULT_FN}const NO_RAW_ARGS={args:[],hashers:[],keys:[]};function filterDefined(n){return!isUndefined(n)}function assertArgs({method:n,section:e},{args:t,keys:a}){if(Array.isArray(t)){if(t.filter(filterDefined).length!==a.length)throw new Error(`Call to ${stringCamelCase(e||"unknown")}.${stringCamelCase(n||"unknown")} needs ${a.length} arguments, found [${t.join(", ")}]`)}else throw new Error(`Call to ${stringCamelCase(e||"unknown")}.${stringCamelCase(n||"unknown")} needs ${a.length} arguments`)}function createKeyRawParts(n,e,{args:t,hashers:a,keys:o}){const i=o.length,r=new Array(i);for(let s=0;s<i;s++)r[s]=getHasher(a[s])(n.createTypeUnsafe(n.createLookupType(o[s]),[t[s]]).toU8a());return[[xxhashAsU8a(e.prefix,128),xxhashAsU8a(e.method,128)],r]}function createKeyInspect(n,e,t){assertArgs(e,t);const{meta:a}=e,[o,i]=createKeyRawParts(n,e,t);let r=[];if(a.type.isMap){const{hashers:c,key:d}=a.type.asMap;r=c.length===1?[`${c[0].type}(${getSiName(n.lookup,d)})`]:n.lookup.getSiType(d).def.asTuple.map((p,h)=>`${c[h].type}(${getSiName(n.lookup,p)})`)}const s=["module","method"].concat(...t.args.map((c,d)=>r[d]));return{inner:o.concat(...i).map((c,d)=>({name:s[d],outer:[c]}))}}function createKeyRaw(n,e,t){const[a,o]=createKeyRawParts(n,e,t);return u8aConcat(...a,...o)}function createKey(n,e,t){return assertArgs(e,t),compactAddLength(createKeyRaw(n,e,t))}function createStorageInspect(n,e,t){const{meta:{type:a}}=e;return(...o)=>{if(a.isPlain)return t.skipHashing?{inner:[],name:"wellKnown",outer:[u8aToU8a(t.key)]}:createKeyInspect(n,e,NO_RAW_ARGS);const{hashers:i,key:r}=a.asMap;return i.length===1?createKeyInspect(n,e,{args:o,hashers:i,keys:[r]}):createKeyInspect(n,e,{args:o,hashers:i,keys:n.lookup.getSiType(r).def.asTuple})}}function createStorageFn(n,e,t){const{meta:{type:a}}=e;let o=null;return(...i)=>{if(a.isPlain)return o||(o=t.skipHashing?compactAddLength(u8aToU8a(t.key)):createKey(n,e,NO_RAW_ARGS)),o;const{hashers:r,key:s}=a.asMap;return r.length===1?createKey(n,e,{args:i,hashers:r,keys:[s]}):createKey(n,e,{args:i,hashers:r,keys:n.lookup.getSiType(s).def.asTuple})}}function createWithMeta(n,e,t){const{meta:a,method:o,prefix:i,section:r}=e,s=createStorageFn(n,e,t);return s.inspect=createStorageInspect(n,e,t),s.meta=a,s.method=stringCamelCase(o),s.prefix=i,s.section=r,s.toJSON=()=>objectSpread({storage:{method:o,prefix:i,section:r}},a.toJSON()),s}function extendHeadMeta(n,{meta:{docs:e,name:t,type:a},section:o},{method:i},r){const s=n.createTypeUnsafe("StorageEntryMetadataLatest",[{docs:e,fallback:n.createTypeUnsafe("Bytes",[]),modifier:n.createTypeUnsafe("StorageEntryModifierLatest",[1]),name:t,type:n.createTypeUnsafe("StorageEntryTypeLatest",[a.asMap.key,0])}]);r.meta=s;const c=(...d)=>n.createTypeUnsafe("StorageKey",[r(...d),{method:i,section:o}]);return c.meta=s,c}function extendPrefixedMap(n,e,t){const{meta:{type:a},method:o,section:i}=e;return t.iterKey=extendHeadMeta(n,e,t,(...r)=>{if(r.length&&(a.isPlain||r.length>=a.asMap.hashers.length))throw new Error(`Iteration of ${stringCamelCase(i||"unknown")}.${stringCamelCase(o||"unknown")} needs arguments to be at least one less than the full arguments, found [${r.join(", ")}]`);if(r.length&&a.isMap){const{hashers:s,key:c}=a.asMap,d=s.length===1?[c]:n.lookup.getSiType(c).def.asTuple;return new Raw(n,createKeyRaw(n,e,{args:r,hashers:s.slice(0,r.length),keys:d.slice(0,r.length)}))}return new Raw(n,createKeyRaw(n,e,NO_RAW_ARGS))}),t}function createFunction(n,e,t){const{meta:{type:a}}=e,o=createWithMeta(n,e,t);return a.isMap&&extendPrefixedMap(n,e,o),o.keyPrefix=(...i)=>o.iterKey&&o.iterKey(...i)||compactStripLength(o())[1],o}function findSiPrimitive(n,e){const t=e.toLowerCase();return n.lookup.types.find(a=>a.type.def.isPrimitive&&a.type.def.asPrimitive.toString().toLowerCase()===t||a.type.def.isHistoricMetaCompat&&a.type.def.asHistoricMetaCompat.toString().toLowerCase()===t)}function findSiType(n,e){let t=findSiPrimitive(n,e);if(!t&&(e==="Bytes"||e.startsWith("[u8;"))){const a=findSiPrimitive(n,"u8");if(a)if(e==="Bytes")t=n.lookup.types.find(o=>o.type.def.isSequence&&o.type.def.asSequence.type.eq(a.id)||o.type.def.isHistoricMetaCompat&&o.type.def.asHistoricMetaCompat.eq(e));else{const o=getTypeDef(e);t=n.lookup.types.find(i=>i.type.def.isArray&&i.type.def.asArray.eq({len:o.length,type:a.id})||i.type.def.isHistoricMetaCompat&&i.type.def.asHistoricMetaCompat.eq(e))}}return t||console.warn(`Unable to map ${e} to a lookup index`),t}function createRuntimeFunction({method:n,prefix:e,section:t},a,{docs:o,type:i}){return r=>{var s;return createFunction(r,{meta:r.createTypeUnsafe("StorageEntryMetadataLatest",[{docs:r.createTypeUnsafe("Vec<Text>",[[o]]),modifier:r.createTypeUnsafe("StorageEntryModifierLatest",["Required"]),name:r.createTypeUnsafe("Text",[n]),toJSON:()=>a,type:r.createTypeUnsafe("StorageEntryTypeLatest",[{Plain:((s=findSiType(r,i))==null?void 0:s.id)||0}])}]),method:n,prefix:e,section:t},{key:a,skipHashing:!0})}}const prefix="Substrate",section="substrate";function createSubstrateFn(n,e,t){return createRuntimeFunction({method:n,prefix,section},e,t)}const substrate={changesTrieConfig:createSubstrateFn("changesTrieConfig",":changes_trie",{docs:"Changes trie configuration is stored under this key.",type:"u32"}),childStorageKeyPrefix:createSubstrateFn("childStorageKeyPrefix",":child_storage:",{docs:"Prefix of child storage keys.",type:"u32"}),code:createSubstrateFn("code",":code",{docs:"Wasm code of the runtime.",type:"Bytes"}),extrinsicIndex:createSubstrateFn("extrinsicIndex",":extrinsic_index",{docs:"Current extrinsic index (u32) is stored under this key.",type:"u32"}),heapPages:createSubstrateFn("heapPages",":heappages",{docs:"Number of wasm linear memory pages required for execution of the runtime.",type:"u64"}),intrablockEntropy:createSubstrateFn("intrablockEntropy",":intrablock_entropy",{docs:"Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.",type:"[u8; 32]"})};function getStorage(n){const e={},t=Object.entries(substrate);for(let a=0,o=t.length;a<o;a++)e[t[a][0]]=t[a][1](n);return{substrate:e}}const VERSION_NAME="palletVersion",VERSION_KEY=":__STORAGE_VERSION__:",VERSION_DOCS={docs:"Returns the current pallet version from storage",type:"u16"};function decorateStorage(n,{pallets:e},t){const a=getStorage(n);for(let o=0,i=e.length;o<i;o++){const{name:r,storage:s}=e[o];if(s.isSome){const c=stringCamelCase(r),{items:d,prefix:p}=s.unwrap(),h=p.toString();lazyMethod(a,c,()=>lazyMethods({palletVersion:createRuntimeFunction({method:VERSION_NAME,prefix:h,section:c},createKeyRaw(n,{method:VERSION_KEY,prefix:r.toString()},NO_RAW_ARGS),VERSION_DOCS)(n)},d,I=>createFunction(n,{meta:I,method:I.name.toString(),prefix:h,section:c},{}),objectNameToCamel))}}return a}function expandMetadata(n,e){if(!(e instanceof Metadata))throw new Error("You need to pass a valid Metadata instance to Decorated");const t=e.asLatest,a=e.version;return{consts:decorateConstants(n,t),errors:decorateErrors(n,t,a),events:decorateEvents(n,t,a),query:decorateStorage(n,t),registry:n,tx:decorateExtrinsics(n,t,a)}}const DEFAULT_FIRST_CALL_IDX=new Uint8Array(2),l$6=logger("registry");function sortDecimalStrings(n,e){return parseInt(n,10)-parseInt(e,10)}function valueToString(n){return n.toString()}function getFieldArgs(n,e){const t=e.length,a=new Array(t);for(let o=0;o<t;o++)a[o]=n.getTypeDef(e[o].type).type;return a}function clearRecord(n){const e=Object.keys(n);for(let t=0,a=e.length;t<a;t++)delete n[e[t]]}function getVariantStringIdx({index:n}){return n.toString()}function injectErrors(n,{lookup:e,pallets:t},a,o){clearRecord(o);for(let i=0,r=t.length;i<r;i++){const{errors:s,index:c,name:d}=t[i];if(s.isSome){const p=stringCamelCase(d);lazyMethod(o,a>=12?c.toNumber():i,()=>lazyVariants(e,s.unwrap(),getVariantStringIdx,({docs:h,fields:I,index:_,name:k})=>({args:getFieldArgs(e,I),docs:h.map(valueToString),fields:I,index:_.toNumber(),method:k.toString(),name:k.toString(),section:p})))}}}function injectEvents(n,{lookup:e,pallets:t},a,o){const i=t.filter(filterEventsSome);clearRecord(o);for(let r=0,s=i.length;r<s;r++){const{events:c,index:d,name:p}=i[r];lazyMethod(o,a>=12?d.toNumber():r,()=>lazyVariants(e,c.unwrap(),getVariantStringIdx,h=>{const I=n.createType("EventMetadataLatest",objectSpread({},h,{args:getFieldArgs(e,h.fields)}));return class extends GenericEventData{constructor(_,k){super(_,k,I,stringCamelCase(p),h.name.toString())}}}))}}function injectExtrinsics(n,{lookup:e,pallets:t},a,o,i){const r=t.filter(filterCallsSome);clearRecord(o),clearRecord(i);for(let s=0,c=r.length;s<c;s++){const{calls:d,index:p,name:h}=r[s],I=a>=12?p.toNumber():s,_=stringCamelCase(h),k=d.unwrap();lazyMethod(o,I,()=>lazyVariants(e,k,getVariantStringIdx,E=>createCallFunction(n,e,E,_,I)));const{path:P}=n.lookup.getSiType(k.type),v=P.findIndex(E=>E.eq("pallet"));if(v!==-1){const E=stringCamelCase(P.slice(0,v).map((M,R)=>R===0?M.replace(/^(frame|pallet)_/,""):M).join(" "));i[E]?i[E].push(_):i[E]=[_]}}}function extractProperties(n,e){const t=n.getChainProperties(),a=decorateConstants(n,e.asLatest,e.version),o=a.system&&(a.system.sS58Prefix||a.system.ss58Prefix);if(!o)return t;const{isEthereum:i,tokenDecimals:r,tokenSymbol:s}=t||{};return n.createTypeUnsafe("ChainProperties",[{isEthereum:i,ss58Format:o,tokenDecimals:r,tokenSymbol:s}])}class TypeRegistry{constructor(e){A(this,"__internal__chainProperties");A(this,"__internal__classes",new Map);A(this,"__internal__definitions",new Map);A(this,"__internal__firstCallIndex",null);A(this,"__internal__hasher",blake2AsU8a);A(this,"__internal__knownTypes",{});A(this,"__internal__lookup");A(this,"__internal__metadata");A(this,"__internal__metadataVersion",0);A(this,"__internal__signedExtensions",fallbackExtensions);A(this,"__internal__unknownTypes",new Map);A(this,"__internal__userExtensions");A(this,"__internal__knownDefaults");A(this,"__internal__knownDefaultsEntries");A(this,"__internal__knownDefinitions");A(this,"__internal__metadataCalls",{});A(this,"__internal__metadataErrors",{});A(this,"__internal__metadataEvents",{});A(this,"__internal__moduleMap",{});A(this,"createdAtHash");A(this,"__internal__registerObject",e=>{const t=Object.entries(e);for(let a=0,o=t.length;a<o;a++){const[i,r]=t[a];if(isFunction$2(r))this.__internal__classes.set(i,r);else{const s=isString(r)?r:stringify(r);if(i===s)throw new Error(`Unable to register circular ${i} === ${s}`);this.__internal__classes.has(i)&&this.__internal__classes.delete(i),this.__internal__definitions.set(i,s)}}});A(this,"__internal__registerLookup",e=>{this.setLookup(e);let t=null;if(this.hasType("SpWeightsWeightV2Weight")){const a=this.createType("SpWeightsWeightV2Weight");t=a.refTime&&a.proofSize?"SpWeightsWeightV2Weight":"WeightV1"}else isBn(this.createType("Weight"))||(t="WeightV1");t&&this.register({Weight:t})});this.__internal__knownDefaults=objectSpread({Json,Metadata,PortableRegistry,Raw},baseTypes),this.__internal__knownDefaultsEntries=Object.entries(this.__internal__knownDefaults),this.__internal__knownDefinitions=typeDefinitions;const t=Object.values(this.__internal__knownDefinitions);for(let a=0,o=t.length;a<o;a++)this.register(t[a].types);e&&(this.createdAtHash=this.createType("BlockHash",e))}get chainDecimals(){var e;if((e=this.__internal__chainProperties)!=null&&e.tokenDecimals.isSome){const t=this.__internal__chainProperties.tokenDecimals.unwrap();if(t.length)return t.map(a=>a.toNumber())}return[12]}get chainIsEthereum(){var e;return((e=this.__internal__chainProperties)==null?void 0:e.isEthereum.isTrue)||!1}get chainSS58(){var e;return(e=this.__internal__chainProperties)!=null&&e.ss58Format.isSome?this.__internal__chainProperties.ss58Format.unwrap().toNumber():void 0}get chainTokens(){var e;if((e=this.__internal__chainProperties)!=null&&e.tokenSymbol.isSome){const t=this.__internal__chainProperties.tokenSymbol.unwrap();if(t.length)return t.map(valueToString)}return[formatBalance.getDefaults().unit]}get firstCallIndex(){return this.__internal__firstCallIndex||DEFAULT_FIRST_CALL_IDX}isLookupType(e){return/Lookup\d+$/.test(e)}createLookupType(e){return`Lookup${typeof e=="number"?e:e.toNumber()}`}get knownTypes(){return this.__internal__knownTypes}get lookup(){return assertReturn(this.__internal__lookup,"PortableRegistry has not been set on this registry")}get metadata(){return assertReturn(this.__internal__metadata,"Metadata has not been set on this registry")}get unknownTypes(){return[...this.__internal__unknownTypes.keys()]}get signedExtensions(){return this.__internal__signedExtensions}clearCache(){this.__internal__classes=new Map}createClass(e){return createClassUnsafe(this,e)}createClassUnsafe(e){return createClassUnsafe(this,e)}createType(e,...t){return createTypeUnsafe(this,e,t)}createTypeUnsafe(e,t,a){return createTypeUnsafe(this,e,t,a)}findMetaCall(e){const[t,a]=[e[0],e[1]];return assertReturn(this.__internal__metadataCalls[`${t}`]&&this.__internal__metadataCalls[`${t}`][`${a}`],()=>`findMetaCall: Unable to find Call with index [${t}, ${a}]/[${e.toString()}]`)}findMetaError(e){const[t,a]=isU8a(e)?[e[0],e[1]]:[e.index.toNumber(),isU8a(e.error)?e.error[0]:e.error.toNumber()];return assertReturn(this.__internal__metadataErrors[`${t}`]&&this.__internal__metadataErrors[`${t}`][`${a}`],()=>`findMetaError: Unable to find Error with index [${t}, ${a}]/[${e.toString()}]`)}findMetaEvent(e){const[t,a]=[e[0],e[1]];return assertReturn(this.__internal__metadataEvents[`${t}`]&&this.__internal__metadataEvents[`${t}`][`${a}`],()=>`findMetaEvent: Unable to find Event with index [${t}, ${a}]/[${e.toString()}]`)}get(e,t,a){return this.getUnsafe(e,t,a)}getUnsafe(e,t,a){let o=this.__internal__classes.get(e)||this.__internal__knownDefaults[e];if(!o){const i=this.__internal__definitions.get(e);let r;i?r=createClassUnsafe(this,i):a?r=constructTypeClass(this,a):t&&(l$6.warn(`Unable to resolve type ${e}, it will fail on construction`),this.__internal__unknownTypes.set(e,!0),r=DoNotConstruct.with(e)),r&&(o=class extends r{},this.__internal__classes.set(e,o),a&&isNumber(a.lookupIndex)&&this.__internal__classes.set(this.createLookupType(a.lookupIndex),o))}return o}getChainProperties(){return this.__internal__chainProperties}getClassName(e){const t=[];for(const[a,o]of this.__internal__knownDefaultsEntries)e===o&&t.push(a);for(const[a,o]of this.__internal__classes.entries())e===o&&t.push(a);return t.length?t.sort().reverse()[0]:void 0}getDefinition(e){return this.__internal__definitions.get(e)}getModuleInstances(e,t){var a,o,i,r,s;return((s=(r=(i=(o=(a=this.__internal__knownTypes)==null?void 0:a.typesBundle)==null?void 0:o.spec)==null?void 0:i[e.toString()])==null?void 0:r.instances)==null?void 0:s[t])||this.__internal__moduleMap[t]}getOrThrow(e){const t=this.get(e);if(!t)throw new Error(`type ${e} not found`);return t}getOrUnknown(e){return this.get(e,!0)}getSignedExtensionExtra(){return expandExtensionTypes(this.__internal__signedExtensions,"payload",this.__internal__userExtensions)}getSignedExtensionTypes(){return expandExtensionTypes(this.__internal__signedExtensions,"extrinsic",this.__internal__userExtensions)}hasClass(e){return this.__internal__classes.has(e)||!!this.__internal__knownDefaults[e]}hasDef(e){return this.__internal__definitions.has(e)}hasType(e){return!this.__internal__unknownTypes.get(e)&&(this.hasClass(e)||this.hasDef(e))}hash(e){return this.createType("CodecHash",this.__internal__hasher(e))}register(e,t){if(isFunction$2(e))this.__internal__classes.set(e.name,e);else if(isString(e)){if(isFunction$2(t)){if(e===t.toString())throw new Error(`Unable to register circular ${e} === ${e}`)}else throw new Error(`Expected class definition passed to '${e}' registration`);this.__internal__classes.set(e,t)}else this.__internal__registerObject(e)}setChainProperties(e){e&&(this.__internal__chainProperties=e)}setHasher(e){this.__internal__hasher=e||blake2AsU8a}setKnownTypes(e){this.__internal__knownTypes=e}setLookup(e){this.__internal__lookup=e,e.register()}setMetadata(e,t,a,o){this.__internal__metadata=e.asLatest,this.__internal__metadataVersion=e.version,this.__internal__firstCallIndex=null,this.__internal__registerLookup(this.__internal__metadata.lookup),injectExtrinsics(this,this.__internal__metadata,this.__internal__metadataVersion,this.__internal__metadataCalls,this.__internal__moduleMap),injectErrors(this,this.__internal__metadata,this.__internal__metadataVersion,this.__internal__metadataErrors),injectEvents(this,this.__internal__metadata,this.__internal__metadataVersion,this.__internal__metadataEvents);const[i]=Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);if(i){const[r]=Object.keys(this.__internal__metadataCalls[i]).sort(sortDecimalStrings);r&&(this.__internal__firstCallIndex=new Uint8Array([parseInt(i,10),parseInt(r,10)]))}this.setSignedExtensions(t||(this.__internal__metadata.extrinsic.version.gt(BN_ZERO)?this.__internal__metadata.extrinsic.signedExtensions.map(({identifier:r})=>r.toString()):fallbackExtensions),a,o),this.setChainProperties(extractProperties(this,e))}setSignedExtensions(e=fallbackExtensions,t,a){if(this.__internal__signedExtensions=e,this.__internal__userExtensions=t,!a){const o=findUnknownExtensions(this.__internal__signedExtensions,this.__internal__userExtensions);o.length&&l$6.warn(`Unknown signed extensions ${o.join(", ")} found, treating them as no-effect`)}}}function refCountDelay(n=1750){return e=>{let[t,a,o,i]=[0,0,Subscription.EMPTY,Subscription.EMPTY];return new Observable(r=>(e.subscribe(r),a++===0&&(t===1?i.unsubscribe():o=e.connect(),t=3),()=>{--a===0&&(t===2?(t=0,i.unsubscribe()):(t=1,i=asapScheduler.schedule(()=>{t=0,o.unsubscribe()},n)))}))}}function CMP(n,e){return stringify({t:n})===stringify({t:e})}function ERR(n){throw n}function NOOP(){}function drr({delay:n,skipChange:e=!1,skipTimeout:t=!1}={}){return a=>a.pipe(catchError(ERR),e?tap(NOOP):distinctUntilChanged(CMP),publishReplay(1),t?refCount():refCountDelay(n))}function memo(n,e){const a=memoize((...o)=>new Observable(i=>{const r=e(...o).subscribe(i);return()=>{a.unmemoize(...o),r.unsubscribe()}}).pipe(drr()),{getInstanceId:()=>n});return a}const l$5=logger("rpc-core"),EMPTY_META={fallback:void 0,modifier:{isOptional:!0},type:{asMap:{linked:{isTrue:!1}},isMap:!1}};function logErrorMessage(n,{noErrorLog:e,params:t,type:a},o){e||l$5.error(`${n}(${t.map(({isOptional:i,name:r,type:s})=>`${r}${i?"?":""}: ${s}`).join(", ")}): ${a}:: ${o.message}`)}function isTreatAsHex(n){return["0x3a636f6465"].includes(n.toHex())}class RpcCore{constructor(e,t,{isPedantic:a=!0,provider:o,userRpc:i={}}){A(this,"__internal__instanceId");A(this,"__internal__isPedantic");A(this,"__internal__registryDefault");A(this,"__internal__storageCache",new Map);A(this,"__internal__storageCacheHits",0);A(this,"__internal__storageCacheSize",0);A(this,"__internal__getBlockRegistry");A(this,"__internal__getBlockHash");A(this,"mapping",new Map);A(this,"provider");A(this,"sections",[]);if(!o||!isFunction$2(o.send))throw new Error("Expected Provider to API create");this.__internal__instanceId=e,this.__internal__isPedantic=a,this.__internal__registryDefault=t,this.provider=o;const r=Object.keys(jsonrpc);this.sections.push(...r),this.addUserInterfaces(i)}get isConnected(){return this.provider.isConnected}connect(){return this.provider.connect()}disconnect(){return this.provider.disconnect()}get stats(){const e=this.provider.stats;return e?{...e,core:{cacheHits:this.__internal__storageCacheHits,cacheSize:this.__internal__storageCacheSize}}:void 0}setRegistrySwap(e){this.__internal__getBlockRegistry=memoize(e,{getInstanceId:()=>this.__internal__instanceId})}setResolveBlockHash(e){this.__internal__getBlockHash=memoize(e,{getInstanceId:()=>this.__internal__instanceId})}addUserInterfaces(e){this.sections.push(...Object.keys(e).filter(t=>!this.sections.includes(t)));for(let t=0,a=this.sections.length;t<a;t++){const o=this.sections[t],i=objectSpread({},jsonrpc[o],e[o]),r=Object.keys(i);for(let s=0,c=r.length;s<c;s++){const d=r[s],p=i[d],h=p.endpoint||`${o}_${d}`;if(!this.mapping.has(h)){const I=!!p.pubsub;this[o]||(this[o]={}),this.mapping.set(h,objectSpread({},p,{isSubscription:I,jsonrpc:h,method:d,section:o})),lazyMethod(this[o],d,()=>I?this._createMethodSubscribe(o,d,p):this._createMethodSend(o,d,p))}}}}_memomize(e,t){const a={getInstanceId:()=>this.__internal__instanceId},o=memoize(e(!0),a);return o.raw=memoize(e(!1),a),o.meta=t,o}_formatResult(e,t,a,o,i,r,s){return e?this._formatOutput(t,a,o,i,r,s):s}_createMethodSend(e,t,a){const o=a.endpoint||`${e}_${t}`,i=a.params.findIndex(({isHistoric:d})=>d);let r=null;const s=async(d,p)=>{var v;const h=i===-1?null:p[i],I=h&&a.params[i].type==="BlockNumber"?await((v=this.__internal__getBlockHash)==null?void 0:v.call(this,h)):h,{registry:_}=d&&I&&this.__internal__getBlockRegistry?await this.__internal__getBlockRegistry(u8aToU8a(I)):{registry:this.__internal__registryDefault},k=this._formatParams(_,null,a,p),P=await this.provider.send(o,k.map(E=>E.toJSON()),!!I);return this._formatResult(d,_,I,t,a,k,P)},c=d=>(...p)=>{const h=d&&i!==-1&&!!p[i];return new Observable(I=>(s(d,p).then(_=>{I.next(_),I.complete()}).catch(_=>{logErrorMessage(t,a,_),I.error(_),I.complete()}),()=>{d?r==null||r.unmemoize(...p):r==null||r.raw.unmemoize(...p)})).pipe(publishReplay(1),h?refCountDelay():refCount())};return r=this._memomize(c,a),r}_createSubscriber({paramsJson:e,subName:t,subType:a,update:o},i){return new Promise((r,s)=>{this.provider.subscribe(a,t,e,o).then(r).catch(c=>{i(c),s(c)})})}_createMethodSubscribe(e,t,a){const[o,i,r]=a.pubsub,s=`${e}_${i}`,c=`${e}_${r}`,d=`${e}_${o}`;let p=null;const h=I=>(..._)=>new Observable(k=>{let P=Promise.resolve(null);const v=this.__internal__registryDefault,E=M=>{logErrorMessage(t,a,M),k.error(M)};try{const M=this._formatParams(v,null,a,_),R=(H,K)=>{if(H){logErrorMessage(t,a,H);return}try{k.next(this._formatResult(I,v,null,t,a,M,K))}catch(w){k.error(w)}};P=this._createSubscriber({paramsJson:M.map(H=>H.toJSON()),subName:s,subType:d,update:R},E)}catch(M){E(M)}return()=>{I?p==null||p.unmemoize(..._):p==null||p.raw.unmemoize(..._),P.then(M=>isNull(M)?Promise.resolve(!1):this.provider.unsubscribe(d,c,M)).catch(M=>logErrorMessage(t,a,M))}}).pipe(drr());return p=this._memomize(h,a),p}_formatParams(e,t,a,o){const i=o.length,r=a.params.filter(({isOptional:c})=>!c).length;if(i<r||i>a.params.length)throw new Error(`Expected ${a.params.length} parameters${r===a.params.length?"":` (${a.params.length-r} optional)`}, ${i} found instead`);const s=new Array(i);for(let c=0;c<i;c++)s[c]=e.createTypeUnsafe(a.params[c].type,[o[c]],{blockHash:t});return s}_formatOutput(e,t,a,o,i,r){if(o.type==="StorageData"){const s=i[0];return this._formatStorageData(e,t,s,r)}else if(o.type==="StorageChangeSet"){const s=i[0];return s?this._formatStorageSet(e,r.block,s,r.changes):e.createType("StorageChangeSet",r)}else if(o.type==="Vec<StorageChangeSet>"){const s=r,c=s.length,d=new Array(c);for(let p=0;p<c;p++){const{block:h,changes:I}=s[p];d[p]=[e.createType("BlockHash",h),this._formatStorageSet(e,h,i[0],I)]}return a==="queryStorageAt"?d[0][1]:d}return e.createTypeUnsafe(o.type,[r],{blockHash:t})}_formatStorageData(e,t,a,o){const i=isNull(o),r=i?null:isTreatAsHex(a)?o:u8aToU8a(o);return this._newType(e,t,a,r,i)}_formatStorageSet(e,t,a,o){const i=a.length,r=i!==1,s=new Array(i);for(let c=0;c<i;c++)s[c]=this._formatStorageSetEntry(e,t,a[c],o,r,c);return s}_formatStorageSetEntry(e,t,a,o,i,r){const s=a.toHex(),c=o.find(([k])=>k===s),d=isUndefined(c);if(d&&i){const k=this.__internal__storageCache.get(s);if(k)return this.__internal__storageCacheHits++,k}const p=d?null:c[1],h=isNull(p),I=h||isTreatAsHex(a)?p:u8aToU8a(p),_=this._newType(e,t,a,I,h,r);return this.__internal__storageCache.set(s,_),this.__internal__storageCacheSize++,_}_newType(e,t,a,o,i,r=-1){const s=a.outputType||"Raw",c=a.meta||EMPTY_META,d=r===-1?"":` entry ${r}:`;try{return e.createTypeUnsafe(s,[i?c.fallback?s.includes("Linkage<")?u8aConcat(hexToU8a(c.fallback.toHex()),new Uint8Array(2)):hexToU8a(c.fallback.toHex()):void 0:c.modifier.isOptional?e.createTypeUnsafe(s,[o],{blockHash:t,isPedantic:this.__internal__isPedantic}):o],{blockHash:t,isFallback:i&&!!c.fallback,isOptional:c.modifier.isOptional,isPedantic:this.__internal__isPedantic&&!c.modifier.isOptional})}catch(p){throw new Error(`Unable to decode storage ${a.section||"unknown"}.${a.method||"unknown"}:${d}: ${p.message}`)}}}function unwrapBlockNumber(n){return isCompact(n.number)?n.number.unwrap():n.number}const mapCache=new Map,deriveMapCache={del:n=>{mapCache.delete(n)},forEach:n=>{for(const[e,t]of mapCache.entries())n(e,t)},get:n=>mapCache.get(n),set:(n,e)=>{mapCache.set(n,e)}},deriveNoopCache={del:()=>{},forEach:()=>{},get:()=>{},set:(n,e)=>e},CHACHE_EXPIRY=7*(24*60)*(60*1e3);let deriveCache;function wrapCache(n,e){return{del:t=>e.del(`${n}${t}`),forEach:e.forEach,get:t=>{const a=`${n}${t}`,o=e.get(a);if(o)return o.x=Date.now(),e.set(a,o),o.v},set:(t,a)=>{e.set(`${n}${t}`,{v:a,x:Date.now()})}}}function clearCache(n){const e=Date.now(),t=[];n.forEach((a,{x:o})=>{e-o>CHACHE_EXPIRY&&t.push(a)}),t.forEach(a=>n.del(a))}function setDeriveCache(n="",e){deriveCache=e?wrapCache(`derive:${n}:`,e):deriveNoopCache,e&&clearCache(e)}setDeriveCache();function firstObservable(n){return n.pipe(map$2(([e])=>e))}function firstMemo(n){return(e,t)=>memo(e,(...a)=>firstObservable(n(t,...a)))}function lazyDeriveSection(n,e,t,a){lazyMethod(n,e,()=>lazyMethods({},t(e),o=>a(e,o)))}const u64FromCurrency=n=>{const e=Buffer.from(n.toLowerCase()),t=e.length;return e.reduce((a,o,i)=>{const r=BigInt(t-1-i);return BigInt(a)+BigInt(256)**r*BigInt(o)},BigInt(0))},TOKENS$1=["eq"],createDerives=n=>n.reduce((e,t,a)=>{const o=!a;return{...e,[t]:{customAccount:(i,r)=>{const{registry:s}=r,c=u64FromCurrency(t);return memo(i,d=>r.query.system.account(d).pipe(map$2(p=>{const h=p.data,I=o?h.asV0.lock:s.createType("u128",0),_=I,k=s.createType("u128",0),P=h.asV0.balance.find(([M])=>M.toBigInt()===c),v=P==null?void 0:P[1],E=v!=null&&v.isPositive?v.asPositive:s.createType("u128",0);return{feeFrozen:_,free:E,miscFrozen:I,reserved:k}})))},customLocks:(i,r)=>{const{registry:s}=r;return memo(i,c=>o?r.query.system.account(c).pipe(map$2(d=>[{amount:d.data.asV0.lock,id:new U8aFixed(s),reasons:""}])):of([]))}}}},{}),definitions$5={derives:createDerives(TOKENS$1),instances:{balances:TOKENS$1}},TOKENS=["gens"],definitions$4={derives:createDerives(TOKENS),instances:{balances:TOKENS}},definitions$3={hasher:keccakAsU8a};var build={exports:{}};(function(n,e){(function(t,a){n.exports=a()})(commonjsGlobal,function(){return(()=>{var t={d:(o,i)=>{for(var r in i)t.o(i,r)&&!t.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:i[r]})},o:(o,i)=>Object.prototype.hasOwnProperty.call(o,i),r:o=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})}},a={};return((o,i,r)=>{r.r(i),r.d(i,{default:()=>s});const s=JSON.parse(`{"types":[{"minmax":[0,null],"types":{"BalanceWrapper":{"amount":"String"},"CurrencyId":{"_enum":{"Token":"TokenSymbol","ForeignAsset":"ForeignAssetId","LendToken":"LendTokenId","LpToken":"(LpToken, LpToken)","StableLpToken":"StablePoolId"}},"LpToken":{"_enum":{"Token":"TokenSymbol","ForeignAsset":"ForeignAssetId","StableLpToken":"StablePoolId"}},"InterbtcPrimitivesCurrencyId":{"_enum":{"Token":"InterbtcPrimitivesTokenSymbol","ForeignAsset":"InterbtcForeignAssetId","LendToken":"InterbtcLendTokenId","LpToken":"(InterbtcLpToken, InterbtcLpToken)","StableLpToken":"InterbtcStablePoolId"}},"InterbtcLpToken":{"_enum":{"Token":"InterbtcPrimitivesTokenSymbol","ForeignAsset":"InterbtcForeignAssetId","StableLpToken":"InterbtcStablePoolId"}},"InterbtcForeignAssetId":"u32","ForeignAssetId":"u32","InterbtcLendTokenId":"u32","InterbtcStablePoolId":"u32","LendTokenId":"u32","StablePoolId":"u32","NumberOrHex":{"_enum":{"Number":"u64","Hex":"U256"}},"Rate":"FixedU128","Ratio":"Permill","Liquidity":"FixedU128","Shortfall":"FixedU128","FundAccountJsonRpcRequest":{"account_id":"AccountId","currency_id":"InterbtcPrimitivesCurrencyId"},"H256Le":"H256","SignedFixedPoint":"FixedU128","TokenSymbol":{"_enum":{"DOT":0,"IBTC":1,"INTR":2,"KSM":10,"KBTC":11,"KINT":12}},"InterbtcPrimitivesTokenSymbol":{"_enum":{"DOT":0,"IBTC":1,"INTR":2,"KSM":10,"KBTC":11,"KINT":12}},"UnsignedFixedPoint":"FixedU128","VaultCurrencyPair":{"collateral":"CurrencyId","wrapped":"CurrencyId"},"VaultId":{"account_id":"AccountId","currencies":"VaultCurrencyPair"}}}],"rpc":{"btcRelay":{"verifyBlockHeaderInclusion":{"description":"Verify that the block with the given hash is included","params":[{"name":"block_hash","type":"H256Le"}],"type":"void"}},"escrow":{"balanceAt":{"description":"Get a given user's escrowed balance","params":[{"name":"account_id","type":"AccountId"},{"name":"height","type":"Option<BlockNumber>"}],"type":"BalanceWrapper"},"totalSupply":{"description":"Get the total voting supply in the system","params":[{"name":"height","type":"Option<BlockNumber>"}],"type":"BalanceWrapper"},"freeStakable":{"description":"Amount of kint/intr that account can lock, taking into consideration the Limits.","params":[{"name":"account_id","type":"AccountId"}],"type":"BalanceWrapper"}},"loans":{"getCollateralLiquidity":{"description":"Retrieves collateral liquidity for the given user.","params":[{"name":"account","type":"AccountId"},{"name":"at","type":"BlockHash","isHistoric":true,"isOptional":true}],"type":"(Liquidity, Shortfall)","isSubscription":false,"jsonrpc":"loans_getCollateralLiquidity","method":"getCollateralLiquidity","section":"loans"},"getLiquidationThresholdLiquidity":{"description":"Retrieves liquidation threshold liquidity for the given user.","params":[{"name":"account","type":"AccountId"},{"name":"at","type":"BlockHash","isHistoric":true,"isOptional":true}],"type":"(Liquidity, Shortfall)","isSubscription":false,"jsonrpc":"loans_getLiquidationThresholdLiquidity","method":"getLiquidationThresholdLiquidity","section":"loans"},"getMarketStatus":{"description":"Retrieves market status data for a given asset id.","params":[{"name":"asset_id","type":"CurrencyId"},{"name":"at","type":"BlockHash","isHistoric":true,"isOptional":true}],"type":"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)","isSubscription":false,"jsonrpc":"loans_getMarketStatus","method":"getMarketStatus","section":"loans"}},"issue":{"getIssueRequests":{"description":"Get all issue request IDs for a particular account","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<H256>"},"getVaultIssueRequests":{"description":"Get all issue request IDs for a particular vault","params":[{"name":"vault_id","type":"AccountId"}],"type":"Vec<H256>"}},"oracle":{"collateralToWrapped":{"description":"Collateral to Wrapped exchange rate","params":[{"name":"amount","type":"BalanceWrapper"},{"name":"currency_id","type":"CurrencyId"}],"type":"BalanceWrapper"},"wrappedToCollateral":{"description":"Wrapped to Collateral exchange rate","params":[{"name":"amount","type":"BalanceWrapper"},{"name":"currency_id","type":"CurrencyId"}],"type":"BalanceWrapper"}},"redeem":{"getRedeemRequests":{"description":"Get all redeem request IDs for a particular account","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<H256>"},"getVaultRedeemRequests":{"description":"Get all redeem request IDs for a particular vault","params":[{"name":"vault_id","type":"AccountId"}],"type":"Vec<H256>"}},"refund":{"getRefundRequests":{"description":"Get all refund request IDs for a particular account","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<H256>"},"getRefundRequestsByIssueId":{"description":"Get all refund request IDs for a particular issue ID","params":[{"name":"issue_id","type":"H256"}],"type":"H256"},"getVaultRefundRequests":{"description":"Get all refund request IDs for a particular vault","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<H256>"}},"replace":{"getNewVaultReplaceRequests":{"description":"Get all replace request IDs to a particular vault","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<H256>"},"getOldVaultReplaceRequests":{"description":"Get all replace request IDs from a particular vault","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<H256>"}},"reward":{"estimateEscrowRewardRate":{"description":"Estimate the escrow reward rate for a given account","params":[{"name":"account_id","type":"AccountId"},{"name":"amount","type":"Option<Balance>"},{"name":"lock_time","type":"Option<BlockNumber>"}],"type":"UnsignedFixedPoint"},"estimateVaultRewardRate":{"description":"Estimate the vault reward rate a given vault id","params":[{"name":"vault_id","type":"VaultId"}],"type":"UnsignedFixedPoint"},"computeEscrowReward":{"description":"Get a given user's rewards due","params":[{"name":"account_id","type":"AccountId"},{"name":"currency_id","type":"CurrencyId"}],"type":"BalanceWrapper"},"computeFarmingReward":{"description":"Get a given user's farming rewards due","params":[{"name":"account_id","type":"AccountId"},{"name":"pool_currency_id","type":"CurrencyId"},{"name":"reward_currency_id","type":"CurrencyId"}],"type":"BalanceWrapper"},"computeVaultReward":{"description":"Get a given vault's rewards due","params":[{"name":"vault_id","type":"VaultId"},{"name":"currency_id","type":"CurrencyId"}],"type":"BalanceWrapper"}},"vaultRegistry":{"getCollateralizationFromVault":{"description":"Returns the collateralization of a specific vault","params":[{"name":"vault","type":"VaultId"},{"name":"only_issued","type":"bool"}],"type":"UnsignedFixedPoint"},"getCollateralizationFromVaultAndCollateral":{"description":"Returns the collateralization of a specific vault and collateral","params":[{"name":"vault","type":"VaultId"},{"name":"collateral","type":"BalanceWrapper"},{"name":"only_issued","type":"bool"}],"type":"UnsignedFixedPoint"},"getIssueableTokensFromVault":{"description":"Get the amount of tokens a vault can issue","params":[{"name":"vault","type":"VaultId"}],"type":"BalanceWrapper"},"getPremiumRedeemVaults":{"description":"Get all vaults below the premium redeem threshold.","params":[],"type":"Vec<(VaultId, BalanceWrapper)>"},"getRequiredCollateralForVault":{"description":"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate","params":[{"name":"vault_id","type":"VaultId"}],"type":"BalanceWrapper"},"getRequiredCollateralForWrapped":{"description":"Get the amount of collateral required to issue an amount of InterBTC","params":[{"name":"amount_btc","type":"BalanceWrapper"},{"name":"currency_id","type":"CurrencyId"}],"type":"BalanceWrapper"},"getVaultCollateral":{"description":"Get the vault's collateral (excluding nomination)","params":[{"name":"vault_id","type":"VaultId"}],"type":"BalanceWrapper"},"getVaultTotalCollateral":{"description":"Get the vault's collateral (including nomination)","params":[{"name":"vault_id","type":"VaultId"}],"type":"BalanceWrapper"},"getVaultsByAccountId":{"description":"Get all vaults that are registered using the given account _id","params":[{"name":"account_id","type":"AccountId"}],"type":"Vec<VaultId>"},"getVaultsWithIssuableTokens":{"description":"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount","params":[],"type":"Vec<(VaultId, BalanceWrapper)>"},"getVaultsWithRedeemableTokens":{"description":"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount","params":[],"type":"Vec<(VaultId, BalanceWrapper)>"}},"dexStable":{"getA":{"description":"Get amplification coefficient of pool","params":[{"name":"pool_id","type":"StablePoolId"},{"name":"at","type":"BlockHash","isHistoric":true,"isOptional":true}],"type":"NumberOrHex"}}},"alias":{"tokens":{"AccountData":"OrmlAccountData","BalanceLock":"OrmlBalanceLock"}},"instances":{"balances":["ksm","kbtc","kint","dot","ibtc","intr"]}}`)})(0,a,t),a})()})})(build);var buildExports=build.exports;const interbtc=getDefaultExportFromCjs(buildExports);function balanceOf$1(n){return new u128(new TypeRegistry,n)}function defaultAccountBalance$1(){return{accountNonce:new BN(1),additional:[],availableBalance:balanceOf$1(0),freeBalance:balanceOf$1(0),lockedBalance:balanceOf$1(0),lockedBreakdown:[],namedReserves:[],reservedBalance:balanceOf$1(0)}}function getBalance$2(n,e){const t=e.registry.chainTokens[0]||formatBalance.getDefaults().unit;return memo(n,a=>combineLatest([e.query.tokens.accounts(a,{Token:t}),e.query.system.account(a)]).pipe(map$2(([o,i])=>({...defaultAccountBalance$1(),accountId:e.registry.createType("AccountId",a),accountNonce:i.nonce,availableBalance:e.registry.createType("Balance",o.free.sub(o.frozen)),freeBalance:o.free,lockedBalance:o.frozen,reservedBalance:o.reserved}))))}const definitions$2={derives:{balances:{account:getBalance$2,all:getBalance$2}},...interbtc},mTypes={ShufflingSeed:{seed:"H256",proof:"H512"},Header:{parentHash:"Hash",number:"Compact<BlockNumber>",stateRoot:"Hash",extrinsicsRoot:"Hash",digest:"Digest",seed:"ShufflingSeed",count:"BlockNumber"},RpcAssetMetadata:{tokenId:"TokenId",decimals:"u32",name:"Vec<u8>",symbol:"Vec<u8>"},TokenId:"u32"},mRpc={xyk:{calculate_buy_price:{description:"Calculates and returns sold_token_amount while providing bought_token_amount and respective reserves",params:[{name:"input_reserve",type:"Balance"},{name:"output_reserve",type:"Balance"},{name:"sell_amount",type:"Balance"}],type:"Balance"},calculate_sell_price:{description:"Calculates and returns bought_token_amount while providing sold_token_amount and respective reserves",params:[{name:"input_reserve",type:"Balance"},{name:"output_reserve",type:"Balance"},{name:"sell_amount",type:"Balance"}],type:"Balance"},get_burn_amount:{description:"Returns amounts of tokens received by burning provided liquidity_token_amount in pool of provided token ids",params:[{name:"first_asset_id",type:"TokenId"},{name:"second_asset_id",type:"TokenId"},{name:"liquidity_asset_amount",type:"Balance"}],type:"(Balance,Balance)"},calculate_sell_price_id:{description:"Same as calculate_sell_price, but providing token_id instead of reserves. Reserves are fetched by function.",params:[{name:"sold_token_id",type:"TokenId"},{name:"bought_token_id",type:"TokenId"},{name:"sell_amount",type:"Balance"}],type:"Balance"},calculate_buy_price_id:{description:"Same as calculate_buy_price, but providing token_id instead of reserves. Reserves are fetched by function.",params:[{name:"sold_token_id",type:"TokenId"},{name:"bought_token_id",type:"TokenId"},{name:"buy_amount",type:"Balance"}],type:"Balance"},calculate_rewards_amount:{description:"Calculate rewards amount of liquidity token id for the user",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},calculate_balanced_sell_amount:{description:"Calculates how much amount x we need to swap from total_amount, so that after y = swap(x), the resulting balance equals (total_amount - x) / y = pool_x / pool_y - the resulting amounts can then be used to `mint_liquidity` with minimal leftover after operation",params:[{name:"total_amount",type:"Balance"},{name:"reserve_amount",type:"Balance"}],type:"Balance"},get_max_instant_unreserve_amount:{description:"Instant unreserve amount",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},get_max_instant_burn_amount:{description:"",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},is_sell_asset_lock_free:{description:"",params:[{name:"path",type:"Vec<TokenId>"},{name:"input_amount",type:"Balance"}],type:"Option<bool>"},is_buy_asset_lock_free:{description:"",params:[{name:"path",type:"Vec<TokenId>"},{name:"input_amount",type:"Balance"}],type:"Option<bool>"},get_tradeable_tokens:{description:"",params:[],type:"Vec<RpcAssetMetadata<TokenId>>"},get_liq_tokens_for_trading:{description:"",params:[],type:"Vec<TokenId>"}},pos:{calculate_native_rewards_amount:{description:"Calculates amount of available native rewards",params:[{name:"account",type:"AccountId"},{name:"liquidity_token",type:"TokenId"}],type:"Balance"},calculate_3rdparty_rewards_amount:{description:"Calculates amount of available 3rdparty rewards",params:[{name:"account",type:"AccountId"},{name:"liquidity_token",type:"TokenId"},{name:"rewards_token",type:"TokenId"}],type:"Balance"},calculate_3rdparty_rewards_all:{description:"Calculates all amount of available 3rdparty rewards",params:[{name:"account",type:"AccountId"}],type:"Vec<(TokenId, TokenId, Balance)>"}}},mangataTypesBundleForPolkadotApps={types:[{minmax:[0,void 0],types:mTypes}],rpc:mRpc};function balanceOf(n){return new u128(new TypeRegistry,n)}function defaultAccountBalance(){return{accountNonce:new BN(1),additional:[],availableBalance:balanceOf(0),freeBalance:balanceOf(0),lockedBalance:balanceOf(0),lockedBreakdown:[],namedReserves:[],reservedBalance:balanceOf(0),vestingLocked:balanceOf(0)}}function getBalance$1(n,e){return memo(n,t=>combineLatest([e.query.tokens.accounts(t,0),e.query.system.account(t)]).pipe(map$2(([a,o])=>({...defaultAccountBalance(),accountId:e.registry.createType("AccountId",t),accountNonce:o.nonce,availableBalance:e.registry.createType("Balance",a.free.sub(a.frozen)),freeBalance:a.free,lockedBalance:a.frozen,reservedBalance:a.reserved}))))}const definitions$1={derives:{balances:{account:getBalance$1,all:getBalance$1}},...mangataTypesBundleForPolkadotApps};function createBlockNumberDerive(n){return(e,t)=>memo(e,()=>n(t).pipe(map$2(unwrapBlockNumber)))}function getAuthorDetailsWithAt(n,e){var i,r,s,c;const t=(i=e.session)!=null&&i.validators?e.session.validators():of(null),{logs:[a]}=n.digest,o=a&&(a.isConsensus&&a.asConsensus[0].isNimbus&&a.asConsensus[1]||a.isPreRuntime&&a.asPreRuntime[0].isNimbus&&a.asPreRuntime[1]);if(o){if((r=e.authorMapping)!=null&&r.mappingWithDeposit)return combineLatest([of(n),t,e.authorMapping.mappingWithDeposit(o).pipe(map$2(d=>d.unwrapOr({account:null}).account))]);if((s=e.parachainStaking)!=null&&s.selectedCandidates&&((c=e.session)!=null&&c.nextKeys)){const d=o.toHex();return combineLatest([of(n),t,e.parachainStaking.selectedCandidates().pipe(mergeMap(p=>combineLatest([of(p),e.session.nextKeys.multi(p).pipe(map$2(h=>h.findIndex(I=>I.unwrapOrDefault().nimbus.toHex()===d)))])),map$2(([p,h])=>h===-1?null:p[h]))])}}return combineLatest([of(n),t,of(null)])}function getAuthorDetails(n,e,t){return n.queryAt(e.parentHash.isEmpty?t||e.hash:e.parentHash).pipe(switchMap(a=>getAuthorDetailsWithAt(e,a)))}const bestNumber=createBlockNumberDerive(n=>n.rpc.chain.subscribeNewHeads()),bestNumberFinalized=createBlockNumberDerive(n=>n.rpc.chain.subscribeFinalizedHeads());function bestNumberLag(n,e){return memo(n,()=>combineLatest([e.derive.chain.bestNumber(),e.derive.chain.bestNumberFinalized()]).pipe(map$2(([t,a])=>e.registry.createType("BlockNumber",t.sub(a)))))}function extractAuthor$1(n,e){const[t]=n.logs.filter(r=>r.isConsensus),[a]=n.logs.filter(r=>r.isPreRuntime),[o]=n.logs.filter(r=>r.isSeal);let i;try{if(a){const[r,s]=a.asPreRuntime;i=r.extractAuthor(s,e)}if(!i&&t){const[r,s]=t.asConsensus;i=r.extractAuthor(s,e)}if(!i&&o){const[r,s]=o.asSeal;i=r.extractAuthor(s,e)}}catch{}return i}function createHeaderExtended$1(n,e,t,a){const o=n.createClass("Header");class i extends o{constructor(c,d,p,h){super(c,d);A(this,"__internal__author");this.__internal__author=h||extractAuthor$1(this.digest,p||[]),this.createdAtHash=d==null?void 0:d.createdAtHash}get author(){return this.__internal__author}}return new i(n,e,t,a)}function mapExtrinsics(n,e){return n.map((t,a)=>{let o,i;const r=e.filter(({phase:s})=>s.isApplyExtrinsic&&s.asApplyExtrinsic.eq(a)).map(({event:s})=>(s.section==="system"&&(s.method==="ExtrinsicSuccess"?i=s.data[0]:s.method==="ExtrinsicFailed"&&(o=s.data[0],i=s.data[1])),s));return{dispatchError:o,dispatchInfo:i,events:r,extrinsic:t}})}function createSignedBlockExtended(n,e,t,a,o){const i=n.createClass("SignedBlock");class r extends i{constructor(d,p,h,I,_){super(d,p);A(this,"__internal__author");A(this,"__internal__events");A(this,"__internal__extrinsics");this.__internal__author=_||extractAuthor$1(this.block.header.digest,I||[]),this.__internal__events=h||[],this.__internal__extrinsics=mapExtrinsics(this.block.extrinsics,this.__internal__events),this.createdAtHash=p==null?void 0:p.createdAtHash}get author(){return this.__internal__author}get events(){return this.__internal__events}get extrinsics(){return this.__internal__extrinsics}}return new r(n,e,t,a,o)}function getBlock(n,e){return memo(n,t=>combineLatest([e.rpc.chain.getBlock(t),e.queryAt(t)]).pipe(switchMap(([a,o])=>combineLatest([of(a),o.system.events(),getAuthorDetails(e,a.block.header,t)])),map$2(([a,o,[,i,r]])=>createSignedBlockExtended(o.registry,a,o,i,r))))}function getBlockByNumber(n,e){return memo(n,t=>e.rpc.chain.getBlockHash(t).pipe(switchMap(a=>e.derive.chain.getBlock(a))))}function getHeader$1(n,e){return memo(n,t=>e.rpc.chain.getHeader(t).pipe(switchMap(a=>getAuthorDetails(e,a,t)),map$2(([a,o,i])=>createHeaderExtended$1((o||a).registry,a,o,i))))}function subscribeFinalizedBlocks(n,e){return memo(n,()=>e.derive.chain.subscribeFinalizedHeads().pipe(switchMap(t=>e.derive.chain.getBlock(t.createdAtHash||t.hash))))}function _getHeaderRange(n,e){return memo(n,(t,a,o=[])=>e.rpc.chain.getHeader(t).pipe(switchMap(i=>i.parentHash.eq(a)?of([i,...o]):e.derive.chain._getHeaderRange(i.parentHash,a,[i,...o]))))}function subscribeFinalizedHeads(n,e){return memo(n,()=>{let t=null;return e.rpc.chain.subscribeFinalizedHeads().pipe(switchMap(a=>{const o=t,i=a.parentHash;return t=a.createdAtHash=a.hash,o===null||i.eq(o)?of(a):e.derive.chain._getHeaderRange(i,o,[a]).pipe(switchMap(r=>from(r)))}))})}function subscribeNewBlocks(n,e){return memo(n,()=>e.derive.chain.subscribeNewHeads().pipe(switchMap(t=>e.derive.chain.getBlock(t.createdAtHash||t.hash))))}function subscribeNewHeads$1(n,e){return memo(n,()=>e.rpc.chain.subscribeNewHeads().pipe(switchMap(t=>getAuthorDetails(e,t)),map$2(([t,a,o])=>(t.createdAtHash=t.hash,createHeaderExtended$1(t.registry,t,a,o)))))}const chain=Object.freeze(Object.defineProperty({__proto__:null,_getHeaderRange,bestNumber,bestNumberFinalized,bestNumberLag,getBlock,getBlockByNumber,getHeader:getHeader$1,subscribeFinalizedBlocks,subscribeFinalizedHeads,subscribeNewBlocks,subscribeNewHeads:subscribeNewHeads$1},Symbol.toStringTag,{value:"Module"}));function extractAuthor(n,e){const t=n.logs.filter(o=>o.isPreRuntime&&o.asPreRuntime[0].toString()==="SUB_");if(!t||t.length===0)return;const{solution:a}=e.registry.createType("SubPreDigest",t[0].asPreRuntime[1]);return a.reward_address}function createHeaderExtended(n,e,t){const a=n.createClass("Header");class o extends a{constructor(s,c,d){super(s,c);A(this,"__internal__author");this.__internal__author=extractAuthor(this.digest,d),this.createdAtHash=c==null?void 0:c.createdAtHash}get author(){return this.__internal__author}}return new o(n,e,t)}function subscribeNewHeads(n,e){return memo(n,()=>combineLatest([e.rpc.chain.subscribeNewHeads()]).pipe(map$2(([t])=>createHeaderExtended(t.registry,t,e))))}function getHeader(n,e){return memo(n,t=>combineLatest([e.rpc.chain.getHeader(t)]).pipe(map$2(([a])=>createHeaderExtended(a.registry,a,e))))}const definitions={derives:{chain:{bestNumber,bestNumberFinalized,bestNumberLag,getBlock,getHeader,subscribeNewBlocks,subscribeNewHeads}},types:[{minmax:[0,void 0],types:{Solution:{public_key:"AccountId32",reward_address:"AccountId32"},SubPreDigest:{slot:"u64",solution:"Solution"}}}]},mapping=[[definitions$5,["Equilibrium","Equilibrium-parachain"]],[definitions$4,["Genshiro","Gens-parachain"]],[definitions$2,["interbtc-parachain","interbtc-standalone","interlay-parachain","kintsugi-parachain","testnet-kintsugi","testnet-interlay"]],[definitions,["subspace"]],[definitions$1,["mangata","mangata-parachain"]]],specMappings=[[definitions$3,["nexus","messier","gargantua"]]];function applyDerives(n){return mapping.forEach(([{derives:e},t])=>{t.forEach(a=>{var o;(o=n.spec)!=null&&o[a]&&(n.spec[a].derives=e)})}),specMappings.forEach(([e,t])=>{t.forEach(a=>{var o;(o=n.spec)!=null&&o[a]&&(n.spec[a]=e)})}),n}const typesBundle$1={chain:{"Cere Mainnet Beta":{types:[{minmax:[266,281],types:{ChainId:"u8",DepositNonce:"u64",ResourceId:"[u8; 32]",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"ProposalStatus",expiry:"BlockNumber"},TokenId:"u256",Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource",AccountInfo:"AccountInfoWithDualRefCount",ValidatorPrefs:{commission:"Compact<Perbill>"}}},{minmax:[282,294],types:{ChainId:"u8",DepositNonce:"u64",ResourceId:"[u8; 32]",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"ProposalStatus",expiry:"BlockNumber"},TokenId:"u256",Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount"}},{minmax:[295,null],types:{}}]},"KILT Mashnet":{runtime:{DidApi:[{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Did:[{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}]},types:[{minmax:[0,8],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",Attestation:{ctypeHash:"Hash",attester:"AccountId",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{rootId:"DelegationNodeId",parent:"Option<DelegationNodeId>",owner:"AccountId",permissions:"Permissions",revoked:"bool"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{signKey:"Hash",boxKey:"Hash",docRef:"Option<Vec<u8>>"},Index:"u64",LookupSource:"AccountId",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{DOT:0,KSM:1,KILT:2}},XcmError:{_enum:{Undefined:0,Unimplemented:1,UnhandledXcmVersion:2,UnhandledXcmMessage:3,UnhandledEffect:4,EscalationOfPrivilege:5,UntrustedReserveLocation:6,UntrustedTeleportLocation:7,DestinationBufferOverflow:8,CannotReachDestination:9,MultiLocationFull:10,FailedToDecode:11,BadOrigin:12,ExceedsMaxMessageSize:13,FailedToTransactAsset:14}},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}}}},{minmax:[9,9],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"DidIdentifierOf",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"DidIdentifierOf",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"DidIdentifierOf",DelegationSignature:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"}}},{minmax:[10,11],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[12,16],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"}}},{minmax:[17,17],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}}},{minmax:[18,18],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}}},{minmax:[19,19],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]}}},{minmax:[20,20],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32"}},{minmax:[21,22],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1"}},{minmax:[23,24],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[25,2699],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[2700,10409],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10410,10719],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10720,10750],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"}}},{minmax:[10800,10899],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[10900,11199],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[11200,null],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"},IdentityCommitmentVersion:"u16",DipProofRequest:{identifier:"AccountId32",version:"IdentityCommitmentVersion",proofKeys:"Vec<Hash>",accounts:"Vec<PalletDidLookupLinkableAccountLinkableAccountId>",shouldIncludeWeb3Name:"bool"},CompleteMerkleProof:{root:"MerkleRoot",proof:"MerkleProof"},MerkleRoot:"Hash",MerkleProof:{blinded:"BlindedLeaves",revealed:"RevealedLeaves"},BlindedLeaves:"Vec<BlindedValue>",BlindedValue:"Bytes",RevealedLeaves:"Vec<RevealedLeaf>",RevealedLeaf:{_enum:{DidKey:"RevealedDidKey",Web3Name:"RevealedWeb3Name",LinkedAccount:"RevealedAccountId"}},RevealedDidKey:{id:"Hash",relationship:"KeyRelationship",details:"DidDidDetailsDidPublicKeyDetails"},KeyRelationship:{_enum:{Encryption:"Null",Verification:"VerificationRelationship"}},VerificationRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},RevealedWeb3Name:{web3Name:"Text",claimedAt:"BlockNumber"},RevealedAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RuntimeApiDipProofError:{_enum:{IdentityProvider:"LinkedDidIdentityProviderError",MerkleProof:"DidMerkleProofError"}},LinkedDidIdentityProviderError:{_enum:["DidNotFound","DidDeleted","Internal"]},DidIdentityProviderError:{_enum:["DidNotFound","Internal"]},DidMerkleProofError:{_enum:["UnsupportedVersion","KeyNotFound","LinkedAccountNotFound","Web3NameNotFound","Internal"]}}}]},"KILT Peregrine":{runtime:{DidApi:[{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Did:[{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"}},version:1}],PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}],DipProvider:[{methods:{generate_proof:{description:"Generate a Merkle proof for the DIP protocol for the specified request parameters.",params:[{name:"request",type:"DipProofRequest"}],type:"Result<CompleteMerkleProof, RuntimeApiDipProofError>"}},version:1}]},types:[{minmax:[0,8],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",Attestation:{ctypeHash:"Hash",attester:"AccountId",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{rootId:"DelegationNodeId",parent:"Option<DelegationNodeId>",owner:"AccountId",permissions:"Permissions",revoked:"bool"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{signKey:"Hash",boxKey:"Hash",docRef:"Option<Vec<u8>>"},Index:"u64",LookupSource:"AccountId",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{DOT:0,KSM:1,KILT:2}},XcmError:{_enum:{Undefined:0,Unimplemented:1,UnhandledXcmVersion:2,UnhandledXcmMessage:3,UnhandledEffect:4,EscalationOfPrivilege:5,UntrustedReserveLocation:6,UntrustedTeleportLocation:7,DestinationBufferOverflow:8,CannotReachDestination:9,MultiLocationFull:10,FailedToDecode:11,BadOrigin:12,ExceedsMaxMessageSize:13,FailedToTransactAsset:14}},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}}}},{minmax:[9,9],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"DidIdentifierOf",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"DidIdentifierOf",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"DidIdentifierOf",DelegationSignature:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"}}},{minmax:[10,11],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[12,16],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"}}},{minmax:[17,17],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}}},{minmax:[18,18],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}}},{minmax:[19,19],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]}}},{minmax:[20,20],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32"}},{minmax:[21,22],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1"}},{minmax:[23,24],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[25,2699],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[2700,10409],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10410,10719],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10720,10750],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"}}},{minmax:[10800,10899],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[10900,11199],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[11200,null],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"},IdentityCommitmentVersion:"u16",DipProofRequest:{identifier:"AccountId32",version:"IdentityCommitmentVersion",proofKeys:"Vec<Hash>",accounts:"Vec<PalletDidLookupLinkableAccountLinkableAccountId>",shouldIncludeWeb3Name:"bool"},CompleteMerkleProof:{root:"MerkleRoot",proof:"MerkleProof"},MerkleRoot:"Hash",MerkleProof:{blinded:"BlindedLeaves",revealed:"RevealedLeaves"},BlindedLeaves:"Vec<BlindedValue>",BlindedValue:"Bytes",RevealedLeaves:"Vec<RevealedLeaf>",RevealedLeaf:{_enum:{DidKey:"RevealedDidKey",Web3Name:"RevealedWeb3Name",LinkedAccount:"RevealedAccountId"}},RevealedDidKey:{id:"Hash",relationship:"KeyRelationship",details:"DidDidDetailsDidPublicKeyDetails"},KeyRelationship:{_enum:{Encryption:"Null",Verification:"VerificationRelationship"}},VerificationRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},RevealedWeb3Name:{web3Name:"Text",claimedAt:"BlockNumber"},RevealedAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RuntimeApiDipProofError:{_enum:{IdentityProvider:"LinkedDidIdentityProviderError",MerkleProof:"DidMerkleProofError"}},LinkedDidIdentityProviderError:{_enum:["DidNotFound","DidDeleted","Internal"]},DidIdentityProviderError:{_enum:["DidNotFound","Internal"]},DidMerkleProofError:{_enum:["UnsupportedVersion","KeyNotFound","LinkedAccountNotFound","Web3NameNotFound","Internal"]}}}]},"KILT Peregrine Develop":{runtime:{DidApi:[{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Did:[{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"}},version:1}],PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}],DipProvider:[{methods:{generate_proof:{description:"Generate a Merkle proof for the DIP protocol for the specified request parameters.",params:[{name:"request",type:"DipProofRequest"}],type:"Result<CompleteMerkleProof, RuntimeApiDipProofError>"}},version:1}]},types:[{minmax:[0,8],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",Attestation:{ctypeHash:"Hash",attester:"AccountId",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{rootId:"DelegationNodeId",parent:"Option<DelegationNodeId>",owner:"AccountId",permissions:"Permissions",revoked:"bool"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{signKey:"Hash",boxKey:"Hash",docRef:"Option<Vec<u8>>"},Index:"u64",LookupSource:"AccountId",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{DOT:0,KSM:1,KILT:2}},XcmError:{_enum:{Undefined:0,Unimplemented:1,UnhandledXcmVersion:2,UnhandledXcmMessage:3,UnhandledEffect:4,EscalationOfPrivilege:5,UntrustedReserveLocation:6,UntrustedTeleportLocation:7,DestinationBufferOverflow:8,CannotReachDestination:9,MultiLocationFull:10,FailedToDecode:11,BadOrigin:12,ExceedsMaxMessageSize:13,FailedToTransactAsset:14}},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}}}},{minmax:[9,9],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"DidIdentifierOf",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"DidIdentifierOf",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"DidIdentifierOf",DelegationSignature:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"}}},{minmax:[10,11],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[12,16],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"}}},{minmax:[17,17],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}}},{minmax:[18,18],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}}},{minmax:[19,19],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]}}},{minmax:[20,20],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32"}},{minmax:[21,22],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1"}},{minmax:[23,24],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[25,2699],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[2700,10409],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10410,10719],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10720,10750],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"}}},{minmax:[10800,10899],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[10900,11199],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[11200,null],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"},IdentityCommitmentVersion:"u16",DipProofRequest:{identifier:"AccountId32",version:"IdentityCommitmentVersion",proofKeys:"Vec<Hash>",accounts:"Vec<PalletDidLookupLinkableAccountLinkableAccountId>",shouldIncludeWeb3Name:"bool"},CompleteMerkleProof:{root:"MerkleRoot",proof:"MerkleProof"},MerkleRoot:"Hash",MerkleProof:{blinded:"BlindedLeaves",revealed:"RevealedLeaves"},BlindedLeaves:"Vec<BlindedValue>",BlindedValue:"Bytes",RevealedLeaves:"Vec<RevealedLeaf>",RevealedLeaf:{_enum:{DidKey:"RevealedDidKey",Web3Name:"RevealedWeb3Name",LinkedAccount:"RevealedAccountId"}},RevealedDidKey:{id:"Hash",relationship:"KeyRelationship",details:"DidDidDetailsDidPublicKeyDetails"},KeyRelationship:{_enum:{Encryption:"Null",Verification:"VerificationRelationship"}},VerificationRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},RevealedWeb3Name:{web3Name:"Text",claimedAt:"BlockNumber"},RevealedAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RuntimeApiDipProofError:{_enum:{IdentityProvider:"LinkedDidIdentityProviderError",MerkleProof:"DidMerkleProofError"}},LinkedDidIdentityProviderError:{_enum:["DidNotFound","DidDeleted","Internal"]},DidIdentityProviderError:{_enum:["DidNotFound","Internal"]},DidMerkleProofError:{_enum:["UnsupportedVersion","KeyNotFound","LinkedAccountNotFound","Web3NameNotFound","Internal"]}}}]},"KILT Peregrine Stagenet":{runtime:{DidApi:[{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Did:[{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"}},version:1}],PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}],DipProvider:[{methods:{generate_proof:{description:"Generate a Merkle proof for the DIP protocol for the specified request parameters.",params:[{name:"request",type:"DipProofRequest"}],type:"Result<CompleteMerkleProof, RuntimeApiDipProofError>"}},version:1}]},types:[{minmax:[0,8],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",Attestation:{ctypeHash:"Hash",attester:"AccountId",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{rootId:"DelegationNodeId",parent:"Option<DelegationNodeId>",owner:"AccountId",permissions:"Permissions",revoked:"bool"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{signKey:"Hash",boxKey:"Hash",docRef:"Option<Vec<u8>>"},Index:"u64",LookupSource:"AccountId",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{DOT:0,KSM:1,KILT:2}},XcmError:{_enum:{Undefined:0,Unimplemented:1,UnhandledXcmVersion:2,UnhandledXcmMessage:3,UnhandledEffect:4,EscalationOfPrivilege:5,UntrustedReserveLocation:6,UntrustedTeleportLocation:7,DestinationBufferOverflow:8,CannotReachDestination:9,MultiLocationFull:10,FailedToDecode:11,BadOrigin:12,ExceedsMaxMessageSize:13,FailedToTransactAsset:14}},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}}}},{minmax:[9,9],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"DidIdentifierOf",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"DidIdentifierOf",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"DidIdentifierOf",DelegationSignature:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"}}},{minmax:[10,11],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[12,16],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"}}},{minmax:[17,17],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}}},{minmax:[18,18],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}}},{minmax:[19,19],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]}}},{minmax:[20,20],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32"}},{minmax:[21,22],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1"}},{minmax:[23,24],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[25,2699],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[2700,10409],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10410,10719],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10720,10750],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"}}},{minmax:[10800,10899],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[10900,11199],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[11200,null],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"},IdentityCommitmentVersion:"u16",DipProofRequest:{identifier:"AccountId32",version:"IdentityCommitmentVersion",proofKeys:"Vec<Hash>",accounts:"Vec<PalletDidLookupLinkableAccountLinkableAccountId>",shouldIncludeWeb3Name:"bool"},CompleteMerkleProof:{root:"MerkleRoot",proof:"MerkleProof"},MerkleRoot:"Hash",MerkleProof:{blinded:"BlindedLeaves",revealed:"RevealedLeaves"},BlindedLeaves:"Vec<BlindedValue>",BlindedValue:"Bytes",RevealedLeaves:"Vec<RevealedLeaf>",RevealedLeaf:{_enum:{DidKey:"RevealedDidKey",Web3Name:"RevealedWeb3Name",LinkedAccount:"RevealedAccountId"}},RevealedDidKey:{id:"Hash",relationship:"KeyRelationship",details:"DidDidDetailsDidPublicKeyDetails"},KeyRelationship:{_enum:{Encryption:"Null",Verification:"VerificationRelationship"}},VerificationRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},RevealedWeb3Name:{web3Name:"Text",claimedAt:"BlockNumber"},RevealedAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RuntimeApiDipProofError:{_enum:{IdentityProvider:"LinkedDidIdentityProviderError",MerkleProof:"DidMerkleProofError"}},LinkedDidIdentityProviderError:{_enum:["DidNotFound","DidDeleted","Internal"]},DidIdentityProviderError:{_enum:["DidNotFound","Internal"]},DidMerkleProofError:{_enum:["UnsupportedVersion","KeyNotFound","LinkedAccountNotFound","Web3NameNotFound","Internal"]}}}]},"KILT Spiritnet":{runtime:{DidApi:[{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Did:[{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"}},version:1}],PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}],DipProvider:[{methods:{generate_proof:{description:"Generate a Merkle proof for the DIP protocol for the specified request parameters.",params:[{name:"request",type:"DipProofRequest"}],type:"Result<CompleteMerkleProof, RuntimeApiDipProofError>"}},version:1}]},types:[{minmax:[0,8],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",Attestation:{ctypeHash:"Hash",attester:"AccountId",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{rootId:"DelegationNodeId",parent:"Option<DelegationNodeId>",owner:"AccountId",permissions:"Permissions",revoked:"bool"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{signKey:"Hash",boxKey:"Hash",docRef:"Option<Vec<u8>>"},Index:"u64",LookupSource:"AccountId",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{DOT:0,KSM:1,KILT:2}},XcmError:{_enum:{Undefined:0,Unimplemented:1,UnhandledXcmVersion:2,UnhandledXcmMessage:3,UnhandledEffect:4,EscalationOfPrivilege:5,UntrustedReserveLocation:6,UntrustedTeleportLocation:7,DestinationBufferOverflow:8,CannotReachDestination:9,MultiLocationFull:10,FailedToDecode:11,BadOrigin:12,ExceedsMaxMessageSize:13,FailedToTransactAsset:14}},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}}}},{minmax:[9,9],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"DidIdentifierOf",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"DidIdentifierOf",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"DidIdentifierOf",DelegationSignature:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"}}},{minmax:[10,11],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[12,16],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"}}},{minmax:[17,17],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}}},{minmax:[18,18],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}}},{minmax:[19,19],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]}}},{minmax:[20,20],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32"}},{minmax:[21,22],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1"}},{minmax:[23,24],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[25,2699],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[2700,10409],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10410,10719],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10720,10750],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"}}},{minmax:[10800,10899],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[10900,11199],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[11200,null],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"},IdentityCommitmentVersion:"u16",DipProofRequest:{identifier:"AccountId32",version:"IdentityCommitmentVersion",proofKeys:"Vec<Hash>",accounts:"Vec<PalletDidLookupLinkableAccountLinkableAccountId>",shouldIncludeWeb3Name:"bool"},CompleteMerkleProof:{root:"MerkleRoot",proof:"MerkleProof"},MerkleRoot:"Hash",MerkleProof:{blinded:"BlindedLeaves",revealed:"RevealedLeaves"},BlindedLeaves:"Vec<BlindedValue>",BlindedValue:"Bytes",RevealedLeaves:"Vec<RevealedLeaf>",RevealedLeaf:{_enum:{DidKey:"RevealedDidKey",Web3Name:"RevealedWeb3Name",LinkedAccount:"RevealedAccountId"}},RevealedDidKey:{id:"Hash",relationship:"KeyRelationship",details:"DidDidDetailsDidPublicKeyDetails"},KeyRelationship:{_enum:{Encryption:"Null",Verification:"VerificationRelationship"}},VerificationRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},RevealedWeb3Name:{web3Name:"Text",claimedAt:"BlockNumber"},RevealedAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RuntimeApiDipProofError:{_enum:{IdentityProvider:"LinkedDidIdentityProviderError",MerkleProof:"DidMerkleProofError"}},LinkedDidIdentityProviderError:{_enum:["DidNotFound","DidDeleted","Internal"]},DidIdentityProviderError:{_enum:["DidNotFound","Internal"]},DidMerkleProofError:{_enum:["UnsupportedVersion","KeyNotFound","LinkedAccountNotFound","Web3NameNotFound","Internal"]}}}]},"KILT Spiritnet Develop":{runtime:{DidApi:[{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Did:[{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:1},{methods:{query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},version:2}],Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"}},version:1}],PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}],DipProvider:[{methods:{generate_proof:{description:"Generate a Merkle proof for the DIP protocol for the specified request parameters.",params:[{name:"request",type:"DipProofRequest"}],type:"Result<CompleteMerkleProof, RuntimeApiDipProofError>"}},version:1}]},types:[{minmax:[0,8],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",Attestation:{ctypeHash:"Hash",attester:"AccountId",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{rootId:"DelegationNodeId",parent:"Option<DelegationNodeId>",owner:"AccountId",permissions:"Permissions",revoked:"bool"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{signKey:"Hash",boxKey:"Hash",docRef:"Option<Vec<u8>>"},Index:"u64",LookupSource:"AccountId",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{DOT:0,KSM:1,KILT:2}},XcmError:{_enum:{Undefined:0,Unimplemented:1,UnhandledXcmVersion:2,UnhandledXcmMessage:3,UnhandledEffect:4,EscalationOfPrivilege:5,UntrustedReserveLocation:6,UntrustedTeleportLocation:7,DestinationBufferOverflow:8,CannotReachDestination:9,MultiLocationFull:10,FailedToDecode:11,BadOrigin:12,ExceedsMaxMessageSize:13,FailedToTransactAsset:14}},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}}}},{minmax:[9,9],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"DidIdentifierOf",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"DidIdentifierOf",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"DidIdentifierOf",DelegationSignature:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"}}},{minmax:[10,11],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[12,16],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"}}},{minmax:[17,17],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}}},{minmax:[18,18],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}}},{minmax:[19,19],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]}}},{minmax:[20,20],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32"}},{minmax:[21,22],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxCollatorCandidates:"u32",MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1"}},{minmax:[23,24],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[25,2699],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},ServiceEndpoints:{contentHash:"Hash",urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["application/json","application/ld+json"]},DidStorageVersion:{_enum:["V1","V2"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}}}},{minmax:[2700,10409],types:{DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10410,10719],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",deposit:"Deposit"},Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"DidSignature",DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",deposit:"Deposit"},KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",blockNumber:"BlockNumber",submitter:"AccountId"},LockedBalance:{block:"BlockNumber",amount:"Balance"},BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},DelegationCounter:{round:"SessionIndex",counter:"u32"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]},DidCreationDetails:{did:"DidIdentifierOf",submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidStorageVersion:{_enum:["V1","V2","V3"]},MaxDelegatorsPerCollator:"u32",MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]},MaxDelegatedAttestations:"u32",MaxClaims:"u32",MaxChildren:"u32",DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",Keys:"SessionKeys1",MinCollators:"u32",MaxTopCandidates:"u32",Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},Deposit:{owner:"AccountId",amount:"Balance"}}},{minmax:[10720,10750],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"}}},{minmax:[10800,10899],types:{DidApiAccountId:"AccountId32",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[10900,11199],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}},{minmax:[11200,null],types:{DidApiAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RawDidLinkedInfo:{identifier:"AccountId32",accounts:"Vec<DidApiAccountId>",w3n:"Option<Text>",serviceEndpoints:"Vec<DidServiceEndpointsDidEndpoint>",details:"DidDidDetails"},PublicCredentialFilter:{_enum:{ctypeHash:"Hash",attester:"AccountId32"}},PublicCredentialError:{_enum:["InvalidSubjectId"]},StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"},IdentityCommitmentVersion:"u16",DipProofRequest:{identifier:"AccountId32",version:"IdentityCommitmentVersion",proofKeys:"Vec<Hash>",accounts:"Vec<PalletDidLookupLinkableAccountLinkableAccountId>",shouldIncludeWeb3Name:"bool"},CompleteMerkleProof:{root:"MerkleRoot",proof:"MerkleProof"},MerkleRoot:"Hash",MerkleProof:{blinded:"BlindedLeaves",revealed:"RevealedLeaves"},BlindedLeaves:"Vec<BlindedValue>",BlindedValue:"Bytes",RevealedLeaves:"Vec<RevealedLeaf>",RevealedLeaf:{_enum:{DidKey:"RevealedDidKey",Web3Name:"RevealedWeb3Name",LinkedAccount:"RevealedAccountId"}},RevealedDidKey:{id:"Hash",relationship:"KeyRelationship",details:"DidDidDetailsDidPublicKeyDetails"},KeyRelationship:{_enum:{Encryption:"Null",Verification:"VerificationRelationship"}},VerificationRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},RevealedWeb3Name:{web3Name:"Text",claimedAt:"BlockNumber"},RevealedAccountId:"PalletDidLookupLinkableAccountLinkableAccountId",RuntimeApiDipProofError:{_enum:{IdentityProvider:"LinkedDidIdentityProviderError",MerkleProof:"DidMerkleProofError"}},LinkedDidIdentityProviderError:{_enum:["DidNotFound","DidDeleted","Internal"]},DidIdentityProviderError:{_enum:["DidNotFound","Internal"]},DidMerkleProofError:{_enum:["UnsupportedVersion","KeyNotFound","LinkedAccountNotFound","Web3NameNotFound","Internal"]}}}]}},spec:{Equilibrium:{instances:{balances:["eq"]}},Genshiro:{instances:{balances:["gens"]}},VLN:{types:[{minmax:[0,null],types:{Asset:{_enum:{Collateral:"Collateral",Fiat:"Fiat",Usdv:null}},Collateral:{_enum:["Usdc"]},Fiat:{_enum:["Cop","Vez"]},CurrencyId:"Asset",OracleKey:"Asset",OracleValue:"FixedU128",CurrencyIdOf:"Asset",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",Share:"Permill"}}]},"VLN-PC":{types:[{minmax:[0,null],types:{Asset:{_enum:{Collateral:"Collateral",Fiat:"Fiat",Network:"NetworkAsset",Usdv:null}},Collateral:{_enum:["Usdc"]},Fiat:{_enum:["Cop","Vez"]},CurrencyId:"NetworkAsset",OracleKey:"Asset",OracleValue:"FixedU128",CurrencyIdOf:"NetworkAsset",Amount:"i64",AmountOf:"Amount",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",Share:"Permill",XCurrencyId:{chain_id:"ChainId",currency_id:"Bytes"},ChainId:{_enum:{RelayChain:null,Parachain:"ParaId"}},NetworkAsset:{_enum:["ACA","AUSD","DOT"]},BaseAsset:"CurrencyId",AssetPair:{base:"BaseAsset",quote:"CurrencyId"},PaymentMethod:{_enum:["BankX","BankY"]},RatePremiumType:"FixedU128",SwapKind:{_enum:{In:"SwapIn",Out:"SwapOut"}},SwapIn:{_enum:{Created:null,Accepted:"Vec<u8>",Rejected:"Vec<u8>",Confirmed:"Vec<u8>",Expired:null,Completed:null}},SwapOut:{_enum:{Created:null,Accepted:null,Rejected:"Vec<u8>",Confirmed:"Vec<u8>",Expired:null,Completed:null}},PairPrice:{pair:"AssetPair",price:"FixedU128"},Swap:{human:"AccountId",kind:"SwapKind",price:"PairPrice",amount:"FixedU128"},RateDetail:{rate:"FixedU128"}}}]},acala:{rpc:{dex:{getSupplyAmount:{description:"Get supply amount",params:[{name:"supplyCurrencyId",type:"CurrencyId"},{name:"targetCurrencyId",type:"CurrencyId"},{name:"targetCurrencyAmount",type:"BalanceRequest"}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"dex_getSupplyAmount",method:"getSupplyAmount",section:"dex"},getTargetAmount:{description:"Get target amount",params:[{name:"supplyCurrencyId",type:"CurrencyId"},{name:"targetCurrencyId",type:"CurrencyId"},{name:"supplyCurrencyAmount",type:"BalanceRequest"}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"dex_getTargetAmount",method:"getTargetAmount",section:"dex"}},evm:{call:{description:"eth call",params:[{name:"data",type:"CallRequest"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Raw",isSubscription:!1,jsonrpc:"evm_call",method:"call",section:"evm"},estimateResources:{description:"eth estimateResources",params:[{name:"from",type:"H160"},{name:"unsignedExtrinsic",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"EstimateResourcesResponse",isSubscription:!1,jsonrpc:"evm_estimateResources",method:"estimateResources",section:"evm"}},stakingPool:{getAvailableUnbonded:{description:"Get Available Unbonded",params:[{name:"account",type:"AccountId"}],type:"BalanceInfo",isSubscription:!1,jsonrpc:"stakingPool_getAvailableUnbonded",method:"getAvailableUnbonded",section:"stakingPool"},getLiquidStakingExchangeRate:{description:"get liquid staking exchange rate",params:[],type:"ExchangeRate",isSubscription:!1,jsonrpc:"stakingPool_getLiquidStakingExchangeRate",method:"getLiquidStakingExchangeRate",section:"stakingPool"}}},instances:{council:["generalCouncil"]},types:[{minmax:[600,699],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC"]},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",Address:"LookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[700,719],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC"]},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress"}},{minmax:[720,722],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,POLKABTC:6,PLM:7,PHA:8,HDT:9,BCG:11,KAR:128,KUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[723,729],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,POLKABTC:6,PLM:7,PHA:8,HDT:9,BCG:11,KAR:128,KUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[730,1007],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:4,KAR:128,KUSD:129,KSM:130,LKSM:131,CASH:140}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1008,1008],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1008,1009],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1010,1013],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[1014,1018],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV1",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1",XcmError:"XcmErrorV1",Response:"ResponseV1"}},{minmax:[1019,null],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress"}}],alias:{stakingPool:{Phase:"StakingPoolPhase"},nomineesElection:{UnlockChunk:"HomaUnlockChunk"},evm:{AccountInfo:"EvmAccountInfo",ContractInfo:"EvmContractInfo"},rewards:{OrmlCurrencyId:"CurrencyId"},oracle:{DataProviderId:"AcalaDataProviderId"},chainBridge:{ChainId:"ChainBridgeChainId"}}},mandala:{rpc:{dex:{getSupplyAmount:{description:"Get supply amount",params:[{name:"supplyCurrencyId",type:"CurrencyId"},{name:"targetCurrencyId",type:"CurrencyId"},{name:"targetCurrencyAmount",type:"BalanceRequest"}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"dex_getSupplyAmount",method:"getSupplyAmount",section:"dex"},getTargetAmount:{description:"Get target amount",params:[{name:"supplyCurrencyId",type:"CurrencyId"},{name:"targetCurrencyId",type:"CurrencyId"},{name:"supplyCurrencyAmount",type:"BalanceRequest"}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"dex_getTargetAmount",method:"getTargetAmount",section:"dex"}},evm:{call:{description:"eth call",params:[{name:"data",type:"CallRequest"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Raw",isSubscription:!1,jsonrpc:"evm_call",method:"call",section:"evm"},estimateResources:{description:"eth estimateResources",params:[{name:"from",type:"H160"},{name:"unsignedExtrinsic",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"EstimateResourcesResponse",isSubscription:!1,jsonrpc:"evm_estimateResources",method:"estimateResources",section:"evm"}},stakingPool:{getAvailableUnbonded:{description:"Get Available Unbonded",params:[{name:"account",type:"AccountId"}],type:"BalanceInfo",isSubscription:!1,jsonrpc:"stakingPool_getAvailableUnbonded",method:"getAvailableUnbonded",section:"stakingPool"},getLiquidStakingExchangeRate:{description:"get liquid staking exchange rate",params:[],type:"ExchangeRate",isSubscription:!1,jsonrpc:"stakingPool_getLiquidStakingExchangeRate",method:"getLiquidStakingExchangeRate",section:"stakingPool"}}},instances:{council:["generalCouncil"]},types:[{minmax:[600,699],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC"]},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",Address:"LookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[700,719],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC"]},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress"}},{minmax:[720,722],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,POLKABTC:6,PLM:7,PHA:8,HDT:9,BCG:11,KAR:128,KUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[723,729],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,POLKABTC:6,PLM:7,PHA:8,HDT:9,BCG:11,KAR:128,KUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[730,1007],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:4,KAR:128,KUSD:129,KSM:130,LKSM:131,CASH:140}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1008,1008],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1008,1009],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1010,1013],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[1014,1018],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV1",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1",XcmError:"XcmErrorV1",Response:"ResponseV1"}},{minmax:[1019,null],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress"}}],alias:{stakingPool:{Phase:"StakingPoolPhase"},nomineesElection:{UnlockChunk:"HomaUnlockChunk"},evm:{AccountInfo:"EvmAccountInfo",ContractInfo:"EvmContractInfo"},rewards:{OrmlCurrencyId:"CurrencyId"},oracle:{DataProviderId:"AcalaDataProviderId"},chainBridge:{ChainId:"ChainBridgeChainId"}}},karura:{rpc:{dex:{getSupplyAmount:{description:"Get supply amount",params:[{name:"supplyCurrencyId",type:"CurrencyId"},{name:"targetCurrencyId",type:"CurrencyId"},{name:"targetCurrencyAmount",type:"BalanceRequest"}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"dex_getSupplyAmount",method:"getSupplyAmount",section:"dex"},getTargetAmount:{description:"Get target amount",params:[{name:"supplyCurrencyId",type:"CurrencyId"},{name:"targetCurrencyId",type:"CurrencyId"},{name:"supplyCurrencyAmount",type:"BalanceRequest"}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"dex_getTargetAmount",method:"getTargetAmount",section:"dex"}},evm:{call:{description:"eth call",params:[{name:"data",type:"CallRequest"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Raw",isSubscription:!1,jsonrpc:"evm_call",method:"call",section:"evm"},estimateResources:{description:"eth estimateResources",params:[{name:"from",type:"H160"},{name:"unsignedExtrinsic",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"EstimateResourcesResponse",isSubscription:!1,jsonrpc:"evm_estimateResources",method:"estimateResources",section:"evm"}},stakingPool:{getAvailableUnbonded:{description:"Get Available Unbonded",params:[{name:"account",type:"AccountId"}],type:"BalanceInfo",isSubscription:!1,jsonrpc:"stakingPool_getAvailableUnbonded",method:"getAvailableUnbonded",section:"stakingPool"},getLiquidStakingExchangeRate:{description:"get liquid staking exchange rate",params:[],type:"ExchangeRate",isSubscription:!1,jsonrpc:"stakingPool_getLiquidStakingExchangeRate",method:"getLiquidStakingExchangeRate",section:"stakingPool"}}},instances:{council:["generalCouncil"]},types:[{minmax:[600,699],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC"]},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",Address:"LookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[700,719],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC"]},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress"}},{minmax:[720,722],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,POLKABTC:6,PLM:7,PHA:8,HDT:9,BCG:11,KAR:128,KUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Homa:"Null"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[723,729],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,POLKABTC:6,PLM:7,PHA:8,HDT:9,BCG:11,KAR:128,KUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[730,1007],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:4,KAR:128,KUSD:129,KSM:130,LKSM:131,CASH:140}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1008,1008],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1008,1009],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"}}},{minmax:[1010,1013],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV0",MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[1014,1018],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Weight:"WeightV1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress",MultiLocation:"MultiLocationV1",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1",XcmError:"XcmErrorV1",Response:"ResponseV1"}},{minmax:[1019,null],types:{Amount:"i128",AmountOf:"Amount",AuctionId:"u32",AuctionIdOf:"AuctionId",TokenSymbol:{_enum:{ACA:0,AUSD:1,DOT:2,LDOT:3,RENBTC:20,CASH:21,KAR:128,KUSD:129,KSM:130,LKSM:131,BNC:168,VSKSM:169,PHA:170,KINT:171,KBTC:172}},DexShare:{_enum:{Token:"TokenSymbol",Erc20:"EvmAddress"}},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(DexShare, DexShare)",ERC20:"EvmAddress",StableAssetPoolToken:"u32",LiquidCrowdloan:"u32",ForeignAsset:"u32"}},CurrencyIdOf:"CurrencyId",AirDropCurrencyId:{_enum:["KAR","ACA"]},AuthoritysOriginId:{_enum:["Root","Treasury","HonzonTreasury","HomaTreasury","TreasuryReserve"]},AcalaDataProviderId:{_enum:["Aggregated","Acala","Band"]},TradingPair:"(CurrencyId,  CurrencyId)",OrmlCurrencyId:"CurrencyId",ChainBridgeChainId:"u8",AcalaAssetMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",minimalBalance:"Balance"},NumberOrHex:"u128",PalletBalanceOf:"Balance",CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},LiquidationStrategy:{_enum:["Auction","Exchange"]},OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},RiskManagementParams:{maximumTotalDebitValue:"Balance",interestRatePerSec:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},CandidateInfoOf:"CandidateInfo",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},BalanceWrapper:{amount:"Balance"},BalanceRequest:{amount:"Balance"},TradingPairStatus:{_enum:{Disabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},BlockLimits:{maxGasLimit:"u64",maxStorageLimit:"u32"},Erc20Info:{address:"EvmAddress",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},EstimateResourcesResponse:{gas:"u256",storage:"i32",weightFee:"u256"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>"},CodeInfo:{codeSize:"u32",refCount:"u32"},EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},EvmAddress:"H160",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},CallInfo:{exit_reason:"ExitReason",value:"Vec<u8>",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},CreateInfo:{exit_reason:"ExitReason",value:"H160",used_gas:"U256",used_storage:"i32",logs:"Vec<EthereumLog>"},EthereumLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text",InvalidCode:"u8"}},ExitRevert:{_enum:["Reverted"]},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},AcalaStakingLedge:{bonded:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},AcalaUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},RelaychainAccountId:"AccountId",SlashInfo:{validator:"RelaychainAccountId",relaychainTokenAmount:"Balance"},ValidatorBacking:{totalInsurance:"Balance",isFrozen:"bool"},Guarantee:{total:"Balance",bonded:"Balance",unbonding:"Option<(Balance, BlockNumber)>"},PoolId:{_enum:{Loans:"CurrencyId",Dex:"CurrencyId"}},PoolIdV0:{_enum:{LoansIncentive:"CurrencyId",DexIncentive:"CurrencyId",HomaIncentive:"Null",DexSaving:"CurrencyId",HomaValidatorAllowance:"AccountId"}},Position:{collateral:"Balance",debit:"Balance"},CID:"Vec<u8>",Attributes:"BTreeMap<Vec<u8>, Vec<u8>>",TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2,Mintable:4,ClassPropertiesMutable:8}},ClassData:{deposit:"Balance",properties:"Properties",attributes:"Attributes"},TokenData:{deposit:"Balance",attributes:"Attributes"},TokenId:"u64",TokenIdOf:"TokenId",NFTClassId:"u32",ClassIdOf:"ClassId",NFTBalance:"u128",NFTBalanceOf:"NFTBalance",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},NomineeId:"AccountId",HomaUnlockChunk:{value:"Balance",era:"EraIndex"},BondingLedger:{total:"Balance",active:"Balance",unlocking:"Vec<HomaUnlockChunk>"},OracleKey:"CurrencyId",OracleValue:"Price",AsOriginId:"AuthoritysOriginId",ProxyType:{_enum:["Any","CancelProxy","Governance","Auction","Swap","Loan"]},AtLeast64BitUnsigned:"u128",StableAssetPoolId:"u32",RelayChainBlockNumberOf:"RelayChainBlockNumber",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},StakingPoolPhase:{_enum:["Started","RelaychainUpdated","LedgerUpdated","Finished"]},Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},BalanceInfo:{amount:"Balance"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",ExchangeRate:"FixedU128",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",PublicKey:"[u8; 20]",DestAddress:"Vec<u8>",PoolTokenIndex:"u32",AssetId:"CurrencyId",Keys:"SessionKeys1",Address:"GenericMultiAddress",LookupSource:"GenericMultiAddress"}}],alias:{stakingPool:{Phase:"StakingPoolPhase"},nomineesElection:{UnlockChunk:"HomaUnlockChunk"},evm:{AccountInfo:"EvmAccountInfo",ContractInfo:"EvmContractInfo"},rewards:{OrmlCurrencyId:"CurrencyId"},oracle:{DataProviderId:"AcalaDataProviderId"},chainBridge:{ChainId:"ChainBridgeChainId"}}},ajuna:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress"}}]},altair:{types:[{minmax:[0,null],types:{ParachainAccountIdOf:"AccountId",Proof:{leafHash:"Hash",sortedHashes:"Vec<Hash>"},ProxyType:{_enum:["Any","NonTransfer","Governance","_Staking","NonProxy"]},RelayChainAccountId:"AccountId",RootHashOf:"Hash"}}]},amplitude:{rpc:{issue:{getIssueRequests:{description:"Get all issue requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getIssueRequests",method:"getIssueRequests",section:"issue"},getVaultIssueRequests:{description:"Get all issue requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getVaultIssueRequests",method:"getVaultIssueRequests",section:"issue"}},redeem:{getRedeemRequests:{description:"Get all redeem requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getRedeemRequests",method:"getRedeemRequests",section:"redeem"},getVaultRedeemRequests:{description:"Get all redeem requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getVaultRedeemRequests",method:"getVaultRedeemRequests",section:"redeem"}},replace:{getOldVaultReplaceRequests:{description:"Get all replace requests from a particular vault",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getOldVaultReplaceRequests",method:"getOldVaultReplaceRequests",section:"replace"},getNewVaultReplaceRequests:{description:"Get all replace requests to a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getNewVaultReplaceRequests",method:"getNewVaultReplaceRequests",section:"replace"}},oracle:{currencyToUsd:{description:"Get the USD value of a currency",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_currencyToUsd",method:"currencyToUsd",section:"oracle"},usdToCurrency:{description:"Get the currency value of a USD amount",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_usdToCurrency",method:"usdToCurrency",section:"oracle"},getExchangeRate:{description:"Get the exchange rate of the given currencyId to USD",params:[{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"UnsignedFixedPoint",isSubscription:!1,jsonrpc:"oracle_getExchangeRate",method:"getExchangeRate",section:"oracle"}},vaultRegistry:{getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultCollateral",method:"getVaultCollateral",section:"vaultRegistry"},getVaultsByAccountId:{description:"Get all the vaultIds registered by a vault's accountId",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<SpacewalkPrimitivesVaultId>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsByAccountId",method:"getVaultsByAccountId",section:"vaultRegistry"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultTotalCollateral",method:"getVaultTotalCollateral",section:"vaultRegistry"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getPremiumRedeemVaults",method:"getPremiumRedeemVaults",section:"vaultRegistry"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithIssuableTokens",method:"getVaultsWithIssuableTokens",section:"vaultRegistry"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithRedeemableTokens",method:"getVaultsWithRedeemableTokens",section:"vaultRegistry"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getIssueableTokensFromVault",method:"getIssueableTokensFromVault",section:"vaultRegistry"},getCollateralizationFromVault:{description:"Get the collateralization rate of a vault",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVault",method:"getCollateralizationFromVault",section:"vaultRegistry"},getCollateralizationFromVaultAndCollateral:{description:"Get the collateralization rate of a vault and collateral",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVaultAndCollateral",method:"getCollateralizationFromVaultAndCollateral",section:"vaultRegistry"},getRequiredCollateralForWrapped:{description:"Get the minimum amount of collateral required for the given amount of token with the current threshold and exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForWrapped",method:"getRequiredCollateralForWrapped",section:"vaultRegistry"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForVault",method:"getRequiredCollateralForVault",section:"vaultRegistry"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{OracleKey:{},CurrencyId:{},NumberOrHex:"u128",BalanceWrapper:{amount:"String"},UnsignedFixedPoint:"u128",SpacewalkPrimitivesCurrencyId:{_enum:{Native:"Null",XCM:"u8",Stellar:"SpacewalkPrimitivesAsset",ZenlinkLPToken:"(u8,u8,u8,u8)"}},SpacewalkPrimitivesAsset:{_enum:{StellarNative:"Null",AlphaNum4:{code:"[u8;4]",issuer:"[u8;32]"},AlphaNum12:{code:"[u8;12]",issuer:"[u8;32]"}}},SpacewalkPrimitivesVaultId:{accountId:"AccountId32",currencies:"SpacewalkPrimitivesVaultCurrencyPair"},SpacewalkPrimitivesVaultCurrencyPair:{collateral:"SpacewalkPrimitivesCurrencyId",wrapped:"SpacewalkPrimitivesCurrencyId"},PoolId:"u32"}}],alias:{}},apron:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},"ares-gladios":{types:[{minmax:[0,null],types:{Address:"MultiAddress",AskPeriodNum:"u64",AskPointNum:"u32",AuthorityAres:"AccountId",AccountParticipateEstimates:{account:"AccountId",end:"BlockNumber",estimates:"Option<u64>",range_index:"Option<u8>",bsc_address:"Option<Bytes>",multiplier:"MultiplierOption",reward:"u128"},AresPriceData:{price:"u64",account_id:"AccountId",create_bn:"BlockNumber",fraction_len:"FractionLength",raw_number:"JsonNumberValue",timestamp:"u64"},BalanceOf:"Balance",ChooseWinnersPayload:{block_number:"BlockNumber",winners:"Vec<AccountParticipateEstimates>",public:"AccountId",estimates_id:"u64",symbol:"Bytes",price:"(u64, FractionLength)"},EstimatesState:{_enum:["InActive","Active","WaitingPayout","Completed"]},EstimatesType:{_enum:["DEVIATION","RANGE"]},FractionLength:"u32",HttpError:{_enum:{IoErr:"Bytes",TimeOut:"Bytes",StatusErr:"(Bytes,u16)",ParseErr:"Bytes"}},HttpErrTracePayload:{trace_data:"HttpErrTraceData<BlockNumber, AuthorityId>",auth:"AuthorityId",public:"MultiSigner"},HttpErrTraceData:{block_number:"BlockNumber",err_auth:"AuthorityId",err_status:"HttpError",tip:"Bytes"},JsonNumberValue:{integer:"u64",fraction:"u64",fraction_length:"u32",exponent:"u32"},Keys:"SessionKeys3",LookupSource:"MultiAddress",MultiplierOption:{_enum:["Base1","Base2","Base5"]},OcwControlData:{need_verifier_check:"bool",open_free_price_reporter:"bool",open_paid_price_reporter:"bool"},OffchainSignature:"MultiSignature",PaidValue:{create_bn:"BlockNumber",amount:"BalanceOf",is_income:"bool"},PurchasedId:"Bytes",PriceKey:"Vec<u8>",PriceToken:"Bytes",PreCheckPayload:{block_number:"BlockNumber",pre_check_stash:"AccountId",pre_check_auth:"AuthorityId",auth:"AuthorityId",public:"MultiSigner"},PreCheckResultPayload:{block_number:"BlockNumber",pre_check_list:"Vec<PreCheckStruct>",pre_check_stash:"AccountId",pre_check_auth:"AuthorityId",public:"MultiSigner"},PreCheckCompareLog:{chain_avg_price_list:"BTreeMap<Bytes, (u64, FractionLength)>",validator_up_price_list:"BTreeMap<Bytes, (u64, FractionLength)>",raw_precheck_list:"Vec<PreCheckStruct>"},PreCheckStruct:{price_key:"Vec<u8>",number_val:"JsonNumberValue",max_offset:"Percent",timestamp:"u64"},PricePayloadSubPrice:"(PriceKey, u64, FractionLength, JsonNumberValue, u64)",PricePayloadSubJumpBlock:"(PriceKey, RequestInterval)",PricePayload:{block_number:"BlockNumber",price:"Vec<PricePayloadSubPrice>",jump_block:"Vec<PricePayloadSubJumpBlock>",auth:"AuthorityId",public:"MultiSigner"},PreCheckStatus:{_enum:["Review","Prohibit","Pass"]},PurchasedRequestData:{account_id:"AccountId",offer:"BalanceOf",create_bn:"BlockNumber",submit_threshold:"u8",max_duration:"u64",request_keys:"Vec<Vec<u8>>"},PurchasedPricePayload:{block_number:"BlockNumber",purchase_id:"Vec<u8>",price:"Vec<PricePayloadSubPrice>",auth:"AuthorityId",public:"MultiSigner"},PurchasedAvgPriceData:{create_bn:"u64",reached_type:"u8",price_data:"(u64, FractionLength)"},PurchasedDefaultData:{submit_threshold:"u8",max_duration:"u64",avg_keep_duration:"u64"},PurchasedForceCleanPayload:{BlockNumber:"BlockNumber",purchase_id_list:"Vec<Vec<u8>>",auth:"AuthorityId",public:"MultiSigner"},PurchaseId:"Vec<u8>",Releases:{_enum:["V1_0_0_Ancestral","V1_0_1_HttpErrUpgrade","V1_1_0_HttpErrUpgrade","V1_2_0"]},RequestInterval:"u8",StatusErr:"(u16)",SymbolEstimatesConfig:{symbol:"Bytes",estimates_type:"EstimatesType",id:"u64",ticket_price:"Balance",symbol_completed_price:"u64",symbol_fraction:"FractionLength",start:"BlockNumber",end:"BlockNumber",distribute:"BlockNumber",deviation:"Option<Permill>",range:"Option<Vec<u64>>",total_reward:"Balance",state:"EstimatesState"}}}]},"ares-mars":{types:[{minmax:[0,null],types:{Address:"MultiAddress",AskPeriodNum:"u64",AskPointNum:"u32",AuthorityAres:"AccountId",AccountParticipateEstimates:{account:"AccountId",end:"BlockNumber",estimates:"Option<u64>",range_index:"Option<u8>",eth_address:"Option<Bytes>",multiplier:"MultiplierOption",reward:"u128"},AresPriceData:{price:"u64",account_id:"AccountId",create_bn:"BlockNumber",fraction_len:"FractionLength",raw_number:"JsonNumberValue",timestamp:"u64"},BalanceOf:"Balance",ChooseWinnersPayload:{block_number:"BlockNumber",winners:"Vec<AccountParticipateEstimates>",public:"AccountId",estimates_config:"Bytes",symbol:"Bytes",price:"(u64, FractionLength)"},EstimatesState:{_enum:["InActive","Active","WaitingPayout","Completed"]},EstimatesType:{_enum:["DEVIATION","RANGE"]},FractionLength:"u32",HttpError:{_enum:{IoErr:"Bytes",TimeOut:"Bytes",StatusErr:"(Bytes,u16)",ParseErr:"Bytes"}},HttpErrTracePayload:{trace_data:"HttpErrTraceData<BlockNumber, AuthorityId>",auth:"AuthorityId",public:"MultiSigner"},HttpErrTraceData:{block_number:"BlockNumber",err_auth:"AuthorityId",err_status:"HttpError",tip:"Bytes"},JsonNumberValue:{integer:"u64",fraction:"u64",fraction_length:"u32",exponent:"u32"},Keys:"SessionKeys4",LookupSource:"MultiAddress",MultiplierOption:{_enum:["Base1","Base2","Base5"]},OcwControlData:{need_verifier_check:"bool",open_free_price_reporter:"bool",open_paid_price_reporter:"bool"},OffchainSignature:"MultiSignature",PaidValue:{create_bn:"BlockNumber",amount:"BalanceOf",is_income:"bool"},PurchasedId:"Bytes",PriceKey:"Vec<u8>",PriceToken:"Bytes",PreCheckPayload:{block_number:"BlockNumber",pre_check_stash:"AccountId",pre_check_auth:"AuthorityId",auth:"AuthorityId",public:"MultiSigner"},PreCheckResultPayload:{block_number:"BlockNumber",pre_check_list:"Vec<PreCheckStruct>",pre_check_stash:"AccountId",pre_check_auth:"AuthorityId",public:"MultiSigner"},PreCheckCompareLog:{chain_avg_price_list:"BTreeMap<Bytes, (u64, FractionLength)>",validator_up_price_list:"BTreeMap<Bytes, (u64, FractionLength)>",raw_precheck_list:"Vec<PreCheckStruct>"},PreCheckStruct:{price_key:"Vec<u8>",number_val:"JsonNumberValue",max_offset:"Percent",timestamp:"u64"},PricePayloadSubPrice:"(PriceKey, u64, FractionLength, JsonNumberValue, u64)",PricePayloadSubJumpBlock:"(PriceKey, RequestInterval)",PricePayload:{block_number:"BlockNumber",price:"Vec<PricePayloadSubPrice>",jump_block:"Vec<PricePayloadSubJumpBlock>",auth:"AuthorityId",public:"MultiSigner"},PreCheckStatus:{_enum:["Review","Prohibit","Pass"]},PurchasedRequestData:{account_id:"AccountId",offer:"BalanceOf",create_bn:"BlockNumber",submit_threshold:"u8",max_duration:"u64",request_keys:"Vec<Vec<u8>>"},PurchasedPricePayload:{block_number:"BlockNumber",purchase_id:"Vec<u8>",price:"Vec<PricePayloadSubPrice>",auth:"AuthorityId",public:"MultiSigner"},PurchasedAvgPriceData:{create_bn:"u64",reached_type:"u8",price_data:"(u64, FractionLength)"},PurchasedDefaultData:{submit_threshold:"u8",max_duration:"u64",avg_keep_duration:"u64"},PurchasedForceCleanPayload:{BlockNumber:"BlockNumber",purchase_id_list:"Vec<Vec<u8>>",auth:"AuthorityId",public:"MultiSigner"},PurchaseId:"Vec<u8>",Releases:{_enum:["V1_0_0_Ancestral","V1_0_1_HttpErrUpgrade","V1_1_0_HttpErrUpgrade","V1_2_0"]},RequestInterval:"u8",StatusErr:"(u16)",SymbolEstimatesConfig:{symbol:"Bytes",estimates_type:"EstimatesType",id:"u64",ticket_price:"Balance",symbol_completed_price:"u64",symbol_fraction:"FractionLength",start:"BlockNumber",end:"BlockNumber",distribute:"BlockNumber",deviation:"Option<Permill>",range:"Option<Vec<u64>>",total_reward:"Balance",state:"EstimatesState"}}}]},"ares-odyssey":{types:[{minmax:[0,null],types:{Address:"MultiAddress",AskPeriodNum:"u64",AskPointNum:"u32",AuthorityAres:"AccountId",AccountParticipateEstimates:{account:"AccountId",end:"BlockNumber",estimates:"Option<u64>",range_index:"Option<u8>",eth_address:"Option<Bytes>",multiplier:"MultiplierOption",reward:"u128"},AresPriceData:{price:"u64",account_id:"AccountId",create_bn:"BlockNumber",fraction_len:"FractionLength",raw_number:"JsonNumberValue",timestamp:"u64"},BalanceOf:"Balance",ChooseWinnersPayload:{block_number:"BlockNumber",winners:"Vec<AccountParticipateEstimates>",public:"AccountId",estimates_config:"Bytes",symbol:"Bytes",price:"(u64, FractionLength)"},EstimatesState:{_enum:["InActive","Active","WaitingPayout","Completed"]},EstimatesType:{_enum:["DEVIATION","RANGE"]},FractionLength:"u32",HttpError:{_enum:{IoErr:"Bytes",TimeOut:"Bytes",StatusErr:"(Bytes,u16)",ParseErr:"Bytes"}},HttpErrTracePayload:{trace_data:"HttpErrTraceData<BlockNumber, AuthorityId>",auth:"AuthorityId",public:"MultiSigner"},HttpErrTraceData:{block_number:"BlockNumber",err_auth:"AuthorityId",err_status:"HttpError",tip:"Bytes"},JsonNumberValue:{integer:"u64",fraction:"u64",fraction_length:"u32",exponent:"u32"},Keys:"SessionKeys4",LookupSource:"MultiAddress",MultiplierOption:{_enum:["Base1","Base2","Base5"]},OcwControlData:{need_verifier_check:"bool",open_free_price_reporter:"bool",open_paid_price_reporter:"bool"},OffchainSignature:"MultiSignature",PaidValue:{create_bn:"BlockNumber",amount:"BalanceOf",is_income:"bool"},PurchasedId:"Bytes",PriceKey:"Vec<u8>",PriceToken:"Bytes",PreCheckPayload:{block_number:"BlockNumber",pre_check_stash:"AccountId",pre_check_auth:"AuthorityId",auth:"AuthorityId",public:"MultiSigner"},PreCheckResultPayload:{block_number:"BlockNumber",pre_check_list:"Vec<PreCheckStruct>",pre_check_stash:"AccountId",pre_check_auth:"AuthorityId",public:"MultiSigner"},PreCheckCompareLog:{chain_avg_price_list:"BTreeMap<Bytes, (u64, FractionLength)>",validator_up_price_list:"BTreeMap<Bytes, (u64, FractionLength)>",raw_precheck_list:"Vec<PreCheckStruct>"},PreCheckStruct:{price_key:"Vec<u8>",number_val:"JsonNumberValue",max_offset:"Percent",timestamp:"u64"},PricePayloadSubPrice:"(PriceKey, u64, FractionLength, JsonNumberValue, u64)",PricePayloadSubJumpBlock:"(PriceKey, RequestInterval)",PricePayload:{block_number:"BlockNumber",price:"Vec<PricePayloadSubPrice>",jump_block:"Vec<PricePayloadSubJumpBlock>",auth:"AuthorityId",public:"MultiSigner"},PreCheckStatus:{_enum:["Review","Prohibit","Pass"]},PurchasedRequestData:{account_id:"AccountId",offer:"BalanceOf",create_bn:"BlockNumber",submit_threshold:"u8",max_duration:"u64",request_keys:"Vec<Vec<u8>>"},PurchasedPricePayload:{block_number:"BlockNumber",purchase_id:"Vec<u8>",price:"Vec<PricePayloadSubPrice>",auth:"AuthorityId",public:"MultiSigner"},PurchasedAvgPriceData:{create_bn:"u64",reached_type:"u8",price_data:"(u64, FractionLength)"},PurchasedDefaultData:{submit_threshold:"u8",max_duration:"u64",avg_keep_duration:"u64"},PurchasedForceCleanPayload:{BlockNumber:"BlockNumber",purchase_id_list:"Vec<Vec<u8>>",auth:"AuthorityId",public:"MultiSigner"},PurchaseId:"Vec<u8>",Releases:{_enum:["V1_0_0_Ancestral","V1_0_1_HttpErrUpgrade","V1_1_0_HttpErrUpgrade","V1_2_0"]},RequestInterval:"u8",StatusErr:"(u16)",SymbolEstimatesConfig:{symbol:"Bytes",estimates_type:"EstimatesType",id:"u64",ticket_price:"Balance",symbol_completed_price:"u64",symbol_fraction:"FractionLength",start:"BlockNumber",end:"BlockNumber",distribute:"BlockNumber",deviation:"Option<Permill>",range:"Option<Vec<u64>>",total_reward:"Balance",state:"EstimatesState"}}}]},asgard:{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}},flexibleFee:{getFeeTokenAndAmount:{description:"Get charging token type and amount in terms of flexible transaction fee.",params:[{name:"who",type:"AccountId"},{name:"extrinsic",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(CurrencyId, U256)",isSubscription:!1,jsonrpc:"flexibleFee_getFeeTokenAndAmount",method:"getFeeTokenAndAmount",section:"flexibleFee"}},salp:{getContribution:{description:"salp getContribution",params:[{name:"index",type:"ParaId"},{name:"who",type:"AccountIdOf"}],type:"(Balance, ContributionStatus)",isSubscription:!1,jsonrpc:"salp_getContribution",method:"getContribution",section:"salp"},getLiteContribution:{description:"salp getLiteContribution",params:[{name:"index",type:"ParaId"},{name:"who",type:"AccountIdOf"}],type:"(Balance, ContributionStatus)",isSubscription:!1,jsonrpc:"salp_getLiteContribution",method:"getLiteContribution",section:"salp"}},vtokenMint:{getVtokenMintRate:{description:"Get current vtoken mint rate.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"vtokenMint_getVtokenMintRate",method:"getVtokenMintRate",section:"vtokenMint"}},zenlinkProtocol:{getAllAssets:{description:"zenlinkProtocol getAllAssets",params:[{name:"at",type:"Hash",isOptional:!0}],type:"Vec<ZenlinkAssetId>",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAllAssets",method:"getAllAssets",section:"zenlinkProtocol"},getBalance:{description:"zenlinkProtocol getBalance",params:[{name:"asset_id",type:"ZenlinkAssetId"},{name:"account",type:"AccountId"},{name:"at",type:"Hash",isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"zenlinkProtocol_getBalance",method:"getBalance",section:"zenlinkProtocol"},getSovereignsInfo:{description:"Get the ownership of a certain currency for each parachain.",params:[{name:"asset_id",type:"ZenlinkAssetId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(u32, AccountId, String)",isSubscription:!1,jsonrpc:"zenlinkProtocol_getSovereignsInfo",method:"getSovereignsInfo",section:"zenlinkProtocol"},getPairByAssetId:{description:"Get the detailed information of a particular exchange pair.",params:[{name:"asset_0",type:"ZenlinkAssetId"},{name:"asset_1",type:"ZenlinkAssetId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"PairInfo",isSubscription:!1,jsonrpc:"zenlinkProtocol_getPairByAssetId",method:"getPairByAssetId",section:"zenlinkProtocol"},getAmountInPrice:{description:"Get the output token amount for an exact input token amount.",params:[{name:"supply",type:"ZenlinkAssetBalance"},{name:"path",type:"Vec<ZenlinkAssetId>"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAmountInPrice",method:"getAmountInPrice",section:"zenlinkProtocol"},getAmountOutPrice:{description:"Get the input token amount for an exact output token amount.",params:[{name:"supply",type:"ZenlinkAssetBalance"},{name:"path",type:"Vec<ZenlinkAssetId>"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAmountOutPrice",method:"getAmountOutPrice",section:"zenlinkProtocol"},getEstimateLptoken:{description:"Get the estimated number of LP token acquired given the desired and minimum amount for both in-token and out-token.",params:[{name:"asset_0",type:"ZenlinkAssetId"},{name:"asset_1",type:"ZenlinkAssetId"},{name:"amount_0_desired",type:"ZenlinkAssetBalance"},{name:"amount_1_desired",type:"ZenlinkAssetBalance"},{name:"amount_0_min",type:"ZenlinkAssetBalance"},{name:"amount_1_min",type:"ZenlinkAssetBalance"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getEstimateLptoken",method:"getEstimateLptoken",section:"zenlinkProtocol"}},liquidityMining:{getRewards:{description:"Get the rewards users deserve",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"pallet_instance",type:"U32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"liquidityMining_getRewards",method:"getRewards",section:"liquidityMining"}},stablePool:{getSwapOutputAmount:{description:"stablePool getSwapOutputAmount",params:[{name:"pool_id",type:"U32"},{name:"currency_id_in",type:"U32"},{name:"currency_id_out",type:"U32"},{name:"amount",type:"Balance"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"stablePool_getSwapOutputAmount",method:"getSwapOutputAmount",section:"stablePool"}}},types:[{minmax:[0,901],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{pool_id:"PoolId",keeper:"AccountId",investor:"Option<AccountId>",trading_pair:"(CurrencyId, CurrencyId)",duration:"BlockNumber",type:"PoolType",min_deposit_to_start:"Balance",after_block_to_start:"BlockNumber",deposit:"Balance",rewards:"BTreeMap<CurrencyId, RewardData>",update_b:"BlockNumber",state:"PoolState",block_startup:"Option<BlockNumber>",redeem_limit_time:"BlockNumber",unlock_limit_nums:"u32",pending_unlock_nums:"u32"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",BiddingOrderId:"u64",EraId:"u32",BiddingOrderUnit:{bidder_id:"AccountId",token_id:"AssetId",block_num:"BlockNumber",votes:"Balance",annual_roi:"Permill",validator:"AccountId"},BiddingOrderUnitOf:"BiddingOrderUnit",VersionId:"u32",PermissionName:"u64",PermissionLevel:{actor:"AccountName",permission:"PermissionName"},Action:{account:"AccountName",name:"ActionName",authorization:"Vec<PermissionLevel>",data:"Vec<u8>"},AccountName:"u64",Checksum256:"([u8;32])",ActionName:"u64",FlatMap:{map:"Vec<(ActionName, u64)>"},UnsignedInt:"u32",ActionReceipt:{receiver:"AccountName",act_digest:"Checksum256",global_sequence:"u64",recv_sequence:"u64",auth_sequence:"FlatMap<AccountName, u64>",code_sequence:"UnsignedInt",abi_sequence:"UnsignedInt"},BlockchainType:{_enum:["BIFROST","EOS","IOST"]},Precision:"u32",BridgeAssetSymbol:{blockchain:"BlockchainType",symbol:"Vec<u8>",precision:"Precision"},PublicKey:{type_:"UnsignedInt",data:"[u8;33]"},ProducerKey:{producer_name:"AccountName",block_signing_key:"PublicKey"},ProducerSchedule:{version:"u32",producers:"Vec<ProducerKey>"},bridgeEosSignature:{type_:"UnsignedInt",data:"[u8;65]"},BlockTimestamp:"(u32)",Extension:"(u16, Vec<u8>)",BlockHeader:{timestamp:"BlockTimestamp",producer:"AccountName",confirmed:"u16",previous:"Checksum256",transaction_mroot:"Checksum256",action_mroot:"Checksum256",schedule_version:"u32",new_producers:"Option<ProducerSchedule>",header_extensions:"Vec<Extension>"},SignedBlockHeader:{block_header:"BlockHeader",producer_signature:"bridgeEosSignature"},Checksum256Array:"Vec<Checksum256>",IncrementalMerkle:{_node_count:"u64",_active_nodes:"Checksum256Array"},TxSig:{signature:"Vec<u8>",author:"AccountId"},MultiSig:{signatures:"Vec<TxSig>",threshold:"u8"},MultiSigTx:{chain_id:"Vec<u8>",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"Action",from:"AccountId",asset_id:"AssetId"},Sent:{tx_id:"Vec<u8>",from:"AccountId",asset_id:"AssetId"},Succeeded:{tx_id:"Vec<u8>"},Failed:{tx_id:"Vec<u8>",reason:"Vec<u8>"},TxOut:{_enum:{Initialized:"MultiSigTx",Created:"MultiSigTx",SignComplete:"MultiSigTx",Sent:"Sent",Succeeded:"Succeeded",Failed:"Failed"}},TransactionStatus:{_enum:["Initialized","Created","SignComplete","Sent","Succeeded","Failed"]},ProducerAuthoritySchedule:{version:"u32",producers:"Vec<ProducerAuthority>"},ProducerAuthority:{producer_name:"ActionName",authority:"BlockSigningAuthority"},BlockSigningAuthority:"(UnsignedInt, BlockSigningAuthorityV0)",BlockSigningAuthorityV0:{threshold:"u32",keyWeights:"Vec<KeyWeight>"},KeyWeight:{key:"PublicKey",weight:"u16"},BancorPool:{currency_id:"CurrencyId",token_pool:"Balance",vstoken_pool:"Balance",token_ceiling:"Balance",token_base_supply:"Balance",vstoken_base_supply:"Balance"},IostAction:{contract:"Vec<u8>",action_name:"Vec<u8>",data:"Vec<u8>"},IostMultiSigTx:{chain_id:"i32",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"IostAction",from:"AccountId",asset_id:"AssetId"},Processing:{tx_id:"Vec<u8>",multi_sig_tx:"IostMultiSigTx"},IostTxOut:{_enum:{Initial:"IostMultiSigTx",Generated:"IostMultiSigTx",Signed:"IostMultiSigTx",Processing:"Processing",Success:"Vec<u8>",Fail:"Failed"}},PalletBalanceOf:"Balance",ExtraFeeName:{_enum:["SalpContribute","NoExtraFee"]},IsExtended:"bool",SystemPalletId:"PalletId",ledger:{Substrate:"SubstrateLedger"},SubstrateLedger:{account:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>"},UnlockChunk:{value:"Balance",unlock_time:"TimeUnit"},FilecoinLedger:{account:"MultiLocationV1",initial_pledge:"Balance"},FilecoinOwnerByMinerEntry:{currency_id:"AccountId",miner_id:"MultiLocationV1",owner_id:"MultiLocationV1"},TrieIndex:"u32",FundInfo:{raised:"Balance",cap:"Balance",first_slot:"LeasePeriod",last_slot:"LeasePeriod",trie_index:"TrieIndex",status:"FundStatus"},RedeemStatus:"BalanceOf",FundStatus:{_enum:{Ongoing:0,Retired:1,Success:2,Failed:3,RefundWithdrew:4,RedeemWithdrew:5,End:6}},ContributionStatus:{_enum:["Idle","Refunded","Redeemed","Unlocked","MigratedIdle","Contributing"]},CrowdloanContributeCall:{_enum:{CrowdloanContribute:"ContributeCall"}},ContributeCall:{_enum:{Contribute:"Contribution"}},Contribution:{index:"ParaId",value:"BalanceOf",signature:"Option<MultiSignature>"},Withdraw:{who:"AccountIdOf",index:"ParaId"},WithdrawCall:{_enum:{Withdraw:"Withdraw"}},ParachainTransactProxyType:{_enum:{Primary:0,Derived:1}},ParachainDerivedProxyAccountType:{_enum:{Salp:0,Staking:1}},Keys:"SessionKeys1",ParachainTransactType:{_enum:{Xcm:0,Proxy:1}},RpcContributionStatus:{_enum:{Idle:0,Contributing:1,Refunded:2,Unlocked:3,Redeemed:4}},RewardRecord:{account_id:"AccountId",record_amount:"Balance"},PoolId:"u32",SwapFee:"u128",PoolDetails:{owner:"AccountId",swap_fee_rate:"SwapFee",active:"bool"},PoolWeight:"Balance",PoolToken:"u128",PoolCreateTokenDetails:{token_id:"AssetId",token_balance:"Balance",token_weight:"PoolWeight"},MaxLocksOf:"u32",BifrostVestingInfo:{locked:"Balance",per_block:"Balance",starting_block:"BlockNumber"},OracleKey:"CurrencyId",BlockNumberFor:"BlockNumber",OrderInfo:{owner:"AccountIdOf",vsbond:"CurrencyId",amount:"BalanceOf",remain:"BalanceOf",total_price:"BalanceOf",order_id:"OrderId",order_type:"OrderType",remain_price:"BalanceOf"},OrderId:"u64",OrderType:{_enum:{Sell:0,Buy:1}},UnlockId:"U32",ZenlinkAssetId:{chain_id:"u32",asset_type:"u8",asset_index:"u64"},ZenlinkAssetBalance:"u128",PairInfo:{asset0:"ZenlinkAssetId",asset1:"ZenlinkAssetId",account:"AccountId",totalLiquidity:"ZenlinkAssetBalance",holdingLiquidity:"ZenlinkAssetBalance",reserve0:"ZenlinkAssetBalance",reserve1:"ZenlinkAssetBalance",lpAssetId:"ZenlinkAssetId"},PairMetadata:{pair_account:"AccountId",target_supply:"ZenlinkAssetBalance"},BootstrapParamter:{min_contribution:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",target_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",accumulated_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",end_block_number:"BlockNumber",pair_account:"AccountId"},PairStatus:{_enum:{Trading:"PairMetadata",Bootstrap:"BootstrapParamter",Disable:null}},TokenSymbol:{_enum:{ASG:0,BNC:1,KUSD:2,DOT:3,KSM:4,ETH:5,KAR:6,ZLK:7,PHA:8,RMRK:9,MOVR:10,GLMR:11}},CurrencyId:{_enum:{Native:"TokenSymbol",VToken:"TokenSymbol",Token:"TokenSymbol",Stable:"TokenSymbol",VSToken:"TokenSymbol",VSBond:"(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",LPToken:"(TokenSymbol, u8, TokenSymbol, u8)",ForeignAsset:"u32",Token2:"u8",VToken2:"u8",VSToken2:"u8",VSBond2:"u8",StableLpToken:"u32",Blp:"u32"}},CurrencyIdOf:"CurrencyId",TAssetBalance:"Balance",AmountOf:"Balance",StorageVersion:"Releases",ShareWeight:"Balance",Currency:"CurrencyIdOf",Amount:"AmountOf",TransferOriginType:{_enum:{FromSelf:0,FromRelayChain:1,FromSiblingParaChain:2}},TimeUnit:{Era:"u32",SlashingSpan:"u32",Round:"u32",Kblock:"u32"},MinimumsMaximums:{delegator_bonded_minimum:"Balance",bond_extra_minimum:"Balance",unbond_minimum:"Balance",rebond_minimum:"Balance",unbond_record_maximum:"u32",validators_back_maximum:"u32",delegator_active_staking_maximum:"Balance",validators_reward_maximum:"u32",delegation_amount_minimum:"Balance",delegators_maximum:"u16",validators_maximum:"u16"},PoolType:{_enum:{Mining:0,Farming:1,EBFarming:2}},PoolState:{_enum:{UnCharged:0,Charged:1,Ongoing:2,Retired:3,Dead:4}},DepositData:{deposit:"Balance",gain_avgs:"BTreeMap<CurrencyId, FixedU128>",update_b:"BlockNumber",pending_unlocks:"Vec<(BlockNumber, Balance)>"},RewardData:{total:"Balance",per_block:"Balance",claimed:"Balance",gain_avg:"FixedU128"},MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",MultiLocation:"MultiLocationV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[902,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{pool_id:"PoolId",keeper:"AccountId",investor:"Option<AccountId>",trading_pair:"(CurrencyId, CurrencyId)",duration:"BlockNumber",type:"PoolType",min_deposit_to_start:"Balance",after_block_to_start:"BlockNumber",deposit:"Balance",rewards:"BTreeMap<CurrencyId, RewardData>",update_b:"BlockNumber",state:"PoolState",block_startup:"Option<BlockNumber>",redeem_limit_time:"BlockNumber",unlock_limit_nums:"u32",pending_unlock_nums:"u32"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",BiddingOrderId:"u64",EraId:"u32",BiddingOrderUnit:{bidder_id:"AccountId",token_id:"AssetId",block_num:"BlockNumber",votes:"Balance",annual_roi:"Permill",validator:"AccountId"},BiddingOrderUnitOf:"BiddingOrderUnit",VersionId:"u32",PermissionName:"u64",PermissionLevel:{actor:"AccountName",permission:"PermissionName"},Action:{account:"AccountName",name:"ActionName",authorization:"Vec<PermissionLevel>",data:"Vec<u8>"},AccountName:"u64",Checksum256:"([u8;32])",ActionName:"u64",FlatMap:{map:"Vec<(ActionName, u64)>"},UnsignedInt:"u32",ActionReceipt:{receiver:"AccountName",act_digest:"Checksum256",global_sequence:"u64",recv_sequence:"u64",auth_sequence:"FlatMap<AccountName, u64>",code_sequence:"UnsignedInt",abi_sequence:"UnsignedInt"},BlockchainType:{_enum:["BIFROST","EOS","IOST"]},Precision:"u32",BridgeAssetSymbol:{blockchain:"BlockchainType",symbol:"Vec<u8>",precision:"Precision"},PublicKey:{type_:"UnsignedInt",data:"[u8;33]"},ProducerKey:{producer_name:"AccountName",block_signing_key:"PublicKey"},ProducerSchedule:{version:"u32",producers:"Vec<ProducerKey>"},bridgeEosSignature:{type_:"UnsignedInt",data:"[u8;65]"},BlockTimestamp:"(u32)",Extension:"(u16, Vec<u8>)",BlockHeader:{timestamp:"BlockTimestamp",producer:"AccountName",confirmed:"u16",previous:"Checksum256",transaction_mroot:"Checksum256",action_mroot:"Checksum256",schedule_version:"u32",new_producers:"Option<ProducerSchedule>",header_extensions:"Vec<Extension>"},SignedBlockHeader:{block_header:"BlockHeader",producer_signature:"bridgeEosSignature"},Checksum256Array:"Vec<Checksum256>",IncrementalMerkle:{_node_count:"u64",_active_nodes:"Checksum256Array"},TxSig:{signature:"Vec<u8>",author:"AccountId"},MultiSig:{signatures:"Vec<TxSig>",threshold:"u8"},MultiSigTx:{chain_id:"Vec<u8>",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"Action",from:"AccountId",asset_id:"AssetId"},Sent:{tx_id:"Vec<u8>",from:"AccountId",asset_id:"AssetId"},Succeeded:{tx_id:"Vec<u8>"},Failed:{tx_id:"Vec<u8>",reason:"Vec<u8>"},TxOut:{_enum:{Initialized:"MultiSigTx",Created:"MultiSigTx",SignComplete:"MultiSigTx",Sent:"Sent",Succeeded:"Succeeded",Failed:"Failed"}},TransactionStatus:{_enum:["Initialized","Created","SignComplete","Sent","Succeeded","Failed"]},ProducerAuthoritySchedule:{version:"u32",producers:"Vec<ProducerAuthority>"},ProducerAuthority:{producer_name:"ActionName",authority:"BlockSigningAuthority"},BlockSigningAuthority:"(UnsignedInt, BlockSigningAuthorityV0)",BlockSigningAuthorityV0:{threshold:"u32",keyWeights:"Vec<KeyWeight>"},KeyWeight:{key:"PublicKey",weight:"u16"},BancorPool:{currency_id:"CurrencyId",token_pool:"Balance",vstoken_pool:"Balance",token_ceiling:"Balance",token_base_supply:"Balance",vstoken_base_supply:"Balance"},IostAction:{contract:"Vec<u8>",action_name:"Vec<u8>",data:"Vec<u8>"},IostMultiSigTx:{chain_id:"i32",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"IostAction",from:"AccountId",asset_id:"AssetId"},Processing:{tx_id:"Vec<u8>",multi_sig_tx:"IostMultiSigTx"},IostTxOut:{_enum:{Initial:"IostMultiSigTx",Generated:"IostMultiSigTx",Signed:"IostMultiSigTx",Processing:"Processing",Success:"Vec<u8>",Fail:"Failed"}},PalletBalanceOf:"Balance",ExtraFeeName:{_enum:["SalpContribute","NoExtraFee"]},IsExtended:"bool",SystemPalletId:"PalletId",ledger:{Substrate:"SubstrateLedger"},SubstrateLedger:{account:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>"},UnlockChunk:{value:"Balance",unlock_time:"TimeUnit"},FilecoinLedger:{account:"MultiLocationV1",initial_pledge:"Balance"},FilecoinOwnerByMinerEntry:{currency_id:"AccountId",miner_id:"MultiLocationV1",owner_id:"MultiLocationV1"},TrieIndex:"u32",FundInfo:{raised:"Balance",cap:"Balance",first_slot:"LeasePeriod",last_slot:"LeasePeriod",trie_index:"TrieIndex",status:"FundStatus"},RedeemStatus:"BalanceOf",FundStatus:{_enum:{Ongoing:0,Retired:1,Success:2,Failed:3,RefundWithdrew:4,RedeemWithdrew:5,End:6}},ContributionStatus:{_enum:["Idle","Refunded","Redeemed","Unlocked","MigratedIdle","Contributing"]},CrowdloanContributeCall:{_enum:{CrowdloanContribute:"ContributeCall"}},ContributeCall:{_enum:{Contribute:"Contribution"}},Contribution:{index:"ParaId",value:"BalanceOf",signature:"Option<MultiSignature>"},Withdraw:{who:"AccountIdOf",index:"ParaId"},WithdrawCall:{_enum:{Withdraw:"Withdraw"}},ParachainTransactProxyType:{_enum:{Primary:0,Derived:1}},ParachainDerivedProxyAccountType:{_enum:{Salp:0,Staking:1}},Keys:"SessionKeys1",ParachainTransactType:{_enum:{Xcm:0,Proxy:1}},RpcContributionStatus:{_enum:{Idle:0,Contributing:1,Refunded:2,Unlocked:3,Redeemed:4}},RewardRecord:{account_id:"AccountId",record_amount:"Balance"},PoolId:"u32",SwapFee:"u128",PoolDetails:{owner:"AccountId",swap_fee_rate:"SwapFee",active:"bool"},PoolWeight:"Balance",PoolToken:"u128",PoolCreateTokenDetails:{token_id:"AssetId",token_balance:"Balance",token_weight:"PoolWeight"},MaxLocksOf:"u32",BifrostVestingInfo:{locked:"Balance",per_block:"Balance",starting_block:"BlockNumber"},OracleKey:"CurrencyId",BlockNumberFor:"BlockNumber",OrderInfo:{owner:"AccountIdOf",vsbond:"CurrencyId",amount:"BalanceOf",remain:"BalanceOf",total_price:"BalanceOf",order_id:"OrderId",order_type:"OrderType",remain_price:"BalanceOf"},OrderId:"u64",OrderType:{_enum:{Sell:0,Buy:1}},UnlockId:"U32",ZenlinkAssetId:{chain_id:"u32",asset_type:"u8",asset_index:"u64"},ZenlinkAssetBalance:"u128",PairInfo:{asset0:"ZenlinkAssetId",asset1:"ZenlinkAssetId",account:"AccountId",totalLiquidity:"ZenlinkAssetBalance",holdingLiquidity:"ZenlinkAssetBalance",reserve0:"ZenlinkAssetBalance",reserve1:"ZenlinkAssetBalance",lpAssetId:"ZenlinkAssetId"},PairMetadata:{pair_account:"AccountId",target_supply:"ZenlinkAssetBalance"},BootstrapParamter:{min_contribution:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",target_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",accumulated_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",end_block_number:"BlockNumber",pair_account:"AccountId"},PairStatus:{_enum:{Trading:"PairMetadata",Bootstrap:"BootstrapParamter",Disable:null}},TokenSymbol:{_enum:{ASG:0,BNC:1,KUSD:2,DOT:3,KSM:4,ETH:5,KAR:6,ZLK:7,PHA:8,RMRK:9,MOVR:10,GLMR:11}},CurrencyId:{_enum:{Native:"TokenSymbol",VToken:"TokenSymbol",Token:"TokenSymbol",Stable:"TokenSymbol",VSToken:"TokenSymbol",VSBond:"(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",LPToken:"(TokenSymbol, u8, TokenSymbol, u8)",ForeignAsset:"u32",Token2:"u8",VToken2:"u8",VSToken2:"u8",VSBond2:"u8",StableLpToken:"u32",Blp:"u32"}},CurrencyIdOf:"CurrencyId",TAssetBalance:"Balance",AmountOf:"Balance",StorageVersion:"Releases",ShareWeight:"Balance",Currency:"CurrencyIdOf",Amount:"AmountOf",TransferOriginType:{_enum:{FromSelf:0,FromRelayChain:1,FromSiblingParaChain:2}},TimeUnit:{Era:"u32",SlashingSpan:"u32",Round:"u32",Kblock:"u32"},MinimumsMaximums:{delegator_bonded_minimum:"Balance",bond_extra_minimum:"Balance",unbond_minimum:"Balance",rebond_minimum:"Balance",unbond_record_maximum:"u32",validators_back_maximum:"u32",delegator_active_staking_maximum:"Balance",validators_reward_maximum:"u32",delegation_amount_minimum:"Balance",delegators_maximum:"u16",validators_maximum:"u16"},PoolType:{_enum:{Mining:0,Farming:1,EBFarming:2}},PoolState:{_enum:{UnCharged:0,Charged:1,Ongoing:2,Retired:3,Dead:4}},DepositData:{deposit:"Balance",gain_avgs:"BTreeMap<CurrencyId, FixedU128>",update_b:"BlockNumber",pending_unlocks:"Vec<(BlockNumber, Balance)>"},RewardData:{total:"Balance",per_block:"Balance",claimed:"Balance",gain_avg:"FixedU128"},MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1",MultiLocation:"MultiLocationV1",XcmError:"XcmErrorV1",Response:"ResponseV1"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},astar:{types:[{minmax:[0,null],types:{Keys:"AccountId",Address:"MultiAddress",LookupSource:"MultiAddress",AmountOf:"Amount",Amount:"i128",SmartContract:{_enum:{Evm:"H160",Wasm:"AccountId"}},EraStakingPoints:{total:"Balance",stakers:"BTreeMap<AccountId, Balance>",formerStakedEra:"EraIndex",claimedRewards:"Balance"},EraRewardAndStake:{rewards:"Balance",staked:"Balance"},EraIndex:"u32"}}]},bajun:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress"}}]},basilisk:{alias:{tokens:{AccountData:"OrmlAccountData"}},types:[{minmax:[0,null],types:{AssetPair:{asset_in:"AssetId",asset_out:"AssetId"},Amount:"i128",AmountOf:"Amount",Address:"AccountId",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},Fee:{numerator:"u32",denominator:"u32"},BalanceInfo:{amount:"Balance",assetId:"AssetId"},Chain:{genesisHash:"Vec<u8>",lastBlockHash:"Vec<u8>"},Currency:"AssetId",CurrencyId:"AssetId",CurrencyIdOf:"AssetId",Intention:{who:"AccountId",asset_sell:"AssetId",asset_buy:"AssetId",amount:"Balance",discount:"bool",sell_or_buy:"IntentionType"},IntentionId:"Hash",IntentionType:{_enum:["SELL","BUY"]},LookupSource:"AccountId",Price:"Balance",ClassId:"u64",TokenId:"u64",ClassData:{is_pool:"bool"},TokenData:{locked:"bool"},ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"ClassData"},TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"TokenData"},ClassInfoOf:"ClassInfo",TokenInfoOf:"TokenInfo",ClassIdOf:"ClassId",TokenIdOf:"TokenId",OrderedSet:"Vec<AssetId>",VestingSchedule:{start:"BlockNumber",period:"BlockNumber",period_count:"u32",per_period:"Compact<Balance>"},VestingScheduleOf:"VestingSchedule",LBPWeight:"u32",WeightCurveType:{_enum:["Linear"]},PoolId:"AccountId",BalanceOf:"Balance",AssetType:{_enum:{Token:"Null",PoolShare:"(AssetId,AssetId)"}},Pool:{owner:"AccountId",start:"BlockNumber",end:"BlockNumber",assets:"AssetPair",initial_weights:"LBPWeight",final_weights:"LBPWeight",weight_curve:"WeightCurveType",pausable:"bool",paused:"bool",fee:"Fee",fee_receiver:"AccountId"},AssetDetails:{name:"Vec<u8>",asset_type:"AssetType",existential_deposit:"Balance",locked:"bool"},AssetDetailsT:"AssetDetails",AssetMetadata:{symbol:"Vec<u8>",decimals:"u8"},AssetInstance:"AssetInstanceV1",MultiLocation:"MultiLocationV1",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1"}}]},beresheet:{alias:{voting:{Tally:"VotingTally"}},types:[{minmax:[0,31],types:{ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",Balance2:"u128",VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},"voting::VoteType":"VoteType","voting::TallyType":"TallyType","voting::Tally":"VotingTally",Keys:"SessionKeys4",StakingLedger:"StakingLedgerTo240",Votes:"VotesTo230",ReferendumInfo:"ReferendumInfoTo239",Weight:"u32",DispatchInfo:"DispatchInfoTo244",OpenTip:"OpenTipTo225",ContractExecResult:"ContractExecResultTo255",CompactAssignments:"CompactAssignmentsTo257",RewardDestination:"RewardDestinationTo257",RefCount:"RefCountTo259",AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[32,38],types:{ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",Balance2:"u128",VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},"voting::VoteType":"VoteType","voting::TallyType":"TallyType","voting::Tally":"VotingTally",CompactAssignments:"CompactAssignmentsTo257",ContractExecResult:"ContractExecResultTo255",RewardDestination:"RewardDestinationTo257",RefCount:"u32",AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[39,41],types:{ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",Balance2:"u128",VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},"voting::VoteType":"VoteType","voting::TallyType":"TallyType","voting::Tally":"VotingTally",RefCount:"u32",AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[42,46],types:{Balance2:"u128",ChainId:"u8",DepositNonce:"u64",ResourceId:"[u8; 32]",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",staus:"ProposalStatus",expiry:"BlockNumber"},VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",AccountInfo:"AccountInfoWithRefCount",Address:"MultiAddress",LookupSource:"MultiAddress"}},{minmax:[47,null],types:{Balance2:"u128",DepositNonce:"u64",ResourceId:"[u8; 32]",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",staus:"ProposalStatus",expiry:"BlockNumber"},VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",CID:"Vec<u8>",Properties:{_set:{Transferable:1,Burnable:2}},ClassData:{deposit:"Balance",properties:"Properties"},TokenData:{deposit:"Balance"},ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"ClassData"},ClassInfoOf:"ClassInfo",TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"TokenData"},TokenInfoOf:"TokenInfo",TokenId:"u64",ClassIdOf:"ClassId",TokenIdOf:"TokenId",Amount:"i128",AmountOf:"Amount",Approval:{amount:"Balance",deposit:"Balance"},ApprovalKey:{owner:"AccountId",delegate:"AccountId"},Commitment:"ScalarData",CurrencyId:"u64",CurrencyIdOf:"CurrencyId",DustHandlerType:{_enum:{Burn:"Null",Transfer:"AccountId"}},HashFunction:{_enum:["PoseidonDefault","PoseidonExp3","PoseidonExp5","PoseidonExp17","MiMC","Blake2","Sha256"]},Manager:{accountId:"AccountId",required:"bool"},MerkleTree:{leaf_count:"u32",max_leaves:"u32",depth:"u8",root_hash:"ScalarData",edge_nodes:"Vec<ScalarData>",hasher:"HashFunction",should_store_leaves:"bool"},MixerInfo:{minimum_deposit_length_for_reward:"BlockNumber",fixed_deposit_size:"Balance",currency_id:"CurrencyIdOf"},Nullifier:"ScalarData",ScalarData:"[u8; 32]",TokenDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"Balance",min_balance:"Balance",approvals:"u32",is_frozen:"bool",dust_type:"DustHandlerType"},TokenMetadata:{deposit:"Balance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",is_frozen:"bool"},TreeId:"u32",WithdrawProof:{mixer_id:"TreeId",cached_block:"BlockNumber",cached_root:"ScalarData",comms:"Vec<Commitment>",nullifier_hash:"ScalarData",proof_bytes:"Vec<u8>",leaf_index_commitments:"Vec<Commitment>",proof_commitments:"Vec<Commitment>",recipient:"Option<AccountId>",relayer:"Option<AccountId>"},ETHBlock:{inner:"Block"},ETHReceipts:{inner:"Vec<EthReceipt>"},ETHTxStatuses:{inner:"Vec<EthTransactionStatus>"},AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",LookupSource:"MultiAddress"}}]},bifrost:{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}},flexibleFee:{getFeeTokenAndAmount:{description:"Get charging token type and amount in terms of flexible transaction fee.",params:[{name:"who",type:"AccountId"},{name:"extrinsic",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(CurrencyId, U256)",isSubscription:!1,jsonrpc:"flexibleFee_getFeeTokenAndAmount",method:"getFeeTokenAndAmount",section:"flexibleFee"}},salp:{getContribution:{description:"salp getContribution",params:[{name:"index",type:"ParaId"},{name:"who",type:"AccountIdOf"}],type:"(Balance, ContributionStatus)",isSubscription:!1,jsonrpc:"salp_getContribution",method:"getContribution",section:"salp"},getLiteContribution:{description:"salp getLiteContribution",params:[{name:"index",type:"ParaId"},{name:"who",type:"AccountIdOf"}],type:"(Balance, ContributionStatus)",isSubscription:!1,jsonrpc:"salp_getLiteContribution",method:"getLiteContribution",section:"salp"}},vtokenMint:{getVtokenMintRate:{description:"Get current vtoken mint rate.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"vtokenMint_getVtokenMintRate",method:"getVtokenMintRate",section:"vtokenMint"}},zenlinkProtocol:{getAllAssets:{description:"zenlinkProtocol getAllAssets",params:[{name:"at",type:"Hash",isOptional:!0}],type:"Vec<ZenlinkAssetId>",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAllAssets",method:"getAllAssets",section:"zenlinkProtocol"},getBalance:{description:"zenlinkProtocol getBalance",params:[{name:"asset_id",type:"ZenlinkAssetId"},{name:"account",type:"AccountId"},{name:"at",type:"Hash",isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"zenlinkProtocol_getBalance",method:"getBalance",section:"zenlinkProtocol"},getSovereignsInfo:{description:"Get the ownership of a certain currency for each parachain.",params:[{name:"asset_id",type:"ZenlinkAssetId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(u32, AccountId, String)",isSubscription:!1,jsonrpc:"zenlinkProtocol_getSovereignsInfo",method:"getSovereignsInfo",section:"zenlinkProtocol"},getPairByAssetId:{description:"Get the detailed information of a particular exchange pair.",params:[{name:"asset_0",type:"ZenlinkAssetId"},{name:"asset_1",type:"ZenlinkAssetId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"PairInfo",isSubscription:!1,jsonrpc:"zenlinkProtocol_getPairByAssetId",method:"getPairByAssetId",section:"zenlinkProtocol"},getAmountInPrice:{description:"Get the output token amount for an exact input token amount.",params:[{name:"supply",type:"ZenlinkAssetBalance"},{name:"path",type:"Vec<ZenlinkAssetId>"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAmountInPrice",method:"getAmountInPrice",section:"zenlinkProtocol"},getAmountOutPrice:{description:"Get the input token amount for an exact output token amount.",params:[{name:"supply",type:"ZenlinkAssetBalance"},{name:"path",type:"Vec<ZenlinkAssetId>"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAmountOutPrice",method:"getAmountOutPrice",section:"zenlinkProtocol"},getEstimateLptoken:{description:"Get the estimated number of LP token acquired given the desired and minimum amount for both in-token and out-token.",params:[{name:"asset_0",type:"ZenlinkAssetId"},{name:"asset_1",type:"ZenlinkAssetId"},{name:"amount_0_desired",type:"ZenlinkAssetBalance"},{name:"amount_1_desired",type:"ZenlinkAssetBalance"},{name:"amount_0_min",type:"ZenlinkAssetBalance"},{name:"amount_1_min",type:"ZenlinkAssetBalance"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getEstimateLptoken",method:"getEstimateLptoken",section:"zenlinkProtocol"}},liquidityMining:{getRewards:{description:"Get the rewards users deserve",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"pallet_instance",type:"U32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"liquidityMining_getRewards",method:"getRewards",section:"liquidityMining"}},stablePool:{getSwapOutputAmount:{description:"stablePool getSwapOutputAmount",params:[{name:"pool_id",type:"U32"},{name:"currency_id_in",type:"U32"},{name:"currency_id_out",type:"U32"},{name:"amount",type:"Balance"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"stablePool_getSwapOutputAmount",method:"getSwapOutputAmount",section:"stablePool"}}},types:[{minmax:[0,901],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{pool_id:"PoolId",keeper:"AccountId",investor:"Option<AccountId>",trading_pair:"(CurrencyId, CurrencyId)",duration:"BlockNumber",type:"PoolType",min_deposit_to_start:"Balance",after_block_to_start:"BlockNumber",deposit:"Balance",rewards:"BTreeMap<CurrencyId, RewardData>",update_b:"BlockNumber",state:"PoolState",block_startup:"Option<BlockNumber>",redeem_limit_time:"BlockNumber",unlock_limit_nums:"u32",pending_unlock_nums:"u32"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",BiddingOrderId:"u64",EraId:"u32",BiddingOrderUnit:{bidder_id:"AccountId",token_id:"AssetId",block_num:"BlockNumber",votes:"Balance",annual_roi:"Permill",validator:"AccountId"},BiddingOrderUnitOf:"BiddingOrderUnit",VersionId:"u32",PermissionName:"u64",PermissionLevel:{actor:"AccountName",permission:"PermissionName"},Action:{account:"AccountName",name:"ActionName",authorization:"Vec<PermissionLevel>",data:"Vec<u8>"},AccountName:"u64",Checksum256:"([u8;32])",ActionName:"u64",FlatMap:{map:"Vec<(ActionName, u64)>"},UnsignedInt:"u32",ActionReceipt:{receiver:"AccountName",act_digest:"Checksum256",global_sequence:"u64",recv_sequence:"u64",auth_sequence:"FlatMap<AccountName, u64>",code_sequence:"UnsignedInt",abi_sequence:"UnsignedInt"},BlockchainType:{_enum:["BIFROST","EOS","IOST"]},Precision:"u32",BridgeAssetSymbol:{blockchain:"BlockchainType",symbol:"Vec<u8>",precision:"Precision"},PublicKey:{type_:"UnsignedInt",data:"[u8;33]"},ProducerKey:{producer_name:"AccountName",block_signing_key:"PublicKey"},ProducerSchedule:{version:"u32",producers:"Vec<ProducerKey>"},bridgeEosSignature:{type_:"UnsignedInt",data:"[u8;65]"},BlockTimestamp:"(u32)",Extension:"(u16, Vec<u8>)",BlockHeader:{timestamp:"BlockTimestamp",producer:"AccountName",confirmed:"u16",previous:"Checksum256",transaction_mroot:"Checksum256",action_mroot:"Checksum256",schedule_version:"u32",new_producers:"Option<ProducerSchedule>",header_extensions:"Vec<Extension>"},SignedBlockHeader:{block_header:"BlockHeader",producer_signature:"bridgeEosSignature"},Checksum256Array:"Vec<Checksum256>",IncrementalMerkle:{_node_count:"u64",_active_nodes:"Checksum256Array"},TxSig:{signature:"Vec<u8>",author:"AccountId"},MultiSig:{signatures:"Vec<TxSig>",threshold:"u8"},MultiSigTx:{chain_id:"Vec<u8>",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"Action",from:"AccountId",asset_id:"AssetId"},Sent:{tx_id:"Vec<u8>",from:"AccountId",asset_id:"AssetId"},Succeeded:{tx_id:"Vec<u8>"},Failed:{tx_id:"Vec<u8>",reason:"Vec<u8>"},TxOut:{_enum:{Initialized:"MultiSigTx",Created:"MultiSigTx",SignComplete:"MultiSigTx",Sent:"Sent",Succeeded:"Succeeded",Failed:"Failed"}},TransactionStatus:{_enum:["Initialized","Created","SignComplete","Sent","Succeeded","Failed"]},ProducerAuthoritySchedule:{version:"u32",producers:"Vec<ProducerAuthority>"},ProducerAuthority:{producer_name:"ActionName",authority:"BlockSigningAuthority"},BlockSigningAuthority:"(UnsignedInt, BlockSigningAuthorityV0)",BlockSigningAuthorityV0:{threshold:"u32",keyWeights:"Vec<KeyWeight>"},KeyWeight:{key:"PublicKey",weight:"u16"},BancorPool:{currency_id:"CurrencyId",token_pool:"Balance",vstoken_pool:"Balance",token_ceiling:"Balance",token_base_supply:"Balance",vstoken_base_supply:"Balance"},IostAction:{contract:"Vec<u8>",action_name:"Vec<u8>",data:"Vec<u8>"},IostMultiSigTx:{chain_id:"i32",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"IostAction",from:"AccountId",asset_id:"AssetId"},Processing:{tx_id:"Vec<u8>",multi_sig_tx:"IostMultiSigTx"},IostTxOut:{_enum:{Initial:"IostMultiSigTx",Generated:"IostMultiSigTx",Signed:"IostMultiSigTx",Processing:"Processing",Success:"Vec<u8>",Fail:"Failed"}},PalletBalanceOf:"Balance",ExtraFeeName:{_enum:["SalpContribute","NoExtraFee"]},IsExtended:"bool",SystemPalletId:"PalletId",ledger:{Substrate:"SubstrateLedger"},SubstrateLedger:{account:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>"},UnlockChunk:{value:"Balance",unlock_time:"TimeUnit"},FilecoinLedger:{account:"MultiLocationV1",initial_pledge:"Balance"},FilecoinOwnerByMinerEntry:{currency_id:"AccountId",miner_id:"MultiLocationV1",owner_id:"MultiLocationV1"},TrieIndex:"u32",FundInfo:{raised:"Balance",cap:"Balance",first_slot:"LeasePeriod",last_slot:"LeasePeriod",trie_index:"TrieIndex",status:"FundStatus"},RedeemStatus:"BalanceOf",FundStatus:{_enum:{Ongoing:0,Retired:1,Success:2,Failed:3,RefundWithdrew:4,RedeemWithdrew:5,End:6}},ContributionStatus:{_enum:["Idle","Refunded","Redeemed","Unlocked","MigratedIdle","Contributing"]},CrowdloanContributeCall:{_enum:{CrowdloanContribute:"ContributeCall"}},ContributeCall:{_enum:{Contribute:"Contribution"}},Contribution:{index:"ParaId",value:"BalanceOf",signature:"Option<MultiSignature>"},Withdraw:{who:"AccountIdOf",index:"ParaId"},WithdrawCall:{_enum:{Withdraw:"Withdraw"}},ParachainTransactProxyType:{_enum:{Primary:0,Derived:1}},ParachainDerivedProxyAccountType:{_enum:{Salp:0,Staking:1}},Keys:"SessionKeys1",ParachainTransactType:{_enum:{Xcm:0,Proxy:1}},RpcContributionStatus:{_enum:{Idle:0,Contributing:1,Refunded:2,Unlocked:3,Redeemed:4}},RewardRecord:{account_id:"AccountId",record_amount:"Balance"},PoolId:"u32",SwapFee:"u128",PoolDetails:{owner:"AccountId",swap_fee_rate:"SwapFee",active:"bool"},PoolWeight:"Balance",PoolToken:"u128",PoolCreateTokenDetails:{token_id:"AssetId",token_balance:"Balance",token_weight:"PoolWeight"},MaxLocksOf:"u32",BifrostVestingInfo:{locked:"Balance",per_block:"Balance",starting_block:"BlockNumber"},OracleKey:"CurrencyId",BlockNumberFor:"BlockNumber",OrderInfo:{owner:"AccountIdOf",vsbond:"CurrencyId",amount:"BalanceOf",remain:"BalanceOf",total_price:"BalanceOf",order_id:"OrderId",order_type:"OrderType",remain_price:"BalanceOf"},OrderId:"u64",OrderType:{_enum:{Sell:0,Buy:1}},UnlockId:"U32",ZenlinkAssetId:{chain_id:"u32",asset_type:"u8",asset_index:"u64"},ZenlinkAssetBalance:"u128",PairInfo:{asset0:"ZenlinkAssetId",asset1:"ZenlinkAssetId",account:"AccountId",totalLiquidity:"ZenlinkAssetBalance",holdingLiquidity:"ZenlinkAssetBalance",reserve0:"ZenlinkAssetBalance",reserve1:"ZenlinkAssetBalance",lpAssetId:"ZenlinkAssetId"},PairMetadata:{pair_account:"AccountId",target_supply:"ZenlinkAssetBalance"},BootstrapParamter:{min_contribution:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",target_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",accumulated_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",end_block_number:"BlockNumber",pair_account:"AccountId"},PairStatus:{_enum:{Trading:"PairMetadata",Bootstrap:"BootstrapParamter",Disable:null}},TokenSymbol:{_enum:{ASG:0,BNC:1,KUSD:2,DOT:3,KSM:4,KAR:6,ZLK:7,PHA:8,RMRK:9,MOVR:10,GLMR:11}},CurrencyId:{_enum:{Native:"TokenSymbol",VToken:"TokenSymbol",Token:"TokenSymbol",Stable:"TokenSymbol",VSToken:"TokenSymbol",VSBond:"(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",LPToken:"(TokenSymbol, u8, TokenSymbol, u8)",ForeignAsset:"u32",Token2:"u8",VToken2:"u8",VSToken2:"u8",VSBond2:"u8",StableLpToken:"u32",Blp:"u32"}},CurrencyIdOf:"CurrencyId",TAssetBalance:"Balance",AmountOf:"Balance",StorageVersion:"Releases",ShareWeight:"Balance",Currency:"CurrencyIdOf",Amount:"AmountOf",TransferOriginType:{_enum:{FromSelf:0,FromRelayChain:1,FromSiblingParaChain:2}},TimeUnit:{Era:"u32",SlashingSpan:"u32",Round:"u32",Kblock:"u32"},MinimumsMaximums:{delegator_bonded_minimum:"Balance",bond_extra_minimum:"Balance",unbond_minimum:"Balance",rebond_minimum:"Balance",unbond_record_maximum:"u32",validators_back_maximum:"u32",delegator_active_staking_maximum:"Balance",validators_reward_maximum:"u32",delegation_amount_minimum:"Balance",delegators_maximum:"u16",validators_maximum:"u16"},PoolType:{_enum:{Mining:0,Farming:1,EBFarming:2}},PoolState:{_enum:{UnCharged:0,Charged:1,Ongoing:2,Retired:3,Dead:4}},DepositData:{deposit:"Balance",gain_avgs:"BTreeMap<CurrencyId, FixedU128>",update_b:"BlockNumber",pending_unlocks:"Vec<(BlockNumber, Balance)>"},RewardData:{total:"Balance",per_block:"Balance",claimed:"Balance",gain_avg:"FixedU128"},MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",MultiLocation:"MultiLocationV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[902,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{pool_id:"PoolId",keeper:"AccountId",investor:"Option<AccountId>",trading_pair:"(CurrencyId, CurrencyId)",duration:"BlockNumber",type:"PoolType",min_deposit_to_start:"Balance",after_block_to_start:"BlockNumber",deposit:"Balance",rewards:"BTreeMap<CurrencyId, RewardData>",update_b:"BlockNumber",state:"PoolState",block_startup:"Option<BlockNumber>",redeem_limit_time:"BlockNumber",unlock_limit_nums:"u32",pending_unlock_nums:"u32"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",BiddingOrderId:"u64",EraId:"u32",BiddingOrderUnit:{bidder_id:"AccountId",token_id:"AssetId",block_num:"BlockNumber",votes:"Balance",annual_roi:"Permill",validator:"AccountId"},BiddingOrderUnitOf:"BiddingOrderUnit",VersionId:"u32",PermissionName:"u64",PermissionLevel:{actor:"AccountName",permission:"PermissionName"},Action:{account:"AccountName",name:"ActionName",authorization:"Vec<PermissionLevel>",data:"Vec<u8>"},AccountName:"u64",Checksum256:"([u8;32])",ActionName:"u64",FlatMap:{map:"Vec<(ActionName, u64)>"},UnsignedInt:"u32",ActionReceipt:{receiver:"AccountName",act_digest:"Checksum256",global_sequence:"u64",recv_sequence:"u64",auth_sequence:"FlatMap<AccountName, u64>",code_sequence:"UnsignedInt",abi_sequence:"UnsignedInt"},BlockchainType:{_enum:["BIFROST","EOS","IOST"]},Precision:"u32",BridgeAssetSymbol:{blockchain:"BlockchainType",symbol:"Vec<u8>",precision:"Precision"},PublicKey:{type_:"UnsignedInt",data:"[u8;33]"},ProducerKey:{producer_name:"AccountName",block_signing_key:"PublicKey"},ProducerSchedule:{version:"u32",producers:"Vec<ProducerKey>"},bridgeEosSignature:{type_:"UnsignedInt",data:"[u8;65]"},BlockTimestamp:"(u32)",Extension:"(u16, Vec<u8>)",BlockHeader:{timestamp:"BlockTimestamp",producer:"AccountName",confirmed:"u16",previous:"Checksum256",transaction_mroot:"Checksum256",action_mroot:"Checksum256",schedule_version:"u32",new_producers:"Option<ProducerSchedule>",header_extensions:"Vec<Extension>"},SignedBlockHeader:{block_header:"BlockHeader",producer_signature:"bridgeEosSignature"},Checksum256Array:"Vec<Checksum256>",IncrementalMerkle:{_node_count:"u64",_active_nodes:"Checksum256Array"},TxSig:{signature:"Vec<u8>",author:"AccountId"},MultiSig:{signatures:"Vec<TxSig>",threshold:"u8"},MultiSigTx:{chain_id:"Vec<u8>",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"Action",from:"AccountId",asset_id:"AssetId"},Sent:{tx_id:"Vec<u8>",from:"AccountId",asset_id:"AssetId"},Succeeded:{tx_id:"Vec<u8>"},Failed:{tx_id:"Vec<u8>",reason:"Vec<u8>"},TxOut:{_enum:{Initialized:"MultiSigTx",Created:"MultiSigTx",SignComplete:"MultiSigTx",Sent:"Sent",Succeeded:"Succeeded",Failed:"Failed"}},TransactionStatus:{_enum:["Initialized","Created","SignComplete","Sent","Succeeded","Failed"]},ProducerAuthoritySchedule:{version:"u32",producers:"Vec<ProducerAuthority>"},ProducerAuthority:{producer_name:"ActionName",authority:"BlockSigningAuthority"},BlockSigningAuthority:"(UnsignedInt, BlockSigningAuthorityV0)",BlockSigningAuthorityV0:{threshold:"u32",keyWeights:"Vec<KeyWeight>"},KeyWeight:{key:"PublicKey",weight:"u16"},BancorPool:{currency_id:"CurrencyId",token_pool:"Balance",vstoken_pool:"Balance",token_ceiling:"Balance",token_base_supply:"Balance",vstoken_base_supply:"Balance"},IostAction:{contract:"Vec<u8>",action_name:"Vec<u8>",data:"Vec<u8>"},IostMultiSigTx:{chain_id:"i32",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"IostAction",from:"AccountId",asset_id:"AssetId"},Processing:{tx_id:"Vec<u8>",multi_sig_tx:"IostMultiSigTx"},IostTxOut:{_enum:{Initial:"IostMultiSigTx",Generated:"IostMultiSigTx",Signed:"IostMultiSigTx",Processing:"Processing",Success:"Vec<u8>",Fail:"Failed"}},PalletBalanceOf:"Balance",ExtraFeeName:{_enum:["SalpContribute","NoExtraFee"]},IsExtended:"bool",SystemPalletId:"PalletId",ledger:{Substrate:"SubstrateLedger"},SubstrateLedger:{account:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>"},UnlockChunk:{value:"Balance",unlock_time:"TimeUnit"},FilecoinLedger:{account:"MultiLocationV1",initial_pledge:"Balance"},FilecoinOwnerByMinerEntry:{currency_id:"AccountId",miner_id:"MultiLocationV1",owner_id:"MultiLocationV1"},TrieIndex:"u32",FundInfo:{raised:"Balance",cap:"Balance",first_slot:"LeasePeriod",last_slot:"LeasePeriod",trie_index:"TrieIndex",status:"FundStatus"},RedeemStatus:"BalanceOf",FundStatus:{_enum:{Ongoing:0,Retired:1,Success:2,Failed:3,RefundWithdrew:4,RedeemWithdrew:5,End:6}},ContributionStatus:{_enum:["Idle","Refunded","Redeemed","Unlocked","MigratedIdle","Contributing"]},CrowdloanContributeCall:{_enum:{CrowdloanContribute:"ContributeCall"}},ContributeCall:{_enum:{Contribute:"Contribution"}},Contribution:{index:"ParaId",value:"BalanceOf",signature:"Option<MultiSignature>"},Withdraw:{who:"AccountIdOf",index:"ParaId"},WithdrawCall:{_enum:{Withdraw:"Withdraw"}},ParachainTransactProxyType:{_enum:{Primary:0,Derived:1}},ParachainDerivedProxyAccountType:{_enum:{Salp:0,Staking:1}},Keys:"SessionKeys1",ParachainTransactType:{_enum:{Xcm:0,Proxy:1}},RpcContributionStatus:{_enum:{Idle:0,Contributing:1,Refunded:2,Unlocked:3,Redeemed:4}},RewardRecord:{account_id:"AccountId",record_amount:"Balance"},PoolId:"u32",SwapFee:"u128",PoolDetails:{owner:"AccountId",swap_fee_rate:"SwapFee",active:"bool"},PoolWeight:"Balance",PoolToken:"u128",PoolCreateTokenDetails:{token_id:"AssetId",token_balance:"Balance",token_weight:"PoolWeight"},MaxLocksOf:"u32",BifrostVestingInfo:{locked:"Balance",per_block:"Balance",starting_block:"BlockNumber"},OracleKey:"CurrencyId",BlockNumberFor:"BlockNumber",OrderInfo:{owner:"AccountIdOf",vsbond:"CurrencyId",amount:"BalanceOf",remain:"BalanceOf",total_price:"BalanceOf",order_id:"OrderId",order_type:"OrderType",remain_price:"BalanceOf"},OrderId:"u64",OrderType:{_enum:{Sell:0,Buy:1}},UnlockId:"U32",ZenlinkAssetId:{chain_id:"u32",asset_type:"u8",asset_index:"u64"},ZenlinkAssetBalance:"u128",PairInfo:{asset0:"ZenlinkAssetId",asset1:"ZenlinkAssetId",account:"AccountId",totalLiquidity:"ZenlinkAssetBalance",holdingLiquidity:"ZenlinkAssetBalance",reserve0:"ZenlinkAssetBalance",reserve1:"ZenlinkAssetBalance",lpAssetId:"ZenlinkAssetId"},PairMetadata:{pair_account:"AccountId",target_supply:"ZenlinkAssetBalance"},BootstrapParamter:{min_contribution:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",target_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",accumulated_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",end_block_number:"BlockNumber",pair_account:"AccountId"},PairStatus:{_enum:{Trading:"PairMetadata",Bootstrap:"BootstrapParamter",Disable:null}},TokenSymbol:{_enum:{ASG:0,BNC:1,KUSD:2,DOT:3,KSM:4,KAR:6,ZLK:7,PHA:8,RMRK:9,MOVR:10,GLMR:11}},CurrencyId:{_enum:{Native:"TokenSymbol",VToken:"TokenSymbol",Token:"TokenSymbol",Stable:"TokenSymbol",VSToken:"TokenSymbol",VSBond:"(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",LPToken:"(TokenSymbol, u8, TokenSymbol, u8)",ForeignAsset:"u32",Token2:"u8",VToken2:"u8",VSToken2:"u8",VSBond2:"u8",StableLpToken:"u32",Blp:"u32"}},CurrencyIdOf:"CurrencyId",TAssetBalance:"Balance",AmountOf:"Balance",StorageVersion:"Releases",ShareWeight:"Balance",Currency:"CurrencyIdOf",Amount:"AmountOf",TransferOriginType:{_enum:{FromSelf:0,FromRelayChain:1,FromSiblingParaChain:2}},TimeUnit:{Era:"u32",SlashingSpan:"u32",Round:"u32",Kblock:"u32"},MinimumsMaximums:{delegator_bonded_minimum:"Balance",bond_extra_minimum:"Balance",unbond_minimum:"Balance",rebond_minimum:"Balance",unbond_record_maximum:"u32",validators_back_maximum:"u32",delegator_active_staking_maximum:"Balance",validators_reward_maximum:"u32",delegation_amount_minimum:"Balance",delegators_maximum:"u16",validators_maximum:"u16"},PoolType:{_enum:{Mining:0,Farming:1,EBFarming:2}},PoolState:{_enum:{UnCharged:0,Charged:1,Ongoing:2,Retired:3,Dead:4}},DepositData:{deposit:"Balance",gain_avgs:"BTreeMap<CurrencyId, FixedU128>",update_b:"BlockNumber",pending_unlocks:"Vec<(BlockNumber, Balance)>"},RewardData:{total:"Balance",per_block:"Balance",claimed:"Balance",gain_avg:"FixedU128"},MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1",MultiLocation:"MultiLocationV1",XcmError:"XcmErrorV1",Response:"ResponseV1"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},"bifrost-parachain":{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}},flexibleFee:{getFeeTokenAndAmount:{description:"Get charging token type and amount in terms of flexible transaction fee.",params:[{name:"who",type:"AccountId"},{name:"extrinsic",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(CurrencyId, U256)",isSubscription:!1,jsonrpc:"flexibleFee_getFeeTokenAndAmount",method:"getFeeTokenAndAmount",section:"flexibleFee"}},salp:{getContribution:{description:"salp getContribution",params:[{name:"index",type:"ParaId"},{name:"who",type:"AccountIdOf"}],type:"(Balance, ContributionStatus)",isSubscription:!1,jsonrpc:"salp_getContribution",method:"getContribution",section:"salp"},getLiteContribution:{description:"salp getLiteContribution",params:[{name:"index",type:"ParaId"},{name:"who",type:"AccountIdOf"}],type:"(Balance, ContributionStatus)",isSubscription:!1,jsonrpc:"salp_getLiteContribution",method:"getLiteContribution",section:"salp"}},vtokenMint:{getVtokenMintRate:{description:"Get current vtoken mint rate.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"vtokenMint_getVtokenMintRate",method:"getVtokenMintRate",section:"vtokenMint"}},zenlinkProtocol:{getAllAssets:{description:"zenlinkProtocol getAllAssets",params:[{name:"at",type:"Hash",isOptional:!0}],type:"Vec<ZenlinkAssetId>",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAllAssets",method:"getAllAssets",section:"zenlinkProtocol"},getBalance:{description:"zenlinkProtocol getBalance",params:[{name:"asset_id",type:"ZenlinkAssetId"},{name:"account",type:"AccountId"},{name:"at",type:"Hash",isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"zenlinkProtocol_getBalance",method:"getBalance",section:"zenlinkProtocol"},getSovereignsInfo:{description:"Get the ownership of a certain currency for each parachain.",params:[{name:"asset_id",type:"ZenlinkAssetId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(u32, AccountId, String)",isSubscription:!1,jsonrpc:"zenlinkProtocol_getSovereignsInfo",method:"getSovereignsInfo",section:"zenlinkProtocol"},getPairByAssetId:{description:"Get the detailed information of a particular exchange pair.",params:[{name:"asset_0",type:"ZenlinkAssetId"},{name:"asset_1",type:"ZenlinkAssetId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"PairInfo",isSubscription:!1,jsonrpc:"zenlinkProtocol_getPairByAssetId",method:"getPairByAssetId",section:"zenlinkProtocol"},getAmountInPrice:{description:"Get the output token amount for an exact input token amount.",params:[{name:"supply",type:"ZenlinkAssetBalance"},{name:"path",type:"Vec<ZenlinkAssetId>"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAmountInPrice",method:"getAmountInPrice",section:"zenlinkProtocol"},getAmountOutPrice:{description:"Get the input token amount for an exact output token amount.",params:[{name:"supply",type:"ZenlinkAssetBalance"},{name:"path",type:"Vec<ZenlinkAssetId>"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getAmountOutPrice",method:"getAmountOutPrice",section:"zenlinkProtocol"},getEstimateLptoken:{description:"Get the estimated number of LP token acquired given the desired and minimum amount for both in-token and out-token.",params:[{name:"asset_0",type:"ZenlinkAssetId"},{name:"asset_1",type:"ZenlinkAssetId"},{name:"amount_0_desired",type:"ZenlinkAssetBalance"},{name:"amount_1_desired",type:"ZenlinkAssetBalance"},{name:"amount_0_min",type:"ZenlinkAssetBalance"},{name:"amount_1_min",type:"ZenlinkAssetBalance"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"u128",isSubscription:!1,jsonrpc:"zenlinkProtocol_getEstimateLptoken",method:"getEstimateLptoken",section:"zenlinkProtocol"}},liquidityMining:{getRewards:{description:"Get the rewards users deserve",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"pallet_instance",type:"U32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(CurrencyId, Balance)>",isSubscription:!1,jsonrpc:"liquidityMining_getRewards",method:"getRewards",section:"liquidityMining"}},stablePool:{getSwapOutputAmount:{description:"stablePool getSwapOutputAmount",params:[{name:"pool_id",type:"U32"},{name:"currency_id_in",type:"U32"},{name:"currency_id_out",type:"U32"},{name:"amount",type:"Balance"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"String",isSubscription:!1,jsonrpc:"stablePool_getSwapOutputAmount",method:"getSwapOutputAmount",section:"stablePool"}}},types:[{minmax:[0,901],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{pool_id:"PoolId",keeper:"AccountId",investor:"Option<AccountId>",trading_pair:"(CurrencyId, CurrencyId)",duration:"BlockNumber",type:"PoolType",min_deposit_to_start:"Balance",after_block_to_start:"BlockNumber",deposit:"Balance",rewards:"BTreeMap<CurrencyId, RewardData>",update_b:"BlockNumber",state:"PoolState",block_startup:"Option<BlockNumber>",redeem_limit_time:"BlockNumber",unlock_limit_nums:"u32",pending_unlock_nums:"u32"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",BiddingOrderId:"u64",EraId:"u32",BiddingOrderUnit:{bidder_id:"AccountId",token_id:"AssetId",block_num:"BlockNumber",votes:"Balance",annual_roi:"Permill",validator:"AccountId"},BiddingOrderUnitOf:"BiddingOrderUnit",VersionId:"u32",PermissionName:"u64",PermissionLevel:{actor:"AccountName",permission:"PermissionName"},Action:{account:"AccountName",name:"ActionName",authorization:"Vec<PermissionLevel>",data:"Vec<u8>"},AccountName:"u64",Checksum256:"([u8;32])",ActionName:"u64",FlatMap:{map:"Vec<(ActionName, u64)>"},UnsignedInt:"u32",ActionReceipt:{receiver:"AccountName",act_digest:"Checksum256",global_sequence:"u64",recv_sequence:"u64",auth_sequence:"FlatMap<AccountName, u64>",code_sequence:"UnsignedInt",abi_sequence:"UnsignedInt"},BlockchainType:{_enum:["BIFROST","EOS","IOST"]},Precision:"u32",BridgeAssetSymbol:{blockchain:"BlockchainType",symbol:"Vec<u8>",precision:"Precision"},PublicKey:{type_:"UnsignedInt",data:"[u8;33]"},ProducerKey:{producer_name:"AccountName",block_signing_key:"PublicKey"},ProducerSchedule:{version:"u32",producers:"Vec<ProducerKey>"},bridgeEosSignature:{type_:"UnsignedInt",data:"[u8;65]"},BlockTimestamp:"(u32)",Extension:"(u16, Vec<u8>)",BlockHeader:{timestamp:"BlockTimestamp",producer:"AccountName",confirmed:"u16",previous:"Checksum256",transaction_mroot:"Checksum256",action_mroot:"Checksum256",schedule_version:"u32",new_producers:"Option<ProducerSchedule>",header_extensions:"Vec<Extension>"},SignedBlockHeader:{block_header:"BlockHeader",producer_signature:"bridgeEosSignature"},Checksum256Array:"Vec<Checksum256>",IncrementalMerkle:{_node_count:"u64",_active_nodes:"Checksum256Array"},TxSig:{signature:"Vec<u8>",author:"AccountId"},MultiSig:{signatures:"Vec<TxSig>",threshold:"u8"},MultiSigTx:{chain_id:"Vec<u8>",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"Action",from:"AccountId",asset_id:"AssetId"},Sent:{tx_id:"Vec<u8>",from:"AccountId",asset_id:"AssetId"},Succeeded:{tx_id:"Vec<u8>"},Failed:{tx_id:"Vec<u8>",reason:"Vec<u8>"},TxOut:{_enum:{Initialized:"MultiSigTx",Created:"MultiSigTx",SignComplete:"MultiSigTx",Sent:"Sent",Succeeded:"Succeeded",Failed:"Failed"}},TransactionStatus:{_enum:["Initialized","Created","SignComplete","Sent","Succeeded","Failed"]},ProducerAuthoritySchedule:{version:"u32",producers:"Vec<ProducerAuthority>"},ProducerAuthority:{producer_name:"ActionName",authority:"BlockSigningAuthority"},BlockSigningAuthority:"(UnsignedInt, BlockSigningAuthorityV0)",BlockSigningAuthorityV0:{threshold:"u32",keyWeights:"Vec<KeyWeight>"},KeyWeight:{key:"PublicKey",weight:"u16"},BancorPool:{currency_id:"CurrencyId",token_pool:"Balance",vstoken_pool:"Balance",token_ceiling:"Balance",token_base_supply:"Balance",vstoken_base_supply:"Balance"},IostAction:{contract:"Vec<u8>",action_name:"Vec<u8>",data:"Vec<u8>"},IostMultiSigTx:{chain_id:"i32",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"IostAction",from:"AccountId",asset_id:"AssetId"},Processing:{tx_id:"Vec<u8>",multi_sig_tx:"IostMultiSigTx"},IostTxOut:{_enum:{Initial:"IostMultiSigTx",Generated:"IostMultiSigTx",Signed:"IostMultiSigTx",Processing:"Processing",Success:"Vec<u8>",Fail:"Failed"}},PalletBalanceOf:"Balance",ExtraFeeName:{_enum:["SalpContribute","NoExtraFee"]},IsExtended:"bool",SystemPalletId:"PalletId",ledger:{Substrate:"SubstrateLedger"},SubstrateLedger:{account:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>"},UnlockChunk:{value:"Balance",unlock_time:"TimeUnit"},FilecoinLedger:{account:"MultiLocationV1",initial_pledge:"Balance"},FilecoinOwnerByMinerEntry:{currency_id:"AccountId",miner_id:"MultiLocationV1",owner_id:"MultiLocationV1"},TrieIndex:"u32",FundInfo:{raised:"Balance",cap:"Balance",first_slot:"LeasePeriod",last_slot:"LeasePeriod",trie_index:"TrieIndex",status:"FundStatus"},RedeemStatus:"BalanceOf",FundStatus:{_enum:{Ongoing:0,Retired:1,Success:2,Failed:3,RefundWithdrew:4,RedeemWithdrew:5,End:6}},ContributionStatus:{_enum:["Idle","Refunded","Redeemed","Unlocked","MigratedIdle","Contributing"]},CrowdloanContributeCall:{_enum:{CrowdloanContribute:"ContributeCall"}},ContributeCall:{_enum:{Contribute:"Contribution"}},Contribution:{index:"ParaId",value:"BalanceOf",signature:"Option<MultiSignature>"},Withdraw:{who:"AccountIdOf",index:"ParaId"},WithdrawCall:{_enum:{Withdraw:"Withdraw"}},ParachainTransactProxyType:{_enum:{Primary:0,Derived:1}},ParachainDerivedProxyAccountType:{_enum:{Salp:0,Staking:1}},Keys:"SessionKeys1",ParachainTransactType:{_enum:{Xcm:0,Proxy:1}},RpcContributionStatus:{_enum:{Idle:0,Contributing:1,Refunded:2,Unlocked:3,Redeemed:4}},RewardRecord:{account_id:"AccountId",record_amount:"Balance"},PoolId:"u32",SwapFee:"u128",PoolDetails:{owner:"AccountId",swap_fee_rate:"SwapFee",active:"bool"},PoolWeight:"Balance",PoolToken:"u128",PoolCreateTokenDetails:{token_id:"AssetId",token_balance:"Balance",token_weight:"PoolWeight"},MaxLocksOf:"u32",BifrostVestingInfo:{locked:"Balance",per_block:"Balance",starting_block:"BlockNumber"},OracleKey:"CurrencyId",BlockNumberFor:"BlockNumber",OrderInfo:{owner:"AccountIdOf",vsbond:"CurrencyId",amount:"BalanceOf",remain:"BalanceOf",total_price:"BalanceOf",order_id:"OrderId",order_type:"OrderType",remain_price:"BalanceOf"},OrderId:"u64",OrderType:{_enum:{Sell:0,Buy:1}},UnlockId:"U32",ZenlinkAssetId:{chain_id:"u32",asset_type:"u8",asset_index:"u64"},ZenlinkAssetBalance:"u128",PairInfo:{asset0:"ZenlinkAssetId",asset1:"ZenlinkAssetId",account:"AccountId",totalLiquidity:"ZenlinkAssetBalance",holdingLiquidity:"ZenlinkAssetBalance",reserve0:"ZenlinkAssetBalance",reserve1:"ZenlinkAssetBalance",lpAssetId:"ZenlinkAssetId"},PairMetadata:{pair_account:"AccountId",target_supply:"ZenlinkAssetBalance"},BootstrapParamter:{min_contribution:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",target_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",accumulated_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",end_block_number:"BlockNumber",pair_account:"AccountId"},PairStatus:{_enum:{Trading:"PairMetadata",Bootstrap:"BootstrapParamter",Disable:null}},TokenSymbol:{_enum:{ASG:0,BNC:1,KUSD:2,DOT:3,KSM:4,KAR:6,ZLK:7,PHA:8,RMRK:9,MOVR:10,GLMR:11}},CurrencyId:{_enum:{Native:"TokenSymbol",VToken:"TokenSymbol",Token:"TokenSymbol",Stable:"TokenSymbol",VSToken:"TokenSymbol",VSBond:"(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",LPToken:"(TokenSymbol, u8, TokenSymbol, u8)",ForeignAsset:"u32",Token2:"u8",VToken2:"u8",VSToken2:"u8",VSBond2:"u8",StableLpToken:"u32",Blp:"u32"}},CurrencyIdOf:"CurrencyId",TAssetBalance:"Balance",AmountOf:"Balance",StorageVersion:"Releases",ShareWeight:"Balance",Currency:"CurrencyIdOf",Amount:"AmountOf",TransferOriginType:{_enum:{FromSelf:0,FromRelayChain:1,FromSiblingParaChain:2}},TimeUnit:{Era:"u32",SlashingSpan:"u32",Round:"u32",Kblock:"u32"},MinimumsMaximums:{delegator_bonded_minimum:"Balance",bond_extra_minimum:"Balance",unbond_minimum:"Balance",rebond_minimum:"Balance",unbond_record_maximum:"u32",validators_back_maximum:"u32",delegator_active_staking_maximum:"Balance",validators_reward_maximum:"u32",delegation_amount_minimum:"Balance",delegators_maximum:"u16",validators_maximum:"u16"},PoolType:{_enum:{Mining:0,Farming:1,EBFarming:2}},PoolState:{_enum:{UnCharged:0,Charged:1,Ongoing:2,Retired:3,Dead:4}},DepositData:{deposit:"Balance",gain_avgs:"BTreeMap<CurrencyId, FixedU128>",update_b:"BlockNumber",pending_unlocks:"Vec<(BlockNumber, Balance)>"},RewardData:{total:"Balance",per_block:"Balance",claimed:"Balance",gain_avg:"FixedU128"},MultiAsset:"MultiAssetV0",Xcm:"XcmV0",XcmOrder:"XcmOrderV0",MultiLocation:"MultiLocationV0",XcmError:"XcmErrorV0",Response:"ResponseV0"}},{minmax:[902,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{pool_id:"PoolId",keeper:"AccountId",investor:"Option<AccountId>",trading_pair:"(CurrencyId, CurrencyId)",duration:"BlockNumber",type:"PoolType",min_deposit_to_start:"Balance",after_block_to_start:"BlockNumber",deposit:"Balance",rewards:"BTreeMap<CurrencyId, RewardData>",update_b:"BlockNumber",state:"PoolState",block_startup:"Option<BlockNumber>",redeem_limit_time:"BlockNumber",unlock_limit_nums:"u32",pending_unlock_nums:"u32"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",BiddingOrderId:"u64",EraId:"u32",BiddingOrderUnit:{bidder_id:"AccountId",token_id:"AssetId",block_num:"BlockNumber",votes:"Balance",annual_roi:"Permill",validator:"AccountId"},BiddingOrderUnitOf:"BiddingOrderUnit",VersionId:"u32",PermissionName:"u64",PermissionLevel:{actor:"AccountName",permission:"PermissionName"},Action:{account:"AccountName",name:"ActionName",authorization:"Vec<PermissionLevel>",data:"Vec<u8>"},AccountName:"u64",Checksum256:"([u8;32])",ActionName:"u64",FlatMap:{map:"Vec<(ActionName, u64)>"},UnsignedInt:"u32",ActionReceipt:{receiver:"AccountName",act_digest:"Checksum256",global_sequence:"u64",recv_sequence:"u64",auth_sequence:"FlatMap<AccountName, u64>",code_sequence:"UnsignedInt",abi_sequence:"UnsignedInt"},BlockchainType:{_enum:["BIFROST","EOS","IOST"]},Precision:"u32",BridgeAssetSymbol:{blockchain:"BlockchainType",symbol:"Vec<u8>",precision:"Precision"},PublicKey:{type_:"UnsignedInt",data:"[u8;33]"},ProducerKey:{producer_name:"AccountName",block_signing_key:"PublicKey"},ProducerSchedule:{version:"u32",producers:"Vec<ProducerKey>"},bridgeEosSignature:{type_:"UnsignedInt",data:"[u8;65]"},BlockTimestamp:"(u32)",Extension:"(u16, Vec<u8>)",BlockHeader:{timestamp:"BlockTimestamp",producer:"AccountName",confirmed:"u16",previous:"Checksum256",transaction_mroot:"Checksum256",action_mroot:"Checksum256",schedule_version:"u32",new_producers:"Option<ProducerSchedule>",header_extensions:"Vec<Extension>"},SignedBlockHeader:{block_header:"BlockHeader",producer_signature:"bridgeEosSignature"},Checksum256Array:"Vec<Checksum256>",IncrementalMerkle:{_node_count:"u64",_active_nodes:"Checksum256Array"},TxSig:{signature:"Vec<u8>",author:"AccountId"},MultiSig:{signatures:"Vec<TxSig>",threshold:"u8"},MultiSigTx:{chain_id:"Vec<u8>",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"Action",from:"AccountId",asset_id:"AssetId"},Sent:{tx_id:"Vec<u8>",from:"AccountId",asset_id:"AssetId"},Succeeded:{tx_id:"Vec<u8>"},Failed:{tx_id:"Vec<u8>",reason:"Vec<u8>"},TxOut:{_enum:{Initialized:"MultiSigTx",Created:"MultiSigTx",SignComplete:"MultiSigTx",Sent:"Sent",Succeeded:"Succeeded",Failed:"Failed"}},TransactionStatus:{_enum:["Initialized","Created","SignComplete","Sent","Succeeded","Failed"]},ProducerAuthoritySchedule:{version:"u32",producers:"Vec<ProducerAuthority>"},ProducerAuthority:{producer_name:"ActionName",authority:"BlockSigningAuthority"},BlockSigningAuthority:"(UnsignedInt, BlockSigningAuthorityV0)",BlockSigningAuthorityV0:{threshold:"u32",keyWeights:"Vec<KeyWeight>"},KeyWeight:{key:"PublicKey",weight:"u16"},BancorPool:{currency_id:"CurrencyId",token_pool:"Balance",vstoken_pool:"Balance",token_ceiling:"Balance",token_base_supply:"Balance",vstoken_base_supply:"Balance"},IostAction:{contract:"Vec<u8>",action_name:"Vec<u8>",data:"Vec<u8>"},IostMultiSigTx:{chain_id:"i32",raw_tx:"Vec<u8>",multi_sig:"MultiSig",action:"IostAction",from:"AccountId",asset_id:"AssetId"},Processing:{tx_id:"Vec<u8>",multi_sig_tx:"IostMultiSigTx"},IostTxOut:{_enum:{Initial:"IostMultiSigTx",Generated:"IostMultiSigTx",Signed:"IostMultiSigTx",Processing:"Processing",Success:"Vec<u8>",Fail:"Failed"}},PalletBalanceOf:"Balance",ExtraFeeName:{_enum:["SalpContribute","NoExtraFee"]},IsExtended:"bool",SystemPalletId:"PalletId",ledger:{Substrate:"SubstrateLedger"},SubstrateLedger:{account:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>"},UnlockChunk:{value:"Balance",unlock_time:"TimeUnit"},FilecoinLedger:{account:"MultiLocationV1",initial_pledge:"Balance"},FilecoinOwnerByMinerEntry:{currency_id:"AccountId",miner_id:"MultiLocationV1",owner_id:"MultiLocationV1"},TrieIndex:"u32",FundInfo:{raised:"Balance",cap:"Balance",first_slot:"LeasePeriod",last_slot:"LeasePeriod",trie_index:"TrieIndex",status:"FundStatus"},RedeemStatus:"BalanceOf",FundStatus:{_enum:{Ongoing:0,Retired:1,Success:2,Failed:3,RefundWithdrew:4,RedeemWithdrew:5,End:6}},ContributionStatus:{_enum:["Idle","Refunded","Redeemed","Unlocked","MigratedIdle","Contributing"]},CrowdloanContributeCall:{_enum:{CrowdloanContribute:"ContributeCall"}},ContributeCall:{_enum:{Contribute:"Contribution"}},Contribution:{index:"ParaId",value:"BalanceOf",signature:"Option<MultiSignature>"},Withdraw:{who:"AccountIdOf",index:"ParaId"},WithdrawCall:{_enum:{Withdraw:"Withdraw"}},ParachainTransactProxyType:{_enum:{Primary:0,Derived:1}},ParachainDerivedProxyAccountType:{_enum:{Salp:0,Staking:1}},Keys:"SessionKeys1",ParachainTransactType:{_enum:{Xcm:0,Proxy:1}},RpcContributionStatus:{_enum:{Idle:0,Contributing:1,Refunded:2,Unlocked:3,Redeemed:4}},RewardRecord:{account_id:"AccountId",record_amount:"Balance"},PoolId:"u32",SwapFee:"u128",PoolDetails:{owner:"AccountId",swap_fee_rate:"SwapFee",active:"bool"},PoolWeight:"Balance",PoolToken:"u128",PoolCreateTokenDetails:{token_id:"AssetId",token_balance:"Balance",token_weight:"PoolWeight"},MaxLocksOf:"u32",BifrostVestingInfo:{locked:"Balance",per_block:"Balance",starting_block:"BlockNumber"},OracleKey:"CurrencyId",BlockNumberFor:"BlockNumber",OrderInfo:{owner:"AccountIdOf",vsbond:"CurrencyId",amount:"BalanceOf",remain:"BalanceOf",total_price:"BalanceOf",order_id:"OrderId",order_type:"OrderType",remain_price:"BalanceOf"},OrderId:"u64",OrderType:{_enum:{Sell:0,Buy:1}},UnlockId:"U32",ZenlinkAssetId:{chain_id:"u32",asset_type:"u8",asset_index:"u64"},ZenlinkAssetBalance:"u128",PairInfo:{asset0:"ZenlinkAssetId",asset1:"ZenlinkAssetId",account:"AccountId",totalLiquidity:"ZenlinkAssetBalance",holdingLiquidity:"ZenlinkAssetBalance",reserve0:"ZenlinkAssetBalance",reserve1:"ZenlinkAssetBalance",lpAssetId:"ZenlinkAssetId"},PairMetadata:{pair_account:"AccountId",target_supply:"ZenlinkAssetBalance"},BootstrapParamter:{min_contribution:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",target_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",accumulated_supply:"(ZenlinkAssetBalance, ZenlinkAssetBalance)",end_block_number:"BlockNumber",pair_account:"AccountId"},PairStatus:{_enum:{Trading:"PairMetadata",Bootstrap:"BootstrapParamter",Disable:null}},TokenSymbol:{_enum:{ASG:0,BNC:1,KUSD:2,DOT:3,KSM:4,KAR:6,ZLK:7,PHA:8,RMRK:9,MOVR:10,GLMR:11}},CurrencyId:{_enum:{Native:"TokenSymbol",VToken:"TokenSymbol",Token:"TokenSymbol",Stable:"TokenSymbol",VSToken:"TokenSymbol",VSBond:"(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)",LPToken:"(TokenSymbol, u8, TokenSymbol, u8)",ForeignAsset:"u32",Token2:"u8",VToken2:"u8",VSToken2:"u8",VSBond2:"u8",StableLpToken:"u32",Blp:"u32"}},CurrencyIdOf:"CurrencyId",TAssetBalance:"Balance",AmountOf:"Balance",StorageVersion:"Releases",ShareWeight:"Balance",Currency:"CurrencyIdOf",Amount:"AmountOf",TransferOriginType:{_enum:{FromSelf:0,FromRelayChain:1,FromSiblingParaChain:2}},TimeUnit:{Era:"u32",SlashingSpan:"u32",Round:"u32",Kblock:"u32"},MinimumsMaximums:{delegator_bonded_minimum:"Balance",bond_extra_minimum:"Balance",unbond_minimum:"Balance",rebond_minimum:"Balance",unbond_record_maximum:"u32",validators_back_maximum:"u32",delegator_active_staking_maximum:"Balance",validators_reward_maximum:"u32",delegation_amount_minimum:"Balance",delegators_maximum:"u16",validators_maximum:"u16"},PoolType:{_enum:{Mining:0,Farming:1,EBFarming:2}},PoolState:{_enum:{UnCharged:0,Charged:1,Ongoing:2,Retired:3,Dead:4}},DepositData:{deposit:"Balance",gain_avgs:"BTreeMap<CurrencyId, FixedU128>",update_b:"BlockNumber",pending_unlocks:"Vec<(BlockNumber, Balance)>"},RewardData:{total:"Balance",per_block:"Balance",claimed:"Balance",gain_avg:"FixedU128"},MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1",MultiLocation:"MultiLocationV1",XcmError:"XcmErrorV1",Response:"ResponseV1"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},"bitcountry-node":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AssetInfo:{owner:"AccountId",data:"AssetData"},AssetData:{name:"Text",description:"Text",properties:"Text",supporters:"Vec<AccountId>"},AuctionId:"u64",AuctionItem:{asset_id:"TokenId",class_id:"ClassId",recipient:"AccountId",initial_amount:"Balance",amount:"Balance",start_time:"u32",end_time:"u32"},AuctionInfo:{bid:"Option<(AccountId,Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},RentId:"u64",RentalInfo:{owner:"AccountId",start:"BlockNumber",end:"Option<BlockNumber>",price_per_block:"Balance"},CountryId:"u64",CountryCurrencyId:"u32",CollectionId:"u64",ClassId:"u32",TokenId:"u64",ClassInfoOf:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"NftClassData"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",data:"NftAssetData"},NftCollectionData:{name:"Vec<u8>",owner:"AccountId",properties:"Vec<u8>"},CurrencyId:"u32",CurrencyIdOf:"CurrencyId",BalanceIdOf:"Balance",GroupCollectionId:"u64",ClassIdOf:"u32",TokenIdOf:"u32",SpotId:"u32"}}]},"bitcountry-parachain":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AssetInfo:{owner:"AccountId",data:"AssetData"},AssetData:{name:"Text",description:"Text",properties:"Text",supporters:"Vec<AccountId>"},AuctionId:"u64",AuctionItem:{asset_id:"TokenId",class_id:"ClassId",recipient:"AccountId",initial_amount:"Balance",amount:"Balance",start_time:"u32",end_time:"u32"},AuctionInfo:{bid:"Option<(AccountId,Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},RentId:"u64",RentalInfo:{owner:"AccountId",start:"BlockNumber",end:"Option<BlockNumber>",price_per_block:"Balance"},CountryId:"u64",CollectionId:"u64",ClassId:"u32",TokenId:"u64",ClassInfoOf:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"NftClassData"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",data:"NftAssetData"},NftCollectionData:{name:"Vec<u8>",owner:"AccountId",properties:"Vec<u8>"},TokenType:{_enum:["Transferrable","BoundToAddress"]},NftAssetData:{name:"Vec<u8>",description:"Vec<u8>",properties:"Vec<u8>"},NftClassData:{deposit:"Balance",properties:"Vec<u8>",token_type:"TokenType"},NetworkId:{_enum:{Any:"Null",Named:"Vec<u8>",Polkadot:"Null",Kusama:"Null"}},CurrencyId:{_enum:{Token:"TokenSymbol"}},TokenSymbol:{_enum:["NUUM","AUSD","ACA","DOT"]},CountryCurrencyId:"u32",CurrencyIdOf:"CurrencyId",BalanceIdOf:"Balance",ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},XCurrencyId:{chain_id:"ChainId",currency_id:"CurrencyId"},GroupCollectionId:"u64",ClassIdOf:"u32",TokenIdOf:"u32",SpotId:"u32"}}]},centrifuge:{types:[{minmax:[0,null],types:{AnchorData:{id:"Hash",docRoot:"Hash",anchoredBlock:"u64"},ChainId:"u8","chainbridge::ChainId":"u8",DepositNonce:"u64",Fee:{key:"Hash",price:"Balance"},ParachainAccountIdOf:"AccountId",PreCommitData:{signingRoot:"Hash",identity:"AccountId",expirationBlock:"u64"},Proof:{leafHash:"Hash",sortedHashes:"Vec<Hash>"},ProxyType:{_enum:["Any","NonTransfer","Governance","_Staking","NonProxy"]},ResourceId:"[u8; 32]",RelayChainAccountId:"AccountId",RootHashOf:"Hash"}}]},"centrifuge-chain":{types:[{minmax:[0,null],types:{AnchorData:{id:"H256",docRoot:"H256",anchoredBlock:"u64"},Fee:{key:"Hash",price:"Balance"},PreCommitData:{signingRoot:"H256",identity:"H256",expirationBlock:"u64"},Proof:{leafHash:"H256",sortedHashes:"H256"},MultiAccountData:{threshold:"u16",signatories:"Vec<AccountId>",deposit:"Balance",depositor:"AccountId"},ChainId:"u8",ResourceId:"[u8; 32]","chainbridge::ChainId":"u8",DepositNonce:"u64",RegistryId:"H160",TokenId:"U256",AssetId:{registryId:"RegistryId",tokenId:"TokenId"},RegistryInfo:{ownerCanBurn:"bool",fields:"Vec<Bytes>"},AssetInfo:{metadata:"Bytes"},ProofMint:{value:"Bytes",property:"Bytes",salt:"[u8; 32]",hashes:"Vec<Hash>"},MintInfo:{anchorId:"Hash",staticHashes:"[Hash; 3]",proofs:"Vec<ProofMint>"}}}]},chainx:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId",Chain:{_enum:["ChainX","Bitcoin","Ethereum","Polkadot"]},NetworkType:{_enum:["Mainnet","Testnet"]},AssetType:{_enum:["Usable","Locked","Reserved","ReservedWithdrawal","ReservedDexSpot"]},OrderType:{_enum:["Limit","Market"]},Side:{_enum:["Buy","Sell"]},LockedType:{_enum:["Bonded","BondedWithdrawal"]},Memo:"Text",AssetInfo:{token:"String",tokenName:"String",chain:"Chain",decimals:"Decimals",desc:"String"},TradingPairProfile:{id:"TradingPairId",currencyPair:"CurrencyPair",pipDecimals:"u32",tickDecimals:"u32",tradable:"bool"},Order:{props:"OrderProperty",status:"OrderStatus",remaining:"Balance",executedIndices:"Vec<TradingHistoryIndex>",alreadyFilled:"Balance",lastUpdateAt:"BlockNumber"},TradingPairInfo:{latestPrice:"Price",lastUpdated:"BlockNumber"},OrderExecutedInfo:{tradingHistoryIdx:"TradingHistoryIndex",pairId:"TradingPairId",price:"Price",maker:"AccountId",taker:"AccountId",makerOrderId:"OrderId",takerOrderId:"OrderId",turnover:"Balance",executedAt:"BlockNumber"},BtcHeaderInfo:{header:"BtcHeader",height:"u32"},BtcParams:{maxBits:"u32",blockMaxFuture:"u32",targetTimespanSeconds:"u32",targetSpacingSeconds:"u32",retargetingFactor:"u32",retargetingInterval:"u32",minTimespan:"u32",maxTimespan:"u32"},MiningAssetInfo:{assetId:"AssetId",miningPower:"FixedAssetPower",rewardPot:"AccountId",rewardPotBalance:"RpcBalance",lastTotalMiningWeight:"RpcMiningWeight",lastTotalMiningWeightUpdate:"BlockNumber"},MiningDividendInfo:{own:"Balance",other:"Balance",insufficientStake:"Balance"},AssetLedger:{lastTotalMiningWeight:"MiningWeight",lastTotalMiningWeightUpdate:"BlockNumber"},MinerLedger:{lastMiningWeight:"MiningWeight",lastMiningWeightUpdate:"BlockNumber",lastClaim:"Option<BlockNumber>"},ClaimRestriction:{stakingRequirement:"StakingRequirement",frequencyLimit:"BlockNumber"},NominatorInfo:{lastRebond:"Option<BlockNumber>"},BondRequirement:{selfBonded:"Balance",total:"Balance"},Unbonded:{value:"Balance",lockedUntil:"BlockNumber"},ValidatorLedger:{totalNomination:"Balance",lastTotalVoteWeight:"VoteWeight",lastTotalVoteWeightUpdate:"BlockNumber"},NominatorLedger:{nomination:"Balance",lastVoteWeight:"VoteWeight",lastVoteWeightUpdate:"BlockNumber",unbondedChunks:"Vec<Unbonded>"},ValidatorProfile:{registeredAt:"BlockNumber",isChilled:"bool",lastChilled:"Option<BlockNumber>",referralId:"ReferralId"},GlobalDistribution:{treasury:"u32",mining:"u32"},MiningDistribution:{asset:"u32",staking:"u32"},InclusionFee:{baseFee:"Balance",lenFee:"Balance",adjustedWeightFee:"Balance"},FeeDetails:{inclusionFee:"Option<InclusionFee<Balance>>",extraFee:"Balance",tip:"Balance",finalFee:"Balance"},UnbondedIndex:"u32",Token:"Text",Desc:"Text",AddrStr:"Text",HandicapInfo:"Handicap",Price:"u128",OrderId:"u64",TradingPairId:"u32",TradingHistoryIndex:"u64",PriceFluctuation:"u32",BtcAddress:"Text",FixedAssetPower:"u32",StakingRequirement:"u32",Decimals:"u8",CurrencyPair:{base:"AssetId",quote:"AssetId"},OrderStatus:{_enum:["Created","PartialFill","Filled","PartialFillAndCanceled","Canceled"]},AssetId:"u32",MiningWeight:"u128",VoteWeight:"u128",ReferralId:"Text",AssetRestriction:{_enum:["Move","Transfer","Deposit","Withdraw","DestroyWithdrawal","DestroyFree"]},AssetRestrictions:{bits:"u32"},BtcHeader:"Vec<u8>",BtcNetwork:{_enum:["Mainnet","Testnet"]},OrderInfo:"Order",Amount:"i128",AmountOf:"Amount",CurrencyIdOf:"AssetId",CurrencyId:"AssetId",Handicap:{highestBid:"Price",lowestAsk:"Price"},OrderProperty:{id:"OrderId",side:"Side",price:"Price",amount:"Amount",pairId:"TradingPairId",submitter:"AccountId",orderType:"OrderType",createdAt:"BlockNumber"},TotalAssetInfo:{info:"AssetInfo",balance:"BTreeMap<AssetType, Balance>",isOnline:"bool",restrictions:"AssetRestrictions"},WithdrawalRecordId:"u32",WithdrawalState:{_enum:["Applying","Processing","NormalFinish","RootFinish","NormalCancel","RootCancel"]},WithdrawalRecord:{assetId:"AssetId",applicant:"AccountId",balance:"Balance",addr:"AddrStr",ext:"Memo",height:"BlockNumber"},WithdrawalLimit:{minimalWithdrawal:"Balance",fee:"Balance"},TrusteeInfoConfig:{minTrusteeCount:"u32",maxTrusteeCount:"u32"},GenericTrusteeIntentionProps:{about:"Text",hotEntity:"Vec<u8>",coldEntity:"Vec<u8>"},GenericTrusteeSessionInfo:{trusteeList:"Vec<AccountId>",threshold:"u16",hotAddress:"Vec<u8>",coldAddress:"Vec<u8>"},ChainAddress:"Vec<u8>",BtcTrusteeType:"Vec<u8>",BtcTrusteeAddrInfo:{addr:"BtcAddress",redeemScript:"Vec<u8>"},BtcTrusteeIntentionProps:{about:"Text",hotEntity:"BtcTrusteeType",coldEntity:"BtcTrusteeType"},BtcTrusteeSessionInfo:{trusteeList:"Vec<AccountId>",threshold:"u16",hotAddress:"BtcTrusteeAddrInfo",coldAddress:"BtcTrusteeAddrInfo"},BtcTransaction:"Vec<u8>",BtcPartialMerkleTree:"Vec<u8>",BtcRelayedTxInfo:{blockHash:"H256",merkleProof:"BtcPartialMerkleTree"},BtcHeaderIndex:{hash:"H256",height:"u32"},BtcTxResult:{_enum:["Success","Failure"]},BtcTxState:{txType:"BtcTxType",result:"BtcTxResult"},BtcTxType:{_enum:["Withdrawal","Deposit","HotAndCold","TrusteeTransition","Irrelevance"]},BtcDepositCache:{txid:"H256",balance:"u64"},BtcVoteResult:{_enum:["Unfinish","Finish"]},BtcWithdrawalProposal:{sigState:"BtcVoteResult",withdrawalIdList:"Vec<u32>",tx:"BtcTransaction",trusteeList:"Vec<(AccountId, bool)>"},BtcTxVerifier:{_enum:["Recover","RuntimeInterface"]},RpcTotalAssetInfo:{info:"AssetInfo",balance:"BTreeMap<AssetType, RpcBalance>",isOnline:"bool",restrictions:"AssetRestrictions"},RpcOrder:{id:"OrderId",side:"Side",price:"RpcPrice",amount:"RpcBalance",pairId:"TradingPairId",submitter:"AccountId",orderType:"OrderType",createdAt:"BlockNumber",status:"OrderStatus",remaining:"RpcBalance",executedIndices:"Vec<TradingHistoryIndex>",alreadyFilled:"RpcBalance",reservedBalance:"RpcBalance",lastUpdateAt:"BlockNumber"},RpcWithdrawalRecord:{assetId:"AssetId",applicant:"AccountId",balance:"RpcBalance",addr:"String",ext:"String",height:"BlockNumber",state:"WithdrawalState"},RpcMiningDividendInfo:{own:"RpcBalance",other:"RpcBalance",insufficientStake:"RpcBalance"},RpcInclusionFee:{baseFee:"RpcBalance",lenFee:"RpcBalance",adjustedWeightFee:"RpcBalance"},RpcFeeDetails:{inclusionFee:"Option<RpcInclusionFee>",tip:"RpcBalance",extraFee:"RpcBalance",finalFee:"RpcBalance"},ValidatorInfo:{account:"AccountId",registeredAt:"BlockNumber",isChilled:"bool",lastChilled:"Option<BlockNumber>",totalNomination:"RpcBalance",lastTotalVoteWeight:"RpcVoteWeight",lastTotalVoteWeightUpdate:"BlockNumber",isValidating:"bool",selfBonded:"RpcBalance",referralId:"String",rewardPotAccount:"AccountId",rewardPotBalance:"RpcBalance"},FullPairInfo:{baseCurrency:"AssetId",highestBid:"RpcPrice",id:"TradingPairId",latestPrice:"RpcPrice",latestPriceUpdatedAt:"BlockNumber",lowestAsk:"RpcPrice",maxValidBid:"RpcPrice",minValidAsk:"RpcPrice",pipDecimals:"u32",quoteCurrency:"AssetId",tickDecimals:"u32",tradable:"bool"},Depth:{asks:"Vec<(RpcPrice, RpcBalance)>",bids:"Vec<(RpcPrice, RpcBalance)>"},Page:{pageIndex:"u32",pageSize:"u32",data:"Vec<RpcOrder>"},String:"Text",Balance:"u128",RpcPrice:"String",RpcBalance:"String",RpcMiningWeight:"String",RpcVoteWeight:"String",FullIdentification:"ValidatorId",WithdrawalRecordOf:"WithdrawalRecord"}}]},"chainx-parachain":{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId",Chain:{_enum:["ChainX","Bitcoin","Ethereum","Polkadot"]},NetworkType:{_enum:["Mainnet","Testnet"]},AssetType:{_enum:["Usable","Locked","Reserved","ReservedWithdrawal","ReservedDexSpot"]},OrderType:{_enum:["Limit","Market"]},Side:{_enum:["Buy","Sell"]},LockedType:{_enum:["Bonded","BondedWithdrawal"]},Memo:"Text",AssetInfo:{token:"String",tokenName:"String",chain:"Chain",decimals:"Decimals",desc:"String"},TradingPairProfile:{id:"TradingPairId",currencyPair:"CurrencyPair",pipDecimals:"u32",tickDecimals:"u32",tradable:"bool"},Order:{props:"OrderProperty",status:"OrderStatus",remaining:"Balance",executedIndices:"Vec<TradingHistoryIndex>",alreadyFilled:"Balance",lastUpdateAt:"BlockNumber"},TradingPairInfo:{latestPrice:"Price",lastUpdated:"BlockNumber"},OrderExecutedInfo:{tradingHistoryIdx:"TradingHistoryIndex",pairId:"TradingPairId",price:"Price",maker:"AccountId",taker:"AccountId",makerOrderId:"OrderId",takerOrderId:"OrderId",turnover:"Balance",executedAt:"BlockNumber"},BtcHeaderInfo:{header:"BtcHeader",height:"u32"},BtcParams:{maxBits:"u32",blockMaxFuture:"u32",targetTimespanSeconds:"u32",targetSpacingSeconds:"u32",retargetingFactor:"u32",retargetingInterval:"u32",minTimespan:"u32",maxTimespan:"u32"},MiningAssetInfo:{assetId:"AssetId",miningPower:"FixedAssetPower",rewardPot:"AccountId",rewardPotBalance:"RpcBalance",lastTotalMiningWeight:"RpcMiningWeight",lastTotalMiningWeightUpdate:"BlockNumber"},MiningDividendInfo:{own:"Balance",other:"Balance",insufficientStake:"Balance"},AssetLedger:{lastTotalMiningWeight:"MiningWeight",lastTotalMiningWeightUpdate:"BlockNumber"},MinerLedger:{lastMiningWeight:"MiningWeight",lastMiningWeightUpdate:"BlockNumber",lastClaim:"Option<BlockNumber>"},ClaimRestriction:{stakingRequirement:"StakingRequirement",frequencyLimit:"BlockNumber"},NominatorInfo:{lastRebond:"Option<BlockNumber>"},BondRequirement:{selfBonded:"Balance",total:"Balance"},Unbonded:{value:"Balance",lockedUntil:"BlockNumber"},ValidatorLedger:{totalNomination:"Balance",lastTotalVoteWeight:"VoteWeight",lastTotalVoteWeightUpdate:"BlockNumber"},NominatorLedger:{nomination:"Balance",lastVoteWeight:"VoteWeight",lastVoteWeightUpdate:"BlockNumber",unbondedChunks:"Vec<Unbonded>"},ValidatorProfile:{registeredAt:"BlockNumber",isChilled:"bool",lastChilled:"Option<BlockNumber>",referralId:"ReferralId"},GlobalDistribution:{treasury:"u32",mining:"u32"},MiningDistribution:{asset:"u32",staking:"u32"},InclusionFee:{baseFee:"Balance",lenFee:"Balance",adjustedWeightFee:"Balance"},FeeDetails:{inclusionFee:"Option<InclusionFee<Balance>>",extraFee:"Balance",tip:"Balance",finalFee:"Balance"},UnbondedIndex:"u32",Token:"Text",Desc:"Text",AddrStr:"Text",HandicapInfo:"Handicap",Price:"u128",OrderId:"u64",TradingPairId:"u32",TradingHistoryIndex:"u64",PriceFluctuation:"u32",BtcAddress:"Text",FixedAssetPower:"u32",StakingRequirement:"u32",Decimals:"u8",CurrencyPair:{base:"AssetId",quote:"AssetId"},OrderStatus:{_enum:["Created","PartialFill","Filled","PartialFillAndCanceled","Canceled"]},AssetId:"u32",MiningWeight:"u128",VoteWeight:"u128",ReferralId:"Text",AssetRestriction:{_enum:["Move","Transfer","Deposit","Withdraw","DestroyWithdrawal","DestroyFree"]},AssetRestrictions:{bits:"u32"},BtcHeader:"Vec<u8>",BtcNetwork:{_enum:["Mainnet","Testnet"]},OrderInfo:"Order",Amount:"i128",AmountOf:"Amount",CurrencyIdOf:"AssetId",CurrencyId:"AssetId",Handicap:{highestBid:"Price",lowestAsk:"Price"},OrderProperty:{id:"OrderId",side:"Side",price:"Price",amount:"Amount",pairId:"TradingPairId",submitter:"AccountId",orderType:"OrderType",createdAt:"BlockNumber"},TotalAssetInfo:{info:"AssetInfo",balance:"BTreeMap<AssetType, Balance>",isOnline:"bool",restrictions:"AssetRestrictions"},WithdrawalRecordId:"u32",WithdrawalState:{_enum:["Applying","Processing","NormalFinish","RootFinish","NormalCancel","RootCancel"]},WithdrawalRecord:{assetId:"AssetId",applicant:"AccountId",balance:"Balance",addr:"AddrStr",ext:"Memo",height:"BlockNumber"},WithdrawalLimit:{minimalWithdrawal:"Balance",fee:"Balance"},TrusteeInfoConfig:{minTrusteeCount:"u32",maxTrusteeCount:"u32"},GenericTrusteeIntentionProps:{about:"Text",hotEntity:"Vec<u8>",coldEntity:"Vec<u8>"},GenericTrusteeSessionInfo:{trusteeList:"Vec<AccountId>",threshold:"u16",hotAddress:"Vec<u8>",coldAddress:"Vec<u8>"},ChainAddress:"Vec<u8>",BtcTrusteeType:"Vec<u8>",BtcTrusteeAddrInfo:{addr:"BtcAddress",redeemScript:"Vec<u8>"},BtcTrusteeIntentionProps:{about:"Text",hotEntity:"BtcTrusteeType",coldEntity:"BtcTrusteeType"},BtcTrusteeSessionInfo:{trusteeList:"Vec<AccountId>",threshold:"u16",hotAddress:"BtcTrusteeAddrInfo",coldAddress:"BtcTrusteeAddrInfo"},BtcTransaction:"Vec<u8>",BtcPartialMerkleTree:"Vec<u8>",BtcRelayedTxInfo:{blockHash:"H256",merkleProof:"BtcPartialMerkleTree"},BtcHeaderIndex:{hash:"H256",height:"u32"},BtcTxResult:{_enum:["Success","Failure"]},BtcTxState:{txType:"BtcTxType",result:"BtcTxResult"},BtcTxType:{_enum:["Withdrawal","Deposit","HotAndCold","TrusteeTransition","Irrelevance"]},BtcDepositCache:{txid:"H256",balance:"u64"},BtcVoteResult:{_enum:["Unfinish","Finish"]},BtcWithdrawalProposal:{sigState:"BtcVoteResult",withdrawalIdList:"Vec<u32>",tx:"BtcTransaction",trusteeList:"Vec<(AccountId, bool)>"},BtcTxVerifier:{_enum:["Recover","RuntimeInterface"]},RpcTotalAssetInfo:{info:"AssetInfo",balance:"BTreeMap<AssetType, RpcBalance>",isOnline:"bool",restrictions:"AssetRestrictions"},RpcOrder:{id:"OrderId",side:"Side",price:"RpcPrice",amount:"RpcBalance",pairId:"TradingPairId",submitter:"AccountId",orderType:"OrderType",createdAt:"BlockNumber",status:"OrderStatus",remaining:"RpcBalance",executedIndices:"Vec<TradingHistoryIndex>",alreadyFilled:"RpcBalance",reservedBalance:"RpcBalance",lastUpdateAt:"BlockNumber"},RpcWithdrawalRecord:{assetId:"AssetId",applicant:"AccountId",balance:"RpcBalance",addr:"String",ext:"String",height:"BlockNumber",state:"WithdrawalState"},RpcMiningDividendInfo:{own:"RpcBalance",other:"RpcBalance",insufficientStake:"RpcBalance"},RpcInclusionFee:{baseFee:"RpcBalance",lenFee:"RpcBalance",adjustedWeightFee:"RpcBalance"},RpcFeeDetails:{inclusionFee:"Option<RpcInclusionFee>",tip:"RpcBalance",extraFee:"RpcBalance",finalFee:"RpcBalance"},ValidatorInfo:{account:"AccountId",registeredAt:"BlockNumber",isChilled:"bool",lastChilled:"Option<BlockNumber>",totalNomination:"RpcBalance",lastTotalVoteWeight:"RpcVoteWeight",lastTotalVoteWeightUpdate:"BlockNumber",isValidating:"bool",selfBonded:"RpcBalance",referralId:"String",rewardPotAccount:"AccountId",rewardPotBalance:"RpcBalance"},FullPairInfo:{baseCurrency:"AssetId",highestBid:"RpcPrice",id:"TradingPairId",latestPrice:"RpcPrice",latestPriceUpdatedAt:"BlockNumber",lowestAsk:"RpcPrice",maxValidBid:"RpcPrice",minValidAsk:"RpcPrice",pipDecimals:"u32",quoteCurrency:"AssetId",tickDecimals:"u32",tradable:"bool"},Depth:{asks:"Vec<(RpcPrice, RpcBalance)>",bids:"Vec<(RpcPrice, RpcBalance)>"},Page:{pageIndex:"u32",pageSize:"u32",data:"Vec<RpcOrder>"},String:"Text",Balance:"u128",RpcPrice:"String",RpcBalance:"String",RpcMiningWeight:"String",RpcVoteWeight:"String",FullIdentification:"ValidatorId",WithdrawalRecordOf:"WithdrawalRecord"}}]},clover:{types:[{minmax:[0,null],types:{Amount:"i128",Keys:"SessionKeys4",AmountOf:"Amount",Balance:"u128",Rate:"FixedU128",Ratio:"FixedU128",EcdsaSignature:"[u8; 65]",EvmAddress:"H160",EthereumTxHash:"H256",BridgeNetworks:{_enum:["BSC","Ethereum","CloverPara"]}}}]},"clover-rococo":{types:[{minmax:[0,null],types:{Amount:"i128",AmountOf:"Amount",Balance:"u128",CurrencyId:{_enum:["CLV","CUSDT","DOT","CETH"]},CurrencyIdOf:"CurrencyId",CurrencyTypeEnum:{_enum:["CLV","CUSDT","DOT","CETH"]},PairKey:"u64",Rate:"FixedU128",Ratio:"FixedU128",Price:"FixedU128",Share:"u128",OracleKey:"CurrencyId",CurrencyInfo:{id:"CurrencyId",name:"CurrencyTypeEnum"},ExchangeInfo:{balance:"Balance",routes:"Vec<CurrencyTypeEnum>"},PoolId:{_enum:{Swap:"u64"}},EcdsaSignature:"[u8; 65]",EvmAddress:"H160",ExitSucceed:{_enum:["Stopped","Returned","Suicided"]},ExitRevert:{_enum:["Reverted"]},ExitError:{_enum:["StackUnderflow","StackOverflow","InvalidJump","InvalidRange","DesignatedInvalid","CallTooDeep","CreateCollision","CreateContractLimit","OutOfOffset","OutOfGas","OutOfFund","PCUnderflow","CreateEmpty","Other<String>"]},ExitFatal:{_enum:["NotSupported","UnhandledInterrupt","CallErrorAsFatal","Other<String>"]},ExitReason:{_enum:["Succeed<ExitSucceed>","Error<ExitError>","Revert<ExitRevert>","Fatal<ExitFatal>"]}}}]},coinversation:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},communeai:{types:[{minmax:[0,null],types:{Balance:"u64",NeuronMetadata:{version:"u32",ip:"u128",port:"u16",ipType:"u8",uid:"u32",netuid:"u16",modality:"u8",hotkey:"AccountId",coldkey:"AccountId",active:"u32",lastUpdate:"u64",priority:"u64",stake:"u64",rank:"u64",trust:"u64",consensus:"u64",incentive:"u64",dividends:"u64",emission:"u64",bonds:"Vec<(u32, u64)>",weights:"Vec<(u32, u32)>"}}}]},"competitors-club":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",ClassId:"u64",ClassInfoOf:"ClassId",BalanceOf:"Balance",BalanceReservableOf:"BalanceOf",Moment:"u64",Place:{spot:"u32",payout:"Balance"},Competitor:{vie_id:"[u8;16]",staked:"bool",submitted_winner:"bool"},Vie:{operator:"AccountId",stake:"Balance",places:"Vec<Place>",time:"Moment",competitors:"Vec<AccountId>",memo:"Vec<u8>"},VieOf:"Vie",VieReq:{stake:"Balance",places:"Vec<Place>",competitors:"Vec<AccountId>",memo:"Vec<u8>"},VieRequestOf:"VieReq",Participants:{AccountId:"[u8;16]"},Operators:{AccountId:"[u8;16]"},StandingReq:{competitor:"AccountId",spot:"u32"},PodiumReq:{champion:"AccountId",podium:"Vec<StandingReq>"},PodiumReqOf:"PodiumReq",Trophy:{trophy:"[u8; 16]",competitors:"Vec<AccountId>",stake:"Balance",memo:"Vec<u8>",time:"u64",podium:"Vec<StandingReq>"},TokenId:"u64",TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"Trophy"},TokenInfoOf:"TokenInfo"}}]},"continuum-runtime":{Amount:"i128",AmountOf:"Amount",AuctionId:"u64",AuctionIdOf:"AuctionId",BalanceIdOf:"Balance",MetaverseId:"u64",FungibleTokenId:{_enum:{NativeToken:"TokenId",FungibleToken:"TokenId",DEXShare:"(TokenId, TokenId)",MiningResource:"TokenId"}},CurrencyIdOf:"FungibleTokenId",TradingPairStatus:{_enum:["NotEnabled","Enabled"]},TradingPair:"(FungibleTokenId,FungibleTokenId)",TokenId:"u64",SpotId:"u32",ItemId:{_enum:{NFT:"AssetId",Spot:"(u64, MetaverseId)",Metaverse:"MetaverseId",Block:"u64"}},Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithTripleRefCount",AssetInfo:{owner:"AccountId",data:"AssetData"},AssetId:"u64",AssetData:{name:"Text",description:"Text",properties:"Text",supporters:"Vec<AccountId>"},AuctionItem:{itemId:"ItemId",recipient:"AccountId",initialAmount:"Balance",amount:"Balance",startTime:"u32",endTime:"u32",auctionType:"AuctionType",listingLevel:"ListingLevel",currencyId:"FungibleTokenId"},AuctionInfo:{bid:"Option<(AccountId,Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},AuctionType:{_enum:["Auction","BuyNow"]},RentId:"u64",RentalInfo:{owner:"AccountId",start:"BlockNumber",end:"Option<BlockNumber>",price_per_block:"Balance"},CountryId:"u64",CollectionId:"u64",ClassId:"u32",ClassInfoOf:{metadata:"Vec<u8>",totalIssuance:"TokenId",owner:"AccountId",data:"NftClassData"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",data:"NftAssetData"},NftCollectionData:{name:"Vec<u8>",owner:"AccountId",properties:"Vec<u8>"},NftGroupCollectionData:{name:"Vec<u8>",properties:"Vec<u8>"},NftAssetData:{deposit:"Balance",attributes:"Attributes"},NftClassData:{deposit:"Balance",attributes:"Attributes",tokenType:"TokenType",collectionType:"CollectionType",totalSupply:"u64",initialSupply:"u64"},NetworkId:{_enum:{Any:"Null",Named:"Vec<u8>",Polkadot:"Null",Kusama:"Null"}},CollectionType:{_enum:["Collectable","Wearable","Executable"]},CurrencyId:"SocialTokenCurrencyId",TokenSymbol:{_enum:["NUUM","AUSD","ACA","DOT"]},CountryCurrencyId:"u32",ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},XCurrencyId:{chain_id:"ChainId",currency_id:"CurrencyId"},GroupCollectionId:"u64",ClassIdOf:"ClassId",TokenIdOf:"TokenId",PoolId:"u32",SocialTokenCurrencyId:{_enum:{NativeToken:"TokenId",FungibleToken:"TokenId",DEXShare:"(TokenId, TokenId)",MiningResource:"TokenId"}},Country:{owner:"AccountId",metadata:"Text",currency_id:"SocialTokenCurrencyId"},Ticker:"Vec<u8>",Token:{ticker:"Ticker",total_supply:"Balance"},CountryFund:{vault:"AccountId",value:"u128",backing:"u128",currency_id:"SocialTokenCurrencyId"},LandId:"u64",BlindBoxId:"u64",BlindBoxType:{_enum:["KSM","NUUM","MainnetNFTHat","MainnetNFTJacket","MainnetNFTPants","MainnetNFTShoes","CollectableNFT"]},BlindBoxRewardItem:{recipient:"AccountId",amount:"u32",blindbox_type:"BlindBoxType"},TokenType:{_enum:["Transferable","BoundToAddress"]},ListingLevel:{_enum:{Global:"Null",Local:"MetaverseId"}},ResourceId:"[u8; 32]",VoteThreshold:{_enum:["SuperMajorityApprove","SuperMajorityAgainst","RelativeMajority"]},ProposalId:"u64",ReferendumId:"u64",CountryParameter:{_enum:{MaxProposals:"u8",SetReferendumJury:"AccountId"}},PreimageStatus:{_enum:{Missing:"BlockNumber",Available:{data:"Vec<u8>",provider:"AccountId",deposit:"Balance",since:"BlockNumber",expiry:"Option<BlockNumber>"}}},ReferendumParameters:{voting_threshold:"Option<VoteThreshold>",min_proposal_launch_period:"BlockNumber",voting_period:"BlockNumber",enactment_period:"BlockNumber",local_vote_locking_period:"BlockNumber",max_proposals_per_metaverse:"u8"},Vote:{aye:"bool"},Tally:{ayes:"Balance",nays:"Balance",turnout:"Balance"},VotingRecord:{votes:"Vec<(ReferendumId,Vote<Balance>)>",prior:"PriorLock<BlockNumber, Balance>"},ProposalInfo:{proposed_by:"AccountId",hash:"Hash",description:"Vec<u8>",referendum_launch_block:"BlockNumber"},ReferendumStatus:{end:"BlockNumber",metaverse:"MetaverseId",proposal:"ProposalId",tally:"Tally<Balance>",threshold:"Option<VoteThreshold>"},RoundIndex:"u32",MetaverseMetadata:"Vec<u8>",VestingScheduleOf:"VestingSchedule",VestingSchedule:{token:"FungibleTokenId",start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},NFTClassId:"u32",Attributes:"BTreeMap<Vec<u8>,Vec<u8>>",EstateId:"u64",Coordinates:"Vec<(i32,i32)>",Coordinate:"(i32,i32)",NewBound:"(i32,i32)",UndeployedLandBlockId:"u128",LandUnits:"Vec<(i32, i32)>",UndeployedLandBlockType:{_enum:["Transferable","BoundToAddress"]},MetaverseInfo:{owner:"AccountId",metadata:"MetaverseMetadata",currencyId:"FungibleTokenId"},OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},OrmlVestingSchedule:{token:"FungibleTokenId",start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Balance"},Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},MetaverseToken:{ticker:"Ticker",totalSupply:"Balance"},MetaverseParameter:{_enum:{MaxProposals:"u8",SetReferendumJury:"AccountId"}},Delegations:{votes:"Balance",capital:"Balance"},Conviction:{_enum:["None","Locked1x","Locked2x","Locked3x","Locked4x","Locked5x","Locked6x"]},PalletGovernanceVote:{aye:"bool",balance:"Balance",conviction:"Conviction"},PriorLock:"(BlockNumber, Balance)",ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus<BlockNumber,Balance>",Finished:{passed:"bool",end:"BlockNumber"}}},PowerAmount:"u64",ElementId:"u32",GeneratorNftId:"(ClassId, TokenId)",DistributorNftId:"(ClassId, TokenId)"},contracts:{types:[{minmax:[0,8],types:{Address:"AccountId",Keys:"SessionKeys2",LookupSource:"AccountId",Schedule:"ScheduleTo258"}},{minmax:[9,null],types:{Keys:"SessionKeys2"}}]},"crown-sterling":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:{nonce:"Index",consumers:"RefCount",providers:"RefCount",data:"AccountData"},Balance:"u128",BalanceOf:"Balance",AuthorityOf:"AccountId",PaymentId:"[u8;16]",Payment:{id:"PaymentId",account_id:"AccountId",success_url:"Vec<u8>",failure_url:"Vec<u8>",paid:"bool",pay_to:"AccountId"},PeerId:"(Vec<u8>)",Amendment:{statement:"Vec<u8>",owners:"Vec<AccountId>"},BlockNumber:"u32",VestingSchedule:{start:"BlockNumber",period:"BlockNumber",period_count:"BlockNumber",per_period:"Compact<Balance>"},VestingScheduleOf:"VestingSchedule"}}]},crust:{rpc:{},types:[{minmax:[null,null],types:{AccountInfo:"AccountInfoWithProviders",Address:"AccountId",AddressInfo:"Vec<u8>",LookupSource:"AccountId",EraBenefits:{total_fee_reduction_quota:"Compact<Balance>",total_market_active_funds:"Compact<Balance>",used_fee_reduction_quota:"Compact<Balance>",active_era:"Compact<EraIndex>"},FundsType:{_enum:["SWORK","MARKET"]},FundsUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},MarketBenefit:{total_funds:"Compact<Balance>",active_funds:"Compact<Balance>",used_fee_reduction_quota:"Compact<Balance>",file_reward:"Compact<Balance>",refreshed_at:"Compact<EraIndex>",unlocking_funds:"Vec<FundsUnlockChunk<Balance>>"},SworkBenefit:{total_funds:"Compact<Balance>",active_funds:"Compact<Balance>",total_fee_reduction_count:"u32",used_fee_reduction_count:"u32",refreshed_at:"Compact<EraIndex>",unlocking_funds:"Vec<FundsUnlockChunk<Balance>>"},BridgeChainId:"u8",ChainId:"u8",ResourceId:"H256",DepositNonce:"u64",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"ProposalStatus",expiry:"BlockNumber"},Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},TokenId:"U256",ETHAddress:"Vec<u8>",EthereumTxHash:"H256",Lock:{total:"Compact<Balance>",last_unlock_at:"BlockNumber",lock_type:"LockType"},LockType:{delay:"BlockNumber",lock_period:"u32"},FileInfo:{file_size:"u64",spower:"u64",expired_at:"BlockNumber",calculated_at:"BlockNumber",amount:"Compact<Balance>",prepaid:"Compact<Balance>",reported_replica_count:"u32",replicas:"Vec<Replica<AccountId>>"},FileInfoV2:{file_size:"u64",spower:"u64",expired_at:"BlockNumber",calculated_at:"BlockNumber",amount:"Compact<Balance>",prepaid:"Compact<Balance>",reported_replica_count:"u32",remaining_paid_count:"u32",replicas:"BTreeMap<AccountId, Replica<AccountId>>"},Replica:{who:"AccountId",valid_at:"BlockNumber",anchor:"SworkerAnchor",is_reported:"bool",created_at:"Option<BlockNumber>"},Guarantee:{targets:"Vec<IndividualExposure<AccountId, Balance>>",total:"Compact<Balance>",submitted_in:"EraIndex",suppressed:"bool"},ValidatorPrefs:{guarantee_fee:"Compact<Perbill>"},Group:{members:"BTreeSet<AccountId>",allowlist:"BTreeSet<AccountId>"},IASSig:"Vec<u8>",Identity:{anchor:"SworkerAnchor",punishment_deadline:"u64",group:"Option<AccountId>"},ISVBody:"Vec<u8>",MerkleRoot:"Vec<u8>",ReportSlot:"u64",PKInfo:{code:"SworkerCode",anchor:"Option<SworkerAnchor>"},SworkerAnchor:"Vec<u8>",SworkerCert:"Vec<u8>",SworkerCode:"Vec<u8>",SworkerPubKey:"Vec<u8>",SworkerSignature:"Vec<u8>",WorkReport:{report_slot:"u64",spower:"u64",free:"u64",reported_files_size:"u64",reported_srd_root:"MerkleRoot",reported_files_root:"MerkleRoot"}}}],alias:{}},"crust-parachain":{rpc:{},types:[{minmax:[null,null],types:{AccountInfo:"AccountInfoWithProviders",Address:"AccountId",AddressInfo:"Vec<u8>",LookupSource:"AccountId",EraBenefits:{total_fee_reduction_quota:"Compact<Balance>",total_market_active_funds:"Compact<Balance>",used_fee_reduction_quota:"Compact<Balance>",active_era:"Compact<EraIndex>"},FundsType:{_enum:["SWORK","MARKET"]},FundsUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},MarketBenefit:{total_funds:"Compact<Balance>",active_funds:"Compact<Balance>",used_fee_reduction_quota:"Compact<Balance>",file_reward:"Compact<Balance>",refreshed_at:"Compact<EraIndex>",unlocking_funds:"Vec<FundsUnlockChunk<Balance>>"},SworkBenefit:{total_funds:"Compact<Balance>",active_funds:"Compact<Balance>",total_fee_reduction_count:"u32",used_fee_reduction_count:"u32",refreshed_at:"Compact<EraIndex>",unlocking_funds:"Vec<FundsUnlockChunk<Balance>>"},BridgeChainId:"u8",ChainId:"u8",ResourceId:"H256",DepositNonce:"u64",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"ProposalStatus",expiry:"BlockNumber"},Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},TokenId:"U256",ETHAddress:"Vec<u8>",EthereumTxHash:"H256",Lock:{total:"Compact<Balance>",last_unlock_at:"BlockNumber",lock_type:"LockType"},LockType:{delay:"BlockNumber",lock_period:"u32"},FileInfo:{file_size:"u64",spower:"u64",expired_at:"BlockNumber",calculated_at:"BlockNumber",amount:"Compact<Balance>",prepaid:"Compact<Balance>",reported_replica_count:"u32",replicas:"Vec<Replica<AccountId>>"},FileInfoV2:{file_size:"u64",spower:"u64",expired_at:"BlockNumber",calculated_at:"BlockNumber",amount:"Compact<Balance>",prepaid:"Compact<Balance>",reported_replica_count:"u32",remaining_paid_count:"u32",replicas:"BTreeMap<AccountId, Replica<AccountId>>"},Replica:{who:"AccountId",valid_at:"BlockNumber",anchor:"SworkerAnchor",is_reported:"bool",created_at:"Option<BlockNumber>"},Guarantee:{targets:"Vec<IndividualExposure<AccountId, Balance>>",total:"Compact<Balance>",submitted_in:"EraIndex",suppressed:"bool"},ValidatorPrefs:{guarantee_fee:"Compact<Perbill>"},Group:{members:"BTreeSet<AccountId>",allowlist:"BTreeSet<AccountId>"},IASSig:"Vec<u8>",Identity:{anchor:"SworkerAnchor",punishment_deadline:"u64",group:"Option<AccountId>"},ISVBody:"Vec<u8>",MerkleRoot:"Vec<u8>",ReportSlot:"u64",PKInfo:{code:"SworkerCode",anchor:"Option<SworkerAnchor>"},SworkerAnchor:"Vec<u8>",SworkerCert:"Vec<u8>",SworkerCode:"Vec<u8>",SworkerPubKey:"Vec<u8>",SworkerSignature:"Vec<u8>",WorkReport:{report_slot:"u64",spower:"u64",free:"u64",reported_files_size:"u64",reported_srd_root:"MerkleRoot",reported_files_root:"MerkleRoot"}}}],alias:{}},"cumulus-test-parachain":{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},"curio-mainnet":{types:[{minmax:[0,null],types:{StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}}],runtime:{Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"},get_sorted_proposed_candidates:{description:"Provides a sorted list of collators most suited for given delegator's stake amount determined with some heuristic algorithm",params:[{name:"balance",type:"Balance"}],type:"Vec<AccountId32>"}},version:1}]}},"curio-testnet":{types:[{minmax:[0,null],types:{StakingRates:{collatorStakingRate:"Perquintill",collatorRewardRate:"Perquintill",delegatorStakingRate:"Perquintill",delegatorRewardRate:"Perquintill"}}}],runtime:{Staking:[{methods:{get_staking_rates:{description:"Calculate the current staking and reward rates for collators and delegators",params:[],type:"StakingRates"},get_unclaimed_staking_rewards:{description:"Calculate the claimable staking rewards for a given account address",params:[{name:"account",type:"AccountId32"}],type:"Balance"},get_sorted_proposed_candidates:{description:"Provides a sorted list of collators most suited for given delegator's stake amount determined with some heuristic algorithm",params:[{name:"balance",type:"Balance"}],type:"Vec<AccountId32>"}},version:1}]}},datahighway:{types:[{minmax:[0,null],types:{AccountInfo:"AccountInfoWithDualRefCount",Date:"i64",Keys:"SessionKeys2",Address:"MultiAddress",LookupSource:"MultiAddress",RoamingOperator:"[u8; 16]",RoamingOperatorIndex:"u64",RoamingNetwork:"[u8; 16]",RoamingNetworkIndex:"u64",RoamingOrganization:"[u8; 16]",RoamingOrganizationIndex:"u64",RoamingNetworkServer:"[u8; 16]",RoamingNetworkServerIndex:"u64",RoamingDevice:"[u8; 16]",RoamingDeviceIndex:"u64",RoamingRoutingProfile:"[u8; 16]",RoamingRoutingProfileIndex:"u64",RoamingRoutingProfileAppServer:"Text",RoamingServiceProfile:"[u8; 16]",RoamingServiceProfileIndex:"u64",RoamingServiceProfileUplinkRate:"u32",RoamingServiceProfileDownlinkRate:"u32",RoamingAccountingPolicy:"[u8; 16]",RoamingAccountingPolicyIndex:"u64",RoamingAccountingPolicyType:"Text",RoamingAccountingPolicyUplinkFeeFactor:"u32",RoamingAccountingPolicyDownlinkFeeFactor:"u32",RoamingAccountingPolicySetting:{policy_type:"Text",subscription_fee:"Balance",uplink_fee_factor:"u32",downlink_fee_factor:"u32"},RoamingAgreementPolicy:"[u8; 16]",RoamingAgreementPolicyIndex:"u64",RoamingAgreementPolicyActivationType:"Text",RoamingAgreementPolicySetting:{policy_activation_type:"Text",policy_expiry_block:"Moment"},RoamingNetworkProfile:"[u8; 16]",RoamingNetworkProfileIndex:"u64",RoamingDeviceProfile:"[u8; 16]",RoamingDeviceProfileIndex:"u64",RoamingDeviceProfileDevAddr:"Text",RoamingDeviceProfileDevEUI:"Text",RoamingDeviceProfileJoinEUI:"Text",RoamingDeviceProfileVendorID:"Text",RoamingDeviceProfileSetting:{device_profile_devaddr:"Text",device_profile_deveui:"Text",device_profile_joineui:"Text",device_profile_vendorid:"Text"},RoamingSession:"[u8; 16]",RoamingSessionIndex:"u64",RoamingSessionJoinRequest:{session_network_server_id:"Moment",session_join_requested_at_block:"Moment"},RoamingSessionJoinAccept:{session_join_request_accept_expiry:"Moment",session_join_request_accept_accepted_at_block:"Moment"},RoamingBillingPolicy:"[u8; 16]",RoamingBillingPolicyIndex:"u64",RoamingBillingPolicySetting:{policy_next_billing_at_block:"Moment",policy_frequency_in_blocks:"Moment"},RoamingChargingPolicy:"[u8; 16]",RoamingChargingPolicyIndex:"u64",RoamingChargingPolicySetting:{policy_next_charging_at_block:"Moment",policy_delay_after_billing_in_blocks:"u64"},RoamingPacketBundle:"[u8; 16]",RoamingPacketBundleIndex:"u64",RoamingPacketBundleReceivedAtHome:"bool",RoamingPacketBundleReceivedPacketsCount:"u64",RoamingPacketBundleReceivedPacketsOkCount:"u64",RoamingPacketBundleExternalDataStorageHash:"Hash",RoamingPacketBundleReceiver:{packet_bundle_received_at_home:"bool",packet_bundle_received_packets_count:"u64",packet_bundle_received_packets_ok_count:"u64",packet_bundle_received_started_at_block:"Moment",packet_bundle_received_ended_at_block:"Moment",packet_bundle_external_data_storage_hash:"Hash"},MiningRatesToken:"[u8; 16]",MiningRatesTokenIndex:"u64",MiningRatesTokenTokenDOT:"u32",MiningRatesTokenTokenMXC:"u32",MiningRatesTokenTokenIOTA:"u32",MiningRatesTokenMaxToken:"u32",MiningRatesTokenMaxLoyalty:"u32",MiningRatesTokenSetting:{token_token_mxc:"u32",token_token_iota:"u32",token_token_dot:"u32",token_max_token:"u32",token_max_loyalty:"u32"},MiningRatesHardware:"[u8; 16]",MiningRatesHardwareIndex:"u64",MiningRatesHardwareSecure:"u32",MiningRatesHardwareInsecure:"u32",MiningRatesHardwareMaxHardware:"u32",MiningRatesHardwareCategory1MaxTokenBonusPerGateway:"u32",MiningRatesHardwareCategory2MaxTokenBonusPerGateway:"u32",MiningRatesHardwareCategory3MaxTokenBonusPerGateway:"u32",MiningRatesHardwareSetting:{hardware_hardware_secure:"u32",hardware_hardware_insecure:"u32",hardware_max_hardware:"u32",hardware_category_1_max_token_bonus_per_gateway:"u32",hardware_category_2_max_token_bonus_per_gateway:"u32",hardware_category_3_max_token_bonus_per_gateway:"u32"},MiningSettingToken:"[u8; 16]",MiningSettingTokenIndex:"u64",MiningSettingTokenType:"Text",MiningSettingTokenLockAmount:"u64",MiningSettingTokenSetting:{token_type:"Text",token_lock_amount:"u64",token_lock_start_block:"Moment",token_lock_interval_blocks:"Moment"},MiningSettingTokenRequirementsSetting:{token_type:"Text",token_lock_min_amount:"u64",token_lock_min_blocks:"u32"},MiningSettingHardware:"[u8; 16]",MiningSettingHardwareIndex:"u64",MiningSettingHardwareSecure:"bool",MiningSettingHardwareType:"Text",MiningSettingHardwareID:"u64",MiningSettingHardwareDevEUI:"u64",MiningSettingHardwareSetting:{hardware_secure:"bool",hardware_type:"Text",hardware_id:"u64",hardware_dev_eui:"u64",hardware_lock_start_block:"Moment",hardware_lock_interval_blocks:"Moment"},MiningSamplingToken:"[u8; 16]",MiningSamplingTokenIndex:"u64",MiningSamplingTokenSampleLockedAmount:"u64",MiningSamplingTokenSetting:{token_sample_block:"Moment",token_sample_locked_amount:"u64"},MiningSamplingHardware:"[u8; 16]",MiningSamplingHardwareIndex:"u64",MiningSamplingHardwareSampleHardwareOnline:"u64",MiningSamplingHardwareSetting:{hardware_sample_block:"Moment",hardware_sample_hardware_online:"bool"},MiningEligibilityToken:"[u8; 16]",MiningEligibilityTokenIndex:"u64",MiningEligibilityTokenCalculatedEligibility:"u64",MiningEligibilityTokenLockedPercentage:"u32",MiningEligibilityTokenAuditorAccountID:"u64",MiningEligibilityTokenResult:{token_calculated_eligibility:"u64",token_token_locked_percentage:"u32",token_date_audited:"Moment",token_auditor_account_id:"u64"},MiningEligibilityHardware:"[u8; 16]",MiningEligibilityHardwareIndex:"u64",MiningEligibilityHardwareCalculatedEligibility:"u64",MiningEligibilityHardwareUptimePercentage:"u32",MiningEligibilityHardwareAuditorAccountID:"u64",MiningEligibilityHardwareResult:{hardware_calculated_eligibility:"u64",hardware_uptime_percentage:"u32",hardware_block_audited:"Moment",hardware_auditor_account_id:"u64"},MiningEligibilityProxy:"[u8; 16]",MiningEligibilityProxyIndex:"u64",MiningEligibilityProxyRewardRequest:{proxy_claim_requestor_account_id:"AccountId",proxy_claim_total_reward_amount:"Balance",proxy_claim_timestamp_redeemed:"Moment"},MiningEligibilityProxyClaimRewardeeData:{proxy_claim_rewardee_account_id:"AccountId",proxy_claim_reward_amount:"Balance",proxy_claim_start_date:"Date",proxy_claim_end_date:"Date"},RewardeeData:{proxy_claim_rewardee_account_id:"AccountId",proxy_claim_reward_amount:"Balance",proxy_claim_start_date:"Date",proxy_claim_end_date:"Date"},RewardRequestorData:{mining_eligibility_proxy_id:"MiningEligibilityProxyIndex",total_amt:"Balance",rewardee_count:"u64",member_kind:"u32",requested_date:"Moment"},RequestorData:{mining_eligibility_proxy_id:"MiningEligibilityProxyIndex",total_amt:"Balance",rewardee_count:"u64",member_kind:"u32",requested_date:"Moment"},RewardTransferData:{mining_eligibility_proxy_id:"MiningEligibilityProxyIndex",is_sent:"bool",total_amt:"Balance",rewardee_count:"u64",member_kind:"u32",requested_date:"Moment"},TransferData:{mining_eligibility_proxy_id:"MiningEligibilityProxyIndex",is_sent:"bool",total_amt:"Balance",rewardee_count:"u64",member_kind:"u32",requested_date:"Moment"},RewardDailyData:{mining_eligibility_proxy_id:"MiningEligibilityProxyIndex",total_amt:"Balance",proxy_claim_requestor_account_id:"AccountId",member_kind:"u32",rewarded_date:"Date"},DailyData:{mining_eligibility_proxy_id:"MiningEligibilityProxyIndex",total_amt:"Balance",proxy_claim_requestor_account_id:"AccountId",member_kind:"u32",rewarded_date:"Date"},MiningClaimsToken:"[u8; 16]",MiningClaimsTokenIndex:"u64",MiningClaimsTokenClaimAmount:"u64",MiningClaimsTokenClaimResult:{token_claim_amount:"u64",token_claim_block_redeemed:"u64"},MiningClaimsHardware:"[u8; 16]",MiningClaimsHardwareIndex:"u64",MiningClaimsHardwareClaimAmount:"u64",MiningClaimsHardwareClaimResult:{hardware_claim_amount:"u64",hardware_claim_block_redeemed:"u64"},MiningExecutionToken:"[u8; 16]",MiningExecutionTokenIndex:"u64",MiningExecutionTokenExecutorAccountID:"u64",MiningExecutionTokenExecutionResult:{token_execution_exector_account_id:"u64",token_execution_started_block:"Moment",token_execution_ended_block:"Moment"},ExchangeRateIndex:"u64",ExchangeRateSetting:{hbtc:"u64",dot:"u64",iota:"u64",fil:"u64",decimals_after_point:"u32"},HBTCRate:"u64",DOTRate:"u64",IOTARate:"u64",FILRate:"u64",DecimalsAfterPoint:"u32"}}]},"datahighway-parachain":{types:[{minmax:[0,null],types:{Keys:"SessionKeys2",Address:"MultiAddress",LookupSource:"MultiAddress",RoamingOperator:"[u8; 16]",RoamingOperatorIndex:"u64",RoamingNetwork:"[u8; 16]",RoamingNetworkIndex:"u64",RoamingOrganization:"[u8; 16]",RoamingOrganizationIndex:"u64",RoamingNetworkServer:"[u8; 16]",RoamingNetworkServerIndex:"u64",RoamingDevice:"[u8; 16]",RoamingDeviceIndex:"u64",RoamingRoutingProfile:"[u8; 16]",RoamingRoutingProfileIndex:"u64",RoamingRoutingProfileAppServer:"Text",RoamingServiceProfile:"[u8; 16]",RoamingServiceProfileIndex:"u64",RoamingServiceProfileUplinkRate:"u32",RoamingServiceProfileDownlinkRate:"u32",RoamingAccountingPolicy:"[u8; 16]",RoamingAccountingPolicyIndex:"u64",RoamingAccountingPolicyType:"Text",RoamingAccountingPolicyUplinkFeeFactor:"u32",RoamingAccountingPolicyDownlinkFeeFactor:"u32",RoamingAccountingPolicyConfig:{policy_type:"Text",subscription_fee:"Balance",uplink_fee_factor:"u32",downlink_fee_factor:"u32"},RoamingAgreementPolicy:"[u8; 16]",RoamingAgreementPolicyIndex:"u64",RoamingAgreementPolicyActivationType:"Text",RoamingAgreementPolicyConfig:{policy_activation_type:"Text",policy_expiry_block:"Moment"},RoamingNetworkProfile:"[u8; 16]",RoamingNetworkProfileIndex:"u64",RoamingDeviceProfile:"[u8; 16]",RoamingDeviceProfileIndex:"u64",RoamingDeviceProfileDevAddr:"Text",RoamingDeviceProfileDevEUI:"Text",RoamingDeviceProfileJoinEUI:"Text",RoamingDeviceProfileVendorID:"Text",RoamingDeviceProfileConfig:{device_profile_devaddr:"Text",device_profile_deveui:"Text",device_profile_joineui:"Text",device_profile_vendorid:"Text"},RoamingSession:"[u8; 16]",RoamingSessionIndex:"u64",RoamingSessionJoinRequest:{session_network_server_id:"Moment",session_join_requested_at_block:"Moment"},RoamingSessionJoinAccept:{session_join_request_accept_expiry:"Moment",session_join_request_accept_accepted_at_block:"Moment"},RoamingBillingPolicy:"[u8; 16]",RoamingBillingPolicyIndex:"u64",RoamingBillingPolicyConfig:{policy_next_billing_at_block:"Moment",policy_frequency_in_blocks:"Moment"},RoamingChargingPolicy:"[u8; 16]",RoamingChargingPolicyIndex:"u64",RoamingChargingPolicyConfig:{policy_next_charging_at_block:"Moment",policy_delay_after_billing_in_blocks:"u64"},RoamingPacketBundle:"[u8; 16]",RoamingPacketBundleIndex:"u64",RoamingPacketBundleReceivedAtHome:"bool",RoamingPacketBundleReceivedPacketsCount:"u64",RoamingPacketBundleReceivedPacketsOkCount:"u64",RoamingPacketBundleExternalDataStorageHash:"Hash",RoamingPacketBundleReceiver:{packet_bundle_received_at_home:"bool",packet_bundle_received_packets_count:"u64",packet_bundle_received_packets_ok_count:"u64",packet_bundle_received_started_at_block:"Moment",packet_bundle_received_ended_at_block:"Moment",packet_bundle_external_data_storage_hash:"Hash"},MiningRatesToken:"[u8; 16]",MiningRatesTokenIndex:"u64",MiningRatesTokenTokenDOT:"u32",MiningRatesTokenTokenMXC:"u32",MiningRatesTokenTokenIOTA:"u32",MiningRatesTokenMaxToken:"u32",MiningRatesTokenMaxLoyalty:"u32",MiningRatesTokenConfig:{token_token_mxc:"u32",token_token_iota:"u32",token_token_dot:"u32",token_max_token:"u32",token_max_loyalty:"u32"},MiningRatesHardware:"[u8; 16]",MiningRatesHardwareIndex:"u64",MiningRatesHardwareSecure:"u32",MiningRatesHardwareInsecure:"u32",MiningRatesHardwareMaxHardware:"u32",MiningRatesHardwareCategory1MaxTokenBonusPerGateway:"u32",MiningRatesHardwareCategory2MaxTokenBonusPerGateway:"u32",MiningRatesHardwareCategory3MaxTokenBonusPerGateway:"u32",MiningRatesHardwareConfig:{hardware_hardware_secure:"u32",hardware_hardware_insecure:"u32",hardware_max_hardware:"u32",hardware_category_1_max_token_bonus_per_gateway:"u32",hardware_category_2_max_token_bonus_per_gateway:"u32",hardware_category_3_max_token_bonus_per_gateway:"u32"},MiningConfigToken:"[u8; 16]",MiningConfigTokenIndex:"u64",MiningConfigTokenType:"Text",MiningConfigTokenLockAmount:"u64",MiningConfigTokenConfig:{token_type:"Text",token_lock_amount:"u64",token_lock_start_block:"Moment",token_lock_interval_blocks:"Moment"},MiningConfigTokenRequirementsConfig:{token_type:"Text",token_lock_min_amount:"u64",token_lock_min_blocks:"u32"},MiningConfigHardware:"[u8; 16]",MiningConfigHardwareIndex:"u64",MiningConfigHardwareSecure:"bool",MiningConfigHardwareType:"Text",MiningConfigHardwareID:"u64",MiningConfigHardwareDevEUI:"u64",MiningConfigHardwareConfig:{hardware_secure:"bool",hardware_type:"Text",hardware_id:"u64",hardware_dev_eui:"u64",hardware_lock_start_block:"Moment",hardware_lock_interval_blocks:"Moment"},MiningSamplingToken:"[u8; 16]",MiningSamplingTokenIndex:"u64",MiningSamplingTokenSampleLockedAmount:"u64",MiningSamplingTokenConfig:{token_sample_block:"Moment",token_sample_locked_amount:"u64"},MiningSamplingHardware:"[u8; 16]",MiningSamplingHardwareIndex:"u64",MiningSamplingHardwareSampleHardwareOnline:"u64",MiningSamplingHardwareConfig:{hardware_sample_block:"Moment",hardware_sample_hardware_online:"bool"},MiningEligibilityToken:"[u8; 16]",MiningEligibilityTokenIndex:"u64",MiningEligibilityTokenCalculatedEligibility:"u64",MiningEligibilityTokenLockedPercentage:"u32",MiningEligibilityTokenAuditorAccountID:"u64",MiningEligibilityTokenResult:{token_calculated_eligibility:"u64",token_token_locked_percentage:"u32",token_date_audited:"Moment",token_auditor_account_id:"u64"},MiningEligibilityHardware:"[u8; 16]",MiningEligibilityHardwareIndex:"u64",MiningEligibilityHardwareCalculatedEligibility:"u64",MiningEligibilityHardwareUptimePercentage:"u32",MiningEligibilityHardwareAuditorAccountID:"u64",MiningEligibilityHardwareResult:{hardware_calculated_eligibility:"u64",hardware_uptime_percentage:"u32",hardware_block_audited:"Moment",hardware_auditor_account_id:"u64"},MiningClaimsToken:"[u8; 16]",MiningClaimsTokenIndex:"u64",MiningClaimsTokenClaimAmount:"u64",MiningClaimsTokenClaimResult:{token_claim_amount:"u64",token_claim_block_redeemed:"u64"},MiningClaimsHardware:"[u8; 16]",MiningClaimsHardwareIndex:"u64",MiningClaimsHardwareClaimAmount:"u64",MiningClaimsHardwareClaimResult:{hardware_claim_amount:"u64",hardware_claim_block_redeemed:"u64"},MiningExecutionToken:"[u8; 16]",MiningExecutionTokenIndex:"u64",MiningExecutionTokenExecutorAccountID:"u64",MiningExecutionTokenExecutionResult:{token_execution_exector_account_id:"u64",token_execution_started_block:"Moment",token_execution_ended_block:"Moment"},ExchangeRateIndex:"u64",ExchangeRateConfig:{hbtc:"u64",dot:"u64",iota:"u64",fil:"u64",decimals_after_point:"u32"},HBTCRate:"u64",DOTRate:"u64",IOTARate:"u64",FILRate:"u64",DecimalsAfterPoint:"u32"}}]},dawn:{types:[{minmax:[0,null],types:{AccountIdOf:"AccountId",Address:"MultiAddress",AirDropCurrencyId:{_enum:["ICE","EAVE"]},Amount:"i128",AmountOf:"Amount",AsOriginId:"AuthoritysOriginId",AssetId:"u64",AssetIdOf:"AssetId",AuctionId:"u32",AuctionIdOf:"AuctionId",AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},AuthoritysOriginId:{_enum:["Root","EaveTreasury","CdpTreasury","ElpTreasury","DSWF"]},BalanceInfo:{amount:"Balance"},BalanceRequest:{amount:"Balance"},BalanceWrapper:{amount:"Balance"},BondingLedger:{total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},CID:"Vec<u8>",CallOf:"Call",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},ClassData:{deposit:"Balance",properties:"Properties"},ClassId:"u32",ClassIdOf:"ClassId",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},CodeInfo:{codeSize:"u32",refCount:"u32"},CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",DataProviderId:{_enum:["Aggregated","Eave","Band"]},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},DestAddress:"Vec<u8>",DispatchId:"u32",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ElpUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>",developerDeposit:"Option<Balance>"},EvmAddress:"H160",EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},ExchangeRate:"FixedU128",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},Keys:"SessionKeys2",Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},LiquidationStrategy:{_enum:["Auction","Exchange"]},LiquidityPool:{currency_ids:"Vec<AssetIdOf>",lp_token_id:"AssetId",pool_config_id:"u32",pool_reserves:"Vec<Balance>"},LiquidityPoolConfig_:"PoolConfig",LiquidityPool_:"LiquidityPool",LookupSource:"MultiAddress",NomineeId:"AccountId",NFTBalance:"u128",OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",OracleKey:"CurrencyId",OracleValue:"Price",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},PalletBalanceOf:"Balance",PalletsOrigin:{_enum:{System:"SystemOrigin",Timestamp:"Null",RandomnessCollectiveFlip:"Null",Balances:"Null",Accounts:"Null",Currencies:"Null",Tokens:"Null",Vesting:"Null",EaveTreasury:"Null",Utility:"Null",Multisig:"Null",Recovery:"Null",Proxy:"Null",Scheduler:"Null",Indices:"Null",GraduallyUpdate:"Null",Authorship:"Null",Babe:"Null",Grandpa:"Null",Staking:"Null",Session:"Null",Historical:"Null",GeneralCouncil:"CollectiveOrigin",GeneralCouncilMembership:"Null",EYECouncil:"CollectiveOrigin",EYECouncilMembership:"Null",ElpCouncil:"CollectiveOrigin",ElpCouncilMembership:"Null",TechnicalCommittee:"CollectiveOrigin",TechnicalCommitteeMembership:"Null",Authority:"DelayedOrigin",ElectionsPhragmen:"Null",EaveOracle:"Null",BandOracle:"Null",OperatorMembershipEave:"Null",OperatorMembershipBand:"Null",Auction:"Null",Rewards:"Null",OrmlNFT:"Null",Prices:"Null",Dex:"Null",AuctionManager:"Null",Loans:"Null",EYE:"Null",CdpTreasury:"Null",CdpEngine:"Null",EmergencyShutdown:"Null",Elp:"Null",NomineesElection:"Null",StakingPool:"Null",PolkadotBridge:"Null",Incentives:"Null",AirDrop:"Null",NFT:"Null",RenVmBridge:"Null",Contracts:"Null",EVM:"Null",Sudo:"Null",TransactionPayment:"Null"}},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Elp:"Null"}},PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"},Position:{collateral:"Balance",debit:"Balance"},Price:"FixedU128",Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2}},PublicKey:"[u8; 20]",Rate:"FixedU128",Ratio:"FixedU128",RedeemStrategy:{_enum:{Immediately:"Null",Target:"EraIndex",WaitForUnbonding:"Null"}},RelaychainAccountId:"AccountId",RiskManagementParams:{maximumTotalDebitValue:"Balance",stabilityFee:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},RpcDataProviderId:"Text",ScheduleTaskIndex:"u32",Share:"u128",StorageKeyBytes:"Vec<u8>",StorageValue:"Vec<u8>",StorageValueBytes:"Vec<u8>",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",TokenBalanceOf:"Balance",TokenData:{deposit:"Balance"},TokenId:"u64",TokenIdOf:"TokenId",TokenInfo:{name:"Text",symbol:"Text",decimals:"u8",owner:"AccountId"},TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},TokenSymbol:{_enum:{EAVE:0,EUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,INTERBTC:6,PLM:7,PHA:8,HDT:9,ICE:128,IUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},TradingPair:"(CurrencyId,  CurrencyId)",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},TradingPairStatus:{_enum:{NotEnabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},VestingScheduleOf:"OrmlVestingSchedule",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"}}}]},"dev-parachain":{types:[{minmax:[0,null],types:{PairId:"u32",Pair:{token_0:"AssetId",token_1:"AssetId",account:"AccountId",total_liquidity:"TokenBalance",lp_asset_id:"AssetId"},PairInfo:{token_0:"AssetId",token_1:"AssetId",account:"AccountId",total_liquidity:"TokenBalance",holding_liquidity:"TokenBalance",reserve_0:"TokenBalance",reserve_1:"TokenBalance",lp_asset_id:"AssetId"},AssetId:{chain_id:"u32",module_index:"u8",asset_index:"u32"},TokenId:"u32",AssetProperty:{_enum:{FOREIGN:null,LP:"LpProperty"}},LpProperty:{token_0:"AssetId",token_1:"AssetId"},TokenBalance:"u128"}}]},"dock-pos-main-runtime":{types:[{minmax:[0,23],types:{Address:"AccountId",LookupSource:"AccountId",Keys:"SessionKeys2",Did:"[u8;32]",Bytes32:{value:"[u8;32]"},Bytes33:{value:"[u8;33]"},Bytes64:{value:"[u8;64]"},Bytes65:{value:"[u8;65]"},PublicKey:{_enum:{Sr25519:"Bytes32",Ed25519:"Bytes32",Secp256k1:"Bytes33"}},DidSignature:{_enum:{Sr25519:"Bytes64",Ed25519:"Bytes64",Secp256k1:"Bytes65"}},KeyDetail:{controller:"Did",public_key:"PublicKey"},KeyUpdate:{did:"Did",public_key:"PublicKey",controller:"Option<Did>",last_modified_in_block:"BlockNumber"},DidRemoval:{did:"Did",last_modified_in_block:"BlockNumber"},RegistryId:"[u8;32]",RevokeId:"[u8;32]",Registry:{policy:"Policy",add_only:"bool"},Revoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},UnRevoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},RemoveRegistry:{registry_id:"RegistryId",last_modified:"BlockNumber"},PAuth:"BTreeMap<Did, DidSignature>",Policy:{_enum:{OneOf:"BTreeSet<Did>"}},BlobId:"[u8;32]",Blob:{id:"BlobId",blob:"Vec<u8>",author:"Did"},EpochNo:"u32",EpochLen:"u32",SlotNo:"u64",Balance:"u64",EpochDetail:{validator_count:"u8",starting_slot:"SlotNo",expected_ending_slot:"SlotNo",ending_slot:"Option<SlotNo>",emission_for_validators:"Option<Balance>",emission_for_treasury:"Option<Balance>"},ValidatorStatsPerEpoch:{block_count:"EpochLen",locked_reward:"Option<Balance>",unlocked_reward:"Option<Balance>"},Payload:{proposal:"Vec<u8>",round_no:"u64"},Membership:{members:"BTreeSet<Did>",vote_requirement:"u64"},PMAuth:"BTreeMap<Did, DidSignature>",Bonus:{swap_bonuses:"Vec<(Balance, BlockNumber)>",vesting_bonuses:"Vec<(Balance, Balance, BlockNumber)>"},Attestation:{priority:"Compact<u64>",iri:"Option<Vec<u8>>"},StateChange:{_enum:{KeyUpdate:"KeyUpdate",DidRemoval:"DidRemoval",Revoke:"Revoke",UnRevoke:"UnRevoke",RemoveRegistry:"RemoveRegistry",Blob:"Blob",MasterVote:"Payload",Attestation:"(Did, Attestation)"}}}},{minmax:[23],types:{Address:"MultiAddress",LookupSource:"MultiAddress",PerDispatchClassU32:{normal:"u32",operational:"u32",mandatory:"u32"},BlockLength:{max:"PerDispatchClassU32"},Keys:"SessionKeys2",Did:"[u8;32]",Bytes32:{value:"[u8;32]"},Bytes33:{value:"[u8;33]"},Bytes64:{value:"[u8;64]"},Bytes65:{value:"[u8;65]"},PublicKey:{_enum:{Sr25519:"Bytes32",Ed25519:"Bytes32",Secp256k1:"Bytes33"}},DidSignature:{_enum:{Sr25519:"Bytes64",Ed25519:"Bytes64",Secp256k1:"Bytes65"}},KeyDetail:{controller:"Did",public_key:"PublicKey"},KeyUpdate:{did:"Did",public_key:"PublicKey",controller:"Option<Did>",last_modified_in_block:"BlockNumber"},DidRemoval:{did:"Did",last_modified_in_block:"BlockNumber"},RegistryId:"[u8;32]",RevokeId:"[u8;32]",Registry:{policy:"Policy",add_only:"bool"},Revoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},UnRevoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},RemoveRegistry:{registry_id:"RegistryId",last_modified:"BlockNumber"},PAuth:"BTreeMap<Did, DidSignature>",Policy:{_enum:{OneOf:"BTreeSet<Did>"}},BlobId:"[u8;32]",Blob:{id:"BlobId",blob:"Vec<u8>",author:"Did"},EpochNo:"u32",EpochLen:"u32",SlotNo:"u64",Balance:"u64",EpochDetail:{validator_count:"u8",starting_slot:"SlotNo",expected_ending_slot:"SlotNo",ending_slot:"Option<SlotNo>",emission_for_validators:"Option<Balance>",emission_for_treasury:"Option<Balance>"},ValidatorStatsPerEpoch:{block_count:"EpochLen",locked_reward:"Option<Balance>",unlocked_reward:"Option<Balance>"},Payload:{proposal:"Vec<u8>",round_no:"u64"},Membership:{members:"BTreeSet<Did>",vote_requirement:"u64"},PMAuth:"BTreeMap<Did, DidSignature>",Bonus:{swap_bonuses:"Vec<(Balance, BlockNumber)>",vesting_bonuses:"Vec<(Balance, Balance, BlockNumber)>"},Attestation:{priority:"Compact<u64>",iri:"Option<Vec<u8>>"},Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},ParamType:{_enum:{Address:null,Int:"u16",Uint:"u16"}},ContractConfig:{address:"H160",query_aggregator_call_encoded:"Vec<u8>",query_price_abi_encoded:"Vec<u8>",return_val_abi:"Vec<ParamType>"},StateChange:{_enum:{KeyUpdate:"KeyUpdate",DidRemoval:"DidRemoval",Revoke:"Revoke",UnRevoke:"UnRevoke",RemoveRegistry:"RemoveRegistry",Blob:"Blob",MasterVote:"Payload",Attestation:"(Did, Attestation)"}}}}],rpc:{poa:{treasuryAccount:{description:"Return account address of treasury. The account address can then be used to query the chain for balance",params:[],type:"AccountId"},treasuryBalance:{description:"Return free balance of treasury account. In the context of PoA, only free balance makes sense for treasury. But just in case, to check all kinds of balance (locked, reserved, etc), get the account address with above call and query the chain.",params:[],type:"Balance"},getTotalEmissionInEpoch:{description:"Return total (validators + treasury) emission rewards for given epoch",params:["EpochNo"],type:"Balance"}},price_feed:{tokenUsdPrice:{description:"Gets the price of Dock/USD from pallet's storage",params:[],type:"Option<u32>"},tokenUsdPriceFromContract:{description:"Gets the price of Dock/USD from EVM contract",params:[],type:"Option<u32>"}},fiat_filter:{getCallFeeDock:{description:"Accepts a scale-encoded extrinsic, returns fee in µDOCK as Balance (u64)",params:["Bytes"],type:"Balance"}},core_mods:{psPublicKeyWithParams:{description:"Return PS public key with params",params:[{name:"id",type:"(Did, IncId)"}],type:"Option<(PsPublicKey, Option<PsParameters>)>"},psParamsByDid:{description:"Return all PS params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, PsParameters>"},psPublicKeysByDid:{description:"Return all PS key with params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, (PsPublicKey, Option<PsParameters>)>"},bbsPublicKeyWithParams:{description:"Return BBS public key with params",params:[{name:"id",type:"(Did, IncId)"}],type:"Option<(BbsPublicKey, Option<BbsParameters>)>"},bbsParamsByDid:{description:"Return all BBS params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, BbsParameters>"},bbsPublicKeysByDid:{description:"Return all BBS key with params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, (BbsPublicKey, Option<BbsParameters>)>"},bbsPlusPublicKeyWithParams:{description:"Return BBS+ public key with params",params:[{name:"id",type:"(Did, IncId)"}],type:"Option<(BbsPlusPublicKey, Option<BbsPlusParameters>)>"},bbsPlusParamsByDid:{description:"Return all BBS+ params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, BbsPlusParameters>"},bbsPlusPublicKeysByDid:{description:"Return all BBS+ key with params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, (BbsPlusPublicKey, Option<BbsPlusParameters>)>"},accumulatorPublicKeyWithParams:{description:"Return Accumulator public key with params",params:[{name:"id",type:"AccumPublicKeyStorageKey"}],type:"Option<AccumPublicKeyWithParams>"},accumulatorWithPublicKeyAndParams:{description:"Return Accumulator public key with params",params:[{name:"id",type:"AccumulatorId"}],type:"Option<(Vec<u8>, Option<AccumPublicKeyWithParams>)>"},didDetails:{description:"Get all keys, controllers and service endpoints of the DID",params:[{name:"did",type:"Did"},{name:"params",type:"u8",isOptional:!0}],type:"Option<AggregatedDidDetailsResponse>"},didListDetails:{description:"Get all keys, controllers and service endpoints of the DID",params:[{name:"dids",type:"Vec<Did>"},{name:"params",type:"u8",isOptional:!0}],type:"Vec<Option<AggregatedDidDetailsResponse>>"}},staking_rewards:{yearlyEmission:{description:"",params:[{name:"total_staked",type:"Balance"},{name:"total_issuance",type:"Balance"}],type:"Balance"},maxYearlyEmission:{description:"",params:[],type:"Balance"}}}},"dock-pos-test-runtime":{types:[{minmax:[0,23],types:{Address:"AccountId",LookupSource:"AccountId",Keys:"SessionKeys2",Did:"[u8;32]",Bytes32:{value:"[u8;32]"},Bytes33:{value:"[u8;33]"},Bytes64:{value:"[u8;64]"},Bytes65:{value:"[u8;65]"},PublicKey:{_enum:{Sr25519:"Bytes32",Ed25519:"Bytes32",Secp256k1:"Bytes33"}},DidSignature:{_enum:{Sr25519:"Bytes64",Ed25519:"Bytes64",Secp256k1:"Bytes65"}},KeyDetail:{controller:"Did",public_key:"PublicKey"},KeyUpdate:{did:"Did",public_key:"PublicKey",controller:"Option<Did>",last_modified_in_block:"BlockNumber"},DidRemoval:{did:"Did",last_modified_in_block:"BlockNumber"},RegistryId:"[u8;32]",RevokeId:"[u8;32]",Registry:{policy:"Policy",add_only:"bool"},Revoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},UnRevoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},RemoveRegistry:{registry_id:"RegistryId",last_modified:"BlockNumber"},PAuth:"BTreeMap<Did, DidSignature>",Policy:{_enum:{OneOf:"BTreeSet<Did>"}},BlobId:"[u8;32]",Blob:{id:"BlobId",blob:"Vec<u8>",author:"Did"},EpochNo:"u32",EpochLen:"u32",SlotNo:"u64",Balance:"u64",EpochDetail:{validator_count:"u8",starting_slot:"SlotNo",expected_ending_slot:"SlotNo",ending_slot:"Option<SlotNo>",emission_for_validators:"Option<Balance>",emission_for_treasury:"Option<Balance>"},ValidatorStatsPerEpoch:{block_count:"EpochLen",locked_reward:"Option<Balance>",unlocked_reward:"Option<Balance>"},Payload:{proposal:"Vec<u8>",round_no:"u64"},Membership:{members:"BTreeSet<Did>",vote_requirement:"u64"},PMAuth:"BTreeMap<Did, DidSignature>",Bonus:{swap_bonuses:"Vec<(Balance, BlockNumber)>",vesting_bonuses:"Vec<(Balance, Balance, BlockNumber)>"},Attestation:{priority:"Compact<u64>",iri:"Option<Vec<u8>>"},StateChange:{_enum:{KeyUpdate:"KeyUpdate",DidRemoval:"DidRemoval",Revoke:"Revoke",UnRevoke:"UnRevoke",RemoveRegistry:"RemoveRegistry",Blob:"Blob",MasterVote:"Payload",Attestation:"(Did, Attestation)"}}}},{minmax:[23],types:{Address:"MultiAddress",LookupSource:"MultiAddress",PerDispatchClassU32:{normal:"u32",operational:"u32",mandatory:"u32"},BlockLength:{max:"PerDispatchClassU32"},Keys:"SessionKeys2",Did:"[u8;32]",Bytes32:{value:"[u8;32]"},Bytes33:{value:"[u8;33]"},Bytes64:{value:"[u8;64]"},Bytes65:{value:"[u8;65]"},PublicKey:{_enum:{Sr25519:"Bytes32",Ed25519:"Bytes32",Secp256k1:"Bytes33"}},DidSignature:{_enum:{Sr25519:"Bytes64",Ed25519:"Bytes64",Secp256k1:"Bytes65"}},KeyDetail:{controller:"Did",public_key:"PublicKey"},KeyUpdate:{did:"Did",public_key:"PublicKey",controller:"Option<Did>",last_modified_in_block:"BlockNumber"},DidRemoval:{did:"Did",last_modified_in_block:"BlockNumber"},RegistryId:"[u8;32]",RevokeId:"[u8;32]",Registry:{policy:"Policy",add_only:"bool"},Revoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},UnRevoke:{registry_id:"RegistryId",revoke_ids:"BTreeSet<RevokeId>",last_modified:"BlockNumber"},RemoveRegistry:{registry_id:"RegistryId",last_modified:"BlockNumber"},PAuth:"BTreeMap<Did, DidSignature>",Policy:{_enum:{OneOf:"BTreeSet<Did>"}},BlobId:"[u8;32]",Blob:{id:"BlobId",blob:"Vec<u8>",author:"Did"},EpochNo:"u32",EpochLen:"u32",SlotNo:"u64",Balance:"u64",EpochDetail:{validator_count:"u8",starting_slot:"SlotNo",expected_ending_slot:"SlotNo",ending_slot:"Option<SlotNo>",emission_for_validators:"Option<Balance>",emission_for_treasury:"Option<Balance>"},ValidatorStatsPerEpoch:{block_count:"EpochLen",locked_reward:"Option<Balance>",unlocked_reward:"Option<Balance>"},Payload:{proposal:"Vec<u8>",round_no:"u64"},Membership:{members:"BTreeSet<Did>",vote_requirement:"u64"},PMAuth:"BTreeMap<Did, DidSignature>",Bonus:{swap_bonuses:"Vec<(Balance, BlockNumber)>",vesting_bonuses:"Vec<(Balance, Balance, BlockNumber)>"},Attestation:{priority:"Compact<u64>",iri:"Option<Vec<u8>>"},Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},ParamType:{_enum:{Address:null,Int:"u16",Uint:"u16"}},ContractConfig:{address:"H160",query_aggregator_call_encoded:"Vec<u8>",query_price_abi_encoded:"Vec<u8>",return_val_abi:"Vec<ParamType>"},StateChange:{_enum:{KeyUpdate:"KeyUpdate",DidRemoval:"DidRemoval",Revoke:"Revoke",UnRevoke:"UnRevoke",RemoveRegistry:"RemoveRegistry",Blob:"Blob",MasterVote:"Payload",Attestation:"(Did, Attestation)"}}}}],rpc:{poa:{treasuryAccount:{description:"Return account address of treasury. The account address can then be used to query the chain for balance",params:[],type:"AccountId"},treasuryBalance:{description:"Return free balance of treasury account. In the context of PoA, only free balance makes sense for treasury. But just in case, to check all kinds of balance (locked, reserved, etc), get the account address with above call and query the chain.",params:[],type:"Balance"},getTotalEmissionInEpoch:{description:"Return total (validators + treasury) emission rewards for given epoch",params:["EpochNo"],type:"Balance"}},price_feed:{tokenUsdPrice:{description:"Gets the price of Dock/USD from pallet's storage",params:[],type:"Option<u32>"},tokenUsdPriceFromContract:{description:"Gets the price of Dock/USD from EVM contract",params:[],type:"Option<u32>"}},fiat_filter:{getCallFeeDock:{description:"Accepts a scale-encoded extrinsic, returns fee in µDOCK as Balance (u64)",params:["Bytes"],type:"Balance"}},core_mods:{psPublicKeyWithParams:{description:"Return PS public key with params",params:[{name:"id",type:"(Did, IncId)"}],type:"Option<(PsPublicKey, Option<PsParameters>)>"},psParamsByDid:{description:"Return all PS params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, PsParameters>"},psPublicKeysByDid:{description:"Return all PS key with params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, (PsPublicKey, Option<PsParameters>)>"},bbsPublicKeyWithParams:{description:"Return BBS public key with params",params:[{name:"id",type:"(Did, IncId)"}],type:"Option<(BbsPublicKey, Option<BbsParameters>)>"},bbsParamsByDid:{description:"Return all BBS params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, BbsParameters>"},bbsPublicKeysByDid:{description:"Return all BBS key with params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, (BbsPublicKey, Option<BbsParameters>)>"},bbsPlusPublicKeyWithParams:{description:"Return BBS+ public key with params",params:[{name:"id",type:"(Did, IncId)"}],type:"Option<(BbsPlusPublicKey, Option<BbsPlusParameters>)>"},bbsPlusParamsByDid:{description:"Return all BBS+ params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, BbsPlusParameters>"},bbsPlusPublicKeysByDid:{description:"Return all BBS+ key with params by a DID",params:[{name:"did",type:"Did"}],type:"BTreeMap<IncId, (BbsPlusPublicKey, Option<BbsPlusParameters>)>"},accumulatorPublicKeyWithParams:{description:"Return Accumulator public key with params",params:[{name:"id",type:"AccumPublicKeyStorageKey"}],type:"Option<AccumPublicKeyWithParams>"},accumulatorWithPublicKeyAndParams:{description:"Return Accumulator public key with params",params:[{name:"id",type:"AccumulatorId"}],type:"Option<(Vec<u8>, Option<AccumPublicKeyWithParams>)>"},didDetails:{description:"Get all keys, controllers and service endpoints of the DID",params:[{name:"did",type:"Did"},{name:"params",type:"u8",isOptional:!0}],type:"Option<AggregatedDidDetailsResponse>"},didListDetails:{description:"Get all keys, controllers and service endpoints of the DID",params:[{name:"dids",type:"Vec<Did>"},{name:"params",type:"u8",isOptional:!0}],type:"Vec<Option<AggregatedDidDetailsResponse>>"}},staking_rewards:{yearlyEmission:{description:"",params:[{name:"total_staked",type:"Balance"},{name:"total_issuance",type:"Balance"}],type:"Balance"},maxYearlyEmission:{description:"",params:[],type:"Balance"}}}},"dotmog-node":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",MogwaiStruct:{id:"Hash",dna:"Hash",genesis:"BlockNumber",price:"Balance",gen:"u32",rarity:"RarityType"},MogwaiBios:{mogwai_id:"Hash",state:"u32",metaxy:"Vec<[u8;16]>",intrinsic:"Balance",level:"u8",phases:"Vec<BlockNumber>",adaptations:"Vec<Hash>"},GameEvent:{id:"Hash",begin:"BlockNumber",duration:"u16",event_type:"GameEventType",hashes:"Vec<Hash>",value:"u64"},GameEventType:{_enum:["Default","Hatch"]},RarityType:{_enum:["Minor","Normal","Rare","Epic","Legendary"]},MogwaicoinAddress:{address:"Vec<u8>",account:"AccountId",signature:"Vec<u8>",state:"ClaimState",balance:"Balance"},ClaimState:{_enum:["None","Registred","Verified","Secured","Processed","Holded","Failed","Cancelled"]}}}]},edgeware:{alias:{voting:{Tally:"VotingTally"}},types:[{minmax:[0,31],types:{ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",Balance2:"u128",VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},"voting::VoteType":"VoteType","voting::TallyType":"TallyType","voting::Tally":"VotingTally",Keys:"SessionKeys4",StakingLedger:"StakingLedgerTo240",Votes:"VotesTo230",ReferendumInfo:"ReferendumInfoTo239",Weight:"u32",DispatchInfo:"DispatchInfoTo244",OpenTip:"OpenTipTo225",ContractExecResult:"ContractExecResultTo255",CompactAssignments:"CompactAssignmentsTo257",RewardDestination:"RewardDestinationTo257",RefCount:"RefCountTo259",AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[32,38],types:{ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",Balance2:"u128",VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},"voting::VoteType":"VoteType","voting::TallyType":"TallyType","voting::Tally":"VotingTally",CompactAssignments:"CompactAssignmentsTo257",ContractExecResult:"ContractExecResultTo255",RewardDestination:"RewardDestinationTo257",RefCount:"u32",AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[39,41],types:{ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",Balance2:"u128",VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},"voting::VoteType":"VoteType","voting::TallyType":"TallyType","voting::Tally":"VotingTally",RefCount:"u32",AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}},{minmax:[42,46],types:{Balance2:"u128",ChainId:"u8",DepositNonce:"u64",ResourceId:"[u8; 32]",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",staus:"ProposalStatus",expiry:"BlockNumber"},VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",AccountInfo:"AccountInfoWithRefCount",Address:"MultiAddress",LookupSource:"MultiAddress"}},{minmax:[47,null],types:{Balance2:"u128",DepositNonce:"u64",ResourceId:"[u8; 32]",ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",staus:"ProposalStatus",expiry:"BlockNumber"},VoteStage:{_enum:["PreVoting","Commit","Voting","Completed"]},VoteType:{_enum:["Binary","MultiOption","RankedChoice"]},TallyType:{_enum:["OnePerson","OneCoin"]},VoteOutcome:"[u8; 32]",VotingTally:"Option<Vec<(VoteOutcome, u128)>>",VoteData:{initiator:"AccountId",stage:"VoteStage",vote_type:"VoteType",tally_type:"TallyType",is_commit_reveal:"bool"},Commitments:"Vec<(AccountId, VoteOutcome)>",Reveals:"Vec<(AccountId, Vec<VoteOutcome>)>",VoteRecord:{id:"u64",commitments:"Commitments",reveals:"Reveals",data:"VoteData",outcomes:"Vec<VoteOutcome>"},ProposalRecord:{index:"u32",author:"AccountId",stage:"VoteStage",transition_time:"u32",title:"Text",contents:"Text",vote_id:"u64"},ProposalContents:"Bytes",ProposalTitle:"Bytes",CID:"Vec<u8>",Properties:{_set:{Transferable:1,Burnable:2}},ClassData:{deposit:"Balance",properties:"Properties"},TokenData:{deposit:"Balance"},ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"ClassData"},ClassInfoOf:"ClassInfo",TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"TokenData"},TokenInfoOf:"TokenInfo",TokenId:"u64",ClassIdOf:"ClassId",TokenIdOf:"TokenId",Amount:"i128",AmountOf:"Amount",Approval:{amount:"Balance",deposit:"Balance"},ApprovalKey:{owner:"AccountId",delegate:"AccountId"},Commitment:"ScalarData",CurrencyId:"u64",CurrencyIdOf:"CurrencyId",DustHandlerType:{_enum:{Burn:"Null",Transfer:"AccountId"}},HashFunction:{_enum:["PoseidonDefault","PoseidonExp3","PoseidonExp5","PoseidonExp17","MiMC","Blake2","Sha256"]},Manager:{accountId:"AccountId",required:"bool"},MerkleTree:{leaf_count:"u32",max_leaves:"u32",depth:"u8",root_hash:"ScalarData",edge_nodes:"Vec<ScalarData>",hasher:"HashFunction",should_store_leaves:"bool"},MixerInfo:{minimum_deposit_length_for_reward:"BlockNumber",fixed_deposit_size:"Balance",currency_id:"CurrencyIdOf"},Nullifier:"ScalarData",ScalarData:"[u8; 32]",TokenDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"Balance",min_balance:"Balance",approvals:"u32",is_frozen:"bool",dust_type:"DustHandlerType"},TokenMetadata:{deposit:"Balance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",is_frozen:"bool"},TreeId:"u32",WithdrawProof:{mixer_id:"TreeId",cached_block:"BlockNumber",cached_root:"ScalarData",comms:"Vec<Commitment>",nullifier_hash:"ScalarData",proof_bytes:"Vec<u8>",leaf_index_commitments:"Vec<Commitment>",proof_commitments:"Vec<Commitment>",recipient:"Option<AccountId>",relayer:"Option<AccountId>"},ETHBlock:{inner:"Block"},ETHReceipts:{inner:"Vec<EthReceipt>"},ETHTxStatuses:{inner:"Vec<EthTransactionStatus>"},AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",LookupSource:"MultiAddress"}}]},elysium:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"}}}]},"encointer-node-notee":{types:[{minmax:[9,null],types:{CommunityIdentifier:{geohash:"GeoHash",digest:"CidDigest"},GeoHash:"[u8; 5]",CidDigest:"[u8; 4]"}},{minmax:[0,8],types:{ShardIdentifier:"Hash",GetterArgs:"(AccountId, CommunityIdentifier)",Enclave:{pubkey:"AccountId",mrenclave:"Hash",timestamp:"u64",url:"Text"},PublicGetter:{_enum:{total_issuance:"CommunityIdentifier",participant_count:"CommunityIdentifier",meetup_count:"CommunityIdentifier",ceremony_reward:"CommunityIdentifier",location_tolerance:"CommunityIdentifier",time_tolerance:"CommunityIdentifier",scheduler_state:"CommunityIdentifier"}},TrustedGetter:{_enum:{balance:"(AccountId, CommunityIdentifier)",participant_index:"(AccountId, CommunityIdentifier)",meetup_index:"(AccountId, CommunityIdentifier)",attestations:"(AccountId, CommunityIdentifier)",meetup_registry:"(AccountId, CommunityIdentifier)"}},TrustedGetterSigned:{getter:"TrustedGetter",signature:"Signature"},Getter:{_enum:{public:"PublicGetter",trusted:"TrustedGetterSigned"}},ClientRequest:{_enum:{PubKeyWorker:null,MuRaPortWorker:null,StfState:"(Getter, ShardIdentifier)"}},WorkerEncoded:"Vec<u8>",Request:{shard:"ShardIdentifier",cyphertext:"WorkerEncoded"},TrustedCallSigned:{call:"TrustedCall",nonce:"u32",signature:"Signature"},TrustedCall:{_enum:{balance_transfer:"BalanceTransferArgs",ceremonies_register_participant:"RegisterParticipantArgs",ceremonies_register_attestations:"RegisterAttestationsArgs",ceremonies_grant_reputation:"GrantReputationArgs"}},BalanceTransferArgs:"(AccountId, AccountId, CommunityIdentifier, BalanceType)",RegisterParticipantArgs:"(AccountId, CommunityIdentifier, Option<ProofOfAttendance<MultiSignature, AccountId>>)",RegisterAttestationsArgs:"(AccountId, Vec<Attestation<MultiSignature, AccountId, u64>>)",GrantReputationArgs:"(AccountId, CommunityIdentifier, AccountId)",BalanceType:"i128",BalanceEntry:{principal:"BalanceType",lastUpdate:"BlockNumber"},Demurrage:"BalanceType",BusinessIdentifier:{communityIdentifier:"CommunityIdentifier",controller:"AccountId"},OfferingIdentifier:"u32",BusinessData:{url:"PalletString",last_oid:"u32"},OfferingData:{url:"PalletString"},PalletString:"Text",IpfsCid:"Text",FixedI64F64:{bits:"i128"},CeremonyIndexType:"u32",CeremonyPhaseType:{_enum:["Registering","Assigning","Attesting"]},ParticipantIndexType:"u64",MeetupIndexType:"u64",AttestationIndexType:"u64",MeetupAssignment:"(MeetupIndexType, Option<Location>)",MeetupTimeOffsetType:"i32",Reputation:{_enum:["Unverified","UnverifiedReputable","VerifiedUnlinked","VerifiedLinked"]},CommunityReputation:{communityIdentifier:"CommunityIdentifier",reputation:"Reputation"},ClaimOfAttendance:{claimantPublic:"AccountId",ceremonyIndex:"CeremonyIndexType",communityIdentifier:"CommunityIdentifier",meetupIndex:"MeetupIndexType",location:"Location",timestamp:"Moment",numberOfParticipantsConfirmed:"u32",claimantSignature:"Option<MultiSignature>"},ClaimOfAttendanceSigningPayload:{claimantPublic:"AccountId",ceremonyIndex:"CeremonyIndexType",communityIdentifier:"CommunityIdentifier",meetupIndex:"MeetupIndexType",location:"Location",timestamp:"Moment",numberOfParticipantsConfirmed:"u32"},AssignmentCount:{bootstrappers:"ParticipantIndexType",reputables:"ParticipantIndexType",endorsees:"ParticipantIndexType",newbies:"ParticipantIndexType"},Assignment:{bootstrappersReputables:"AssignmentParams",endorsees:"AssignmentParams",newbies:"AssignmentParams",locations:"AssignmentParams"},AssignmentParams:{m:"u64",s1:"u64",s2:"u64"},CommunityCeremonyStats:{communityCeremony:"(CommunityIdentifier, CeremonyIndexType)",assignment:"Assignment",assignmentCount:"AssignmentCount",meetupCount:"MeetupIndexType",meetups:"Vec<Meetup>"},Meetup:{index:"MeetupIndexType",location:"LocationRpc",time:"Moment",registrations:"Vec<(AccountId, ParticipantRegistration)>"},ParticipantRegistration:{index:"ParticipantIndexType",registrationType:"RegistrationType"},RegistrationType:{_enum:["Bootstrapper","Reputable","Endorsee","Newbie"]},Attestation:{claim:"ClaimOfAttendance",signature:"MultiSignature",public:"AccountId"},ProofOfAttendance:{proverPublic:"AccountId",ceremonyIndex:"CeremonyIndexType",communityIdentifier:"CommunityIdentifier",attendeePublic:"AccountId",attendeeSignature:"MultiSignature"},CommunityIdentifier:{geohash:"GeoHash",digest:"CidDigest"},GeoHash:"[u8; 5]",CidDigest:"[u8; 4]",CommunityCeremony:"(CommunityIdentifier,CeremonyIndexType)",NominalIncomeType:"BalanceType",DegreeRpc:"Text",DegreeFixed:"i128",Location:{lat:"DegreeFixed",lon:"DegreeFixed"},LocationRpc:{lat:"DegreeRpc",lon:"DegreeRpc"},CidName:{cid:"CommunityIdentifier",name:"Text"},CommunityMetadataType:{name:"Text",symbol:"Text",assets:"Text",theme:"Option<Text>",url:"Option<Text>"},SystemNumber:"u32",SchedulerState:"(CeremonyIndexType, CeremonyPhaseType, SystemNumber)"}}],signedExtensions:{ChargeAssetTxPayment:{extrinsic:{tip:"Compact<Balance>",assetId:"Option<CommunityIdentifier>"},payload:{}}}},"encointer-node-teeproxy":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",CeremonyPhaseType:{_enum:["Registering","Assigning","Attesting"]},CeremonyIndexType:"u32",CurrencyIdentifier:"Hash",CurrencyCeremony:{cid:"CurrencyIdentifier",cindex:"CeremonyIndexType"},Location:{lat:"i64",lon:"i64"},CurrencyPropertiesType:{name_utf8:"Text",demurrage_per_block:"i128"},ShardIdentifier:"Hash",Request:{shard:"ShardIdentifier",cyphertext:"Vec<u8>"},Enclave:{pubkey:"AccountId",mrenclave:"Hash",timestamp:"u64",url:"Text"}}}]},"encointer-parachain":{types:[{minmax:[3,null],types:{CommunityIdentifier:{geohash:"GeoHash",digest:"CidDigest"},GeoHash:"[u8; 5]",CidDigest:"[u8; 4]"}},{minmax:[0,2],types:{ShardIdentifier:"Hash",GetterArgs:"(AccountId, CommunityIdentifier)",Enclave:{pubkey:"AccountId",mrenclave:"Hash",timestamp:"u64",url:"Text"},PublicGetter:{_enum:{total_issuance:"CommunityIdentifier",participant_count:"CommunityIdentifier",meetup_count:"CommunityIdentifier",ceremony_reward:"CommunityIdentifier",location_tolerance:"CommunityIdentifier",time_tolerance:"CommunityIdentifier",scheduler_state:"CommunityIdentifier"}},TrustedGetter:{_enum:{balance:"(AccountId, CommunityIdentifier)",participant_index:"(AccountId, CommunityIdentifier)",meetup_index:"(AccountId, CommunityIdentifier)",attestations:"(AccountId, CommunityIdentifier)",meetup_registry:"(AccountId, CommunityIdentifier)"}},TrustedGetterSigned:{getter:"TrustedGetter",signature:"Signature"},Getter:{_enum:{public:"PublicGetter",trusted:"TrustedGetterSigned"}},ClientRequest:{_enum:{PubKeyWorker:null,MuRaPortWorker:null,StfState:"(Getter, ShardIdentifier)"}},WorkerEncoded:"Vec<u8>",Request:{shard:"ShardIdentifier",cyphertext:"WorkerEncoded"},TrustedCallSigned:{call:"TrustedCall",nonce:"u32",signature:"Signature"},TrustedCall:{_enum:{balance_transfer:"BalanceTransferArgs",ceremonies_register_participant:"RegisterParticipantArgs",ceremonies_register_attestations:"RegisterAttestationsArgs",ceremonies_grant_reputation:"GrantReputationArgs"}},BalanceTransferArgs:"(AccountId, AccountId, CommunityIdentifier, BalanceType)",RegisterParticipantArgs:"(AccountId, CommunityIdentifier, Option<ProofOfAttendance<MultiSignature, AccountId>>)",RegisterAttestationsArgs:"(AccountId, Vec<Attestation<MultiSignature, AccountId, u64>>)",GrantReputationArgs:"(AccountId, CommunityIdentifier, AccountId)",BalanceType:"i128",BalanceEntry:{principal:"BalanceType",lastUpdate:"BlockNumber"},Demurrage:"BalanceType",BusinessIdentifier:{communityIdentifier:"CommunityIdentifier",controller:"AccountId"},OfferingIdentifier:"u32",BusinessData:{url:"PalletString",last_oid:"u32"},OfferingData:{url:"PalletString"},PalletString:"Text",IpfsCid:"Text",FixedI64F64:{bits:"i128"},CeremonyIndexType:"u32",CeremonyPhaseType:{_enum:["Registering","Assigning","Attesting"]},ParticipantIndexType:"u64",MeetupIndexType:"u64",AttestationIndexType:"u64",MeetupAssignment:"(MeetupIndexType, Option<Location>)",MeetupTimeOffsetType:"i32",Reputation:{_enum:["Unverified","UnverifiedReputable","VerifiedUnlinked","VerifiedLinked"]},CommunityReputation:{communityIdentifier:"CommunityIdentifier",reputation:"Reputation"},ClaimOfAttendance:{claimantPublic:"AccountId",ceremonyIndex:"CeremonyIndexType",communityIdentifier:"CommunityIdentifier",meetupIndex:"MeetupIndexType",location:"Location",timestamp:"Moment",numberOfParticipantsConfirmed:"u32",claimantSignature:"Option<MultiSignature>"},ClaimOfAttendanceSigningPayload:{claimantPublic:"AccountId",ceremonyIndex:"CeremonyIndexType",communityIdentifier:"CommunityIdentifier",meetupIndex:"MeetupIndexType",location:"Location",timestamp:"Moment",numberOfParticipantsConfirmed:"u32"},AssignmentCount:{bootstrappers:"ParticipantIndexType",reputables:"ParticipantIndexType",endorsees:"ParticipantIndexType",newbies:"ParticipantIndexType"},Assignment:{bootstrappersReputables:"AssignmentParams",endorsees:"AssignmentParams",newbies:"AssignmentParams",locations:"AssignmentParams"},AssignmentParams:{m:"u64",s1:"u64",s2:"u64"},CommunityCeremonyStats:{communityCeremony:"(CommunityIdentifier, CeremonyIndexType)",assignment:"Assignment",assignmentCount:"AssignmentCount",meetupCount:"MeetupIndexType",meetups:"Vec<Meetup>"},Meetup:{index:"MeetupIndexType",location:"LocationRpc",time:"Moment",registrations:"Vec<(AccountId, ParticipantRegistration)>"},ParticipantRegistration:{index:"ParticipantIndexType",registrationType:"RegistrationType"},RegistrationType:{_enum:["Bootstrapper","Reputable","Endorsee","Newbie"]},Attestation:{claim:"ClaimOfAttendance",signature:"MultiSignature",public:"AccountId"},ProofOfAttendance:{proverPublic:"AccountId",ceremonyIndex:"CeremonyIndexType",communityIdentifier:"CommunityIdentifier",attendeePublic:"AccountId",attendeeSignature:"MultiSignature"},CommunityIdentifier:{geohash:"GeoHash",digest:"CidDigest"},GeoHash:"[u8; 5]",CidDigest:"[u8; 4]",CommunityCeremony:"(CommunityIdentifier,CeremonyIndexType)",NominalIncomeType:"BalanceType",DegreeRpc:"Text",DegreeFixed:"i128",Location:{lat:"DegreeFixed",lon:"DegreeFixed"},LocationRpc:{lat:"DegreeRpc",lon:"DegreeRpc"},CidName:{cid:"CommunityIdentifier",name:"Text"},CommunityMetadataType:{name:"Text",symbol:"Text",assets:"Text",theme:"Option<Text>",url:"Option<Text>"},SystemNumber:"u32",SchedulerState:"(CeremonyIndexType, CeremonyPhaseType, SystemNumber)"}}],signedExtensions:{ChargeAssetTxPayment:{extrinsic:{tip:"Compact<Balance>",assetId:"Option<CommunityIdentifier>"},payload:{}}}},fantour:{types:[{minmax:[0,null],types:{Properties:"u8",NFTMetadata:"Vec<u8>",BlockNumber:"u32",BlockNumberOf:"BlockNumber",OrderData:{currencyId:"Compact<CurrencyIdOf>",price:"Compact<Balance>",deposit:"Compact<Balance>",deadline:"Compact<BlockNumberOf>",categoryId:"Compact<CategoryIdOf>"},CategoryId:"u32",CategoryIdOf:"CategoryId",CategoryData:{metadata:"NFTMetadata",nftCount:"Compact<Balance>"},CurrencyId:"u32",CurrencyIdOf:"CurrencyId",Amount:"i128",AmountOf:"Amount",ClassId:"u32",ClassIdOf:"ClassId",ClassInfoOf:{metadata:"NFTMetadata",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},ClassData:{deposit:"Compact<Balance>",properties:"Properties",name:"Vec<u8>",description:"Vec<u8>",createBlock:"Compact<BlockNumberOf>"},TokenId:"u64",TokenIdOf:"TokenId",TokenInfoOf:{metadata:"NFTMetadata",owner:"AccountId",data:"TokenData"},TokenData:{deposit:"Compact<Balance>",createBlock:"Compact<BlockNumberOf>"}}}]},"ferrum-parachain":{types:[{minmax:[0,null],types:{AccountId:"EthereumAccountId",AccountId20:"EthereumAccountId",Address:"AccountId",LookupSource:"AccountId",Lookup0:"AccountId",EthereumSignature:{r:"H256",s:"H256",v:"U8"},ExtrinsicSignature:"EthereumSignature"}}]},foucoco:{rpc:{issue:{getIssueRequests:{description:"Get all issue requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getIssueRequests",method:"getIssueRequests",section:"issue"},getVaultIssueRequests:{description:"Get all issue requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getVaultIssueRequests",method:"getVaultIssueRequests",section:"issue"}},redeem:{getRedeemRequests:{description:"Get all redeem requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getRedeemRequests",method:"getRedeemRequests",section:"redeem"},getVaultRedeemRequests:{description:"Get all redeem requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getVaultRedeemRequests",method:"getVaultRedeemRequests",section:"redeem"}},replace:{getOldVaultReplaceRequests:{description:"Get all replace requests from a particular vault",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getOldVaultReplaceRequests",method:"getOldVaultReplaceRequests",section:"replace"},getNewVaultReplaceRequests:{description:"Get all replace requests to a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getNewVaultReplaceRequests",method:"getNewVaultReplaceRequests",section:"replace"}},oracle:{currencyToUsd:{description:"Get the USD value of a currency",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_currencyToUsd",method:"currencyToUsd",section:"oracle"},usdToCurrency:{description:"Get the currency value of a USD amount",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_usdToCurrency",method:"usdToCurrency",section:"oracle"},getExchangeRate:{description:"Get the exchange rate of the given currencyId to USD",params:[{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"UnsignedFixedPoint",isSubscription:!1,jsonrpc:"oracle_getExchangeRate",method:"getExchangeRate",section:"oracle"}},vaultRegistry:{getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultCollateral",method:"getVaultCollateral",section:"vaultRegistry"},getVaultsByAccountId:{description:"Get all the vaultIds registered by a vault's accountId",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<SpacewalkPrimitivesVaultId>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsByAccountId",method:"getVaultsByAccountId",section:"vaultRegistry"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultTotalCollateral",method:"getVaultTotalCollateral",section:"vaultRegistry"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getPremiumRedeemVaults",method:"getPremiumRedeemVaults",section:"vaultRegistry"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithIssuableTokens",method:"getVaultsWithIssuableTokens",section:"vaultRegistry"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithRedeemableTokens",method:"getVaultsWithRedeemableTokens",section:"vaultRegistry"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getIssueableTokensFromVault",method:"getIssueableTokensFromVault",section:"vaultRegistry"},getCollateralizationFromVault:{description:"Get the collateralization rate of a vault",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVault",method:"getCollateralizationFromVault",section:"vaultRegistry"},getCollateralizationFromVaultAndCollateral:{description:"Get the collateralization rate of a vault and collateral",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVaultAndCollateral",method:"getCollateralizationFromVaultAndCollateral",section:"vaultRegistry"},getRequiredCollateralForWrapped:{description:"Get the minimum amount of collateral required for the given amount of token with the current threshold and exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForWrapped",method:"getRequiredCollateralForWrapped",section:"vaultRegistry"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForVault",method:"getRequiredCollateralForVault",section:"vaultRegistry"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{OracleKey:{},CurrencyId:{},NumberOrHex:"u128",BalanceWrapper:{amount:"String"},UnsignedFixedPoint:"u128",SpacewalkPrimitivesCurrencyId:{_enum:{Native:"Null",XCM:"u8",Stellar:"SpacewalkPrimitivesAsset",ZenlinkLPToken:"(u8,u8,u8,u8)"}},SpacewalkPrimitivesAsset:{_enum:{StellarNative:"Null",AlphaNum4:{code:"[u8;4]",issuer:"[u8;32]"},AlphaNum12:{code:"[u8;12]",issuer:"[u8;32]"}}},SpacewalkPrimitivesVaultId:{accountId:"AccountId32",currencies:"SpacewalkPrimitivesVaultCurrencyPair"},SpacewalkPrimitivesVaultCurrencyPair:{collateral:"SpacewalkPrimitivesCurrencyId",wrapped:"SpacewalkPrimitivesCurrencyId"},PoolId:"u32"}}],alias:{}},frequency:{rpc:{frequency:{getEvents:{description:"Get block Events",params:[{name:"at",type:"H256"}],type:"Vec<RpcEvent>"}},frequencyTxPayment:{computeCapacityFeeDetails:{description:"Compute the capacity fee details for a given transaction",params:[{name:"encoded_xt",type:"Vec<u8>"},{name:"at",type:"Option<BlockHash>"}],type:"FeeDetails"}},handles:{getHandleForMsa:{description:"Get handle for a given msa_id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<HandleResponse>"},getMsaForHandle:{description:"Get msa_id for a given handle",params:[{name:"display_handle",type:"String"}],type:"Option<MessageSourceId>"},getNextSuffixes:{description:"Get next suffixes for a given handle and count",params:[{name:"base_handle",type:"String"},{name:"count",type:"u16"}],type:"PresumptiveSuffixesResponse"},validateHandle:{description:"Check whether the supplied handle passes all the checks performed by claim_handle call.",params:[{name:"base_handle",type:"String"}],type:"bool"}},messages:{getBySchemaId:{description:"Get messages by schemaId paginated",params:[{name:"schema_id",type:"SchemaId"},{name:"pagination",type:"BlockPaginationRequest"}],type:"BlockPaginationResponseMessage"}},msa:{checkDelegations:{description:"Test a list of MSAs to see if they have delegated to the provider MSA",params:[{name:"delegator_msa_ids",type:"Vec<DelegatorId>"},{name:"provider_msa_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"Vec<(DelegatorId, bool)>"},grantedSchemaIdsByMsaId:{description:"Fetch the list of schema ids that a delegator has granted to provider",params:[{name:"delegator_msa_id",type:"DelegatorId"},{name:"provider_msa_id",type:"ProviderId"}],type:"Option<Vec<SchemaGrantResponse>>"},getKeysByMsaId:{description:"Fetch Keys for an MSA Id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<KeyInfoResponse>"}},schemas:{getBySchemaId:{description:"Get a Schema by Id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"},checkSchemaValidity:{description:"",params:[{name:"model",type:"SchemaModel"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool"},getVersions:{description:"Get different versions and schema ids for a complete schema name or only a namespace",params:[{name:"schema_name",type:"String"}],type:"Option<Vec<SchemaVersionResponse>>"}},statefulStorage:{getPaginatedStorage:{description:"Gets pages of stateful storage",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Vec<PaginatedStorageResponse>"},getItemizedStorage:{description:"Gets itemized of stateful storage",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"ItemizedStoragePageResponse"}}},runtime:{AdditionalRuntimeApi:[{methods:{get_events:{description:"Get the events with simple SCALE decoding",params:[],type:"Vec<RpcEvent>"}},version:1}],CapacityTransactionPaymentRuntimeApi:[{methods:{compute_capacity_fee:{description:"Compute the capacity fee for a given transaction",params:[{name:"encoded_xt",type:"Vec<u8>"},{name:"at",type:"Option<BlockHash>"}],type:"FeeDetails"}}}],HandlesRuntimeApi:[{methods:{get_handle_for_msa:{description:"Get handle for a given msa_id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<HandleResponse>"},get_msa_for_handle:{description:"Get msa_id for a given handle",params:[{name:"display_handle",type:"Vec<u8>"}],type:"Option<MessageSourceId>"},get_next_suffixes:{description:"Get next suffixes for a given handle and count",params:[{name:"base_handle",type:"Vec<u8>"},{name:"count",type:"u16"}],type:"PresumptiveSuffixesResponse"},validate_handle:{description:"Check whether the supplied handle passes all the checks performed by claim_handle call.",params:[{name:"base_handle",type:"String"}],type:"bool"}},version:2}],MessagesRuntimeApi:[{methods:{get_messages_by_schema_and_block:{description:"Retrieve the messages for a particular schema and block number",params:[{name:"schema_id",type:"SchemaId"},{name:"schema_payload_location",type:"PayloadLocation"},{name:"block_number",type:"BlockNumber"}],type:"Vec<MessageResponse>"},get_schema_by_id:{description:"Retrieve a schema by id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"}},version:1}],MsaRuntimeApi:[{methods:{has_delegation:{description:"Check to see if a delegation existed between the given delegator and provider at a given block",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"bool"},get_granted_schemas_by_msa_id:{description:"Get the list of schema ids (if any) that exist in any delegation between the delegator and provider",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"}],type:"Option<Vec<SchemaId>>"}},version:1},{methods:{has_delegation:{description:"Check to see if a delegation existed between the given delegator and provider at a given block",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"bool"},get_granted_schemas_by_msa_id:{description:"Get the list of schema ids (if any) that exist in any delegation between the delegator and provider",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"}],type:"Option<Vec<SchemaGrantResponse>>"}},version:2}],SchemasRuntimeApi:[{methods:{get_schema_by_id:{description:"Fetch the schema by id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"},get_schema_versions_by_name:{description:"Fetch the schema versions by name",params:[{name:"schema_name",type:"Vec<u8>"}],type:"Option<Vec<SchemaVersionResponse>>"}},version:2}],StatefulStorageRuntimeApi:[{methods:{get_paginated_storage:{description:"Fetch the stateful paginated storage by msa_id and schema_id",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Result<Vec<PaginatedStorageResponse>, SpRuntimeDispatchError>"},get_itemized_storage:{description:"Fetch the stateful itemized storage by msa_id and schema_id",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Result<ItemizedStoragePageResponse, SpRuntimeDispatchError>"}},version:1}]},signedExtensions:{CheckFreeExtrinsicUse:{extrinsic:{},payload:{}},HandlesSignedExtension:{extrinsic:{},payload:{}}},types:[{minmax:[0,null],types:{RpcEvent:{phase:"Option<u32>",pallet:"u8",event:"u8",data:"Vec<u8>"},HandleSuffix:"u16",HandleResponse:{base_handle:"String",canonical_base:"String",suffix:"u16"},PresumptiveSuffixesResponse:{suffixes:"Vec<HandleSuffix>",base_handle:"String"},BlockPaginationRequest:{from_block:"BlockNumber",from_index:"u32",to_block:"BlockNumber",page_size:"u32"},MessageResponse:{payload:"Option<Vec<u8>>",cid:"Option<Vec<u8>>",provider_msa_id:"MessageSourceId",msa_id:"Option<MessageSourceId>",index:"u16",block_number:"BlockNumber",payload_length:"Option<u32>"},BlockPaginationResponseMessage:{content:"Vec<MessageResponse>",has_next:"bool",next_block:"Option<BlockNumber>",next_index:"Option<u32>"},MessageSourceId:"u64",DelegatorId:"MessageSourceId",ProviderId:"MessageSourceId",KeyInfoResponse:{msa_keys:"Vec<AccountId>",msa_id:"MessageSourceId"},SchemaGrantResponse:{schema_id:"SchemaId",revoked_at:"BlockNumber"},SchemaId:"u16",SchemaModel:"Vec<u8>",SchemaVersion:"u8",SchemaResponse:{schema_id:"SchemaId",model:"SchemaModel",model_type:"ModelType",payload_location:"PayloadLocation",settings:"Vec<SchemaSetting>"},ModelType:{_enum:["AvroBinary","Parquet"]},PayloadLocation:{_enum:["OnChain","IPFS","Itemized","Paginated"]},SchemaSetting:{_enum:["AppendOnly","SignatureRequired"]},SchemaVersionResponse:{schema_name:"String",schema_version:"SchemaVersion",schema_id:"SchemaId"},PageId:"u16",PageHash:"u32",PageNonce:"u16",ItemizedStorageResponse:{index:"u16",payload:"Vec<u8>"},PaginatedStorageResponse:{page_id:"PageId",msa_id:"MessageSourceId",schema_id:"SchemaId",content_hash:"PageHash",nonce:"PageNonce",payload:"Vec<u8>"},ItemizedStoragePageResponse:{msa_id:"MessageSourceId",schema_id:"SchemaId",content_hash:"PageHash",nonce:"PageNonce",items:"Vec<ItemizedStorageResponse>"}}}]},"frequency-testnet":{rpc:{frequency:{getEvents:{description:"Get block Events",params:[{name:"at",type:"H256"}],type:"Vec<RpcEvent>"}},frequencyTxPayment:{computeCapacityFeeDetails:{description:"Compute the capacity fee details for a given transaction",params:[{name:"encoded_xt",type:"Vec<u8>"},{name:"at",type:"Option<BlockHash>"}],type:"FeeDetails"}},handles:{getHandleForMsa:{description:"Get handle for a given msa_id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<HandleResponse>"},getMsaForHandle:{description:"Get msa_id for a given handle",params:[{name:"display_handle",type:"String"}],type:"Option<MessageSourceId>"},getNextSuffixes:{description:"Get next suffixes for a given handle and count",params:[{name:"base_handle",type:"String"},{name:"count",type:"u16"}],type:"PresumptiveSuffixesResponse"},validateHandle:{description:"Check whether the supplied handle passes all the checks performed by claim_handle call.",params:[{name:"base_handle",type:"String"}],type:"bool"}},messages:{getBySchemaId:{description:"Get messages by schemaId paginated",params:[{name:"schema_id",type:"SchemaId"},{name:"pagination",type:"BlockPaginationRequest"}],type:"BlockPaginationResponseMessage"}},msa:{checkDelegations:{description:"Test a list of MSAs to see if they have delegated to the provider MSA",params:[{name:"delegator_msa_ids",type:"Vec<DelegatorId>"},{name:"provider_msa_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"Vec<(DelegatorId, bool)>"},grantedSchemaIdsByMsaId:{description:"Fetch the list of schema ids that a delegator has granted to provider",params:[{name:"delegator_msa_id",type:"DelegatorId"},{name:"provider_msa_id",type:"ProviderId"}],type:"Option<Vec<SchemaGrantResponse>>"},getKeysByMsaId:{description:"Fetch Keys for an MSA Id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<KeyInfoResponse>"}},schemas:{getBySchemaId:{description:"Get a Schema by Id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"},checkSchemaValidity:{description:"",params:[{name:"model",type:"SchemaModel"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool"},getVersions:{description:"Get different versions and schema ids for a complete schema name or only a namespace",params:[{name:"schema_name",type:"String"}],type:"Option<Vec<SchemaVersionResponse>>"}},statefulStorage:{getPaginatedStorage:{description:"Gets pages of stateful storage",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Vec<PaginatedStorageResponse>"},getItemizedStorage:{description:"Gets itemized of stateful storage",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"ItemizedStoragePageResponse"}}},runtime:{AdditionalRuntimeApi:[{methods:{get_events:{description:"Get the events with simple SCALE decoding",params:[],type:"Vec<RpcEvent>"}},version:1}],CapacityTransactionPaymentRuntimeApi:[{methods:{compute_capacity_fee:{description:"Compute the capacity fee for a given transaction",params:[{name:"encoded_xt",type:"Vec<u8>"},{name:"at",type:"Option<BlockHash>"}],type:"FeeDetails"}}}],HandlesRuntimeApi:[{methods:{get_handle_for_msa:{description:"Get handle for a given msa_id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<HandleResponse>"},get_msa_for_handle:{description:"Get msa_id for a given handle",params:[{name:"display_handle",type:"Vec<u8>"}],type:"Option<MessageSourceId>"},get_next_suffixes:{description:"Get next suffixes for a given handle and count",params:[{name:"base_handle",type:"Vec<u8>"},{name:"count",type:"u16"}],type:"PresumptiveSuffixesResponse"},validate_handle:{description:"Check whether the supplied handle passes all the checks performed by claim_handle call.",params:[{name:"base_handle",type:"String"}],type:"bool"}},version:2}],MessagesRuntimeApi:[{methods:{get_messages_by_schema_and_block:{description:"Retrieve the messages for a particular schema and block number",params:[{name:"schema_id",type:"SchemaId"},{name:"schema_payload_location",type:"PayloadLocation"},{name:"block_number",type:"BlockNumber"}],type:"Vec<MessageResponse>"},get_schema_by_id:{description:"Retrieve a schema by id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"}},version:1}],MsaRuntimeApi:[{methods:{has_delegation:{description:"Check to see if a delegation existed between the given delegator and provider at a given block",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"bool"},get_granted_schemas_by_msa_id:{description:"Get the list of schema ids (if any) that exist in any delegation between the delegator and provider",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"}],type:"Option<Vec<SchemaId>>"}},version:1},{methods:{has_delegation:{description:"Check to see if a delegation existed between the given delegator and provider at a given block",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"bool"},get_granted_schemas_by_msa_id:{description:"Get the list of schema ids (if any) that exist in any delegation between the delegator and provider",params:[{name:"delegator_id",type:"DelegatorId"},{name:"provider_id",type:"ProviderId"}],type:"Option<Vec<SchemaGrantResponse>>"}},version:2}],SchemasRuntimeApi:[{methods:{get_schema_by_id:{description:"Fetch the schema by id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"},get_schema_versions_by_name:{description:"Fetch the schema versions by name",params:[{name:"schema_name",type:"Vec<u8>"}],type:"Option<Vec<SchemaVersionResponse>>"}},version:2}],StatefulStorageRuntimeApi:[{methods:{get_paginated_storage:{description:"Fetch the stateful paginated storage by msa_id and schema_id",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Result<Vec<PaginatedStorageResponse>, SpRuntimeDispatchError>"},get_itemized_storage:{description:"Fetch the stateful itemized storage by msa_id and schema_id",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Result<ItemizedStoragePageResponse, SpRuntimeDispatchError>"}},version:1}]},signedExtensions:{CheckFreeExtrinsicUse:{extrinsic:{},payload:{}},HandlesSignedExtension:{extrinsic:{},payload:{}}},types:[{minmax:[0,null],types:{RpcEvent:{phase:"Option<u32>",pallet:"u8",event:"u8",data:"Vec<u8>"},HandleSuffix:"u16",HandleResponse:{base_handle:"String",canonical_base:"String",suffix:"u16"},PresumptiveSuffixesResponse:{suffixes:"Vec<HandleSuffix>",base_handle:"String"},BlockPaginationRequest:{from_block:"BlockNumber",from_index:"u32",to_block:"BlockNumber",page_size:"u32"},MessageResponse:{payload:"Option<Vec<u8>>",cid:"Option<Vec<u8>>",provider_msa_id:"MessageSourceId",msa_id:"Option<MessageSourceId>",index:"u16",block_number:"BlockNumber",payload_length:"Option<u32>"},BlockPaginationResponseMessage:{content:"Vec<MessageResponse>",has_next:"bool",next_block:"Option<BlockNumber>",next_index:"Option<u32>"},MessageSourceId:"u64",DelegatorId:"MessageSourceId",ProviderId:"MessageSourceId",KeyInfoResponse:{msa_keys:"Vec<AccountId>",msa_id:"MessageSourceId"},SchemaGrantResponse:{schema_id:"SchemaId",revoked_at:"BlockNumber"},SchemaId:"u16",SchemaModel:"Vec<u8>",SchemaVersion:"u8",SchemaResponse:{schema_id:"SchemaId",model:"SchemaModel",model_type:"ModelType",payload_location:"PayloadLocation",settings:"Vec<SchemaSetting>"},ModelType:{_enum:["AvroBinary","Parquet"]},PayloadLocation:{_enum:["OnChain","IPFS","Itemized","Paginated"]},SchemaSetting:{_enum:["AppendOnly","SignatureRequired"]},SchemaVersionResponse:{schema_name:"String",schema_version:"SchemaVersion",schema_id:"SchemaId"},PageId:"u16",PageHash:"u32",PageNonce:"u16",ItemizedStorageResponse:{index:"u16",payload:"Vec<u8>"},PaginatedStorageResponse:{page_id:"PageId",msa_id:"MessageSourceId",schema_id:"SchemaId",content_hash:"PageHash",nonce:"PageNonce",payload:"Vec<u8>"},ItemizedStoragePageResponse:{msa_id:"MessageSourceId",schema_id:"SchemaId",content_hash:"PageHash",nonce:"PageNonce",items:"Vec<ItemizedStorageResponse>"}}}]},galital:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithTripleRefCount",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},ChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"u8",expiry:"U256"},ClassId:"u64",TokenId:"u64",ClassData:"Vec<u8>",TokenData:"Vec<u8>",ReportReason:{_enum:["None","Illigal","Plagiarism","Duplicate","Reported"]},ClassInfoOf:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",class_data:"ClassData"},ExtendedInfo:{display_flag:"bool",report:"ReportReason",frozen:"bool"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",class_data:"ClassData"}}}]},"galital-collator":{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},ClassId:"u64",TokenId:"u64",ClassData:"Vec<u8>",TokenData:"Vec<u8>",ReportReason:{_enum:["None","Illigal","Plagiarism","Duplicate","Reported"]},ClassInfoOf:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",class_data:"ClassData"},ExtendedInfo:{display_flag:"bool",report:"ReportReason",frozen:"bool"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",class_data:"ClassData"}}}]},gamepower:{types:[{minmax:[0,null],types:{AccountInfo:"AccountInfoWithDualRefCount",AssetId:"u64",SeriesId:"u64",ClassId:"u32",ClassIdOf:"ClassId",ClassInfoOf:"ClassInfo",TokenId:"u64",TokenIdOf:"TokenId",TokenInfoOf:"TokenInfo",ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"NftClassData"},TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"NftAssetData"},NftSeriesData:{name:"Vec<u8>",owner:"AccountId",properties:"Vec<u8>"},NftClassData:{deposit:"Balance",properties:"Vec<u8>",token_type:"TokenType",collection_type:"CollectionType",total_supply:"u64",initial_supply:"u64"},NftAssetData:{deposit:"Balance",name:"Vec<u8>",description:"Vec<u8>",properties:"Vec<u8>"},TokenType:{_enum:["Transferrable","BoundToAddress"]},CollectionType:{_enum:["Collectable","Wearable","Executable"]},ClassProperties:{Transferrable:"bool",Burnable:"bool"}}}]},gargantua:{},"hack-hydra-dx":{types:[{minmax:[0,null],types:{Amount:"i128",AmountOf:"Amount",Address:"AccountId",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},Fee:{numerator:"u32",denominator:"u32"},BalanceInfo:{amount:"Balance",assetId:"AssetId"},CurrencyId:"AssetId",CurrencyIdOf:"AssetId",Intention:{who:"AccountId",asset_sell:"AssetId",asset_buy:"AssetId",amount:"Balance",discount:"bool",sell_or_buy:"IntentionType"},IntentionId:"u128",IntentionType:{_enum:["SELL","BUY"]},LookupSource:"AccountId",OrderedSet:"Vec<AssetId>",Price:"Balance",Chain:{genesisHash:"Vec<u8>",lastBlockHash:"Vec<u8>"}}}]},halongbay:{types:[{minmax:[0,null],types:{RelayChainAccountId:"H256",RoundIndex:"u32",SettingStruct:{bond_duration:"u32",blocks_per_round:"u32",desired_target:"u32"},Bond:{owner:"AccountId",amount:"Balance"},UnBondChunk:{value:"Balance",round:"u32"},StakingNominators:{nominations:"Vec<Bond>",total:"Balance",unbonding:"Vec<UnBondChunk>",claimed_rewards:"Vec<u32>"}}}]},hanonycash:{types:[{minmax:[0,null],types:{Difficulty:"U256",DifficultyAndTimestamp:{difficulty:"Difficulty",timestamp:"Moment"},Era:{genesisBlockHash:"H256",finalBlockHash:"H256",finalStateRoot:"H256"},RefCount:"u8"}}]},heiko:{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},tokens:{queryExistentialDeposit:{description:"Query Existential Deposit for a given currency.",params:[{name:"currencyId",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex",isSubscription:!1,jsonrpc:"tokens_queryExistentialDeposit",method:"queryExistentialDeposit",section:"tokens"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},router:{getBestRoute:{description:"Returns the route that results in the largest amount out for amount in",params:[{name:"amount",type:"Balance"},{name:"token_in",type:"CurrencyId"},{name:"token_out",type:"CurrencyId"},{name:"reversed",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Vec<CurrencyId>, FixedU128)",isSubscription:!1,jsonrpc:"router_getBestRoute",method:"getBestRoute",section:"router"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{isActive:"bool",totalDeposited:"Balance",unlockHeight:"BlockNumber",coolDownDuration:"BlockNumber",rewardDuration:"BlockNumber",periodFinish:"BlockNumber",lastUpdateBlock:"BlockNumber",rewardRate:"Balance",rewardPerShareStored:"Balance"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",Deposits:{voucherBalance:"Balance",isCollateral:"bool"},BorrowSnapshot:{principal:"Balance",borrowIndex:"u128"},EarnedSnapshot:{totalEarnedPrior:"Balance",exchangeRatePrior:"u128"},JumpModel:{baseRate:"Rate",jumpRate:"Rate",fullRate:"Rate",jumpUtilization:"Ratio"},CurveModel:{baseRate:"Rate"},InterestRateModel:{_enum:{JumpModel:"JumpModel",CurveModel:"CurveModel"}},Market:{collateralFactor:"Ratio",liquidationThreshold:"Ratio",reserveFactor:"Ratio",closeFactor:"Ratio",liquidateIncentive:"Rate",liquidateIncentiveReservedFactor:"Ratio",rateModel:"InterestRateModel",state:"MarketState",supplyCap:"Balance",borrowCap:"Balance",ptokenId:"CurrencyId"},MarketState:{_enum:["Active","Pending","Supervision"]},RewardMarketState:{index:"Balance",block:"BlockNumber"},Liquidity:"FixedU128",Shortfall:"FixedU128",ReservableAmount:{total:"Balance",reserved:"Balance"},MatchingLedger:{totalStakeAmount:"ReservableAmount",totalUnstakeAmount:"ReservableAmount"},UnlockChunk:{value:"Balance",era:"EraIndex"},StakingLedger:{stash:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>",claimedRewards:"Vec<EraIndex>"},DerivativeIndex:"u16",Pool:{baseAmount:"Balance",quoteAmount:"Balance",baseAmountLast:"Balance",quoteAmountLast:"Balance",lpTokenId:"AssetId",blockTimestampLast:"BlockNumber",price0CumulativeLast:"Balance",price1CumulativeLast:"Balance"},Amount:"i128",AmountOf:"Amount",Rate:"FixedU128",Ratio:"Permill",Timestamp:"u64",PriceDetail:"(Price, Timestamp)",CurrencyId:"AssetId",CurrencyIdOf:"CurrencyId",Currency:"CurrencyId",AssetIdOf:"AssetId",OracleKey:"AssetId",BoundedBalance:"BoundedVec<(Balance, BlockNumber), u32>",UserPosition:{depositBalance:"Balance",lockBalanceItems:"BoundedBalance",rewardAmount:"Balance",rewardPerSharePaid:"Balance"},Route:"Vec<(AssetId, AssetId)>",VaultPhase:{_enum:["Pending","Contributing","Closed","Failed","Succeeded","Expired"]},ContributionStrategy:{_enum:["XCM","XCMPROXY"]},ChildStorageKind:{_enum:["Pending","Flying","Contributed"]},TrieIndex:"u32",LeasePeriod:"BlockNumber",Vault:{ctoken:"AssetId",phase:"VaultPhase",contributed:"Balance",pending:"Balance",flying:"Balance",contributionStrategy:"ContributionStrategy",cap:"Balance",endBlock:"BlockNumber",trieIndex:"TrieIndex",leaseStart:"LeasePeriod",leaseEnd:"LeasePeriod"},XcmWeightFeeMisc:{weight:"Weight",fee:"Balance"},XcmCall:{_enum:["Bond","BondExtra","Unbond","Rebond","WithdrawUnbonded","Nominate","Contribute","Withdraw","AddMemo"]},BridgeToken:{id:"CurrencyId",external:"bool",fee:"Balance"},ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},Address:"MultiAddress",LookupSource:"MultiAddress",TAssetBalance:"u128"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},"hydra-dx":{types:[{minmax:[0,null],types:{Amount:"i128",AmountOf:"Amount",Address:"AccountId",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},Fee:{numerator:"u32",denominator:"u32"},BalanceInfo:{amount:"Balance",assetId:"AssetId"},CurrencyId:"AssetId",CurrencyIdOf:"AssetId",Intention:{who:"AccountId",asset_sell:"AssetId",asset_buy:"AssetId",amount:"Balance",discount:"bool",sell_or_buy:"IntentionType"},IntentionId:"u128",IntentionType:{_enum:["SELL","BUY"]},LookupSource:"AccountId",OrderedSet:"Vec<AssetId>",Price:"Balance",Chain:{genesisHash:"Vec<u8>",lastBlockHash:"Vec<u8>"}}}]},hyperbridge:{},idavoll:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},imbue:{rpc:{proposals:{getProjectKitty:{description:"Get the escrow address associated with a project",params:[{name:"project_id",type:"u32"}],type:"AccountId"}}},types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress"}}]},"integritee-parachain":{types:[{minmax:[0,null],types:{Address:"MultiAddress",Enclave:{mrenclave:"Hash",pubkey:"AccountId",timestamp:"u64",url:"Text"},LookupSource:"MultiAddress",Request:{cyphertext:"Vec<u8>",shard:"ShardIdentifier"},ShardIdentifier:"Hash"}}]},"interbtc-parachain":{default:{types:[{minmax:[0,null],types:{BalanceWrapper:{amount:"String"},CurrencyId:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",LendToken:"LendTokenId",LpToken:"(LpToken, LpToken)",StableLpToken:"StablePoolId"}},LpToken:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",StableLpToken:"StablePoolId"}},InterbtcPrimitivesCurrencyId:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",LendToken:"InterbtcLendTokenId",LpToken:"(InterbtcLpToken, InterbtcLpToken)",StableLpToken:"InterbtcStablePoolId"}},InterbtcLpToken:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",StableLpToken:"InterbtcStablePoolId"}},InterbtcForeignAssetId:"u32",ForeignAssetId:"u32",InterbtcLendTokenId:"u32",InterbtcStablePoolId:"u32",LendTokenId:"u32",StablePoolId:"u32",NumberOrHex:{_enum:{Number:"u64",Hex:"U256"}},Rate:"FixedU128",Ratio:"Permill",Liquidity:"FixedU128",Shortfall:"FixedU128",FundAccountJsonRpcRequest:{account_id:"AccountId",currency_id:"InterbtcPrimitivesCurrencyId"},H256Le:"H256",SignedFixedPoint:"FixedU128",TokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},InterbtcPrimitivesTokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},UnsignedFixedPoint:"FixedU128",VaultCurrencyPair:{collateral:"CurrencyId",wrapped:"CurrencyId"},VaultId:{account_id:"AccountId",currencies:"VaultCurrencyPair"}}}],rpc:{btcRelay:{verifyBlockHeaderInclusion:{description:"Verify that the block with the given hash is included",params:[{name:"block_hash",type:"H256Le"}],type:"void"}},escrow:{balanceAt:{description:"Get a given user's escrowed balance",params:[{name:"account_id",type:"AccountId"},{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},totalSupply:{description:"Get the total voting supply in the system",params:[{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},freeStakable:{description:"Amount of kint/intr that account can lock, taking into consideration the Limits.",params:[{name:"account_id",type:"AccountId"}],type:"BalanceWrapper"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},issue:{getIssueRequests:{description:"Get all issue request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultIssueRequests:{description:"Get all issue request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},oracle:{collateralToWrapped:{description:"Collateral to Wrapped exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},wrappedToCollateral:{description:"Wrapped to Collateral exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},redeem:{getRedeemRequests:{description:"Get all redeem request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultRedeemRequests:{description:"Get all redeem request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},refund:{getRefundRequests:{description:"Get all refund request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getRefundRequestsByIssueId:{description:"Get all refund request IDs for a particular issue ID",params:[{name:"issue_id",type:"H256"}],type:"H256"},getVaultRefundRequests:{description:"Get all refund request IDs for a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},replace:{getNewVaultReplaceRequests:{description:"Get all replace request IDs to a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getOldVaultReplaceRequests:{description:"Get all replace request IDs from a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},reward:{estimateEscrowRewardRate:{description:"Estimate the escrow reward rate for a given account",params:[{name:"account_id",type:"AccountId"},{name:"amount",type:"Option<Balance>"},{name:"lock_time",type:"Option<BlockNumber>"}],type:"UnsignedFixedPoint"},estimateVaultRewardRate:{description:"Estimate the vault reward rate a given vault id",params:[{name:"vault_id",type:"VaultId"}],type:"UnsignedFixedPoint"},computeEscrowReward:{description:"Get a given user's rewards due",params:[{name:"account_id",type:"AccountId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeFarmingReward:{description:"Get a given user's farming rewards due",params:[{name:"account_id",type:"AccountId"},{name:"pool_currency_id",type:"CurrencyId"},{name:"reward_currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeVaultReward:{description:"Get a given vault's rewards due",params:[{name:"vault_id",type:"VaultId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},vaultRegistry:{getCollateralizationFromVault:{description:"Returns the collateralization of a specific vault",params:[{name:"vault",type:"VaultId"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getCollateralizationFromVaultAndCollateral:{description:"Returns the collateralization of a specific vault and collateral",params:[{name:"vault",type:"VaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vault",type:"VaultId"}],type:"BalanceWrapper"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold.",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getRequiredCollateralForWrapped:{description:"Get the amount of collateral required to issue an amount of InterBTC",params:[{name:"amount_btc",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultsByAccountId:{description:"Get all vaults that are registered using the given account _id",params:[{name:"account_id",type:"AccountId"}],type:"Vec<VaultId>"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"}},dexStable:{getA:{description:"Get amplification coefficient of pool",params:[{name:"pool_id",type:"StablePoolId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex"}}},alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},instances:{balances:["ksm","kbtc","kint","dot","ibtc","intr"]}}},"interbtc-standalone":{default:{types:[{minmax:[0,null],types:{BalanceWrapper:{amount:"String"},CurrencyId:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",LendToken:"LendTokenId",LpToken:"(LpToken, LpToken)",StableLpToken:"StablePoolId"}},LpToken:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",StableLpToken:"StablePoolId"}},InterbtcPrimitivesCurrencyId:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",LendToken:"InterbtcLendTokenId",LpToken:"(InterbtcLpToken, InterbtcLpToken)",StableLpToken:"InterbtcStablePoolId"}},InterbtcLpToken:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",StableLpToken:"InterbtcStablePoolId"}},InterbtcForeignAssetId:"u32",ForeignAssetId:"u32",InterbtcLendTokenId:"u32",InterbtcStablePoolId:"u32",LendTokenId:"u32",StablePoolId:"u32",NumberOrHex:{_enum:{Number:"u64",Hex:"U256"}},Rate:"FixedU128",Ratio:"Permill",Liquidity:"FixedU128",Shortfall:"FixedU128",FundAccountJsonRpcRequest:{account_id:"AccountId",currency_id:"InterbtcPrimitivesCurrencyId"},H256Le:"H256",SignedFixedPoint:"FixedU128",TokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},InterbtcPrimitivesTokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},UnsignedFixedPoint:"FixedU128",VaultCurrencyPair:{collateral:"CurrencyId",wrapped:"CurrencyId"},VaultId:{account_id:"AccountId",currencies:"VaultCurrencyPair"}}}],rpc:{btcRelay:{verifyBlockHeaderInclusion:{description:"Verify that the block with the given hash is included",params:[{name:"block_hash",type:"H256Le"}],type:"void"}},escrow:{balanceAt:{description:"Get a given user's escrowed balance",params:[{name:"account_id",type:"AccountId"},{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},totalSupply:{description:"Get the total voting supply in the system",params:[{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},freeStakable:{description:"Amount of kint/intr that account can lock, taking into consideration the Limits.",params:[{name:"account_id",type:"AccountId"}],type:"BalanceWrapper"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},issue:{getIssueRequests:{description:"Get all issue request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultIssueRequests:{description:"Get all issue request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},oracle:{collateralToWrapped:{description:"Collateral to Wrapped exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},wrappedToCollateral:{description:"Wrapped to Collateral exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},redeem:{getRedeemRequests:{description:"Get all redeem request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultRedeemRequests:{description:"Get all redeem request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},refund:{getRefundRequests:{description:"Get all refund request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getRefundRequestsByIssueId:{description:"Get all refund request IDs for a particular issue ID",params:[{name:"issue_id",type:"H256"}],type:"H256"},getVaultRefundRequests:{description:"Get all refund request IDs for a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},replace:{getNewVaultReplaceRequests:{description:"Get all replace request IDs to a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getOldVaultReplaceRequests:{description:"Get all replace request IDs from a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},reward:{estimateEscrowRewardRate:{description:"Estimate the escrow reward rate for a given account",params:[{name:"account_id",type:"AccountId"},{name:"amount",type:"Option<Balance>"},{name:"lock_time",type:"Option<BlockNumber>"}],type:"UnsignedFixedPoint"},estimateVaultRewardRate:{description:"Estimate the vault reward rate a given vault id",params:[{name:"vault_id",type:"VaultId"}],type:"UnsignedFixedPoint"},computeEscrowReward:{description:"Get a given user's rewards due",params:[{name:"account_id",type:"AccountId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeFarmingReward:{description:"Get a given user's farming rewards due",params:[{name:"account_id",type:"AccountId"},{name:"pool_currency_id",type:"CurrencyId"},{name:"reward_currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeVaultReward:{description:"Get a given vault's rewards due",params:[{name:"vault_id",type:"VaultId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},vaultRegistry:{getCollateralizationFromVault:{description:"Returns the collateralization of a specific vault",params:[{name:"vault",type:"VaultId"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getCollateralizationFromVaultAndCollateral:{description:"Returns the collateralization of a specific vault and collateral",params:[{name:"vault",type:"VaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vault",type:"VaultId"}],type:"BalanceWrapper"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold.",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getRequiredCollateralForWrapped:{description:"Get the amount of collateral required to issue an amount of InterBTC",params:[{name:"amount_btc",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultsByAccountId:{description:"Get all vaults that are registered using the given account _id",params:[{name:"account_id",type:"AccountId"}],type:"Vec<VaultId>"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"}},dexStable:{getA:{description:"Get amplification coefficient of pool",params:[{name:"pool_id",type:"StablePoolId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex"}}},alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},instances:{balances:["ksm","kbtc","kint","dot","ibtc","intr"]}}},"interlay-parachain":{default:{types:[{minmax:[0,null],types:{BalanceWrapper:{amount:"String"},CurrencyId:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",LendToken:"LendTokenId",LpToken:"(LpToken, LpToken)",StableLpToken:"StablePoolId"}},LpToken:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",StableLpToken:"StablePoolId"}},InterbtcPrimitivesCurrencyId:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",LendToken:"InterbtcLendTokenId",LpToken:"(InterbtcLpToken, InterbtcLpToken)",StableLpToken:"InterbtcStablePoolId"}},InterbtcLpToken:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",StableLpToken:"InterbtcStablePoolId"}},InterbtcForeignAssetId:"u32",ForeignAssetId:"u32",InterbtcLendTokenId:"u32",InterbtcStablePoolId:"u32",LendTokenId:"u32",StablePoolId:"u32",NumberOrHex:{_enum:{Number:"u64",Hex:"U256"}},Rate:"FixedU128",Ratio:"Permill",Liquidity:"FixedU128",Shortfall:"FixedU128",FundAccountJsonRpcRequest:{account_id:"AccountId",currency_id:"InterbtcPrimitivesCurrencyId"},H256Le:"H256",SignedFixedPoint:"FixedU128",TokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},InterbtcPrimitivesTokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},UnsignedFixedPoint:"FixedU128",VaultCurrencyPair:{collateral:"CurrencyId",wrapped:"CurrencyId"},VaultId:{account_id:"AccountId",currencies:"VaultCurrencyPair"}}}],rpc:{btcRelay:{verifyBlockHeaderInclusion:{description:"Verify that the block with the given hash is included",params:[{name:"block_hash",type:"H256Le"}],type:"void"}},escrow:{balanceAt:{description:"Get a given user's escrowed balance",params:[{name:"account_id",type:"AccountId"},{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},totalSupply:{description:"Get the total voting supply in the system",params:[{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},freeStakable:{description:"Amount of kint/intr that account can lock, taking into consideration the Limits.",params:[{name:"account_id",type:"AccountId"}],type:"BalanceWrapper"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},issue:{getIssueRequests:{description:"Get all issue request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultIssueRequests:{description:"Get all issue request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},oracle:{collateralToWrapped:{description:"Collateral to Wrapped exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},wrappedToCollateral:{description:"Wrapped to Collateral exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},redeem:{getRedeemRequests:{description:"Get all redeem request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultRedeemRequests:{description:"Get all redeem request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},refund:{getRefundRequests:{description:"Get all refund request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getRefundRequestsByIssueId:{description:"Get all refund request IDs for a particular issue ID",params:[{name:"issue_id",type:"H256"}],type:"H256"},getVaultRefundRequests:{description:"Get all refund request IDs for a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},replace:{getNewVaultReplaceRequests:{description:"Get all replace request IDs to a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getOldVaultReplaceRequests:{description:"Get all replace request IDs from a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},reward:{estimateEscrowRewardRate:{description:"Estimate the escrow reward rate for a given account",params:[{name:"account_id",type:"AccountId"},{name:"amount",type:"Option<Balance>"},{name:"lock_time",type:"Option<BlockNumber>"}],type:"UnsignedFixedPoint"},estimateVaultRewardRate:{description:"Estimate the vault reward rate a given vault id",params:[{name:"vault_id",type:"VaultId"}],type:"UnsignedFixedPoint"},computeEscrowReward:{description:"Get a given user's rewards due",params:[{name:"account_id",type:"AccountId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeFarmingReward:{description:"Get a given user's farming rewards due",params:[{name:"account_id",type:"AccountId"},{name:"pool_currency_id",type:"CurrencyId"},{name:"reward_currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeVaultReward:{description:"Get a given vault's rewards due",params:[{name:"vault_id",type:"VaultId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},vaultRegistry:{getCollateralizationFromVault:{description:"Returns the collateralization of a specific vault",params:[{name:"vault",type:"VaultId"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getCollateralizationFromVaultAndCollateral:{description:"Returns the collateralization of a specific vault and collateral",params:[{name:"vault",type:"VaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vault",type:"VaultId"}],type:"BalanceWrapper"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold.",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getRequiredCollateralForWrapped:{description:"Get the amount of collateral required to issue an amount of InterBTC",params:[{name:"amount_btc",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultsByAccountId:{description:"Get all vaults that are registered using the given account _id",params:[{name:"account_id",type:"AccountId"}],type:"Vec<VaultId>"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"}},dexStable:{getA:{description:"Get amplification coefficient of pool",params:[{name:"pool_id",type:"StablePoolId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex"}}},alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},instances:{balances:["ksm","kbtc","kint","dot","ibtc","intr"]}}},"ipse-node":{types:[{minmax:[0,null],types:{test:"u64",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource",GIB:"u64",Amount:"u128",Miner:{account_id:"AccountId",nickname:"Vec<u8>",region:"Vec<u8>",url:"Vec<u8>",public_key:"Vec<u8>",stash_address:"AccountId",capacity:"u128",unit_price:"Balance",violation_times:"u64",total_staking:"Balance",create_ts:"u64",update_ts:"u64"},Order:{miner:"AccountId",label:"Vec<u8>",hash:"[u8; 46]",size:"u128",user:"AccountId",orders:"Vec<MinerOrder<AccountId, Balance>>",status:"OrderStatus",create_ts:"u64",update_ts:"u64",duration:"u64"},MinerOrder:{miner:"AccountId",day_price:"Balance",total_price:"Balance",verify_result:"bool",verify_ts:"u64",confirm_ts:"u64",url:"Option<Vec<u8>>"},OrderStatus:{_enum:["Created","Confirmed","Expired","Deleted"]},MiningInfo:{miner:"Option<AccountId>",best_dl:"u64",block:"u64"},Difficulty:{base_target:"u64",net_difficulty:"u64",block:"u64"},MachineInfo:{plot_size:"u64",numeric_id:"u128",update_time:"BlockNumber",is_stop:"bool",reward_dest:"AccountId"},StakingInfo:{miner:"AccountId",miner_proportion:"Percent",total_staking:"Balance",others:"Vec<(AccountId, Balance, Balance)>"},Oprate:{_enum:["Add","Sub"]},MiningHistory:{total_num:"u64",history:"Vec<(BlockNumber, Balance)>"},PostTxTransferData:{verify_status:"u64",irreversible:"bool",is_post_transfer:"bool",contract_account:"Vec<u8>",from:"Vec<u8>",to:"Vec<u8>",quantity:"u64",memo:"Vec<u8>"},AddressStatus:{_enum:["active","inActive"]},FetchFailedOf:{block_num:"BlockNumber",tx:"Vec<u8>",err:"Vec<u8>"}}}]},"jupiter-prep":{types:[{minmax:[0,2],types:{LookupSource:"MultiAddress",Address:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",FullIdentification:"AccountId",AuthorityState:{_enum:["Working","Waiting"]},EraIndex:"u32",ActiveEraInfo:{index:"EraIndex",start:"Option<u64>"},UnappliedSlash:{validator:"AccountId",reporters:"Vec<AccountId>"}}},{minmax:[3,null],types:{LookupSource:"MultiAddress",Address:"MultiAddress",AccountInfo:"AccountInfoWithTripleRefCount",AliveContractInfo:{trieId:"TrieId",storageSize:"u32",pairCount:"u32",codeHash:"CodeHash",rentAllowance:"Balance",rentPayed:"Balance",deductBlock:"BlockNumber",lastWrite:"Option<BlockNumber>",_reserved:"Option<Null>"},FullIdentification:"AccountId",AuthorityState:{_enum:["Working","Waiting"]},EraIndex:"u32",ActiveEraInfo:{index:"EraIndex",start:"Option<u64>"},UnappliedSlash:{validator:"AccountId",reporters:"Vec<AccountId>"}}}]},"jupiter-rococo":{types:[{minmax:[0,null],types:{LookupSource:"MultiAddress",Address:"MultiAddress"}}]},"jur-chain":{types:[{minmax:[0,null],types:{}}]},"jur-node":{types:[{minmax:[0,null],types:{}}]},kerria:{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},tokens:{queryExistentialDeposit:{description:"Query Existential Deposit for a given currency.",params:[{name:"currencyId",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex",isSubscription:!1,jsonrpc:"tokens_queryExistentialDeposit",method:"queryExistentialDeposit",section:"tokens"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},router:{getBestRoute:{description:"Returns the route that results in the largest amount out for amount in",params:[{name:"amount",type:"Balance"},{name:"token_in",type:"CurrencyId"},{name:"token_out",type:"CurrencyId"},{name:"reversed",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Vec<CurrencyId>, FixedU128)",isSubscription:!1,jsonrpc:"router_getBestRoute",method:"getBestRoute",section:"router"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{isActive:"bool",totalDeposited:"Balance",unlockHeight:"BlockNumber",coolDownDuration:"BlockNumber",rewardDuration:"BlockNumber",periodFinish:"BlockNumber",lastUpdateBlock:"BlockNumber",rewardRate:"Balance",rewardPerShareStored:"Balance"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",Deposits:{voucherBalance:"Balance",isCollateral:"bool"},BorrowSnapshot:{principal:"Balance",borrowIndex:"u128"},EarnedSnapshot:{totalEarnedPrior:"Balance",exchangeRatePrior:"u128"},JumpModel:{baseRate:"Rate",jumpRate:"Rate",fullRate:"Rate",jumpUtilization:"Ratio"},CurveModel:{baseRate:"Rate"},InterestRateModel:{_enum:{JumpModel:"JumpModel",CurveModel:"CurveModel"}},Market:{collateralFactor:"Ratio",liquidationThreshold:"Ratio",reserveFactor:"Ratio",closeFactor:"Ratio",liquidateIncentive:"Rate",liquidateIncentiveReservedFactor:"Ratio",rateModel:"InterestRateModel",state:"MarketState",supplyCap:"Balance",borrowCap:"Balance",ptokenId:"CurrencyId"},MarketState:{_enum:["Active","Pending","Supervision"]},RewardMarketState:{index:"Balance",block:"BlockNumber"},Liquidity:"FixedU128",Shortfall:"FixedU128",ReservableAmount:{total:"Balance",reserved:"Balance"},MatchingLedger:{totalStakeAmount:"ReservableAmount",totalUnstakeAmount:"ReservableAmount"},UnlockChunk:{value:"Balance",era:"EraIndex"},StakingLedger:{stash:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>",claimedRewards:"Vec<EraIndex>"},DerivativeIndex:"u16",Pool:{baseAmount:"Balance",quoteAmount:"Balance",baseAmountLast:"Balance",quoteAmountLast:"Balance",lpTokenId:"AssetId",blockTimestampLast:"BlockNumber",price0CumulativeLast:"Balance",price1CumulativeLast:"Balance"},Amount:"i128",AmountOf:"Amount",Rate:"FixedU128",Ratio:"Permill",Timestamp:"u64",PriceDetail:"(Price, Timestamp)",CurrencyId:"AssetId",CurrencyIdOf:"CurrencyId",Currency:"CurrencyId",AssetIdOf:"AssetId",OracleKey:"AssetId",BoundedBalance:"BoundedVec<(Balance, BlockNumber), u32>",UserPosition:{depositBalance:"Balance",lockBalanceItems:"BoundedBalance",rewardAmount:"Balance",rewardPerSharePaid:"Balance"},Route:"Vec<(AssetId, AssetId)>",VaultPhase:{_enum:["Pending","Contributing","Closed","Failed","Succeeded","Expired"]},ContributionStrategy:{_enum:["XCM","XCMPROXY"]},ChildStorageKind:{_enum:["Pending","Flying","Contributed"]},TrieIndex:"u32",LeasePeriod:"BlockNumber",Vault:{ctoken:"AssetId",phase:"VaultPhase",contributed:"Balance",pending:"Balance",flying:"Balance",contributionStrategy:"ContributionStrategy",cap:"Balance",endBlock:"BlockNumber",trieIndex:"TrieIndex",leaseStart:"LeasePeriod",leaseEnd:"LeasePeriod"},XcmWeightFeeMisc:{weight:"Weight",fee:"Balance"},XcmCall:{_enum:["Bond","BondExtra","Unbond","Rebond","WithdrawUnbonded","Nominate","Contribute","Withdraw","AddMemo"]},BridgeToken:{id:"CurrencyId",external:"bool",fee:"Balance"},ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},Address:"MultiAddress",LookupSource:"MultiAddress",TAssetBalance:"u128"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},khala:{alias:{},rpc:{},types:[{minmax:[0,10],types:{ChainId:"u8",Address:"MultiAddress",LookupSource:"MultiAddress",DispatchErrorModule:"DispatchErrorModuleU8",Keys:"AccountId",BridgeChainId:"u8",BridgeEvent:{_enum:{FungibleTransfer:"FungibleTransfer",NonFungibleTransfer:"NonFungibleTransfer",GenericTransfer:"GenericTransfer"}},FungibleTransfer:{destId:"BridgeChainId",nonce:"DepositNonce",resourceId:"ResourceId",amount:"U256",recipient:"Vec<u8>"},NonFungibleTransfer:{destId:"BridgeChainId",nonce:"DepositNonce",resourceId:"ResourceId",tokenId:"Vec<u8>",recipient:"Vec<u8>",metadata:"Vec<u8>"},GenericTransfer:{destId:"BridgeChainId",nonce:"DepositNonce",resourceId:"ResourceId",metadata:"Vec<u8>"},ResourceId:"[u8; 32]",TokenId:"U256",DepositNonce:"u64",ProposalStatus:{_enum:{Initiated:null,Approved:null,Rejected:null}},ProposalVotes:{votesFor:"Vec<AccountId>",votesAgainst:"Vec<AccountId>",status:"ProposalStatus",expiry:"BlockNumber"},AssetInfo:{destId:"BridgeChainId",assetIdentity:"Vec<u8>"},ProxyType:{_enum:["Any","NonTransfer","CancelProxy","Governance","Collator","StakePoolManager"]},Sr25519PublicKey:"[u8; 32]",MasterPublicKey:"Sr25519PublicKey",WorkerPublicKey:"Sr25519PublicKey",ContractPublicKey:"Sr25519PublicKey",EcdhPublicKey:"[u8; 32]",MessageOrigin:{_enum:{Pallet:"Vec<u8>",Contract:"H256",Worker:"Sr25519PublicKey",AccountId:"H256",MultiLocation:"Vec<u8>",Gatekeeper:null,Cluster:"H256"}},Attestation:{_enum:{SgxIas:"AttestationSgxIas"}},AttestationSgxIas:{raReport:"Vec<u8>",signature:"Vec<u8>",rawSigningCert:"Vec<u8>"},SenderId:"MessageOrigin",Path:"Vec<u8>",Topic:"Path",Message:{sender:"SenderId",destination:"Topic",payload:"Vec<u8>"},SignedMessage:{message:"Message",sequence:"u64",signature:"Vec<u8>"},WorkerRegistrationInfo:{version:"u32",machineId:"Vec<u8>",pubkey:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey",genesisBlockHash:"H256",features:"Vec<u32>",operator:"Option<AccountId>"},PoolInfo:{pid:"u64",owner:"AccountId",payoutCommission:"Option<Permill>",ownerReward:"Balance",cap:"Option<Balance>",rewardAcc:"u128",totalShares:"Balance",totalStake:"Balance",freeStake:"Balance",releasingStake:"Balance",workers:"Vec<WorkerPublicKey>",withdrawQueue:"Vec<WithdrawInfo>"},WithdrawInfo:{user:"AccountId",shares:"Balance",startTime:"u64"},WorkerInfo:{pubkey:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey",runtimeVersion:"u32",lastUpdated:"u64",operator:"Option<AccountId>",confidenceLevel:"u8",initialScore:"Option<u32>",features:"Vec<u32>"},MinerInfo:{state:"MinerState",ve:"u128",v:"u128",vUpdatedAt:"u64",benchmark:"Benchmark",coolDownStart:"u64",stats:"MinerStats"},Benchmark:{pInit:"u32",pInstant:"u32",iterations:"u64",miningStartTime:"u64",challengeTimeLast:"u64"},MinerState:{_enum:{Ready:null,MiningIdle:null,MiningActive:null,MiningUnresponsive:null,MiningCoolingDown:null}},MinerStats:{totalReward:"Balance"},HeartbeatChallenge:{seed:"U256",onlineTarget:"U256"},KeyDistribution:{_enum:{MasterKeyDistribution:"DispatchMasterKeyEvent"}},GatekeeperLaunch:{_enum:{FirstGatekeeper:"NewGatekeeperEvent",MasterPubkeyOnChain:null}},GatekeeperChange:{_enum:{GatekeeperRegistered:"NewGatekeeperEvent"}},GatekeeperEvent:{_enum:{NewRandomNumber:"RandomNumberEvent",TokenomicParametersChanged:"TokenomicParameters"}},NewGatekeeperEvent:{pubkey:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey"},DispatchMasterKeyEvent:{dest:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey",encryptedMasterKey:"Vec<u8>",iv:"[u8; 12]"},RandomNumberEvent:{blockNumber:"u32",randomNumber:"[u8; 32]",lastRandomNumber:"[u8; 32]"},TokenomicParameters:{phaRate:"U64F64Bits",rho:"U64F64Bits",budgetPerBlock:"U64F64Bits",vMax:"U64F64Bits",costK:"U64F64Bits",costB:"U64F64Bits",slashRate:"U64F64Bits",treasuryRatio:"U64F64Bits",heartbeatWindow:"u32",rigK:"U64F64Bits",rigB:"U64F64Bits",re:"U64F64Bits",k:"U64F64Bits",kappa:"U64F64Bits"},TokenomicParams:"TokenomicParameters",U64F64Bits:"u128",UserStakeInfo:{user:"AccountId",locked:"Balance",shares:"Balance",availableRewards:"Balance",rewardDebt:"Balance"}}},{minmax:[11,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",DispatchErrorModule:"DispatchErrorModuleU8",Keys:"AccountId",BridgeChainId:"u8",BridgeEvent:{_enum:{FungibleTransfer:"FungibleTransfer",NonFungibleTransfer:"NonFungibleTransfer",GenericTransfer:"GenericTransfer"}},FungibleTransfer:{destId:"BridgeChainId",nonce:"DepositNonce",resourceId:"ResourceId",amount:"U256",recipient:"Vec<u8>"},NonFungibleTransfer:{destId:"BridgeChainId",nonce:"DepositNonce",resourceId:"ResourceId",tokenId:"Vec<u8>",recipient:"Vec<u8>",metadata:"Vec<u8>"},GenericTransfer:{destId:"BridgeChainId",nonce:"DepositNonce",resourceId:"ResourceId",metadata:"Vec<u8>"},ResourceId:"[u8; 32]",TokenId:"U256",DepositNonce:"u64",ProposalStatus:{_enum:{Initiated:null,Approved:null,Rejected:null}},ProposalVotes:{votesFor:"Vec<AccountId>",votesAgainst:"Vec<AccountId>",status:"ProposalStatus",expiry:"BlockNumber"},AssetInfo:{destId:"BridgeChainId",assetIdentity:"Vec<u8>"},ProxyType:{_enum:["Any","NonTransfer","CancelProxy","Governance","Collator","StakePoolManager"]},Sr25519PublicKey:"[u8; 32]",MasterPublicKey:"Sr25519PublicKey",WorkerPublicKey:"Sr25519PublicKey",ContractPublicKey:"Sr25519PublicKey",EcdhPublicKey:"[u8; 32]",MessageOrigin:{_enum:{Pallet:"Vec<u8>",Contract:"H256",Worker:"Sr25519PublicKey",AccountId:"H256",MultiLocation:"Vec<u8>",Gatekeeper:null,Cluster:"H256"}},Attestation:{_enum:{SgxIas:"AttestationSgxIas"}},AttestationSgxIas:{raReport:"Vec<u8>",signature:"Vec<u8>",rawSigningCert:"Vec<u8>"},SenderId:"MessageOrigin",Path:"Vec<u8>",Topic:"Path",Message:{sender:"SenderId",destination:"Topic",payload:"Vec<u8>"},SignedMessage:{message:"Message",sequence:"u64",signature:"Vec<u8>"},WorkerRegistrationInfo:{version:"u32",machineId:"Vec<u8>",pubkey:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey",genesisBlockHash:"H256",features:"Vec<u32>",operator:"Option<AccountId>"},PoolInfo:{pid:"u64",owner:"AccountId",payoutCommission:"Option<Permill>",ownerReward:"Balance",cap:"Option<Balance>",rewardAcc:"u128",totalShares:"Balance",totalStake:"Balance",freeStake:"Balance",releasingStake:"Balance",workers:"Vec<WorkerPublicKey>",withdrawQueue:"Vec<WithdrawInfo>"},WithdrawInfo:{user:"AccountId",shares:"Balance",startTime:"u64"},WorkerInfo:{pubkey:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey",runtimeVersion:"u32",lastUpdated:"u64",operator:"Option<AccountId>",confidenceLevel:"u8",initialScore:"Option<u32>",features:"Vec<u32>"},MinerInfo:{state:"MinerState",ve:"u128",v:"u128",vUpdatedAt:"u64",benchmark:"Benchmark",coolDownStart:"u64",stats:"MinerStats"},Benchmark:{pInit:"u32",pInstant:"u32",iterations:"u64",miningStartTime:"u64",challengeTimeLast:"u64"},MinerState:{_enum:{Ready:null,MiningIdle:null,MiningActive:null,MiningUnresponsive:null,MiningCoolingDown:null}},MinerStats:{totalReward:"Balance"},HeartbeatChallenge:{seed:"U256",onlineTarget:"U256"},KeyDistribution:{_enum:{MasterKeyDistribution:"DispatchMasterKeyEvent"}},GatekeeperLaunch:{_enum:{FirstGatekeeper:"NewGatekeeperEvent",MasterPubkeyOnChain:null}},GatekeeperChange:{_enum:{GatekeeperRegistered:"NewGatekeeperEvent"}},GatekeeperEvent:{_enum:{NewRandomNumber:"RandomNumberEvent",TokenomicParametersChanged:"TokenomicParameters"}},NewGatekeeperEvent:{pubkey:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey"},DispatchMasterKeyEvent:{dest:"WorkerPublicKey",ecdhPubkey:"EcdhPublicKey",encryptedMasterKey:"Vec<u8>",iv:"[u8; 12]"},RandomNumberEvent:{blockNumber:"u32",randomNumber:"[u8; 32]",lastRandomNumber:"[u8; 32]"},TokenomicParameters:{phaRate:"U64F64Bits",rho:"U64F64Bits",budgetPerBlock:"U64F64Bits",vMax:"U64F64Bits",costK:"U64F64Bits",costB:"U64F64Bits",slashRate:"U64F64Bits",treasuryRatio:"U64F64Bits",heartbeatWindow:"u32",rigK:"U64F64Bits",rigB:"U64F64Bits",re:"U64F64Bits",k:"U64F64Bits",kappa:"U64F64Bits"},TokenomicParams:"TokenomicParameters",U64F64Bits:"u128",UserStakeInfo:{user:"AccountId",locked:"Balance",shares:"Balance",availableRewards:"Balance",rewardDebt:"Balance"}}}]},"kintsugi-parachain":{default:{types:[{minmax:[0,null],types:{BalanceWrapper:{amount:"String"},CurrencyId:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",LendToken:"LendTokenId",LpToken:"(LpToken, LpToken)",StableLpToken:"StablePoolId"}},LpToken:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",StableLpToken:"StablePoolId"}},InterbtcPrimitivesCurrencyId:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",LendToken:"InterbtcLendTokenId",LpToken:"(InterbtcLpToken, InterbtcLpToken)",StableLpToken:"InterbtcStablePoolId"}},InterbtcLpToken:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",StableLpToken:"InterbtcStablePoolId"}},InterbtcForeignAssetId:"u32",ForeignAssetId:"u32",InterbtcLendTokenId:"u32",InterbtcStablePoolId:"u32",LendTokenId:"u32",StablePoolId:"u32",NumberOrHex:{_enum:{Number:"u64",Hex:"U256"}},Rate:"FixedU128",Ratio:"Permill",Liquidity:"FixedU128",Shortfall:"FixedU128",FundAccountJsonRpcRequest:{account_id:"AccountId",currency_id:"InterbtcPrimitivesCurrencyId"},H256Le:"H256",SignedFixedPoint:"FixedU128",TokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},InterbtcPrimitivesTokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},UnsignedFixedPoint:"FixedU128",VaultCurrencyPair:{collateral:"CurrencyId",wrapped:"CurrencyId"},VaultId:{account_id:"AccountId",currencies:"VaultCurrencyPair"}}}],rpc:{btcRelay:{verifyBlockHeaderInclusion:{description:"Verify that the block with the given hash is included",params:[{name:"block_hash",type:"H256Le"}],type:"void"}},escrow:{balanceAt:{description:"Get a given user's escrowed balance",params:[{name:"account_id",type:"AccountId"},{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},totalSupply:{description:"Get the total voting supply in the system",params:[{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},freeStakable:{description:"Amount of kint/intr that account can lock, taking into consideration the Limits.",params:[{name:"account_id",type:"AccountId"}],type:"BalanceWrapper"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},issue:{getIssueRequests:{description:"Get all issue request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultIssueRequests:{description:"Get all issue request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},oracle:{collateralToWrapped:{description:"Collateral to Wrapped exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},wrappedToCollateral:{description:"Wrapped to Collateral exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},redeem:{getRedeemRequests:{description:"Get all redeem request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultRedeemRequests:{description:"Get all redeem request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},refund:{getRefundRequests:{description:"Get all refund request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getRefundRequestsByIssueId:{description:"Get all refund request IDs for a particular issue ID",params:[{name:"issue_id",type:"H256"}],type:"H256"},getVaultRefundRequests:{description:"Get all refund request IDs for a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},replace:{getNewVaultReplaceRequests:{description:"Get all replace request IDs to a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getOldVaultReplaceRequests:{description:"Get all replace request IDs from a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},reward:{estimateEscrowRewardRate:{description:"Estimate the escrow reward rate for a given account",params:[{name:"account_id",type:"AccountId"},{name:"amount",type:"Option<Balance>"},{name:"lock_time",type:"Option<BlockNumber>"}],type:"UnsignedFixedPoint"},estimateVaultRewardRate:{description:"Estimate the vault reward rate a given vault id",params:[{name:"vault_id",type:"VaultId"}],type:"UnsignedFixedPoint"},computeEscrowReward:{description:"Get a given user's rewards due",params:[{name:"account_id",type:"AccountId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeFarmingReward:{description:"Get a given user's farming rewards due",params:[{name:"account_id",type:"AccountId"},{name:"pool_currency_id",type:"CurrencyId"},{name:"reward_currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeVaultReward:{description:"Get a given vault's rewards due",params:[{name:"vault_id",type:"VaultId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},vaultRegistry:{getCollateralizationFromVault:{description:"Returns the collateralization of a specific vault",params:[{name:"vault",type:"VaultId"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getCollateralizationFromVaultAndCollateral:{description:"Returns the collateralization of a specific vault and collateral",params:[{name:"vault",type:"VaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vault",type:"VaultId"}],type:"BalanceWrapper"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold.",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getRequiredCollateralForWrapped:{description:"Get the amount of collateral required to issue an amount of InterBTC",params:[{name:"amount_btc",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultsByAccountId:{description:"Get all vaults that are registered using the given account _id",params:[{name:"account_id",type:"AccountId"}],type:"Vec<VaultId>"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"}},dexStable:{getA:{description:"Get amplification coefficient of pool",params:[{name:"pool_id",type:"StablePoolId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex"}}},alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},instances:{balances:["ksm","kbtc","kint","dot","ibtc","intr"]}}},konomi:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},kpron:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},kulupu:{types:[{minmax:[0,null],types:{CurvePoint:{start:"BlockNumber",reward:"Balance",taxation:"Perbill"},Difficulty:"U256",DifficultyAndTimestamp:{difficulty:"Difficulty",timestamp:"Moment"},Era:{genesisBlockHash:"H256",finalBlockHash:"H256",finalStateRoot:"H256"}}},{minmax:[13,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress"}},{minmax:[17,null],types:{CampaignIdentifier:"[u8; 4]"}},{minmax:[24,null],types:{HashedProof:"[u8; 32]",PendingSwap:{source:"AccountId",action:"SwapAction",endBlock:"BlockNumber"},SwapAction:{value:"Balance"}}}]},kusari:{types:[{minmax:[0,null],types:{EvmAddress:"H160",EthereumTxHash:"H256",Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithTripleRefCount",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},ClassId:"u64",TokenId:"u64",ClassData:"Vec<u8>",TokenData:"Vec<u8>",ReportReason:{_enum:["None","Illigal","Plagiarism","Duplicate","Reported"]},ClassInfoOf:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",class_data:"ClassData"},ExtendedInfo:{display_flag:"bool",report:"ReportReason",frozen:"bool"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",class_data:"ClassData"},"bridge::ChainId":"u8",ChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"enum"}}}]},kylin:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",DataRequest:{para_id:"Option<ParaId>",account_id:"Option<AccountId>",requested_block_number:"BlockNumber",processed_block_number:"Option<BlockNumber>",requested_timestamp:"u128",processed_timestamp:"Option<u128>",payload:"Text",feed_name:"Text",is_query:"bool",url:"Option<Text>"}}}]},laminar:{types:[{minmax:[0,299],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"},Share:"u128",ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},OracleValue:"Price",MarginPoolState:{enp:"FixedI128",ell:"FixedI128",required_deposit:"FixedI128"},MarginTraderState:{equity:"FixedI128",margin_held:"FixedI128",margin_level:"FixedI128",free_margin:"FixedI128",unrealized_pl:"FixedI128"},CurrencyId:{_enum:["LAMI","AUSD","DOT","FEUR","FJPY","FBTC","FETH","FAUD","FCAD","FCHF","FXAU","FOIL","FGBP"]},Leverage:{_enum:["LongTwo","LongThree","LongFive","LongTen","LongTwenty","LongThirty","LongFifty","LongReserved","ShortTwo","ShortThree","ShortFive","ShortTen","ShortTwenty","ShortThirty","ShortFifty","ShortReserved"]},SwapRate:{long:"Rate",short:"Rate"},CurrencyIdOf:"CurrencyId",Amount:"FixedI128",AmountOf:"Amount",OracleKey:"CurrencyId",LiquidityPoolId:"u32",Leverages:{_set:{_bitLength:16,LongTwo:1,LongThree:2,LongFive:4,LongTen:8,LongTwenty:16,LongThirty:32,LongFifty:64,LongReserved:128,ShortTwo:256,ShortThree:512,ShortFive:1024,ShortTen:2048,ShortTwenty:4096,ShortThirty:8192,ShortFifty:16384,ShortReserved:32768}},TradingPair:{base:"CurrencyId",quote:"CurrencyId"},AccumulateConfig:{frequency:"Moment",offset:"Moment"},IdentityDepositBalanceOf:"Balance",Pool:{owner:"AccountId",balance:"Balance"},MarginTradingPairOption:{enabled:"bool",maxSpread:"Option<FixedU128>",swapRate:"SwapRate",accumulateConfig:"Option<AccumulateConfig>"},MarginPoolOption:{additionalSwapRate:"FixedI128",minLeveragedAmount:"FixedU128"},MarginPoolTradingPairOption:{enabled:"bool",bidSpread:"Option<FixedU128>",askSpread:"Option<FixedU128>",enabledTrades:"Leverages"},SyntheticPoolCurrencyOption:{bidSpread:"Option<FixedU128>",askSpread:"Option<FixedU128>",additionalCollateralRatio:"Option<Permill>",syntheticEnabled:"bool"},MarginPosition:{owner:"AccountId",poolId:"LiquidityPoolId",pair:"TradingPair",leverage:"Leverage",leveragedHeld:"FixedI128",leveragedDebits:"FixedI128",openAccumulatedSwapRate:"Rate",marginHeld:"FixedI128"},SyntheticPosition:{collateral:"FixedU128",synthetic:"FixedU128"},RiskThreshold:{marginCall:"Permill",stopOut:"Permill"},PositionId:"u64",Rate:"FixedI128",PoolTraderInfo:{positionNum:"PositionId",long:"PairInfo",short:"PairInfo"},PairInfo:{baseAmount:"FixedI128",quoteAmount:"FixedI128"},TradingPairRiskThreshold:{trader:"Option<RiskThreshold>",enp:"Option<RiskThreshold>",ell:"Option<RiskThreshold>"},SyntheticTokensRatio:{extreme:"Option<Permill>",liquidation:"Option<Permill>",collateral:"Option<Permill>"},PositionsSnapshot:{positionsCount:"PositionId",long:"LeveragedAmounts",short:"LeveragedAmounts"},LeveragedAmounts:{held:"FixedI128",debits:"FixedI128"},LiquidityPoolIdentityInfo:{legalName:"Vec<u8>",displayName:"Vec<u8>",web:"Vec<u8>",email:"Vec<u8>",image_url:"Vec<u8>"},SyntheticPoolState:{collateral_ratio:"FixedI128",is_safe:"boolean"},Keys:"SessionKeys2",RefCount:"RefCountTo259"}},{minmax:[300,399],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"},Share:"u128",ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},OracleValue:"Price",MarginPoolState:{enp:"FixedI128",ell:"FixedI128",required_deposit:"FixedI128"},MarginTraderState:{equity:"FixedI128",margin_held:"FixedI128",margin_level:"FixedI128",free_margin:"FixedI128",unrealized_pl:"FixedI128"},CurrencyId:{_enum:["LAMI","AUSD","FEUR","FJPY","FBTC","FETH","FAUD","FCAD","FCHF","FXAU","FOIL","FGBP"]},Leverage:{_enum:["LongTwo","LongThree","LongFive","LongTen","LongTwenty","LongThirty","LongFifty","LongReserved","ShortTwo","ShortThree","ShortFive","ShortTen","ShortTwenty","ShortThirty","ShortFifty","ShortReserved"]},SwapRate:{long:"Rate",short:"Rate"},CurrencyIdOf:"CurrencyId",Amount:"FixedI128",AmountOf:"Amount",OracleKey:"CurrencyId",LiquidityPoolId:"u32",Leverages:{_set:{_bitLength:16,LongTwo:1,LongThree:2,LongFive:4,LongTen:8,LongTwenty:16,LongThirty:32,LongFifty:64,LongReserved:128,ShortTwo:256,ShortThree:512,ShortFive:1024,ShortTen:2048,ShortTwenty:4096,ShortThirty:8192,ShortFifty:16384,ShortReserved:32768}},TradingPair:{base:"CurrencyId",quote:"CurrencyId"},AccumulateConfig:{frequency:"Moment",offset:"Moment"},IdentityDepositBalanceOf:"Balance",Pool:{owner:"AccountId",balance:"Balance"},MarginTradingPairOption:{enabled:"bool",maxSpread:"Option<FixedU128>",swapRate:"SwapRate",accumulateConfig:"Option<AccumulateConfig>"},MarginPoolOption:{additionalSwapRate:"FixedI128",minLeveragedAmount:"FixedU128"},MarginPoolTradingPairOption:{enabled:"bool",bidSpread:"Option<FixedU128>",askSpread:"Option<FixedU128>",enabledTrades:"Leverages"},SyntheticPoolCurrencyOption:{bidSpread:"Option<FixedU128>",askSpread:"Option<FixedU128>",additionalCollateralRatio:"Option<Permill>",syntheticEnabled:"bool"},MarginPosition:{owner:"AccountId",poolId:"LiquidityPoolId",pair:"TradingPair",leverage:"Leverage",leveragedHeld:"FixedI128",leveragedDebits:"FixedI128",openAccumulatedSwapRate:"Rate",marginHeld:"FixedI128"},SyntheticPosition:{collateral:"FixedU128",synthetic:"FixedU128"},RiskThreshold:{marginCall:"Permill",stopOut:"Permill"},PositionId:"u64",Rate:"FixedI128",PoolTraderInfo:{positionNum:"PositionId",long:"PairInfo",short:"PairInfo"},PairInfo:{baseAmount:"FixedI128",quoteAmount:"FixedI128"},TradingPairRiskThreshold:{trader:"Option<RiskThreshold>",enp:"Option<RiskThreshold>",ell:"Option<RiskThreshold>"},SyntheticTokensRatio:{extreme:"Option<Permill>",liquidation:"Option<Permill>",collateral:"Option<Permill>"},PositionsSnapshot:{positionsCount:"PositionId",long:"LeveragedAmounts",short:"LeveragedAmounts"},LeveragedAmounts:{held:"FixedI128",debits:"FixedI128"},LiquidityPoolIdentityInfo:{legalName:"Vec<u8>",displayName:"Vec<u8>",web:"Vec<u8>",email:"Vec<u8>",image_url:"Vec<u8>"},SyntheticPoolState:{collateral_ratio:"FixedI128",is_safe:"boolean"},Keys:"SessionKeys2"}},{minmax:[400,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"},Share:"u128",ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"},OracleValue:"Price",MarginPoolState:{enp:"FixedI128",ell:"FixedI128",required_deposit:"FixedI128"},MarginTraderState:{equity:"FixedI128",margin_held:"FixedI128",margin_level:"FixedI128",free_margin:"FixedI128",unrealized_pl:"FixedI128"},CurrencyId:{_enum:["LAMI","AUSD","DOT","FEUR","FJPY","FBTC","FETH","FAUD","FCAD","FCHF","FXAU","FOIL","FGBP"]},Leverage:{_enum:["LongTwo","LongThree","LongFive","LongTen","LongTwenty","LongThirty","LongFifty","LongReserved","ShortTwo","ShortThree","ShortFive","ShortTen","ShortTwenty","ShortThirty","ShortFifty","ShortReserved"]},SwapRate:{long:"Rate",short:"Rate"},CurrencyIdOf:"CurrencyId",Amount:"FixedI128",AmountOf:"Amount",OracleKey:"CurrencyId",LiquidityPoolId:"u32",Leverages:{_set:{_bitLength:16,LongTwo:1,LongThree:2,LongFive:4,LongTen:8,LongTwenty:16,LongThirty:32,LongFifty:64,LongReserved:128,ShortTwo:256,ShortThree:512,ShortFive:1024,ShortTen:2048,ShortTwenty:4096,ShortThirty:8192,ShortFifty:16384,ShortReserved:32768}},TradingPair:{base:"CurrencyId",quote:"CurrencyId"},AccumulateConfig:{frequency:"Moment",offset:"Moment"},IdentityDepositBalanceOf:"Balance",Pool:{owner:"AccountId",balance:"Balance"},MarginTradingPairOption:{enabled:"bool",maxSpread:"Option<FixedU128>",swapRate:"SwapRate",accumulateConfig:"Option<AccumulateConfig>"},MarginPoolOption:{additionalSwapRate:"FixedI128",minLeveragedAmount:"FixedU128"},MarginPoolTradingPairOption:{enabled:"bool",bidSpread:"Option<FixedU128>",askSpread:"Option<FixedU128>",enabledTrades:"Leverages"},SyntheticPoolCurrencyOption:{bidSpread:"Option<FixedU128>",askSpread:"Option<FixedU128>",additionalCollateralRatio:"Option<Permill>",syntheticEnabled:"bool"},MarginPosition:{owner:"AccountId",poolId:"LiquidityPoolId",pair:"TradingPair",leverage:"Leverage",leveragedHeld:"FixedI128",leveragedDebits:"FixedI128",openAccumulatedSwapRate:"Rate",marginHeld:"FixedI128"},SyntheticPosition:{collateral:"FixedU128",synthetic:"FixedU128"},RiskThreshold:{marginCall:"Permill",stopOut:"Permill"},PositionId:"u64",Rate:"FixedI128",PoolTraderInfo:{positionNum:"PositionId",long:"PairInfo",short:"PairInfo"},PairInfo:{baseAmount:"FixedI128",quoteAmount:"FixedI128"},TradingPairRiskThreshold:{trader:"Option<RiskThreshold>",enp:"Option<RiskThreshold>",ell:"Option<RiskThreshold>"},SyntheticTokensRatio:{extreme:"Option<Permill>",liquidation:"Option<Permill>",collateral:"Option<Permill>"},PositionsSnapshot:{positionsCount:"PositionId",long:"LeveragedAmounts",short:"LeveragedAmounts"},LeveragedAmounts:{held:"FixedI128",debits:"FixedI128"},LiquidityPoolIdentityInfo:{legalName:"Vec<u8>",displayName:"Vec<u8>",web:"Vec<u8>",email:"Vec<u8>",image_url:"Vec<u8>"},SyntheticPoolState:{collateral_ratio:"FixedI128",is_safe:"boolean"},Keys:"SessionKeys2"}}]},litentry:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},logion:{alias:{loAuthorityList:{StorageVersion:"LoAuthorityListStorageVersion"}},types:[{minmax:[0,109],types:{Address:"MultiAddress",LookupSource:"MultiAddress",PeerId:"(Vec<u8>)",AccountInfo:"AccountInfoWithDualRefCount",TAssetBalance:"u128",AssetId:"u64",AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"DepositBalance",max_zombies:"u32",min_balance:"Balance",zombies:"u32",accounts:"u32",is_frozen:"bool"},AssetMetadata:{deposit:"DepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},LocId:"u128",LegalOfficerCaseOf:{owner:"AccountId",requester:"Requester",metadata:"Vec<MetadataItem>",files:"Vec<File>",closed:"bool",loc_type:"LocType",links:"Vec<LocLink>",void_info:"Option<LocVoidInfo<LocId>>",replacer_of:"Option<LocId>",collection_last_block_submission:"Option<BlockNumber>",collection_max_size:"Option<CollectionSize>"},MetadataItem:{name:"Vec<u8>",value:"Vec<u8>",submitter:"AccountId"},LocType:{_enum:["Transaction","Identity","Collection"]},LocLink:{id:"LocId",nature:"Vec<u8>"},File:{hash:"Hash",nature:"Vec<u8>",submitter:"AccountId"},LocVoidInfo:{replacer:"Option<LocId>"},StorageVersion:{_enum:["V1","V2MakeLocVoid","V3RequesterEnum","V4ItemSubmitter","V5Collection"]},Requester:{_enum:{None:null,Account:"AccountId",Loc:"LocId"}},CollectionSize:"u32",CollectionItemId:"Hash",CollectionItem:{description:"Vec<u8>"},BeefyKey:"[u8; 33]",Keys:"SessionKeys2",SessionKeys1:"(AccountId)",SessionKeys2:"(AccountId, AccountId)",SessionKeys3:"(AccountId, AccountId, AccountId)",SessionKeys4:"(AccountId, AccountId, AccountId, AccountId)",SessionKeys5:"(AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6B:"(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys7:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys7B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys8:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys8B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys9:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys9B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys10:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys10B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",FullIdentification:"Exposure",IdentificationTuple:"(ValidatorId, FullIdentification)",MembershipProof:{session:"SessionIndex",trieNodes:"Vec<Bytes>",validatorCount:"ValidatorCount"},SessionIndex:"u32",ValidatorCount:"u32"}},{minmax:[110,111],types:{Address:"MultiAddress",LookupSource:"MultiAddress",PeerId:"(Vec<u8>)",AccountInfo:"AccountInfoWithDualRefCount",TAssetBalance:"u128",AssetId:"u64",AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"DepositBalance",max_zombies:"u32",min_balance:"Balance",zombies:"u32",accounts:"u32",is_frozen:"bool"},AssetMetadata:{deposit:"DepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},LocId:"u128",LegalOfficerCaseOf:{owner:"AccountId",requester:"Requester",metadata:"Vec<MetadataItem>",files:"Vec<File>",closed:"bool",loc_type:"LocType",links:"Vec<LocLink>",void_info:"Option<LocVoidInfo<LocId>>",replacer_of:"Option<LocId>",collection_last_block_submission:"Option<BlockNumber>",collection_max_size:"Option<CollectionSize>",collection_can_upload:"bool"},MetadataItem:{name:"Vec<u8>",value:"Vec<u8>",submitter:"AccountId"},LocType:{_enum:["Transaction","Identity","Collection"]},LocLink:{id:"LocId",nature:"Vec<u8>"},File:{hash:"Hash",nature:"Vec<u8>",submitter:"AccountId"},LocVoidInfo:{replacer:"Option<LocId>"},StorageVersion:{_enum:["V1","V2MakeLocVoid","V3RequesterEnum","V4ItemSubmitter","V5Collection","V6ItemUpload"]},Requester:{_enum:{None:null,Account:"AccountId",Loc:"LocId"}},CollectionSize:"u32",CollectionItemId:"Hash",CollectionItem:{description:"Vec<u8>",files:"Vec<CollectionItemFile<Hash>>"},CollectionItemFile:{name:"Vec<u8>",content_type:"Vec<u8>",fileSize:"u32",hash:"Hash"},BeefyKey:"[u8; 33]",Keys:"SessionKeys2",SessionKeys1:"(AccountId)",SessionKeys2:"(AccountId, AccountId)",SessionKeys3:"(AccountId, AccountId, AccountId)",SessionKeys4:"(AccountId, AccountId, AccountId, AccountId)",SessionKeys5:"(AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6B:"(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys7:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys7B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys8:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys8B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys9:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys9B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys10:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys10B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",FullIdentification:"Exposure",IdentificationTuple:"(ValidatorId, FullIdentification)",MembershipProof:{session:"SessionIndex",trieNodes:"Vec<Bytes>",validatorCount:"ValidatorCount"},SessionIndex:"u32",ValidatorCount:"u32"}},{minmax:[112,116],types:{Address:"MultiAddress",LookupSource:"MultiAddress",OpaquePeerId:"Vec<u8>",AccountInfo:"AccountInfoWithDualRefCount",TAssetBalance:"u128",AssetId:"u64",AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"DepositBalance",max_zombies:"u32",min_balance:"Balance",zombies:"u32",accounts:"u32",is_frozen:"bool"},AssetMetadata:{deposit:"DepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},LocId:"u128",LegalOfficerCaseOf:{owner:"AccountId",requester:"Requester",metadata:"Vec<MetadataItem>",files:"Vec<File>",closed:"bool",loc_type:"LocType",links:"Vec<LocLink>",void_info:"Option<LocVoidInfo<LocId>>",replacer_of:"Option<LocId>",collection_last_block_submission:"Option<BlockNumber>",collection_max_size:"Option<CollectionSize>",collection_can_upload:"bool"},MetadataItem:{name:"Vec<u8>",value:"Vec<u8>",submitter:"AccountId"},LocType:{_enum:["Transaction","Identity","Collection"]},LocLink:{id:"LocId",nature:"Vec<u8>"},File:{hash:"Hash",nature:"Vec<u8>",submitter:"AccountId"},LocVoidInfo:{replacer:"Option<LocId>"},StorageVersion:{_enum:["V1","V2MakeLocVoid","V3RequesterEnum","V4ItemSubmitter","V5Collection","V6ItemUpload","V7ItemToken"]},Requester:{_enum:{None:null,Account:"AccountId",Loc:"LocId"}},CollectionSize:"u32",CollectionItemId:"Hash",CollectionItem:{description:"Vec<u8>",files:"Vec<CollectionItemFile<Hash>>",token:"Option<CollectionItemToken>",restricted_delivery:"bool"},CollectionItemFile:{name:"Vec<u8>",content_type:"Vec<u8>",fileSize:"u32",hash:"Hash"},CollectionItemToken:{token_type:"Vec<u8>",token_id:"Vec<u8>"},BeefyKey:"[u8; 33]",Keys:"SessionKeys2",SessionKeys1:"(AccountId)",SessionKeys2:"(AccountId, AccountId)",SessionKeys3:"(AccountId, AccountId, AccountId)",SessionKeys4:"(AccountId, AccountId, AccountId, AccountId)",SessionKeys5:"(AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6B:"(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys7:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys7B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys8:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys8B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys9:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys9B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys10:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys10B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",FullIdentification:"Exposure",IdentificationTuple:"(ValidatorId, FullIdentification)",MembershipProof:{session:"SessionIndex",trieNodes:"Vec<Bytes>",validatorCount:"ValidatorCount"},SessionIndex:"u32",ValidatorCount:"u32"}},{minmax:[117,null],types:{OpaquePeerId:"Vec<u8>",AccountInfo:"AccountInfoWithDualRefCount",TAssetBalance:"u128",AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"DepositBalance",max_zombies:"u32",min_balance:"Balance",zombies:"u32",accounts:"u32",is_frozen:"bool"},AssetMetadata:{deposit:"DepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},LocId:"u128",LegalOfficerCaseOf:{owner:"AccountId",requester:"Requester",metadata:"Vec<MetadataItem>",files:"Vec<File>",closed:"bool",loc_type:"LocType",links:"Vec<LocLink>",void_info:"Option<LocVoidInfo<LocId>>",replacer_of:"Option<LocId>",collection_last_block_submission:"Option<BlockNumber>",collection_max_size:"Option<CollectionSize>",collection_can_upload:"bool",seal:"Option<Hash>",sponsorship_id:"Option<SponsorshipId>",value_fee:"Balance",legal_fee:"Balance",collection_item_fee:"Balance",tokens_record_fee:"Balance"},MetadataItemParams:{name:"Hash",value:"Hash",submitter:"SupportedAccountId"},MetadataItem:{name:"Hash",value:"Hash",submitter:"SupportedAccountId",acknowledgedByOwner:"bool",acknowledgedByVerifiedIssuer:"bool"},LocType:{_enum:["Transaction","Identity","Collection"]},LocLinkParams:{id:"LocId",nature:"Hash",submitter:"SupportedAccountId"},LocLink:{id:"LocId",nature:"Hash",submitter:"SupportedAccountId",acknowledgedByOwner:"bool",acknowledgedByVerifiedIssuer:"bool"},FileParams:{hash:"Hash",nature:"Hash",submitter:"SupportedAccountId"},File:{hash:"Hash",nature:"Hash",submitter:"SupportedAccountId",acknowledgedByOwner:"bool",acknowledgedByVerifiedIssuer:"bool"},LocVoidInfo:{replacer:"Option<LocId>"},StorageVersion:{_enum:["V1","V2MakeLocVoid","V3RequesterEnum","V4ItemSubmitter","V5Collection","V6ItemUpload","V7ItemToken","V8AddSeal","V9TermsAndConditions","V10AddLocFileSize","V11EnableEthereumSubmitter","V12Sponsorship","V13AcknowledgeItems","V14HashLocPublicData","V15AddTokenIssuance","V16MoveTokenIssuance","V17HashItemRecordPublicData","V18AddValueFee","V19AcknowledgeItemsByIssuer","V20AddCustomLegalFee","V21EnableRequesterLinks","V22AddRecurrentFees"]},Requester:{_enum:{None:null,Account:"AccountId",Loc:"LocId",OtherAccount:"OtherAccountId"}},CollectionSize:"u32",CollectionItemId:"Hash",CollectionItem:{description:"Hash",files:"Vec<CollectionItemFile>",token:"Option<CollectionItemToken>",restricted_delivery:"bool",terms_and_conditions:"Vec<TermsAndConditionsElement>"},TokenIssuance:"u64",CollectionItemFile:{name:"Hash",content_type:"Hash",fileSize:"u32",hash:"Hash"},CollectionItemToken:{token_type:"Hash",token_id:"Hash",token_issuance:"TokenIssuance"},LegalOfficerData:{_enum:{Host:"HostData",Guest:"AccountId"}},HostData:{node_id:"Option<OpaquePeerId>",base_url:"Option<Vec<u8>>",region:"Region"},Region:{_enum:["Europe"]},LoAuthorityListStorageVersion:{_enum:["V1","V2AddOnchainSettings","V3GuestLegalOfficers","V4Region"]},TermsAndConditionsElement:{tcType:"Hash",tcLoc:"LocId",details:"Hash"},LogionVote:{locId:"LocId",ballots:"Vec<Ballot>"},Ballot:{voter:"LocId",status:"AccountId"},BallotStatus:{_enum:["NotVoted","VotedYes","VotedNo"]},VoteId:"u64",VoteClosed:"bool",VoteApproved:"bool",LegalOfficerCaseSummary:{owner:"AccountId",requester:"Option<AccountId>"},TokensRecord:{description:"Hash",files:"Vec<TokensRecordFile>",submitter:"AccountId"},TokensRecordFile:{name:"Hash",contentType:"Hash",file_size:"u32",hash:"Hash"},VerifiedIssuer:{identityLoc:"LocId"},OtherAccountId:{_enum:{Ethereum:"H160"}},SupportedAccountId:{_enum:{None:null,Polkadot:"AccountId",Other:"OtherAccountId"}},SponsorshipId:"u128",Sponsorship:{sponsor:"AccountId",sponsored_account:"SupportedAccountId",legal_officer:"AccountId",loc_id:"Option<LocId>"},Beneficiary:{_enum:{Other:null,LegalOfficer:"AccountId"}},ItemsParams:{metadata:"Vec<MetadataItemParams>",files:"Vec<FileParams>",links:"Vec<LocLinkParams>"},Fixed64:"Int<64, Fixed64>",FixedI64:"Int<64, FixedI64>",FixedU64:"UInt<64, FixedU64>",Fixed128:"Int<128, Fixed128>",FixedI128:"Int<128, FixedI128>",FixedU128:"UInt<128, FixedU128>",I32F32:"Int<64, I32F32>",U32F32:"UInt<64, U32F32>",PerU16:"UInt<16, PerU16>",Perbill:"UInt<32, Perbill>",Percent:"UInt<8, Percent>",Permill:"UInt<32, Permill>",Perquintill:"UInt<64, Perquintill>",AccountId:"AccountId32",AccountId20:"GenericEthereumAccountId",AccountId32:"GenericAccountId32",AccountId33:"GenericAccountId33",AccountIdOf:"AccountId",AccountIndex:"GenericAccountIndex",Address:"MultiAddress",AssetId:"u64",Balance:"UInt<128, Balance>",BalanceOf:"Balance",Block:"GenericBlock",BlockNumber:"u32",BlockNumberFor:"BlockNumber",BlockNumberOf:"BlockNumber",Call:"GenericCall",CallHash:"Hash",CallHashOf:"CallHash",ChangesTrieConfiguration:{digestInterval:"u32",digestLevels:"u32"},ChangesTrieSignal:{_enum:{NewConfiguration:"Option<ChangesTrieConfiguration>"}},ConsensusEngineId:"GenericConsensusEngineId",CodecHash:"Hash",CrateVersion:{major:"u16",minor:"u8",patch:"u8"},Digest:{logs:"Vec<DigestItem>"},DigestItem:{_enum:{Other:"Bytes",AuthoritiesChange:"Vec<AuthorityId>",ChangesTrieRoot:"Hash",SealV0:"SealV0",Consensus:"Consensus",Seal:"Seal",PreRuntime:"PreRuntime",ChangesTrieSignal:"ChangesTrieSignal",RuntimeEnvironmentUpdated:"Null"}},ExtrinsicsWeight:{normal:"Weight",operational:"Weight"},H32:"[u8; 4; H32]",H64:"[u8; 8; H64]",H128:"[u8; 16; H128]",H160:"[u8; 20; H160]",H256:"[u8; 32; H256]",H512:"[u8; 64; H512]",H1024:"[u8; 128; H1024]",H2048:"[u8; 256; H2048]",Hash:"H256",Header:{parentHash:"Hash",number:"Compact<BlockNumber>",stateRoot:"Hash",extrinsicsRoot:"Hash",digest:"Digest"},HeaderPartial:{parentHash:"Hash",number:"BlockNumber"},IndicesLookupSource:"GenericLookupSource",Index:"u32",Justification:"(ConsensusEngineId, EncodedJustification)",EncodedJustification:"Bytes",Justifications:"Vec<Justification>",KeyValue:"(StorageKey, StorageData)",KeyTypeId:"u32",LockIdentifier:"[u8; 8]",LookupSource:"MultiAddress",LookupTarget:"AccountId",ModuleId:"LockIdentifier",MultiAddress:"GenericMultiAddress",MultiSigner:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Ecdsa:"[u8; 33]"}},Moment:"UInt<64, Moment>",OpaqueCall:"Bytes",Origin:"DoNotConstruct<Origin>",OriginCaller:{_enum:{System:"SystemOrigin"}},PalletId:"LockIdentifier",PalletsOrigin:"OriginCaller",PalletVersion:{major:"u16",minor:"u8",patch:"u8"},Pays:{_enum:["Yes","No"]},Phantom:"Null",PhantomData:"Null",Releases:{_enum:["V1","V2","V3","V4","V5","V6","V7","V8","V9","V10"]},RuntimeCall:"Call",RuntimeEvent:"Event",RuntimeDbWeight:{read:"Weight",write:"Weight"},SignedBlock:"SignedBlockWithJustifications",SignedBlockWithJustification:{block:"Block",justification:"Option<EncodedJustification>"},SignedBlockWithJustifications:{block:"Block",justifications:"Option<Justifications>"},Slot:"u64",SlotDuration:"u64",StorageData:"Bytes",StorageInfo:{palletName:"Bytes",storage_name:"Bytes",prefix:"Bytes",maxValues:"Option<u32>",maxSize:"Option<u32>"},StorageProof:{trieNodes:"Vec<Bytes>"},TransactionPriority:"u64",TransactionLongevity:"u64",TransactionTag:"Bytes",TransactionInfo:{_alias:{dataSize:"size"},chunkRoot:"H256",contentHash:"H256",dataSize:"u32",blockChunks:"u32"},TransactionStorageProof:{chunk:"Vec<u8>",proof:"Vec<Vec<u8>>"},ValidatorId:"AccountId",ValidatorIdOf:"ValidatorId",WeightV0:"u32",WeightV1:"u64",WeightV2:{refTime:"Compact<u64>",proofSize:"Compact<u64>"},Weight:"WeightV2",WeightMultiplier:"Fixed64",PreRuntime:"(ConsensusEngineId, Bytes)",SealV0:"(u64, Signature)",Seal:"(ConsensusEngineId, Bytes)",Consensus:"(ConsensusEngineId, Bytes)",ExtrinsicInclusionMode:{_enum:["AllExtrinsics","OnlyInherents"]},BeefyKey:"[u8; 33]",Keys:"SessionKeys2",SessionKeys1:"(AccountId)",SessionKeys2:"(AccountId, AccountId)",SessionKeys3:"(AccountId, AccountId, AccountId)",SessionKeys4:"(AccountId, AccountId, AccountId, AccountId)",SessionKeys5:"(AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6B:"(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys7:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys7B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys8:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys8B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys9:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys9B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys10:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys10B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",FullIdentification:"Exposure",IdentificationTuple:"(ValidatorId, FullIdentification)",MembershipProof:{session:"SessionIndex",trieNodes:"Vec<Bytes>",validatorCount:"ValidatorCount"},SessionIndex:"u32",ValidatorCount:"u32"}}]},"logion-parachain":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",PeerId:"(Vec<u8>)",AccountInfo:"AccountInfoWithDualRefCount",TAssetBalance:"u128",AssetId:"u64",AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"Balance",deposit:"DepositBalance",max_zombies:"u32",min_balance:"Balance",zombies:"u32",accounts:"u32",is_frozen:"bool"},AssetMetadata:{deposit:"DepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},LocId:"u128",LegalOfficerCaseOf:{owner:"AccountId",requester:"Requester",metadata:"Vec<MetadataItem>",files:"Vec<File>",closed:"bool",loc_type:"LocType",links:"Vec<LocLink>",void_info:"Option<LocVoidInfo<LocId>>",replacer_of:"Option<LocId>",collection_last_block_submission:"Option<BlockNumber>",collection_max_size:"Option<CollectionSize>"},MetadataItem:{name:"Vec<u8>",value:"Vec<u8>",submitter:"AccountId"},LocType:{_enum:["Transaction","Identity","Collection"]},LocLink:{id:"LocId",nature:"Vec<u8>"},File:{hash:"Hash",nature:"Vec<u8>",submitter:"AccountId"},LocVoidInfo:{replacer:"Option<LocId>"},StorageVersion:{_enum:["V1","V2MakeLocVoid","V3RequesterEnum","V4ItemSubmitter","V5Collection"]},Requester:{_enum:{None:null,Account:"AccountId",Loc:"LocId"}},CollectionSize:"u32",CollectionItemId:"Hash",CollectionItem:{description:"Vec<u8>"}}}]},mangata:{types:[{minmax:[0,null],types:{ShufflingSeed:{seed:"H256",proof:"H512"},Header:{parentHash:"Hash",number:"Compact<BlockNumber>",stateRoot:"Hash",extrinsicsRoot:"Hash",digest:"Digest",seed:"ShufflingSeed",count:"BlockNumber"},RpcAssetMetadata:{tokenId:"TokenId",decimals:"u32",name:"Vec<u8>",symbol:"Vec<u8>"},TokenId:"u32"}}],rpc:{xyk:{calculate_buy_price:{description:"Calculates and returns sold_token_amount while providing bought_token_amount and respective reserves",params:[{name:"input_reserve",type:"Balance"},{name:"output_reserve",type:"Balance"},{name:"sell_amount",type:"Balance"}],type:"Balance"},calculate_sell_price:{description:"Calculates and returns bought_token_amount while providing sold_token_amount and respective reserves",params:[{name:"input_reserve",type:"Balance"},{name:"output_reserve",type:"Balance"},{name:"sell_amount",type:"Balance"}],type:"Balance"},get_burn_amount:{description:"Returns amounts of tokens received by burning provided liquidity_token_amount in pool of provided token ids",params:[{name:"first_asset_id",type:"TokenId"},{name:"second_asset_id",type:"TokenId"},{name:"liquidity_asset_amount",type:"Balance"}],type:"(Balance,Balance)"},calculate_sell_price_id:{description:"Same as calculate_sell_price, but providing token_id instead of reserves. Reserves are fetched by function.",params:[{name:"sold_token_id",type:"TokenId"},{name:"bought_token_id",type:"TokenId"},{name:"sell_amount",type:"Balance"}],type:"Balance"},calculate_buy_price_id:{description:"Same as calculate_buy_price, but providing token_id instead of reserves. Reserves are fetched by function.",params:[{name:"sold_token_id",type:"TokenId"},{name:"bought_token_id",type:"TokenId"},{name:"buy_amount",type:"Balance"}],type:"Balance"},calculate_rewards_amount:{description:"Calculate rewards amount of liquidity token id for the user",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},calculate_balanced_sell_amount:{description:"Calculates how much amount x we need to swap from total_amount, so that after y = swap(x), the resulting balance equals (total_amount - x) / y = pool_x / pool_y - the resulting amounts can then be used to `mint_liquidity` with minimal leftover after operation",params:[{name:"total_amount",type:"Balance"},{name:"reserve_amount",type:"Balance"}],type:"Balance"},get_max_instant_unreserve_amount:{description:"Instant unreserve amount",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},get_max_instant_burn_amount:{description:"",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},is_sell_asset_lock_free:{description:"",params:[{name:"path",type:"Vec<TokenId>"},{name:"input_amount",type:"Balance"}],type:"Option<bool>"},is_buy_asset_lock_free:{description:"",params:[{name:"path",type:"Vec<TokenId>"},{name:"input_amount",type:"Balance"}],type:"Option<bool>"},get_tradeable_tokens:{description:"",params:[],type:"Vec<RpcAssetMetadata<TokenId>>"},get_liq_tokens_for_trading:{description:"",params:[],type:"Vec<TokenId>"}},pos:{calculate_native_rewards_amount:{description:"Calculates amount of available native rewards",params:[{name:"account",type:"AccountId"},{name:"liquidity_token",type:"TokenId"}],type:"Balance"},calculate_3rdparty_rewards_amount:{description:"Calculates amount of available 3rdparty rewards",params:[{name:"account",type:"AccountId"},{name:"liquidity_token",type:"TokenId"},{name:"rewards_token",type:"TokenId"}],type:"Balance"},calculate_3rdparty_rewards_all:{description:"Calculates all amount of available 3rdparty rewards",params:[{name:"account",type:"AccountId"}],type:"Vec<(TokenId, TokenId, Balance)>"}}}},"mangata-parachain":{types:[{minmax:[0,null],types:{ShufflingSeed:{seed:"H256",proof:"H512"},Header:{parentHash:"Hash",number:"Compact<BlockNumber>",stateRoot:"Hash",extrinsicsRoot:"Hash",digest:"Digest",seed:"ShufflingSeed",count:"BlockNumber"},RpcAssetMetadata:{tokenId:"TokenId",decimals:"u32",name:"Vec<u8>",symbol:"Vec<u8>"},TokenId:"u32"}}],rpc:{xyk:{calculate_buy_price:{description:"Calculates and returns sold_token_amount while providing bought_token_amount and respective reserves",params:[{name:"input_reserve",type:"Balance"},{name:"output_reserve",type:"Balance"},{name:"sell_amount",type:"Balance"}],type:"Balance"},calculate_sell_price:{description:"Calculates and returns bought_token_amount while providing sold_token_amount and respective reserves",params:[{name:"input_reserve",type:"Balance"},{name:"output_reserve",type:"Balance"},{name:"sell_amount",type:"Balance"}],type:"Balance"},get_burn_amount:{description:"Returns amounts of tokens received by burning provided liquidity_token_amount in pool of provided token ids",params:[{name:"first_asset_id",type:"TokenId"},{name:"second_asset_id",type:"TokenId"},{name:"liquidity_asset_amount",type:"Balance"}],type:"(Balance,Balance)"},calculate_sell_price_id:{description:"Same as calculate_sell_price, but providing token_id instead of reserves. Reserves are fetched by function.",params:[{name:"sold_token_id",type:"TokenId"},{name:"bought_token_id",type:"TokenId"},{name:"sell_amount",type:"Balance"}],type:"Balance"},calculate_buy_price_id:{description:"Same as calculate_buy_price, but providing token_id instead of reserves. Reserves are fetched by function.",params:[{name:"sold_token_id",type:"TokenId"},{name:"bought_token_id",type:"TokenId"},{name:"buy_amount",type:"Balance"}],type:"Balance"},calculate_rewards_amount:{description:"Calculate rewards amount of liquidity token id for the user",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},calculate_balanced_sell_amount:{description:"Calculates how much amount x we need to swap from total_amount, so that after y = swap(x), the resulting balance equals (total_amount - x) / y = pool_x / pool_y - the resulting amounts can then be used to `mint_liquidity` with minimal leftover after operation",params:[{name:"total_amount",type:"Balance"},{name:"reserve_amount",type:"Balance"}],type:"Balance"},get_max_instant_unreserve_amount:{description:"Instant unreserve amount",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},get_max_instant_burn_amount:{description:"",params:[{name:"user",type:"AccountId"},{name:"liquidity_asset_id",type:"TokenId"}],type:"Balance"},is_sell_asset_lock_free:{description:"",params:[{name:"path",type:"Vec<TokenId>"},{name:"input_amount",type:"Balance"}],type:"Option<bool>"},is_buy_asset_lock_free:{description:"",params:[{name:"path",type:"Vec<TokenId>"},{name:"input_amount",type:"Balance"}],type:"Option<bool>"},get_tradeable_tokens:{description:"",params:[],type:"Vec<RpcAssetMetadata<TokenId>>"},get_liq_tokens_for_trading:{description:"",params:[],type:"Vec<TokenId>"}},pos:{calculate_native_rewards_amount:{description:"Calculates amount of available native rewards",params:[{name:"account",type:"AccountId"},{name:"liquidity_token",type:"TokenId"}],type:"Balance"},calculate_3rdparty_rewards_amount:{description:"Calculates amount of available 3rdparty rewards",params:[{name:"account",type:"AccountId"},{name:"liquidity_token",type:"TokenId"},{name:"rewards_token",type:"TokenId"}],type:"Balance"},calculate_3rdparty_rewards_all:{description:"Calculates all amount of available 3rdparty rewards",params:[{name:"account",type:"AccountId"}],type:"Vec<(TokenId, TokenId, Balance)>"}}}},"manta-node":{types:[{minmax:[0,null],types:{CurrencyId:{_enum:["MA"]},CurrencyIdOf:"CurrencyId",Amount:"i128",AmountOf:"Amount",AccountInfo:"AccountInfoWithDualRefCount"}}]},mathchain:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",Balance:"u128",RefCount:"u32",Account:{nonce:"U256",balance:"U256"},AccountServiceEnum:{_enum:{Nickname:"String",Ethereum:"H160"}},MultiAddressDetails:{nickname:"AccountServiceEnum",ethereum:"AccountServiceEnum"},Nickname:"String",Ethereum:"H160",TransferAmountInfo:{date:"u64",daily_info:"Balance",monthly_info:"Balance",yearly_info:"Balance"},AccountLimit:{daily_limit:"Balance",monthly_limit:"Balance",yearly_limit:"Balance"},Keys:"SessionKeys2"}}]},"mathchain-galois":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",Balance:"u128",RefCount:"u32",Account:{nonce:"U256",balance:"U256"},AccountServiceEnum:{_enum:{Nickname:"String",Ethereum:"H160"}},MultiAddressDetails:{nickname:"AccountServiceEnum",ethereum:"AccountServiceEnum"},Nickname:"String",Ethereum:"H160",TransferAmountInfo:{date:"u64",daily_info:"Balance",monthly_info:"Balance",yearly_info:"Balance"},AccountLimit:{daily_limit:"Balance",monthly_limit:"Balance",yearly_limit:"Balance"},Keys:"SessionKeys2"}}]},messier:{},moonbase:{alias:{assetManager:{Balance:"TAssetBalance"},xTokens:{Balance:"TAssetBalance"}},rpc:{txpool:{content:{aliasSection:"txpool",description:"The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultContent"},inspect:{aliasSection:"txpool",description:"Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultInspect"},status:{aliasSection:"txpool",description:"The number of Ethereum transaction that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultStatus"}},trace:{filter:{aliasSection:"trace",description:"Trace Filter",params:[{name:"filter",type:"FilterRequest"}],type:"Result<Vec<TransactionTrace>>"}},debug:{traceTransaction:{aliasSection:"debug",description:"Debug trace tx",params:[{name:"transaction_hash",type:"H256"}],type:"Result<Vec<TransactionTrace>>"}},xcm:{injectDownwardMessage:{description:"Inject a downward message from the relay chain.",params:[{name:"message",type:"Vec<u8>"}],type:"Result<()>"},injectHrmpMessage:{description:"Inject an HRMP message from a dedicated channel from a sibling parachain",params:[{name:"sender",type:"ParaId"},{name:"message",type:"Vec<u8>"}],type:"Result<()>"}},moon:{isBlockFinalized:{description:"Returns whether an Ethereum block is finalized",params:[{name:"blockHash",type:"Hash"}],type:"bool"},isTxFinalized:{description:"Returns whether an Ethereum transaction is finalized",params:[{name:"txHash",type:"Hash"}],type:"bool"}}},instances:{council:["councilCollective"],technicalCommittee:["techCommitteeCollective","openTechCommitteeCollective"]},types:[{minmax:[0,4],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",RefCount:"u8",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[5,5],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[6,19],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"ValidatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"}}},{minmax:[19,35],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"}}},{minmax:[36,36],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId"}},{minmax:[37,42],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"}}},{minmax:[43,154],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"}}},{minmax:[155,199],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"}}},{minmax:[200,399],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[400,599],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[600,799],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV0"}},{minmax:[800,899],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV1",JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}}}},{minmax:[900,null],types:{ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]}}}]},moonbeam:{alias:{assetManager:{Balance:"TAssetBalance"},xTokens:{Balance:"TAssetBalance"}},rpc:{txpool:{content:{aliasSection:"txpool",description:"The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultContent"},inspect:{aliasSection:"txpool",description:"Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultInspect"},status:{aliasSection:"txpool",description:"The number of Ethereum transaction that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultStatus"}},trace:{filter:{aliasSection:"trace",description:"Trace Filter",params:[{name:"filter",type:"FilterRequest"}],type:"Result<Vec<TransactionTrace>>"}},debug:{traceTransaction:{aliasSection:"debug",description:"Debug trace tx",params:[{name:"transaction_hash",type:"H256"}],type:"Result<Vec<TransactionTrace>>"}},xcm:{injectDownwardMessage:{description:"Inject a downward message from the relay chain.",params:[{name:"message",type:"Vec<u8>"}],type:"Result<()>"},injectHrmpMessage:{description:"Inject an HRMP message from a dedicated channel from a sibling parachain",params:[{name:"sender",type:"ParaId"},{name:"message",type:"Vec<u8>"}],type:"Result<()>"}},moon:{isBlockFinalized:{description:"Returns whether an Ethereum block is finalized",params:[{name:"blockHash",type:"Hash"}],type:"bool"},isTxFinalized:{description:"Returns whether an Ethereum transaction is finalized",params:[{name:"txHash",type:"Hash"}],type:"bool"}}},instances:{council:["councilCollective"],technicalCommittee:["techCommitteeCollective","openTechCommitteeCollective"]},types:[{minmax:[0,4],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",RefCount:"u8",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[5,5],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[6,19],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"ValidatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"}}},{minmax:[19,35],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"}}},{minmax:[36,36],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId"}},{minmax:[37,42],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"}}},{minmax:[43,154],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"}}},{minmax:[155,199],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"}}},{minmax:[200,399],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[400,599],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[600,799],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV0"}},{minmax:[800,899],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV1",JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}}}},{minmax:[900,null],types:{ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]}}}]},moonriver:{alias:{assetManager:{Balance:"TAssetBalance"},xTokens:{Balance:"TAssetBalance"}},rpc:{txpool:{content:{aliasSection:"txpool",description:"The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultContent"},inspect:{aliasSection:"txpool",description:"Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultInspect"},status:{aliasSection:"txpool",description:"The number of Ethereum transaction that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultStatus"}},trace:{filter:{aliasSection:"trace",description:"Trace Filter",params:[{name:"filter",type:"FilterRequest"}],type:"Result<Vec<TransactionTrace>>"}},debug:{traceTransaction:{aliasSection:"debug",description:"Debug trace tx",params:[{name:"transaction_hash",type:"H256"}],type:"Result<Vec<TransactionTrace>>"}},xcm:{injectDownwardMessage:{description:"Inject a downward message from the relay chain.",params:[{name:"message",type:"Vec<u8>"}],type:"Result<()>"},injectHrmpMessage:{description:"Inject an HRMP message from a dedicated channel from a sibling parachain",params:[{name:"sender",type:"ParaId"},{name:"message",type:"Vec<u8>"}],type:"Result<()>"}},moon:{isBlockFinalized:{description:"Returns whether an Ethereum block is finalized",params:[{name:"blockHash",type:"Hash"}],type:"bool"},isTxFinalized:{description:"Returns whether an Ethereum transaction is finalized",params:[{name:"txHash",type:"Hash"}],type:"bool"}}},instances:{council:["councilCollective"],technicalCommittee:["techCommitteeCollective","openTechCommitteeCollective"]},types:[{minmax:[0,4],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",RefCount:"u8",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[5,5],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[6,19],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"ValidatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"}}},{minmax:[19,35],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"}}},{minmax:[36,36],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId"}},{minmax:[37,42],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"}}},{minmax:[43,154],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"}}},{minmax:[155,199],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"}}},{minmax:[200,399],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[400,599],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[600,799],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV0"}},{minmax:[800,899],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV1",JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}}}},{minmax:[900,null],types:{ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]}}}]},moonshadow:{alias:{assetManager:{Balance:"TAssetBalance"},xTokens:{Balance:"TAssetBalance"}},rpc:{txpool:{content:{aliasSection:"txpool",description:"The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultContent"},inspect:{aliasSection:"txpool",description:"Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultInspect"},status:{aliasSection:"txpool",description:"The number of Ethereum transaction that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultStatus"}},trace:{filter:{aliasSection:"trace",description:"Trace Filter",params:[{name:"filter",type:"FilterRequest"}],type:"Result<Vec<TransactionTrace>>"}},debug:{traceTransaction:{aliasSection:"debug",description:"Debug trace tx",params:[{name:"transaction_hash",type:"H256"}],type:"Result<Vec<TransactionTrace>>"}},xcm:{injectDownwardMessage:{description:"Inject a downward message from the relay chain.",params:[{name:"message",type:"Vec<u8>"}],type:"Result<()>"},injectHrmpMessage:{description:"Inject an HRMP message from a dedicated channel from a sibling parachain",params:[{name:"sender",type:"ParaId"},{name:"message",type:"Vec<u8>"}],type:"Result<()>"}},moon:{isBlockFinalized:{description:"Returns whether an Ethereum block is finalized",params:[{name:"blockHash",type:"Hash"}],type:"bool"},isTxFinalized:{description:"Returns whether an Ethereum transaction is finalized",params:[{name:"txHash",type:"Hash"}],type:"bool"}}},instances:{council:["councilCollective"],technicalCommittee:["techCommitteeCollective","openTechCommitteeCollective"]},types:[{minmax:[0,4],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",RefCount:"u8",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[5,5],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[6,19],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"ValidatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"}}},{minmax:[19,35],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"}}},{minmax:[36,36],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId"}},{minmax:[37,42],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"}}},{minmax:[43,154],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"}}},{minmax:[155,199],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"}}},{minmax:[200,399],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[400,599],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[600,799],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV0"}},{minmax:[800,899],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV1",JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}}}},{minmax:[900,null],types:{ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]}}}]},muse:{types:[{minmax:[0,null],types:{AccountId:"EthereumAccountId",Address:"AccountId",LookupSource:"AccountId"}}]},"mybank.network Testnet":{types:[{minmax:[0,null],types:{Token:"u8",DEXShare:"(u8, u8)",CurrencyId:{_enum:{Token:"Token",DEXShare:"DEXShare"}},TradingPair:"(CurrencyId, CurrencyId)",CurrencyIds:{_:"Vec<CurrencyId>"},TradingPairProvisionParameters:{min_contribution:"(Balance, Balance)",target_provision:"(Balance, Balance)",accumulated_provision:"(Balance, Balance)",not_before:"BlockNumber"},TradingPairStatus:{_enum:{NotEnabled:null,Provisioning:"TradingPairProvisionParameters",Enabled:null}},PoolId:"CurrencyId",Price:"FixedU128",OracleKey:"u8",OracleValue:"FixedU128",Amount:"i128",Balance:"u128",Ratio:"FixedU128",InterestInfo:{critical_point:"Ratio",base:"Ratio",slope_1:"Ratio",slope_2:"Ratio"},AssetPoolInfo:{maximum_total_debit_ratio:"Ratio",minimum_deposit:"Balance",minimum_debit:"Balance",health_ratio:"Ratio",total_deposit:"Balance",total_debit:"Balance",deposit_rate:"Ratio",debit_rate:"Ratio",deposit_apy:"Ratio",debit_apy:"Ratio",reserve_factor:"Ratio",interest_info:"InterestInfo"},LoanInfo:{deposit:"Balance",debit:"Balance"},TimestampedValue:{value:"OracleValue",timestamp:"u64"},PoolInfo:{total_shares:"Compact<u128>",total_rewards:"Compact<u128>",total_withdrawn_rewards:"Compact<u128>"}}}]},mythos:{types:[{minmax:[0,null],types:{AccountId:"EthereumAccountId",Address:"AccountId",LookupSource:"AccountId"}}]},neatcoin:{types:[{minmax:[0,null],types:{Label:"Vec<u8>",Name:"Vec<Label>",NameHash:"H256",Value:{_enum:{U32:"U32",U64:"U64",U128:"U128",Bool:"Bool"}}}}]},neuroweb:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},nexus:{},nftmart:{types:[{minmax:[0,null],types:{Properties:"u8",NFTMetadata:"Vec<u8>",BlockNumber:"u32",BlockNumberOf:"BlockNumber",BlockNumberFor:"BlockNumber",GlobalId:"u64",CurrencyId:"u32",CurrencyIdOf:"CurrencyId",Amount:"i128",AmountOf:"Amount",CategoryId:"GlobalId",CategoryIdOf:"CategoryId",ClassId:"u32",ClassIdOf:"ClassId",TokenId:"u64",TokenIdOf:"TokenId",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},ClassInfoOf:{metadata:"NFTMetadata",totalIssuance:"Compact<TokenId>",owner:"AccountId",data:"ClassData"},ClassData:{deposit:"Compact<Balance>",properties:"Properties",name:"Vec<u8>",description:"Vec<u8>",createBlock:"Compact<BlockNumberOf>",royaltyRate:"Compact<PerU16>",categoryIds:"Vec<CategoryId>"},TokenInfoOf:{metadata:"NFTMetadata",data:"TokenData",quantity:"Compact<TokenId>"},TokenData:{deposit:"Compact<Balance>",createBlock:"Compact<BlockNumberOf>",royalty_rate:"Compact<PerU16>",creator:"AccountId",royaltyBeneficiary:"AccountId"},AccountToken:{quantity:"Compact<TokenId>",reserved:"Compact<TokenId>"},CategoryData:{metadata:"NFTMetadata",nftCount:"Compact<Balance>"},OrderItem:{classId:"Compact<ClassId>",tokenId:"Compact<TokenId>",quantity:"Compact<TokenId>"},OrderOf:{currencyId:"Compact<CurrencyId>",deposit:"Compact<Balance>",price:"Compact<Balance>",deadline:"Compact<BlockNumberOf>",items:"Vec<OrderItem>",commissionRate:"Compact<PerU16>"},OfferOf:{currencyId:"Compact<CurrencyId>",price:"Compact<Balance>",deadline:"Compact<BlockNumberOf>",items:"Vec<OrderItem>",commissionRate:"Compact<PerU16>"},BritishAuctionOf:{currencyId:"Compact<CurrencyId>",hammerPrice:"Compact<Balance>",minRaise:"Compact<PerU16>",deposit:"Compact<Balance>",initPrice:"Compact<Balance>",deadline:"Compact<BlockNumberOf>",allowDelay:"bool",items:"Vec<OrderItem>",commissionRate:"Compact<PerU16>"},BritishAuctionBidOf:{lastBidPrice:"Compact<Balance>",lastBidAccount:"Option<AccountId>",lastBidBlock:"Compact<BlockNumberOf>",commissionAgent:"Option<AccountId>",commissionData:"Option<Vec<u8>>"},DutchAuctionOf:{currencyId:"Compact<CurrencyId>",deposit:"Compact<Balance>",minPrice:"Compact<Balance>",maxPrice:"Compact<Balance>",deadline:"Compact<BlockNumberOf>",createdBlock:"Compact<BlockNumberOf>",items:"Vec<OrderItem>",allowBritishAuction:"bool",minRaise:"Compact<PerU16>",commissionRate:"Compact<PerU16>"},DutchAuctionBidOf:"BritishAuctionBidOf"}}]},"node-moonbeam":{alias:{assetManager:{Balance:"TAssetBalance"},xTokens:{Balance:"TAssetBalance"}},rpc:{txpool:{content:{aliasSection:"txpool",description:"The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultContent"},inspect:{aliasSection:"txpool",description:"Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultInspect"},status:{aliasSection:"txpool",description:"The number of Ethereum transaction that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultStatus"}},trace:{filter:{aliasSection:"trace",description:"Trace Filter",params:[{name:"filter",type:"FilterRequest"}],type:"Result<Vec<TransactionTrace>>"}},debug:{traceTransaction:{aliasSection:"debug",description:"Debug trace tx",params:[{name:"transaction_hash",type:"H256"}],type:"Result<Vec<TransactionTrace>>"}},xcm:{injectDownwardMessage:{description:"Inject a downward message from the relay chain.",params:[{name:"message",type:"Vec<u8>"}],type:"Result<()>"},injectHrmpMessage:{description:"Inject an HRMP message from a dedicated channel from a sibling parachain",params:[{name:"sender",type:"ParaId"},{name:"message",type:"Vec<u8>"}],type:"Result<()>"}},moon:{isBlockFinalized:{description:"Returns whether an Ethereum block is finalized",params:[{name:"blockHash",type:"Hash"}],type:"bool"},isTxFinalized:{description:"Returns whether an Ethereum transaction is finalized",params:[{name:"txHash",type:"Hash"}],type:"bool"}}},instances:{council:["councilCollective"],technicalCommittee:["techCommitteeCollective","openTechCommitteeCollective"]},types:[{minmax:[0,4],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",RefCount:"u8",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[5,5],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[6,19],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"ValidatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"}}},{minmax:[19,35],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"}}},{minmax:[36,36],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId"}},{minmax:[37,42],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"}}},{minmax:[43,154],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"}}},{minmax:[155,199],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"}}},{minmax:[200,399],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[400,599],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}},{minmax:[600,799],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV0"}},{minmax:[800,899],types:{AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"},EthTransaction:"LegacyTransaction",DispatchErrorModule:"DispatchErrorModuleU8",ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"},AccountInfo:"AccountInfoWithTripleRefCount",CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},AuthorId:"AccountId32",AccountId32:"H256",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV1",JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}}}},{minmax:[900,null],types:{ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]}}}]},"node-polkadex":{types:[{minmax:[0,null],types:{BurnTxDetails:{approvals:"u32",approvers:"Vec<AccountId>"},OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule"}}]},"nodle-chain":{types:[{minmax:[0,null],types:{Amendment:"Call",Application:{candidate:"AccountId",candidate_deposit:"Balance",challenged_block:"BlockNumber",challenger:"Option<AccountId>",challenger_deposit:"Option<Balance>",created_block:"BlockNumber",metadata:"Vec<u8>",voters_against:"Vec<(AccountId, Balance)>",voters_for:"Vec<(AccountId, Balance)>",votes_against:"Option<Balance>",votes_for:"Option<Balance>"},CertificateId:"AccountId",RootCertificate:{child_revocations:"Vec<CertificateId>",created:"BlockNumber",key:"CertificateId",owner:"AccountId",renewed:"BlockNumber",revoked:"bool",validity:"BlockNumber"},VestingSchedule:{start:"BlockNumber",period:"BlockNumber",period_count:"u32",per_period:"Balance"},VestingScheduleOf:"VestingSchedule"}}]},oak:{types:[{minmax:[0,null],types:{}}]},opal:{rpc:{appPromotion:{totalStaked:{description:"Returns the total amount of staked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},totalStakedPerBlock:{description:"Returns the total amount of staked tokens per block when staked",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"},pendingUnstake:{description:"Returns the total amount of unstaked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},pendingUnstakePerBlock:{description:"Returns the total amount of unstaked tokens per block",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"}},unique:{accountTokens:{description:"Get tokens owned by an account in a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},collectionTokens:{description:"Get tokens contained within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},tokenExists:{description:"Check if the token exists",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},tokenOwner:{description:"Get the token owner",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},topmostTokenOwner:{description:"Get the topmost token owner in the hierarchy of a possibly nested token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenOwners:{description:"Returns 10 tokens owners in no particular order",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenChildren:{description:"Get tokens nested directly into the token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsTokenChild>"},collectionProperties:{description:"Get collection properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},tokenProperties:{description:"Get token properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},propertyPermissions:{description:"Get property permissions, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsPropertyKeyPermission>"},constMetadata:{description:"Get token constant metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},variableMetadata:{description:"Get token variable metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},tokenData:{description:"Get token data, including properties, optionally limited to the provided keys, and total pieces for an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsTokenData"},totalSupply:{description:"Get the amount of distinctive tokens present in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},accountBalance:{description:"Get the amount of any user tokens owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},balance:{description:"Get the amount of a specific token owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},allowance:{description:"Get the amount of currently possible sponsored transactions on a token for the fee to be taken off a sponsor",params:[{name:"collection",type:"u32"},{name:"sender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"spender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},adminlist:{description:"Get the list of admin accounts of a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowlist:{description:"Get the list of accounts allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowed:{description:"Check if a user is allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},lastTokenId:{description:"Get the last token ID created in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},collectionById:{description:"Get a collection by the specified ID",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsRpcCollection>"},collectionStats:{description:"Get chain stats about collections",params:[{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsCollectionStats"},nextSponsored:{description:"Get the number of blocks until sponsoring a transaction is available",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u64>"},effectiveCollectionLimits:{description:"Get effective collection limits",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsCollectionLimits>"},totalPieces:{description:"Get the total amount of pieces of an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u128>"},allowanceForAll:{description:"Tells whether the given `owner` approves the `operator`.",params:[{name:"collection",type:"u32"},{name:"owner",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"operator",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<bool>"}}}},opportunity:{types:[{minmax:[0,null],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",LookupSource:"MultiAddress",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},XCurrencyId:{chain_id:"ChainId",currency_id:"Bytes"},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{Token:"TokenSymbol"}},TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC","SDN","PLM"]},AmountOf:"Amount",Amount:"i128",DataVersion:"u64",RequestIdentifier:"u64",SpecIndex:"Vec<u8>",CDP:{liquidation_fee:"Balance",max_collateraization_rate:"U256",stability_fee:"Balance"},SocketIndex:"i32",Currency:"Balances",BridgeChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"enum"},Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},TokenId:"U256"}}]},parallel:{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},tokens:{queryExistentialDeposit:{description:"Query Existential Deposit for a given currency.",params:[{name:"currencyId",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex",isSubscription:!1,jsonrpc:"tokens_queryExistentialDeposit",method:"queryExistentialDeposit",section:"tokens"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},router:{getBestRoute:{description:"Returns the route that results in the largest amount out for amount in",params:[{name:"amount",type:"Balance"},{name:"token_in",type:"CurrencyId"},{name:"token_out",type:"CurrencyId"},{name:"reversed",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Vec<CurrencyId>, FixedU128)",isSubscription:!1,jsonrpc:"router_getBestRoute",method:"getBestRoute",section:"router"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{isActive:"bool",totalDeposited:"Balance",unlockHeight:"BlockNumber",coolDownDuration:"BlockNumber",rewardDuration:"BlockNumber",periodFinish:"BlockNumber",lastUpdateBlock:"BlockNumber",rewardRate:"Balance",rewardPerShareStored:"Balance"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",Deposits:{voucherBalance:"Balance",isCollateral:"bool"},BorrowSnapshot:{principal:"Balance",borrowIndex:"u128"},EarnedSnapshot:{totalEarnedPrior:"Balance",exchangeRatePrior:"u128"},JumpModel:{baseRate:"Rate",jumpRate:"Rate",fullRate:"Rate",jumpUtilization:"Ratio"},CurveModel:{baseRate:"Rate"},InterestRateModel:{_enum:{JumpModel:"JumpModel",CurveModel:"CurveModel"}},Market:{collateralFactor:"Ratio",liquidationThreshold:"Ratio",reserveFactor:"Ratio",closeFactor:"Ratio",liquidateIncentive:"Rate",liquidateIncentiveReservedFactor:"Ratio",rateModel:"InterestRateModel",state:"MarketState",supplyCap:"Balance",borrowCap:"Balance",ptokenId:"CurrencyId"},MarketState:{_enum:["Active","Pending","Supervision"]},RewardMarketState:{index:"Balance",block:"BlockNumber"},Liquidity:"FixedU128",Shortfall:"FixedU128",ReservableAmount:{total:"Balance",reserved:"Balance"},MatchingLedger:{totalStakeAmount:"ReservableAmount",totalUnstakeAmount:"ReservableAmount"},UnlockChunk:{value:"Balance",era:"EraIndex"},StakingLedger:{stash:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>",claimedRewards:"Vec<EraIndex>"},DerivativeIndex:"u16",Pool:{baseAmount:"Balance",quoteAmount:"Balance",baseAmountLast:"Balance",quoteAmountLast:"Balance",lpTokenId:"AssetId",blockTimestampLast:"BlockNumber",price0CumulativeLast:"Balance",price1CumulativeLast:"Balance"},Amount:"i128",AmountOf:"Amount",Rate:"FixedU128",Ratio:"Permill",Timestamp:"u64",PriceDetail:"(Price, Timestamp)",CurrencyId:"AssetId",CurrencyIdOf:"CurrencyId",Currency:"CurrencyId",AssetIdOf:"AssetId",OracleKey:"AssetId",BoundedBalance:"BoundedVec<(Balance, BlockNumber), u32>",UserPosition:{depositBalance:"Balance",lockBalanceItems:"BoundedBalance",rewardAmount:"Balance",rewardPerSharePaid:"Balance"},Route:"Vec<(AssetId, AssetId)>",VaultPhase:{_enum:["Pending","Contributing","Closed","Failed","Succeeded","Expired"]},ContributionStrategy:{_enum:["XCM","XCMPROXY"]},ChildStorageKind:{_enum:["Pending","Flying","Contributed"]},TrieIndex:"u32",LeasePeriod:"BlockNumber",Vault:{ctoken:"AssetId",phase:"VaultPhase",contributed:"Balance",pending:"Balance",flying:"Balance",contributionStrategy:"ContributionStrategy",cap:"Balance",endBlock:"BlockNumber",trieIndex:"TrieIndex",leaseStart:"LeasePeriod",leaseEnd:"LeasePeriod"},XcmWeightFeeMisc:{weight:"Weight",fee:"Balance"},XcmCall:{_enum:["Bond","BondExtra","Unbond","Rebond","WithdrawUnbonded","Nominate","Contribute","Withdraw","AddMemo"]},BridgeToken:{id:"CurrencyId",external:"bool",fee:"Balance"},ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},Address:"MultiAddress",LookupSource:"MultiAddress",TAssetBalance:"u128"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},parami:{types:[{minmax:[0,null],types:{}}]},"peaq-node":{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},peaqdid:{readAttribute:{description:"Read attribute",params:[{name:"didAccount",type:"AccountId"},{name:"name",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<RPCAttribute>",isSubscription:!1,jsonrpc:"peaqdid_readAttribute",method:"readAttribute",section:"peaqdid"}},peaqstorage:{readAttribute:{description:"Read attribute",params:[{name:"didAccount",type:"AccountId"},{name:"itemType",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<StorageRpcResult>",isSubscription:!1,jsonrpc:"peaqstorage_readAttribute",method:"readAttribute",section:"peaqstorage"}}},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{totalShares:"Share",rewards:"BTreeMap<OrmlCurrencyId, (Balance, Balance)>"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"FixedU128",RPCAttribute:{name:"Bytes",value:"Bytes",validity:"Bytes",created:"Moment"},StorageRpcResult:{item:"Bytes"},Keys:"SessionKeys1"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},"peaq-node-dev":{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},peaqdid:{readAttribute:{description:"Read attribute",params:[{name:"didAccount",type:"AccountId"},{name:"name",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<RPCAttribute>",isSubscription:!1,jsonrpc:"peaqdid_readAttribute",method:"readAttribute",section:"peaqdid"}},peaqstorage:{readAttribute:{description:"Read attribute",params:[{name:"didAccount",type:"AccountId"},{name:"itemType",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<StorageRpcResult>",isSubscription:!1,jsonrpc:"peaqstorage_readAttribute",method:"readAttribute",section:"peaqstorage"}}},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{totalShares:"Share",rewards:"BTreeMap<OrmlCurrencyId, (Balance, Balance)>"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"FixedU128",RPCAttribute:{name:"Bytes",value:"Bytes",validity:"Bytes",created:"Moment"},StorageRpcResult:{item:"Bytes"},Keys:"SessionKeys1"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},"peaq-node-krest":{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},peaqdid:{readAttribute:{description:"Read attribute",params:[{name:"didAccount",type:"AccountId"},{name:"name",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<RPCAttribute>",isSubscription:!1,jsonrpc:"peaqdid_readAttribute",method:"readAttribute",section:"peaqdid"}},peaqstorage:{readAttribute:{description:"Read attribute",params:[{name:"didAccount",type:"AccountId"},{name:"itemType",type:"Bytes"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<StorageRpcResult>",isSubscription:!1,jsonrpc:"peaqstorage_readAttribute",method:"readAttribute",section:"peaqstorage"}}},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{totalShares:"Share",rewards:"BTreeMap<OrmlCurrencyId, (Balance, Balance)>"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"FixedU128",RPCAttribute:{name:"Bytes",value:"Bytes",validity:"Bytes",created:"Moment"},StorageRpcResult:{item:"Bytes"},Keys:"SessionKeys1"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},peerplays:{rpc:{validatormanager:{activeValidators:{description:"Get the list of active validators",params:[],type:"Vec<AccountId>"},currentMaintenanceIndex:{description:"Get current maintenance index",params:[],type:"MaintenanceIndex"},nextMaintenanceIndex:{description:"Get next maintenance index",params:[],type:"MaintenanceIndex"},offenceValidators:{description:"Get the list of active validators who made the offence",params:[],type:"Vec<(AccountId, AuthIndex)>"},offlineValidators:{description:"Get the list of active validators who went offline",params:[],type:"Vec<(AccountId, AuthIndex)>"},validatorsPool:{description:"Get the list of validator candidates",params:[],type:"Vec<AccountId>"},validators:{description:"Get the list of validator candidates",params:[],type:"Vec<AccountId>"},selectedValidators:{description:"Get the list of active validators",params:[],type:"Vec<AccountId>"},nextValidators:{description:"Get the list of next session active validators",params:[],type:"Vec<AccountId>"}}},types:[{minmax:[0,null],types:{AccountId:"EthereumAccountId",AccountId20:"EthereumAccountId",AccountId32:"EthereumAccountId",Address:"AccountId",AuthIndex:"u32",EthereumSignature:{r:"H256",s:"H256",v:"U8"},ExtrinsicSignature:"EthereumSignature",Lookup0:"AccountId",LookupSource:"AccountId",MaintenanceIndex:"u32"}}]},pendulum:{rpc:{issue:{getIssueRequests:{description:"Get all issue requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getIssueRequests",method:"getIssueRequests",section:"issue"},getVaultIssueRequests:{description:"Get all issue requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getVaultIssueRequests",method:"getVaultIssueRequests",section:"issue"}},redeem:{getRedeemRequests:{description:"Get all redeem requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getRedeemRequests",method:"getRedeemRequests",section:"redeem"},getVaultRedeemRequests:{description:"Get all redeem requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getVaultRedeemRequests",method:"getVaultRedeemRequests",section:"redeem"}},replace:{getOldVaultReplaceRequests:{description:"Get all replace requests from a particular vault",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getOldVaultReplaceRequests",method:"getOldVaultReplaceRequests",section:"replace"},getNewVaultReplaceRequests:{description:"Get all replace requests to a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getNewVaultReplaceRequests",method:"getNewVaultReplaceRequests",section:"replace"}},oracle:{currencyToUsd:{description:"Get the USD value of a currency",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_currencyToUsd",method:"currencyToUsd",section:"oracle"},usdToCurrency:{description:"Get the currency value of a USD amount",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_usdToCurrency",method:"usdToCurrency",section:"oracle"},getExchangeRate:{description:"Get the exchange rate of the given currencyId to USD",params:[{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"UnsignedFixedPoint",isSubscription:!1,jsonrpc:"oracle_getExchangeRate",method:"getExchangeRate",section:"oracle"}},vaultRegistry:{getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultCollateral",method:"getVaultCollateral",section:"vaultRegistry"},getVaultsByAccountId:{description:"Get all the vaultIds registered by a vault's accountId",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<SpacewalkPrimitivesVaultId>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsByAccountId",method:"getVaultsByAccountId",section:"vaultRegistry"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultTotalCollateral",method:"getVaultTotalCollateral",section:"vaultRegistry"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getPremiumRedeemVaults",method:"getPremiumRedeemVaults",section:"vaultRegistry"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithIssuableTokens",method:"getVaultsWithIssuableTokens",section:"vaultRegistry"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithRedeemableTokens",method:"getVaultsWithRedeemableTokens",section:"vaultRegistry"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getIssueableTokensFromVault",method:"getIssueableTokensFromVault",section:"vaultRegistry"},getCollateralizationFromVault:{description:"Get the collateralization rate of a vault",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVault",method:"getCollateralizationFromVault",section:"vaultRegistry"},getCollateralizationFromVaultAndCollateral:{description:"Get the collateralization rate of a vault and collateral",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVaultAndCollateral",method:"getCollateralizationFromVaultAndCollateral",section:"vaultRegistry"},getRequiredCollateralForWrapped:{description:"Get the minimum amount of collateral required for the given amount of token with the current threshold and exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForWrapped",method:"getRequiredCollateralForWrapped",section:"vaultRegistry"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForVault",method:"getRequiredCollateralForVault",section:"vaultRegistry"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{OracleKey:{},CurrencyId:{},NumberOrHex:"u128",BalanceWrapper:{amount:"String"},UnsignedFixedPoint:"u128",SpacewalkPrimitivesCurrencyId:{_enum:{Native:"Null",XCM:"u8",Stellar:"SpacewalkPrimitivesAsset",ZenlinkLPToken:"(u8,u8,u8,u8)"}},SpacewalkPrimitivesAsset:{_enum:{StellarNative:"Null",AlphaNum4:{code:"[u8;4]",issuer:"[u8;32]"},AlphaNum12:{code:"[u8;12]",issuer:"[u8;32]"}}},SpacewalkPrimitivesVaultId:{accountId:"AccountId32",currencies:"SpacewalkPrimitivesVaultCurrencyPair"},SpacewalkPrimitivesVaultCurrencyPair:{collateral:"SpacewalkPrimitivesCurrencyId",wrapped:"SpacewalkPrimitivesCurrencyId"},PoolId:"u32"}}],alias:{}},"phoenix-node":{types:[{minmax:[0,null],types:{Attestation:{attester:"AccountId",ctypeHash:"Hash",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{owner:"AccountId",parent:"Option<DelegationNodeId>",permissions:"Permissions",revoked:"bool",rootId:"DelegationNodeId"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{boxKey:"Hash",docRef:"Option<Vec<u8>>",signKey:"Hash"},Index:"u64",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature"}}]},"phoenix-parachain":{types:[{minmax:[0,null],types:{Attestation:{attester:"AccountId",ctypeHash:"Hash",delegationId:"Option<DelegationNodeId>",revoked:"bool"},Balance:"u128",DelegationNode:{owner:"AccountId",parent:"Option<DelegationNodeId>",permissions:"Permissions",revoked:"bool",rootId:"DelegationNodeId"},DelegationNodeId:"Hash",DelegationRoot:{ctypeHash:"Hash",owner:"AccountId",revoked:"bool"},DidRecord:{boxKey:"Hash",docRef:"Option<Vec<u8>>",signKey:"Hash"},Index:"u64",Permissions:"u32",PublicBoxKey:"Hash",PublicSigningKey:"Hash",Signature:"MultiSignature"}}]},pichiu:{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",DataRequest:{para_id:"Option<ParaId>",account_id:"Option<AccountId>",requested_block_number:"BlockNumber",processed_block_number:"Option<BlockNumber>",requested_timestamp:"u128",processed_timestamp:"Option<u128>",payload:"Text",feed_name:"Text",is_query:"bool",url:"Option<Text>"}}}]},"pioneer-runtime":{Amount:"i128",AmountOf:"Amount",AuctionId:"u64",AuctionIdOf:"AuctionId",BalanceIdOf:"Balance",MetaverseId:"u64",FungibleTokenId:{_enum:{NativeToken:"TokenId",FungibleToken:"TokenId",DEXShare:"(TokenId, TokenId)",MiningResource:"TokenId"}},CurrencyIdOf:"FungibleTokenId",TradingPairStatus:{_enum:["NotEnabled","Enabled"]},TradingPair:"(FungibleTokenId,FungibleTokenId)",TokenId:"u64",SpotId:"u32",ItemId:{_enum:{NFT:"AssetId",Spot:"(u64, MetaverseId)",Metaverse:"MetaverseId",Block:"u64"}},Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithTripleRefCount",AssetInfo:{owner:"AccountId",data:"AssetData"},AssetId:"u64",AssetData:{name:"Text",description:"Text",properties:"Text",supporters:"Vec<AccountId>"},AuctionItem:{itemId:"ItemId",recipient:"AccountId",initialAmount:"Balance",amount:"Balance",startTime:"u32",endTime:"u32",auctionType:"AuctionType",listingLevel:"ListingLevel",currencyId:"FungibleTokenId"},AuctionInfo:{bid:"Option<(AccountId,Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},AuctionType:{_enum:["Auction","BuyNow"]},RentId:"u64",RentalInfo:{owner:"AccountId",start:"BlockNumber",end:"Option<BlockNumber>",price_per_block:"Balance"},CountryId:"u64",CollectionId:"u64",ClassId:"u32",ClassInfoOf:{metadata:"Vec<u8>",totalIssuance:"TokenId",owner:"AccountId",data:"NftClassData"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",data:"NftAssetData"},NftCollectionData:{name:"Vec<u8>",owner:"AccountId",properties:"Vec<u8>"},NftGroupCollectionData:{name:"Vec<u8>",properties:"Vec<u8>"},NftAssetData:{deposit:"Balance",attributes:"Attributes"},NftClassData:{deposit:"Balance",attributes:"Attributes",tokenType:"TokenType",collectionType:"CollectionType",totalSupply:"u64",initialSupply:"u64"},NetworkId:{_enum:{Any:"Null",Named:"Vec<u8>",Polkadot:"Null",Kusama:"Null"}},CollectionType:{_enum:["Collectable","Wearable","Executable"]},CurrencyId:"SocialTokenCurrencyId",TokenSymbol:{_enum:["NUUM","AUSD","ACA","DOT"]},CountryCurrencyId:"u32",ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},XCurrencyId:{chain_id:"ChainId",currency_id:"CurrencyId"},GroupCollectionId:"u64",ClassIdOf:"ClassId",TokenIdOf:"TokenId",PoolId:"u32",SocialTokenCurrencyId:{_enum:{NativeToken:"TokenId",FungibleToken:"TokenId",DEXShare:"(TokenId, TokenId)",MiningResource:"TokenId"}},Country:{owner:"AccountId",metadata:"Text",currency_id:"SocialTokenCurrencyId"},Ticker:"Vec<u8>",Token:{ticker:"Ticker",total_supply:"Balance"},CountryFund:{vault:"AccountId",value:"u128",backing:"u128",currency_id:"SocialTokenCurrencyId"},LandId:"u64",BlindBoxId:"u64",BlindBoxType:{_enum:["KSM","NUUM","MainnetNFTHat","MainnetNFTJacket","MainnetNFTPants","MainnetNFTShoes","CollectableNFT"]},BlindBoxRewardItem:{recipient:"AccountId",amount:"u32",blindbox_type:"BlindBoxType"},TokenType:{_enum:["Transferable","BoundToAddress"]},ListingLevel:{_enum:{Global:"Null",Local:"MetaverseId"}},ResourceId:"[u8; 32]",VoteThreshold:{_enum:["SuperMajorityApprove","SuperMajorityAgainst","RelativeMajority"]},ProposalId:"u64",ReferendumId:"u64",CountryParameter:{_enum:{MaxProposals:"u8",SetReferendumJury:"AccountId"}},PreimageStatus:{_enum:{Missing:"BlockNumber",Available:{data:"Vec<u8>",provider:"AccountId",deposit:"Balance",since:"BlockNumber",expiry:"Option<BlockNumber>"}}},ReferendumParameters:{voting_threshold:"Option<VoteThreshold>",min_proposal_launch_period:"BlockNumber",voting_period:"BlockNumber",enactment_period:"BlockNumber",local_vote_locking_period:"BlockNumber",max_proposals_per_metaverse:"u8"},Vote:{aye:"bool"},Tally:{ayes:"Balance",nays:"Balance",turnout:"Balance"},VotingRecord:{votes:"Vec<(ReferendumId,Vote<Balance>)>",prior:"PriorLock<BlockNumber, Balance>"},ProposalInfo:{proposed_by:"AccountId",hash:"Hash",description:"Vec<u8>",referendum_launch_block:"BlockNumber"},ReferendumStatus:{end:"BlockNumber",metaverse:"MetaverseId",proposal:"ProposalId",tally:"Tally<Balance>",threshold:"Option<VoteThreshold>"},RoundIndex:"u32",MetaverseMetadata:"Vec<u8>",VestingScheduleOf:"VestingSchedule",VestingSchedule:{token:"FungibleTokenId",start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},NFTClassId:"u32",Attributes:"BTreeMap<Vec<u8>,Vec<u8>>",EstateId:"u64",Coordinates:"Vec<(i32,i32)>",Coordinate:"(i32,i32)",NewBound:"(i32,i32)",UndeployedLandBlockId:"u128",LandUnits:"Vec<(i32, i32)>",UndeployedLandBlockType:{_enum:["Transferable","BoundToAddress"]},MetaverseInfo:{owner:"AccountId",metadata:"MetaverseMetadata",currencyId:"FungibleTokenId"},OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},OrmlVestingSchedule:{token:"FungibleTokenId",start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Balance"},Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},MetaverseToken:{ticker:"Ticker",totalSupply:"Balance"},MetaverseParameter:{_enum:{MaxProposals:"u8",SetReferendumJury:"AccountId"}},Delegations:{votes:"Balance",capital:"Balance"},Conviction:{_enum:["None","Locked1x","Locked2x","Locked3x","Locked4x","Locked5x","Locked6x"]},PalletGovernanceVote:{aye:"bool",balance:"Balance",conviction:"Conviction"},PriorLock:"(BlockNumber, Balance)",ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus<BlockNumber,Balance>",Finished:{passed:"bool",end:"BlockNumber"}}},PowerAmount:"u64",ElementId:"u32",GeneratorNftId:"(ClassId, TokenId)",DistributorNftId:"(ClassId, TokenId)"},polymesh_mainnet:{rpc:{identity:{isIdentityHasValidCdd:{description:"use to tell whether the given did has valid cdd claim or not",params:[{name:"did",type:"IdentityId",isOptional:!1},{name:"buffer_time",type:"u64",isOptional:!0},{name:"blockHash",type:"Hash",isOptional:!0}],type:"CddStatus"},getAssetDid:{description:"function is used to query the given ticker DID",params:[{name:"ticker",type:"Ticker",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"AssetDidResult"},getDidRecords:{description:"Used to get the did record values for a given DID",params:[{name:"did",type:"IdentityId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"RpcDidRecords"},getDidStatus:{description:"Retrieve status of the DID",params:[{name:"did",type:"Vec<IdentityId>",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<DidStatus>"},getFilteredAuthorizations:{description:"Retrieve authorizations data for a given signatory and filtered using the given authorization type",params:[{name:"signatory",type:"Signatory",isOptional:!1},{name:"allow_expired",type:"bool",isOptional:!1},{name:"auth_type",type:"AuthorizationType",isOptional:!0},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<Authorization>"},getKeyIdentityData:{description:"Query relation between a signing key and a DID",params:[{name:"acc",type:"AccountId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Option<KeyIdentityData>"},validCDDClaims:{description:"Returns all valid IdentityClaim of type CustomerDueDiligence for the given target_identity",params:[{name:"target_identity",type:"IdentityId",isOptional:!1},{name:"cdd_checker_leeway",type:"u64",isOptional:!0},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<IdentityClaim>"}},pips:{getVotes:{description:"Summary of votes of a proposal given by index",params:[{name:"index",type:"PipId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"VoteCount"},proposedBy:{description:"Retrieves proposal indices started by address",params:[{name:"address",type:"AccountId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<PipId>"},votedOn:{description:"Retrieves proposal address indices voted on",params:[{name:"address",type:"AccountId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<PipId>"}},protocolFee:{computeFee:{description:"Gets the fee of a chargeable extrinsic operation",params:[{name:"op",type:"ProtocolOp",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"CappedFee"}},staking:{getCurve:{description:"Retrieves curves parameters",params:[{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<(Perbill, Perbill)>"}},asset:{canTransferGranular:{description:"Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.",params:[{name:"from_custodian",type:"Option<IdentityId>",isOptional:!1},{name:"from_portfolio",type:"PortfolioId",isOptional:!1},{name:"to_custodian",type:"Option<IdentityId>",isOptional:!1},{name:"to_portfolio",type:"PortfolioId",isOptional:!1},{name:"ticker",type:"Ticker",isOptional:!1},{name:"value",type:"Balance",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"CanTransferGranularReturn"}},group:{getCDDValidMembers:{description:"Get the CDD members",params:[{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<Member>"},getGCValidMembers:{description:"Get the GC members",params:[{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<Member>"}},nft:{validateNFTTransfer:{description:"Verifies if and the sender and receiver are not the same, if both have valid balances, if the sender owns the nft, and if all compliance rules are being respected.",params:[{name:"sender_portfolio",type:"PortfolioId",isOptional:!1},{name:"receiver_portfolio",type:"PortfolioId",isOptional:!1},{name:"nfts",type:"NFTs",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"DispatchResult"}},settlement:{getExecuteInstructionInfo:{description:"Returns an ExecuteInstructionInfo instance, containing the consumed weight and the number of tokens in the instruction.",params:[{name:"instruction_id",type:"InstructionId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"ExecuteInstructionInfo"},getAffirmationCount:{description:"Returns an instance of AffirmationCount, which holds the asset count for both the sender and receiver and the number of offchain assets in the instruction",params:[{name:"instruction_id",type:"InstructionId",isOptional:!1},{name:"portfolios",type:"Vec<PortfolioId>",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"AffirmationCount"}}},runtime:{AssetApi:[{methods:{can_transfer_granular:{description:"Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.",params:[{name:"from_custodian",type:"Option<IdentityId>"},{name:"from_portfolio",type:"PortfolioId"},{name:"to_custodian",type:"Option<IdentityId>"},{name:"to_portfolio",type:"PortfolioId"},{name:"ticker",type:"Ticker"},{name:"value",type:"Balance"}],type:"CanTransferGranularReturn"}},version:3}],GroupApi:[{methods:{get_cdd_valid_members:{description:"Get the CDD members",params:[],type:"Vec<Member>"},get_gc_valid_members:{description:"Get the GC members",params:[],type:"Vec<Member>"}},version:1}],IdentityApi:[{methods:{is_identity_has_valid_cdd:{description:"use to tell whether the given did has valid cdd claim or not",params:[{name:"did",type:"IdentityId"},{name:"buffer_time",type:"Option<u64>"}],type:"CddStatus"},get_asset_did:{description:"function is used to query the given ticker DID",params:[{name:"ticker",type:"Ticker"}],type:"AssetDidResult"},get_did_records:{description:"Used to get the did record values for a given DID",params:[{name:"did",type:"IdentityId"}],type:"RpcDidRecords"},get_did_status:{description:"Retrieve status of the DID",params:[{name:"did",type:"Vec<IdentityId>"}],type:"Vec<DidStatus>"},get_filtered_authorizations:{description:"Retrieve authorizations data for a given signatory and filtered using the given authorization type",params:[{name:"signatory",type:"Signatory"},{name:"allow_expired",type:"bool"},{name:"auth_type",type:"Option<AuthorizationType>"}],type:"Vec<Authorization>"},get_key_identity_data:{description:"Query relation between a signing key and a DID",params:[{name:"acc",type:"AccountId"}],type:"Option<KeyIdentityData>"},valid_cdd_claims:{description:"Returns all valid IdentityClaim of type CustomerDueDiligence for the given target_identity",params:[{name:"target_identity",type:"IdentityId"},{name:"cdd_checker_leeway",type:"Option<u64>"}],type:"Vec<IdentityClaim>"}},version:3}],NFTApi:[{methods:{validate_nft_transfer:{description:"Verifies if and the sender and receiver are not the same, if both have valid balances, if the sender owns the nft, and if all compliance rules are being respected.",params:[{name:"sender_portfolio",type:"PortfolioId"},{name:"receiver_portfolio",type:"PortfolioId"},{name:"nfts",type:"NFTs"}],type:"DispatchResult"}},version:1}],SettlementApi:[{methods:{get_execute_instruction_info:{description:"Returns an ExecuteInstructionInfo instance containing the consumed weight and the number of tokens in the instruction.",params:[{name:"instruction_id",type:"InstructionId"}],type:"ExecuteInstructionInfo"},get_affirmation_count:{description:"Returns an AffirmationCount instance containing the number of assets being sent/received from portfolios, and the number of off-chain assets in the instruction.",params:[{name:"instruction_id",type:"InstructionId"},{name:"portfolios",type:"Vec<PortfolioId>"}],type:"AffirmationCount"}},version:1}],PipsApi:[{methods:{get_votes:{description:"Summary of votes of a proposal given by index",params:[{name:"index",type:"PipId"}],type:"VoteCount"},proposed_by:{description:"Retrieves proposal indices started by address",params:[{name:"address",type:"AccountId"}],type:"Vec<PipId>"},voted_on:{description:"Retrieves proposal address indices voted on",params:[{name:"address",type:"AccountId"}],type:"Vec<PipId>"}},version:1}],ProtocolFeeApi:[{methods:{compute_fee:{description:"Gets the fee of a chargeable extrinsic operation",params:[{name:"op",type:"ProtocolOp"}],type:"CappedFee"}},version:1}],StakingApi:[{methods:{get_curve:{description:"Retrieves curves parameters",params:[],type:"Vec<(Perbill, Perbill)>"}},version:1}]},types:[{minmax:[6001e3,6001009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",Ticker:"[u8; 12]",CddId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute","NFTCreateCollection","NFTMint","IdentityCreateChildIdentity"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},CanTransferGranularReturn:{_enum:{Ok:"GranularCanTransferResult",Err:"DispatchError"}},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool",consumed_weight:"Option<Weight>"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},OffChainAsset:{ticker:"Ticker",amount:"Balance"},FungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",ticker:"Ticker",amount:"Balance"},NonFungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",nfts:"NFTs"},OffChainLeg:{sender_identity:"IdentityId",receiver_identity:"IdentityId",ticker:"Ticker",amount:"Balance"},Leg:{_enum:{Fungible:"FungibleLeg",NonFungible:"NonFungibleLeg",OffChain:"OffChainLeg"}},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}},ExecuteInstructionInfo:{fungible_tokens:"u32",non_fungible_tokens:"u32",off_chain_assets:"u32",consumed_weight:"Weight",error:"Option<String>"},AssetCount:{fungible_tokens:"u32",non_fungible_tokens:"u32",off_chain_assets:"u32"},AffirmationCount:{sender_asset_count:"AssetCount",receiver_asset_count:"AssetCount",offchain_count:"u32"}}},{minmax:[6e6,6000009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",Ticker:"[u8; 12]",CddId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute","NFTCreateCollection","NFTMint","IdentityCreateChildIdentity"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},CanTransferGranularReturn:{_enum:{Ok:"GranularCanTransferResult",Err:"DispatchError"}},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool",consumed_weight:"Option<Weight>"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},OffChainAsset:{ticker:"Ticker",amount:"Balance"},FungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",ticker:"Ticker",amount:"Balance"},NonFungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",nfts:"NFTs"},OffChainLeg:{sender_identity:"IdentityId",receiver_identity:"IdentityId",ticker:"Ticker",amount:"Balance"},Leg:{_enum:{Fungible:"FungibleLeg",NonFungible:"NonFungibleLeg",OffChain:"OffChainLeg"}},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}},ExecuteInstructionInfo:{fungible_tokens:"u32",non_fungible_tokens:"u32",off_chain_assets:"u32",consumed_weight:"Weight",error:"Option<String>"}}},{minmax:[5004e3,5004009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"CddId",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},LegAsset:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},LegV2:{from:"PortfolioId",to:"PortfolioId",asset:"LegAsset"},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}}}},{minmax:[5003e3,5003009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"CddId",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},LegAsset:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},LegV2:{from:"PortfolioId",to:"PortfolioId",asset:"LegAsset"},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}}}},{minmax:[5002e3,5002009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"CddId",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}}}},{minmax:[5001e3,5001009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}}}},{minmax:[5e6,5000009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:{r:"CompressedRistretto",s:"Scalar"},CompressedRistretto:"[u8; 32]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<PolymeshPrimitivesConditionTrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}}}},{minmax:[3010,3019],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[3002,3002],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[3003,3003],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<(IdentityId, Balance)>",nays:"Vec<(IdentityId, Balance)>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},Instruction:{instruction_id:"u64",venue_id:"u64",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"u64",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"u64",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[3e3,3001],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<(IdentityId, Balance)>",nays:"Vec<(IdentityId, Balance)>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},Instruction:{instruction_id:"u64",venue_id:"u64",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"u64",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"u64",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[2021,2023],types:{AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}}],signedExtensions:{StoreCallMetadata:{extrinsic:{},payload:{}}}},polymesh_testnet:{rpc:{identity:{isIdentityHasValidCdd:{description:"use to tell whether the given did has valid cdd claim or not",params:[{name:"did",type:"IdentityId",isOptional:!1},{name:"buffer_time",type:"u64",isOptional:!0},{name:"blockHash",type:"Hash",isOptional:!0}],type:"CddStatus"},getAssetDid:{description:"function is used to query the given ticker DID",params:[{name:"ticker",type:"Ticker",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"AssetDidResult"},getDidRecords:{description:"Used to get the did record values for a given DID",params:[{name:"did",type:"IdentityId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"RpcDidRecords"},getDidStatus:{description:"Retrieve status of the DID",params:[{name:"did",type:"Vec<IdentityId>",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<DidStatus>"},getFilteredAuthorizations:{description:"Retrieve authorizations data for a given signatory and filtered using the given authorization type",params:[{name:"signatory",type:"Signatory",isOptional:!1},{name:"allow_expired",type:"bool",isOptional:!1},{name:"auth_type",type:"AuthorizationType",isOptional:!0},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<Authorization>"},getKeyIdentityData:{description:"Query relation between a signing key and a DID",params:[{name:"acc",type:"AccountId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Option<KeyIdentityData>"},validCDDClaims:{description:"Returns all valid IdentityClaim of type CustomerDueDiligence for the given target_identity",params:[{name:"target_identity",type:"IdentityId",isOptional:!1},{name:"cdd_checker_leeway",type:"u64",isOptional:!0},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<IdentityClaim>"}},pips:{getVotes:{description:"Summary of votes of a proposal given by index",params:[{name:"index",type:"PipId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"VoteCount"},proposedBy:{description:"Retrieves proposal indices started by address",params:[{name:"address",type:"AccountId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<PipId>"},votedOn:{description:"Retrieves proposal address indices voted on",params:[{name:"address",type:"AccountId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<PipId>"}},protocolFee:{computeFee:{description:"Gets the fee of a chargeable extrinsic operation",params:[{name:"op",type:"ProtocolOp",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"CappedFee"}},staking:{getCurve:{description:"Retrieves curves parameters",params:[{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<(Perbill, Perbill)>"}},asset:{canTransferGranular:{description:"Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.",params:[{name:"from_custodian",type:"Option<IdentityId>",isOptional:!1},{name:"from_portfolio",type:"PortfolioId",isOptional:!1},{name:"to_custodian",type:"Option<IdentityId>",isOptional:!1},{name:"to_portfolio",type:"PortfolioId",isOptional:!1},{name:"ticker",type:"Ticker",isOptional:!1},{name:"value",type:"Balance",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"CanTransferGranularReturn"}},group:{getCDDValidMembers:{description:"Get the CDD members",params:[{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<Member>"},getGCValidMembers:{description:"Get the GC members",params:[{name:"blockHash",type:"Hash",isOptional:!0}],type:"Vec<Member>"}},nft:{validateNFTTransfer:{description:"Verifies if and the sender and receiver are not the same, if both have valid balances, if the sender owns the nft, and if all compliance rules are being respected.",params:[{name:"sender_portfolio",type:"PortfolioId",isOptional:!1},{name:"receiver_portfolio",type:"PortfolioId",isOptional:!1},{name:"nfts",type:"NFTs",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"DispatchResult"}},settlement:{getExecuteInstructionInfo:{description:"Returns an ExecuteInstructionInfo instance, containing the consumed weight and the number of tokens in the instruction.",params:[{name:"instruction_id",type:"InstructionId",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"ExecuteInstructionInfo"},getAffirmationCount:{description:"Returns an instance of AffirmationCount, which holds the asset count for both the sender and receiver and the number of offchain assets in the instruction",params:[{name:"instruction_id",type:"InstructionId",isOptional:!1},{name:"portfolios",type:"Vec<PortfolioId>",isOptional:!1},{name:"blockHash",type:"Hash",isOptional:!0}],type:"AffirmationCount"}}},runtime:{AssetApi:[{methods:{can_transfer_granular:{description:"Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.",params:[{name:"from_custodian",type:"Option<IdentityId>"},{name:"from_portfolio",type:"PortfolioId"},{name:"to_custodian",type:"Option<IdentityId>"},{name:"to_portfolio",type:"PortfolioId"},{name:"ticker",type:"Ticker"},{name:"value",type:"Balance"}],type:"CanTransferGranularReturn"}},version:3}],GroupApi:[{methods:{get_cdd_valid_members:{description:"Get the CDD members",params:[],type:"Vec<Member>"},get_gc_valid_members:{description:"Get the GC members",params:[],type:"Vec<Member>"}},version:1}],IdentityApi:[{methods:{is_identity_has_valid_cdd:{description:"use to tell whether the given did has valid cdd claim or not",params:[{name:"did",type:"IdentityId"},{name:"buffer_time",type:"Option<u64>"}],type:"CddStatus"},get_asset_did:{description:"function is used to query the given ticker DID",params:[{name:"ticker",type:"Ticker"}],type:"AssetDidResult"},get_did_records:{description:"Used to get the did record values for a given DID",params:[{name:"did",type:"IdentityId"}],type:"RpcDidRecords"},get_did_status:{description:"Retrieve status of the DID",params:[{name:"did",type:"Vec<IdentityId>"}],type:"Vec<DidStatus>"},get_filtered_authorizations:{description:"Retrieve authorizations data for a given signatory and filtered using the given authorization type",params:[{name:"signatory",type:"Signatory"},{name:"allow_expired",type:"bool"},{name:"auth_type",type:"Option<AuthorizationType>"}],type:"Vec<Authorization>"},get_key_identity_data:{description:"Query relation between a signing key and a DID",params:[{name:"acc",type:"AccountId"}],type:"Option<KeyIdentityData>"},valid_cdd_claims:{description:"Returns all valid IdentityClaim of type CustomerDueDiligence for the given target_identity",params:[{name:"target_identity",type:"IdentityId"},{name:"cdd_checker_leeway",type:"Option<u64>"}],type:"Vec<IdentityClaim>"}},version:3}],NFTApi:[{methods:{validate_nft_transfer:{description:"Verifies if and the sender and receiver are not the same, if both have valid balances, if the sender owns the nft, and if all compliance rules are being respected.",params:[{name:"sender_portfolio",type:"PortfolioId"},{name:"receiver_portfolio",type:"PortfolioId"},{name:"nfts",type:"NFTs"}],type:"DispatchResult"}},version:1}],SettlementApi:[{methods:{get_execute_instruction_info:{description:"Returns an ExecuteInstructionInfo instance containing the consumed weight and the number of tokens in the instruction.",params:[{name:"instruction_id",type:"InstructionId"}],type:"ExecuteInstructionInfo"},get_affirmation_count:{description:"Returns an AffirmationCount instance containing the number of assets being sent/received from portfolios, and the number of off-chain assets in the instruction.",params:[{name:"instruction_id",type:"InstructionId"},{name:"portfolios",type:"Vec<PortfolioId>"}],type:"AffirmationCount"}},version:1}],PipsApi:[{methods:{get_votes:{description:"Summary of votes of a proposal given by index",params:[{name:"index",type:"PipId"}],type:"VoteCount"},proposed_by:{description:"Retrieves proposal indices started by address",params:[{name:"address",type:"AccountId"}],type:"Vec<PipId>"},voted_on:{description:"Retrieves proposal address indices voted on",params:[{name:"address",type:"AccountId"}],type:"Vec<PipId>"}},version:1}],ProtocolFeeApi:[{methods:{compute_fee:{description:"Gets the fee of a chargeable extrinsic operation",params:[{name:"op",type:"ProtocolOp"}],type:"CappedFee"}},version:1}],StakingApi:[{methods:{get_curve:{description:"Retrieves curves parameters",params:[],type:"Vec<(Perbill, Perbill)>"}},version:1}]},types:[{minmax:[6001e3,6001009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",Ticker:"[u8; 12]",CddId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute","NFTCreateCollection","NFTMint","IdentityCreateChildIdentity"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},CanTransferGranularReturn:{_enum:{Ok:"GranularCanTransferResult",Err:"DispatchError"}},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool",consumed_weight:"Option<Weight>"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},OffChainAsset:{ticker:"Ticker",amount:"Balance"},FungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",ticker:"Ticker",amount:"Balance"},NonFungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",nfts:"NFTs"},OffChainLeg:{sender_identity:"IdentityId",receiver_identity:"IdentityId",ticker:"Ticker",amount:"Balance"},Leg:{_enum:{Fungible:"FungibleLeg",NonFungible:"NonFungibleLeg",OffChain:"OffChainLeg"}},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}},ExecuteInstructionInfo:{fungible_tokens:"u32",non_fungible_tokens:"u32",off_chain_assets:"u32",consumed_weight:"Weight",error:"Option<String>"},AssetCount:{fungible_tokens:"u32",non_fungible_tokens:"u32",off_chain_assets:"u32"},AffirmationCount:{sender_asset_count:"AssetCount",receiver_asset_count:"AssetCount",offchain_count:"u32"}}},{minmax:[6e6,6000009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",Ticker:"[u8; 12]",CddId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute","NFTCreateCollection","NFTMint","IdentityCreateChildIdentity"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},CanTransferGranularReturn:{_enum:{Ok:"GranularCanTransferResult",Err:"DispatchError"}},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool",consumed_weight:"Option<Weight>"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},OffChainAsset:{ticker:"Ticker",amount:"Balance"},FungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",ticker:"Ticker",amount:"Balance"},NonFungibleLeg:{sender:"PortfolioId",receiver:"PortfolioId",nfts:"NFTs"},OffChainLeg:{sender_identity:"IdentityId",receiver_identity:"IdentityId",ticker:"Ticker",amount:"Balance"},Leg:{_enum:{Fungible:"FungibleLeg",NonFungible:"NonFungibleLeg",OffChain:"OffChainLeg"}},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}},ExecuteInstructionInfo:{fungible_tokens:"u32",non_fungible_tokens:"u32",off_chain_assets:"u32",consumed_weight:"Weight",error:"Option<String>"}}},{minmax:[5004e3,5004009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"CddId",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},LegAsset:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},LegV2:{from:"PortfolioId",to:"PortfolioId",asset:"LegAsset"},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}}}},{minmax:[5003e3,5003009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:"",NonFungible:"NonFungibleType"}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"CddId",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},NFTId:"u64",NFTs:{ticker:"Ticker",ids:"Vec<NFTId>"},FungibleToken:{ticker:"Ticker",amount:"Balance"},LegAsset:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},LegV2:{from:"PortfolioId",to:"PortfolioId",asset:"LegAsset"},FundDescription:{_enum:{Fungible:"FungibleToken",NonFungible:"NFTs"}},Fund:{description:"FundDescription",memo:"Option<Memo>"},NonFungibleType:{_enum:{Derivative:"",FixedIncome:"",Invoice:"",Custom:"CustomAssetTypeId"}}}},{minmax:[5002e3,5002009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},CustomClaimTypeId:"u32",Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"CddId",Custom:"(CustomClaimTypeId, Option<Scope>)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:"",Custom:"CustomClaimTypeId"}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber",SettleManual:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},Member:{id:"IdentityId",expiry_at:"Option<Moment>",inactive_from:"Option<Moment>"},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}}}},{minmax:[5001e3,5001009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]",FIGI:"[u8; 12]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"[u8; 64]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},InitiateCorporateActionArgs:{ticker:"Ticker",kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDateSpec>",details:"CADetails",targets:"Option<TargetIdentities>",default_withholding_tax:"Option<Tax>",withholding_tax:"Option<Vec<(IdentityId, Tax)>>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}}}},{minmax:[5e6,5000009],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},AssetMetadataName:"Text",AssetMetadataValue:"Vec<u8>",AssetMetadataLocalKey:"u64",AssetMetadataGlobalKey:"u64",AssetMetadataKey:{_enum:{Global:"u64",Local:"u64"}},AssetMetadataLockStatus:{_enum:{Unlocked:"",Locked:"",LockedUntil:"Moment"}},AssetMetadataValueDetail:{expire:"Option<Moment>",lock_status:"AssetMetadataLockStatus"},AssetMetadataDescription:"Text",AssetMetadataSpec:{url:"Option<Url>",description:"Option<AssetMetadataDescription>",type_def:"Option<Vec<u8>>"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{key:"AccountId",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"H512"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"Option<AccountId>"},KeyRecord:{_enum:{PrimaryKey:"IdentityId",SecondaryKey:"(IdentityId, Permissions)",MultiSigSignerKey:"AccountId"}},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:{r:"CompressedRistretto",s:"Scalar"},CompressedRistretto:"[u8; 32]",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<PolymeshPrimitivesConditionTrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:"MultiSignature",Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Percentage:"Permill",RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8; 32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetScope:{_enum:{Ticker:"Ticker"}},StatOpType:{_enum:["Count","Balance"]},StatType:{op:"StatOpType",claim_issuer:"Option<(ClaimType, IdentityId)>"},StatClaim:{_enum:{Accredited:"bool",Affiliate:"bool",Jurisdiction:"Option<CountryCode>"}},Stat1stKey:{asset:"AssetScope",stat_type:"StatType"},Stat2ndKey:{_enum:{NoClaimStat:"",Claim:"StatClaim"}},StatUpdate:{key2:"Stat2ndKey",value:"Option<u128>"},TransferCondition:{_enum:{MaxInvestorCount:"u64",MaxInvestorOwnership:"Percentage",ClaimCount:"(StatClaim, IdentityId, u64, Option<u64>)",ClaimOwnership:"(StatClaim, IdentityId, Percentage, Percentage)"}},AssetTransferCompliance:{paused:"bool",requirements:"Vec<TransferCondition>"},TransferConditionExemptKey:{asset:"AssetScope",op:"StatOpType",claim_type:"Option<ClaimType>"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},RpcDidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},RpcDidRecords:{_enum:{Success:"RpcDidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",transfer_condition_result:"Vec<TransferConditionResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferConditionResult:{condition:"TransferCondition",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}}}},{minmax:[3010,3019],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[3002,3002],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<IdentityId>",nays:"Vec<IdentityId>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)",RotatePrimaryKeyToSecondary:"Permissions"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:"",RotatePrimaryKeyToSecondary:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},LegId:"u64",InstructionId:"u64",Instruction:{instruction_id:"InstructionId",venue_id:"VenueId",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"LegId",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserId:"u64",FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"VenueId",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueId:"u64",VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[3003,3003],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<(IdentityId, Balance)>",nays:"Vec<(IdentityId, Balance)>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},Instruction:{instruction_id:"u64",venue_id:"u64",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"u64",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"u64",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[3e3,3001],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",IdentityId:"[u8; 32]",EventDid:"IdentityId",EventCounts:"Vec<u32>",ErrorAt:"(u32, DispatchError)",InvestorUid:"[u8; 16]",Ticker:"[u8; 12]",CddId:"[u8; 32]",ScopeId:"[u8; 32]",PosRatio:"(u32, u32)",DocumentId:"u32",DocumentName:"Text",DocumentUri:"Text",DocumentHash:{_enum:{None:"",H512:"[u8; 64]",H384:"[u8; 48]",H320:"[u8; 40]",H256:"[u8; 32]",H224:"[u8; 28]",H192:"[u8; 24]",H160:"[u8; 20]",H128:"[u8; 16]"}},DocumentType:"Text",Document:{uri:"DocumentUri",content_hash:"DocumentHash",name:"DocumentName",doc_type:"Option<DocumentType>",filing_date:"Option<Moment>"},Version:"u8",CustomAssetTypeId:"u32",AssetType:{_enum:{EquityCommon:"",EquityPreferred:"",Commodity:"",FixedIncome:"",REIT:"",Fund:"",RevenueShareAgreement:"",StructuredProduct:"",Derivative:"",Custom:"CustomAssetTypeId",StableCoin:""}},AssetIdentifier:{_enum:{CUSIP:"[u8; 9]",CINS:"[u8; 9]",ISIN:"[u8; 12]",LEI:"[u8; 20]"}},AssetOwnershipRelation:{_enum:{NotOwned:"",TickerOwned:"",AssetOwned:""}},AssetName:"Text",FundingRoundName:"Text",VenueDetails:"Text",SecurityToken:{total_supply:"Balance",owner_did:"IdentityId",divisible:"bool",asset_type:"AssetType"},PalletName:"Text",DispatchableName:"Text",AssetPermissions:{_enum:{Whole:"",These:"Vec<Ticker>",Except:"Vec<Ticker>"}},PortfolioPermissions:{_enum:{Whole:"",These:"Vec<PortfolioId>",Except:"Vec<PortfolioId>"}},DispatchableNames:{_enum:{Whole:"",These:"Vec<DispatchableName>",Except:"Vec<DispatchableName>"}},PalletPermissions:{pallet_name:"PalletName",dispatchable_names:"DispatchableNames"},ExtrinsicPermissions:{_enum:{Whole:"",These:"Vec<PalletPermissions>",Except:"Vec<PalletPermissions>"}},Permissions:{asset:"AssetPermissions",extrinsic:"ExtrinsicPermissions",portfolio:"PortfolioPermissions"},LegacyPalletPermissions:{pallet_name:"PalletName",total:"bool",dispatchable_names:"Vec<DispatchableName>"},LegacyPermissions:{asset:"Option<Vec<Ticker>>",extrinsic:"Option<Vec<LegacyPalletPermissions>>",portfolio:"Option<Vec<PortfolioId>>"},Signatory:{_enum:{Identity:"IdentityId",Account:"AccountId"}},SecondaryKey:{signer:"Signatory",permissions:"Permissions"},SecondaryKeyWithAuth:{secondary_key:"SecondaryKey",auth_signature:"Signature"},Subsidy:{paying_key:"AccountId",remaining:"Balance"},IdentityRole:{_enum:["Issuer","SimpleTokenIssuer","Validator","ClaimIssuer","Investor","NodeRunner","PM","CDDAMLClaimIssuer","AccreditedInvestorClaimIssuer","VerifiedIdentityClaimIssuer"]},PreAuthorizedKeyInfo:{target_id:"IdentityId",secondary_key:"SecondaryKey"},DidRecord:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},KeyIdentityData:{identity:"IdentityId",permissions:"Option<Permissions>"},CountryCode:{_enum:["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","BQ","CW","SX"]},Scope:{_enum:{Identity:"IdentityId",Ticker:"Ticker",Custom:"Vec<u8>"}},InvestorZKProofData:"Signature",Scalar:"[u8; 32]",RistrettoPoint:"[u8; 32]",ZkProofData:{challenge_responses:"[Scalar; 2]",subtract_expressions_res:"RistrettoPoint",blinded_scope_did_hash:"RistrettoPoint"},ScopeClaimProof:{proof_scope_id_wellformed:"Signature",proof_scope_id_cdd_id_match:"ZkProofData",scope_id:"RistrettoPoint"},Claim:{_enum:{Accredited:"Scope",Affiliate:"Scope",BuyLockup:"Scope",SellLockup:"Scope",CustomerDueDiligence:"CddId",KnowYourCustomer:"Scope",Jurisdiction:"(CountryCode, Scope)",Exempted:"Scope",Blocked:"Scope",InvestorUniqueness:"(Scope, ScopeId, CddId)",NoData:"",InvestorUniquenessV2:"(CddId)"}},ClaimType:{_enum:{Accredited:"",Affiliate:"",BuyLockup:"",SellLockup:"",CustomerDueDiligence:"",KnowYourCustomer:"",Jurisdiction:"",Exempted:"",Blocked:"",InvestorUniqueness:"",NoData:"",InvestorUniquenessV2:""}},IdentityClaim:{claim_issuer:"IdentityId",issuance_date:"Moment",last_update_date:"Moment",expiry:"Option<Moment>",claim:"Claim"},ComplianceRequirement:{sender_conditions:"Vec<Condition>",receiver_conditions:"Vec<Condition>",id:"u32"},ComplianceRequirementResult:{sender_conditions:"Vec<ConditionResult>",receiver_conditions:"Vec<ConditionResult>",id:"u32",result:"bool"},ConditionType:{_enum:{IsPresent:"Claim",IsAbsent:"Claim",IsAnyOf:"Vec<Claim>",IsNoneOf:"Vec<Claim>",IsIdentity:"TargetIdentity"}},TrustedFor:{_enum:{Any:"",Specific:"Vec<ClaimType>"}},TrustedIssuer:{issuer:"IdentityId",trusted_for:"TrustedFor"},Condition:{condition_type:"ConditionType",issuers:"Vec<TrustedIssuer>"},ConditionResult:{condition:"Condition",result:"bool"},TargetIdAuthorization:{target_id:"IdentityId",nonce:"u64",expires_at:"Moment"},TickerRegistration:{owner:"IdentityId",expiry:"Option<Moment>"},TickerRegistrationConfig:{max_ticker_length:"u8",registration_length:"Option<Moment>"},ClassicTickerRegistration:{eth_owner:"EthereumAddress",is_created:"bool"},ClassicTickerImport:{eth_owner:"EthereumAddress",ticker:"Ticker",is_contract:"bool",is_created:"bool"},EthereumAddress:"[u8; 20]",EcdsaSignature:"[u8; 65]",MotionTitle:"Text",MotionInfoLink:"Text",ChoiceTitle:"Text",Motion:{title:"MotionTitle",info_link:"MotionInfoLink",choices:"Vec<ChoiceTitle>"},BallotTitle:"Text",BallotMeta:{title:"BallotTitle",motions:"Vec<Motion>"},BallotTimeRange:{start:"Moment",end:"Moment"},BallotVote:{power:"Balance",fallback:"Option<u16>"},MaybeBlock:{_enum:{Some:"BlockNumber",None:""}},Url:"Text",PipDescription:"Text",PipsMetadata:{id:"PipId",url:"Option<Url>",description:"Option<PipDescription>",created_at:"BlockNumber",transaction_version:"u32",expiry:"MaybeBlock"},Proposer:{_enum:{Community:"AccountId",Committee:"Committee"}},Committee:{_enum:{Technical:"",Upgrade:""}},SkippedCount:"u8",SnapshottedPip:{id:"PipId",weight:"(bool, Balance)"},SnapshotId:"u32",SnapshotMetadata:{created_at:"BlockNumber",made_by:"AccountId",id:"SnapshotId"},SnapshotResult:{_enum:{Approve:"",Reject:"",Skip:""}},Beneficiary:{id:"IdentityId",amount:"Balance"},DepositInfo:{owner:"AccountId",amount:"Balance"},PolymeshVotes:{index:"u32",ayes:"Vec<(IdentityId, Balance)>",nays:"Vec<(IdentityId, Balance)>",expiry:"MaybeBlock"},PipId:"u32",ProposalState:{_enum:["Pending","Rejected","Scheduled","Failed","Executed","Expired"]},Pip:{id:"PipId",proposal:"Call",state:"ProposalState",proposer:"Proposer"},ProposalData:{_enum:{Hash:"Hash",Proposal:"Vec<u8>"}},OffChainSignature:{_enum:{Ed25519:"H512",Sr25519:"H512",Ecdsa:"H512"}},Authorization:{authorization_data:"AuthorizationData",authorized_by:"IdentityId",expiry:"Option<Moment>",auth_id:"u64"},AuthorizationData:{_enum:{AttestPrimaryKeyRotation:"IdentityId",RotatePrimaryKey:"",TransferTicker:"Ticker",AddMultiSigSigner:"AccountId",TransferAssetOwnership:"Ticker",JoinIdentity:"Permissions",PortfolioCustody:"PortfolioId",BecomeAgent:"(Ticker, AgentGroup)",AddRelayerPayingKey:"(AccountId, AccountId, Balance)"}},SmartExtensionType:{_enum:{TransferManager:"",Offerings:"",SmartWallet:"",Custom:"Vec<u8>"}},SmartExtensionName:"Text",SmartExtension:{extension_type:"SmartExtensionType",extension_name:"SmartExtensionName",extension_id:"AccountId",is_archive:"bool"},MetaUrl:"Text",MetaDescription:"Text",MetaVersion:"u32",ExtVersion:"u32",TemplateMetadata:{url:"Option<MetaUrl>",se_type:"SmartExtensionType",usage_fee:"Balance",description:"MetaDescription",version:"MetaVersion"},TemplateDetails:{instantiation_fee:"Balance",owner:"IdentityId",frozen:"bool"},AuthorizationNonce:"u64",Counter:"u64",Percentage:"Permill",TransferManager:{_enum:{CountTransferManager:"Counter",PercentageTransferManager:"Percentage"}},RestrictionResult:{_enum:["Valid","Invalid","ForceValid"]},Memo:"[u8;32]",BridgeTx:{nonce:"u32",recipient:"AccountId",amount:"Balance",tx_hash:"H256"},AssetCompliance:{paused:"bool",requirements:"Vec<ComplianceRequirement>"},AssetComplianceResult:{paused:"bool",requirements:"Vec<ComplianceRequirementResult>",result:"bool"},Claim1stKey:{target:"IdentityId",claim_type:"ClaimType"},Claim2ndKey:{issuer:"IdentityId",scope:"Option<Scope>"},InactiveMember:{id:"IdentityId",deactivated_at:"Moment",expiry:"Option<Moment>"},VotingResult:{ayes_count:"u32",ayes_stake:"Balance",nays_count:"u32",nays_stake:"Balance"},ProtocolOp:{_enum:["AssetRegisterTicker","AssetIssue","AssetAddDocuments","AssetCreateAsset","CheckpointCreateSchedule","ComplianceManagerAddComplianceRequirement","IdentityCddRegisterDid","IdentityAddClaim","IdentityAddSecondaryKeysWithAuthorization","PipsPropose","ContractsPutCode","CorporateBallotAttachBallot","CapitalDistributionDistribute"]},CddStatus:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},AssetDidResult:{_enum:{Ok:"IdentityId",Err:"Vec<u8>"}},DidRecordsSuccess:{primary_key:"AccountId",secondary_keys:"Vec<SecondaryKey>"},DidRecords:{_enum:{Success:"DidRecordsSuccess",IdNotFound:"Vec<u8>"}},VoteCountProposalFound:{ayes:"u64",nays:"u64"},VoteCount:{_enum:{ProposalFound:"VoteCountProposalFound",ProposalNotFound:""}},Vote:"(bool, Balance)",VoteByPip:{pip:"PipId",vote:"Vote"},BridgeTxDetail:{amount:"Balance",status:"BridgeTxStatus",execution_block:"BlockNumber",tx_hash:"H256"},BridgeTxStatus:{_enum:{Absent:"",Pending:"u8",Frozen:"",Timelocked:"",Handled:""}},HandledTxStatus:{_enum:{Success:"",Error:"Text"}},CappedFee:"u64",CanTransferResult:{_enum:{Ok:"u8",Err:"Vec<u8>"}},AuthorizationType:{_enum:{AttestPrimaryKeyRotation:"",RotatePrimaryKey:"",TransferTicker:"",AddMultiSigSigner:"",TransferAssetOwnership:"",JoinIdentity:"",PortfolioCustody:"",BecomeAgent:"",AddRelayerPayingKey:""}},ProposalDetails:{approvals:"u64",rejections:"u64",status:"ProposalStatus",expiry:"Option<Moment>",auto_close:"bool"},ProposalStatus:{_enum:{Invalid:"",ActiveOrExpired:"",ExecutionSuccessful:"",ExecutionFailed:"",Rejected:""}},DidStatus:{_enum:{Unknown:"",Exists:"",CddVerified:""}},PortfolioName:"Text",PortfolioNumber:"u64",PortfolioKind:{_enum:{Default:"",User:"PortfolioNumber"}},PortfolioId:{did:"IdentityId",kind:"PortfolioKind"},Moment:"u64",CalendarUnit:{_enum:["Second","Minute","Hour","Day","Week","Month","Year"]},CalendarPeriod:{unit:"CalendarUnit",amount:"u64"},CheckpointSchedule:{start:"Moment",period:"CalendarPeriod"},CheckpointId:"u64",ScheduleId:"u64",StoredSchedule:{schedule:"CheckpointSchedule",id:"ScheduleId",at:"Moment",remaining:"u32"},ScheduleSpec:{start:"Option<Moment>",period:"CalendarPeriod",remaining:"u32"},InstructionStatus:{_enum:{Unknown:"",Pending:"",Failed:""}},LegStatus:{_enum:{PendingTokenLock:"",ExecutionPending:"",ExecutionToBeSkipped:"(AccountId, u64)"}},AffirmationStatus:{_enum:{Unknown:"",Pending:"",Affirmed:""}},SettlementType:{_enum:{SettleOnAffirmation:"",SettleOnBlock:"BlockNumber"}},Instruction:{instruction_id:"u64",venue_id:"u64",status:"InstructionStatus",settlement_type:"SettlementType",created_at:"Option<Moment>",trade_date:"Option<Moment>",value_date:"Option<Moment>"},Leg:{from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},Venue:{creator:"IdentityId",venue_type:"VenueType"},Receipt:{receipt_uid:"u64",from:"PortfolioId",to:"PortfolioId",asset:"Ticker",amount:"Balance"},ReceiptMetadata:"Text",ReceiptDetails:{receipt_uid:"u64",leg_id:"u64",signer:"AccountId",signature:"OffChainSignature",metadata:"ReceiptMetadata"},UniqueCall:{nonce:"u64",call:"Call"},MovePortfolioItem:{ticker:"Ticker",amount:"Balance",memo:"Option<Memo>"},WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"},TargetIdentity:{_enum:{ExternalAgent:"",Specific:"IdentityId"}},FundraiserName:"Text",FundraiserStatus:{_enum:["Live","Frozen","Closed","ClosedEarly"]},FundraiserTier:{total:"Balance",price:"Balance",remaining:"Balance"},Fundraiser:{creator:"IdentityId",offering_portfolio:"PortfolioId",offering_asset:"Ticker",raising_portfolio:"PortfolioId",raising_asset:"Ticker",tiers:"Vec<FundraiserTier>",venue_id:"u64",start:"Moment",end:"Option<Moment>",status:"FundraiserStatus",minimum_investment:"Balance"},VenueType:{_enum:["Other","Distribution","Sto","Exchange"]},ExtensionAttributes:{usage_fee:"Balance",version:"MetaVersion"},Tax:"Permill",TargetIdentities:{identities:"Vec<IdentityId>",treatment:"TargetTreatment"},TargetTreatment:{_enum:["Include","Exclude"]},CAKind:{_enum:["PredictableBenefit","UnpredictableBenefit","IssuerNotice","Reorganization","Other"]},CADetails:"Text",CACheckpoint:{_enum:{Scheduled:"(ScheduleId, u64)",Existing:"CheckpointId"}},RecordDate:{date:"Moment",checkpoint:"CACheckpoint"},RecordDateSpec:{_enum:{Scheduled:"Moment",ExistingSchedule:"ScheduleId",Existing:"CheckpointId"}},CorporateAction:{kind:"CAKind",decl_date:"Moment",record_date:"Option<RecordDate>",targets:"TargetIdentities",default_withholding_tax:"Tax",withholding_tax:"Vec<(IdentityId, Tax)>"},LocalCAId:"u32",CAId:{ticker:"Ticker",local_id:"LocalCAId"},Distribution:{from:"PortfolioId",currency:"Ticker",per_share:"Balance",amount:"Balance",remaining:"Balance",reclaimed:"bool",payment_at:"Moment",expires_at:"Option<Moment>"},SlashingSwitch:{_enum:["Validator","ValidatorAndNominator","None"]},PriceTier:{total:"Balance",price:"Balance"},PermissionedIdentityPrefs:{intended_count:"u32",running_count:"u32"},GranularCanTransferResult:{invalid_granularity:"bool",self_transfer:"bool",invalid_receiver_cdd:"bool",invalid_sender_cdd:"bool",missing_scope_claim:"bool",receiver_custodian_error:"bool",sender_custodian_error:"bool",sender_insufficient_balance:"bool",portfolio_validity_result:"PortfolioValidityResult",asset_frozen:"bool",statistics_result:"Vec<TransferManagerResult>",compliance_result:"AssetComplianceResult",result:"bool"},PortfolioValidityResult:{receiver_is_same_portfolio:"bool",sender_portfolio_does_not_exist:"bool",receiver_portfolio_does_not_exist:"bool",sender_insufficient_balance:"bool",result:"bool"},TransferManagerResult:{tm:"TransferManager",result:"bool"},AGId:"u32",AgentGroup:{_enum:{Full:"",Custom:"AGId",ExceptMeta:"",PolymeshV1CAA:"",PolymeshV1PIA:""}},ItnRewardStatus:{_enum:{Unclaimed:"Balance",Claimed:""}},DispatchErrorModule:"DispatchErrorModuleU8"}},{minmax:[2021,2023],types:{AccountInfo:"AccountInfoWithRefCount",Address:"IndicesLookupSource",LookupSource:"IndicesLookupSource"}}],signedExtensions:{StoreCallMetadata:{extrinsic:{},payload:{}}}},"pontem-node":{rpc:{mvm:{estimateGasExecute:{aliasSection:"mvm",description:"estimate gas for script execution",params:[{name:"account",type:"AccountId"},{name:"tx_bc",type:"Bytes"},{name:"gas_limit",type:"u64"}],type:"Estimation"},estimateGasPublish:{aliasSection:"mvm",description:"estimate gas for module publishing",params:[{name:"account",type:"AccountId"},{name:"module_bc",type:"Bytes"},{name:"gas_limit",type:"u64"}],type:"Estimation"},gasToWeight:{aliasSection:"mvm",description:"convert gas to weight",params:[{name:"gas",type:"u64"}],type:"Weight"},weightToGas:{aliasSection:"mvm",description:"convert gas to weight",params:[{name:"weight",type:"Weight"}],type:"u64"}}},types:[{minmax:[0,null],types:{AuthorId:"[u8;32]",Balance:"u64",Bond:{owner:"AccountId",amount:"Balance"},Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",top_nominators:"Vec<Bond>",bottom_nominators:"Vec<Bond>",total_counted:"Balance",total_backing:"Balance",state:"CollatorStatus"},Candidate:{bond:"Balance",fee:"Perbill",id:"AccountId",nominators:"Vec<Bond>",state:"ValidatorStatus",total:"Balance"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},Estimation:{gas_used:"u64",status_code:"u64"},ExitQ:{candidate_schedule:"Vec<(AccountId, RoundIndex)>",candidates:"Vec<AccountId>",nominator_schedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>",nominators_leaving:"Vec<AccountId>"},InflationInfo:{annual:"RangePerbill",expect:"RangeBalance",round:"RangePerbill"},MoveStructTag:{address:"AccountId",module:"Text",name:"Text"},MoveTypeTag:{Address:"",Bool:"",Signer:"",Struct:"MoveStructTag",U128:"",U64:"",U8:"",Vector:"MoveTypeTag",_enum:["Bool","U8","U64","U128","Address","Signer","Vector","Struct"]},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",scheduled_revocations_count:"u32",scheduled_revocations_total:"Balance",status:"NominatorStatus",total:"Balance"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},OrderedSet:"Vec<Bond>",ParachainBondConfig:{account:"AccountId",percent:"Percent"},Range:"RangeBalance",RangeBalance:{ideal:"Balance",max:"Balance",min:"Balance"},RangePerbill:{ideal:"Perbill",max:"Perbill",min:"Perbill"},RegistrationInfo:{account:"AccountId",deposit:"Balance"},RoundIndex:"u32",RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}}}}]},prism:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},"quantum-portal-network-parachain":{types:[{minmax:[0,null],types:{AccountId:"EthereumAccountId",AccountId20:"EthereumAccountId",Address:"AccountId",LookupSource:"AccountId",Lookup0:"AccountId",EthereumSignature:{r:"H256",s:"H256",v:"U8"},ExtrinsicSignature:"EthereumSignature"}}]},quartz:{rpc:{appPromotion:{totalStaked:{description:"Returns the total amount of staked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},totalStakedPerBlock:{description:"Returns the total amount of staked tokens per block when staked",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"},pendingUnstake:{description:"Returns the total amount of unstaked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},pendingUnstakePerBlock:{description:"Returns the total amount of unstaked tokens per block",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"}},unique:{accountTokens:{description:"Get tokens owned by an account in a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},collectionTokens:{description:"Get tokens contained within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},tokenExists:{description:"Check if the token exists",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},tokenOwner:{description:"Get the token owner",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},topmostTokenOwner:{description:"Get the topmost token owner in the hierarchy of a possibly nested token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenOwners:{description:"Returns 10 tokens owners in no particular order",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenChildren:{description:"Get tokens nested directly into the token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsTokenChild>"},collectionProperties:{description:"Get collection properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},tokenProperties:{description:"Get token properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},propertyPermissions:{description:"Get property permissions, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsPropertyKeyPermission>"},constMetadata:{description:"Get token constant metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},variableMetadata:{description:"Get token variable metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},tokenData:{description:"Get token data, including properties, optionally limited to the provided keys, and total pieces for an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsTokenData"},totalSupply:{description:"Get the amount of distinctive tokens present in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},accountBalance:{description:"Get the amount of any user tokens owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},balance:{description:"Get the amount of a specific token owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},allowance:{description:"Get the amount of currently possible sponsored transactions on a token for the fee to be taken off a sponsor",params:[{name:"collection",type:"u32"},{name:"sender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"spender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},adminlist:{description:"Get the list of admin accounts of a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowlist:{description:"Get the list of accounts allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowed:{description:"Check if a user is allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},lastTokenId:{description:"Get the last token ID created in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},collectionById:{description:"Get a collection by the specified ID",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsRpcCollection>"},collectionStats:{description:"Get chain stats about collections",params:[{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsCollectionStats"},nextSponsored:{description:"Get the number of blocks until sponsoring a transaction is available",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u64>"},effectiveCollectionLimits:{description:"Get effective collection limits",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsCollectionLimits>"},totalPieces:{description:"Get the total amount of pieces of an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u128>"},allowanceForAll:{description:"Tells whether the given `owner` approves the `operator`.",params:[{name:"collection",type:"u32"},{name:"owner",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"operator",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<bool>"}}}},realis:{types:[{minmax:[0,null],types:{Rarity:{_enum:["Common","Uncommon","Rare","Epic","Legendary","Relic"]},TokenId:"U256",Stackable:{_enum:["Silver","Gold","Diamond"]},String:"Vec<u8>",TokenType:{_enum:{Basic:"(Rarity, String, u32, String)"}},Status:{_enum:["OnSell","InDelegation","Free"]},Token:{token_id:"TokenId",token:"TokenType"}}}]},"riochain-runtime":{types:[{minmax:[0,null],types:{LookupSource:"IndicesLookupSource",Address:"LookupSource",Amount:"i128",AmountOf:"Amount",CurrencyId:"u32",CurrencyIdOf:"CurrencyId",Price:"FixedU128",OracleKey:"CurrencyId",Chain:{_enum:["Rio","Bitcoin","Litecoin","Ethereum","EOS","Polkadot","Kusama","ChainX"]},AssetInfo:{chain:"Chain",symbol:"Text",name:"Text",decimals:"u8",desc:"Text"},FeeExchangeV1:{max_payment:"Compact<Balance>"},FeeExchange:{_enum:{V1:"Compact<FeeExchangeV1>"}},Restriction:{_enum:["Transferable","Depositable","Withdrawable","Slashable","Reservable","Unreservable"]},TxHash:"H256",Deposit:{account_id:"AccountId",amount:"Balance"},Auths:{mask:"u8"},Auth:{_enum:["Register","Deposit","Withdraw","Sudo"]},WithdrawState:{_enum:{Pending:null,Cancelled:null,Rejected:null,Approved:null,Success:"TxHash",ReBroadcasted:"TxHash"}},ChainAddress:"Bytes",Memo:"Text",WithdrawInfo:{currency_id:"CurrencyId",who:"AccountId",value:"Balance",addr:"ChainAddress",memo:"Text"},WithdrawItem:{currency_id:"CurrencyId",applicant:"AccountId",value:"Balance",addr:"ChainAddress",memo:"Text",state:"WithdrawState"},DepositAddrInfo:{_enum:{Bip32:"Bip32",Create2:"Create2"}},Bip32:{x_pub:"Text",path:"Text"},Create2:{creator_address:"Vec<u8>",implementation_address:"Vec<u8>",vault_address:"Vec<u8>"}}}]},robonomics:{types:[{minmax:[0,null],types:{Record:"Vec<u8>",Technics:"Vec<u8>",Economics:"{}",Report:{index:"LiabilityIndex",sender:"AccountId",payload:"Vec<u8>",signature:"MultiSignature"},ReportFor:"Report",Agreement:{technics:"Technics",economics:"Economics",promisee:"AccountId",promisor:"AccountId",promisee_signature:"MultiSignature",promisor_signature:"MultiSignature"},LiabilityIndex:"u32"}}]},root:{types:[{minmax:[0,null],types:{AccountId:"EthereumAccountId",AccountId20:"EthereumAccountId",AccountId32:"EthereumAccountId",Address:"AccountId",LookupSource:"AccountId",Lookup0:"AccountId",EthereumSignature:{r:"H256",s:"H256",v:"U8"},ExtrinsicSignature:"EthereumSignature"}}]},sapphire:{rpc:{appPromotion:{totalStaked:{description:"Returns the total amount of staked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},totalStakedPerBlock:{description:"Returns the total amount of staked tokens per block when staked",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"},pendingUnstake:{description:"Returns the total amount of unstaked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},pendingUnstakePerBlock:{description:"Returns the total amount of unstaked tokens per block",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"}},unique:{accountTokens:{description:"Get tokens owned by an account in a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},collectionTokens:{description:"Get tokens contained within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},tokenExists:{description:"Check if the token exists",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},tokenOwner:{description:"Get the token owner",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},topmostTokenOwner:{description:"Get the topmost token owner in the hierarchy of a possibly nested token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenOwners:{description:"Returns 10 tokens owners in no particular order",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenChildren:{description:"Get tokens nested directly into the token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsTokenChild>"},collectionProperties:{description:"Get collection properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},tokenProperties:{description:"Get token properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},propertyPermissions:{description:"Get property permissions, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsPropertyKeyPermission>"},constMetadata:{description:"Get token constant metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},variableMetadata:{description:"Get token variable metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},tokenData:{description:"Get token data, including properties, optionally limited to the provided keys, and total pieces for an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsTokenData"},totalSupply:{description:"Get the amount of distinctive tokens present in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},accountBalance:{description:"Get the amount of any user tokens owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},balance:{description:"Get the amount of a specific token owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},allowance:{description:"Get the amount of currently possible sponsored transactions on a token for the fee to be taken off a sponsor",params:[{name:"collection",type:"u32"},{name:"sender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"spender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},adminlist:{description:"Get the list of admin accounts of a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowlist:{description:"Get the list of accounts allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowed:{description:"Check if a user is allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},lastTokenId:{description:"Get the last token ID created in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},collectionById:{description:"Get a collection by the specified ID",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsRpcCollection>"},collectionStats:{description:"Get chain stats about collections",params:[{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsCollectionStats"},nextSponsored:{description:"Get the number of blocks until sponsoring a transaction is available",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u64>"},effectiveCollectionLimits:{description:"Get effective collection limits",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsCollectionLimits>"},totalPieces:{description:"Get the total amount of pieces of an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u128>"},allowanceForAll:{description:"Tells whether the given `owner` approves the `operator`.",params:[{name:"collection",type:"u32"},{name:"owner",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"operator",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<bool>"}}}},shibuya:{types:[{minmax:[0,null],types:{Keys:"AccountId",Address:"MultiAddress",LookupSource:"MultiAddress",AmountOf:"Amount",Amount:"i128",SmartContract:{_enum:{Evm:"H160",Wasm:"AccountId"}},EraStakingPoints:{total:"Balance",stakers:"BTreeMap<AccountId, Balance>",formerStakedEra:"EraIndex",claimedRewards:"Balance"},PalletDappsStakingEraStakingPoints:{total:"Balance",stakers:"BTreeMap<AccountId, Balance>",formerStakedEra:"EraIndex",claimedRewards:"Balance"},EraRewardAndStake:{rewards:"Balance",staked:"Balance"},PalletDappsStakingEraRewardAndStake:{rewards:"Balance",staked:"Balance"},EraIndex:"u32"}}]},shiden:{types:[{minmax:[0,null],types:{Keys:"AccountId",Address:"MultiAddress",LookupSource:"MultiAddress",AmountOf:"Amount",Amount:"i128",SmartContract:{_enum:{Evm:"H160",Wasm:"AccountId"}},EthTransaction:"LegacyTransaction",EraStakingPoints:{total:"Balance",stakers:"BTreeMap<AccountId, Balance>",formerStakedEra:"EraIndex",claimedRewards:"Balance"},PalletDappsStakingEraStakingPoints:{total:"Balance",stakers:"BTreeMap<AccountId, Balance>",formerStakedEra:"EraIndex",claimedRewards:"Balance"},EraRewardAndStake:{rewards:"Balance",staked:"Balance"},PalletDappsStakingEraRewardAndStake:{rewards:"Balance",staked:"Balance"},EraIndex:"u32"}}]},snowbridge:{alias:{dispatch:{MessageId:"DispatchMessageId"}},types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",DispatchMessageId:{channelId:"ChannelId",nonce:"u64"},ChannelId:{_enum:["Basic","Incentivized"]},MessageNonce:"u64",Message:{data:"Vec<u8>",proof:"Proof"},Proof:{blockHash:"H256",txIndex:"u32",data:"(Vec<Vec<u8>>, Vec<Vec<u8>>)"},EthereumHeaderId:{number:"u64",hash:"H256"},EthereumHeader:{parentHash:"H256",timestamp:"u64",number:"u64",author:"H160",transactionsRoot:"H256",ommersHash:"H256",extraData:"Vec<u8>",stateRoot:"H256",receiptsRoot:"H256",logBloom:"Bloom",gasUsed:"U256",gasLimit:"U256",difficulty:"U256",seal:"Vec<Vec<u8>>",baseFee:"Option<U256>"},StoredHeader:{submitter:"Option<AccountId>",header:"EthereumHeader",totalDifficulty:"U256",finalized:"bool"},EthashProofData:{dagNodes:"[H512; 2]",proof:"Vec<H128>"},Bloom:"[u8; 256]",PruningRange:{oldestUnprunedBlock:"u64",oldestBlockToKeep:"u64"},EthereumDifficultyConfig:{byzantiumForkBlock:"u64",constantinopleForkBlock:"u64",muirGlacierForkBlock:"u64",londonForkBlock:"u64"},AssetId:{_enum:{ETH:null,Token:"H160"}},TokenId:"u128",TokenData:{tokenContract:"H160",tokenId:"U256"},TokenInfoOf:{owner:"AccountId",metadata:"Vec<u8>",data:"TokenData"}}}]},"sora-substrate":{alias:{bridgeProxy:{AssetKind:"SubAssetKind"},ethBridge:{StorageVersion:"EthBridgeStorageVersion"},tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},tokens:{queryExistentialDeposit:{description:"Query Existential Deposit for a given currency.",params:[{name:"currencyId",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex",isSubscription:!1,jsonrpc:"tokens_queryExistentialDeposit",method:"queryExistentialDeposit",section:"tokens"}},assets:{freeBalance:{description:"Get free balance of particular asset for account.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_freeBalance",method:"freeBalance",section:"assets"},usableBalance:{description:"Get usable (free and non-frozen, except for network fees) balance of particular asset for account.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_usableBalance",method:"usableBalance",section:"assets"},totalBalance:{description:"Get total balance (free + reserved) of particular asset for account.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_totalBalance",method:"totalBalance",section:"assets"},totalSupply:{description:"Get total supply of particular asset on chain.",params:[{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_totalSupply",method:"totalSupply",section:"assets"},listAssetIds:{description:"List Ids of all assets registered on chain.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<AssetId>",isSubscription:!1,jsonrpc:"assets_listAssetIds",method:"listAssetIds",section:"assets"},listAssetInfos:{description:"List Infos of all assets registered on chain.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<AssetInfo>",isSubscription:!1,jsonrpc:"assets_listAssetInfos",method:"listAssetInfos",section:"assets"},getAssetInfo:{description:"Get Info for particular asset on chain.",params:[{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<AssetInfo>",isSubscription:!1,jsonrpc:"assets_getAssetInfo",method:"getAssetInfo",section:"assets"}},dexApi:{canExchange:{description:"Query capability to exchange particular tokens on DEX.",params:[{name:"dexId",type:"DEXId"},{name:"liquiditySourceType",type:"LiquiditySourceType"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"dexApi_canExchange",method:"canExchange",section:"dexApi"},listSupportedSources:{description:"List liquidity source types enabled on chain.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<LiquiditySourceType>",isSubscription:!1,jsonrpc:"dexApi_listSupportedSources",method:"listSupportedSources",section:"dexApi"},quote:{description:"Get price for a given input or output token amount.",params:[{name:"dexId",type:"DEXId"},{name:"liquiditySourceType",type:"LiquiditySourceType"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"amount",type:"String"},{name:"swapVariant",type:"SwapVariant"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<SwapOutcomeInfo>",isSubscription:!1,jsonrpc:"dexApi_quote",method:"quote",section:"dexApi"}},dexManager:{listDEXIds:{description:"Enumerate available ids of DEXes",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<DEXId>",isSubscription:!1,jsonrpc:"dexManager_listDEXIds",method:"listDEXIds",section:"dexManager"},testBalance:{description:"Test type of Balance",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Fixed",isSubscription:!1,jsonrpc:"dexManager_testBalance",method:"testBalance",section:"dexManager"}},ethBridge:{getRequests:{description:"Get registered requests and their statuses.",params:[{name:"requestHashes",type:"Vec<H256>"},{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"redirectFinishedLoadRequests",type:"bool",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(OffchainRequest, RequestStatus)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getRequests",method:"getRequests",section:"ethBridge"},getApprovedRequests:{description:"Get approved encoded requests and their approvals.",params:[{name:"requestHashes",type:"Vec<H256>"},{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(OutgoingRequestEncoded, Vec<SignatureParams>)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getApprovedRequests",method:"getApprovedRequests",section:"ethBridge"},getApprovals:{description:"Get approvals of the given requests.",params:[{name:"requestHashes",type:"Vec<H256>"},{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<Vec<SignatureParams>>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getApprovals",method:"getApprovals",section:"ethBridge"},getAccountRequests:{description:"Get account requests hashes.",params:[{name:"accountId",type:"AccountId"},{name:"statusFilter",type:"RequestStatus",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(BridgeNetworkId, H256)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getAccountRequests",method:"getAccountRequests",section:"ethBridge"},getRegisteredAssets:{description:"Get registered assets and tokens.",params:[{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(AssetKind, (AssetId, BalancePrecision), Option<(H160, BalancePrecision)>)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getRegisteredAssets",method:"getRegisteredAssets",section:"ethBridge"}},bridgeProxy:{listApps:{description:"",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<BridgeAppInfo>",isSubscription:!1,jsonrpc:"bridgeProxy_listApps",method:"listApps",section:"bridgeProxy"},listAssets:{description:"",params:[{name:"networkId",type:"GenericNetworkId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<BridgeAssetInfo>",isSubscription:!1,jsonrpc:"bridgeProxy_listAssets",method:"listAssets",section:"bridgeProxy"}},farming:{rewardDoublingAssets:{description:"Get list of double rewarding assets",params:[],type:"Vec<AssetId>",isSubscription:!1,jsonrpc:"farming_rewardDoublingAssets",method:"rewardDoublingAssets",section:"farming"}},irohaMigration:{needsMigration:{description:"Check if the account needs migration",params:[{name:"irohaAddress",type:"String"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"irohaMigration_needsMigration",method:"needsMigration",section:"irohaMigration"}},liquidityProxy:{quote:{description:"Get price with indicated Asset amount and direction, filtered by selected_types",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"amount",type:"String"},{name:"swapVariant",type:"SwapVariant"},{name:"selectedSourceTypes",type:"Vec<LiquiditySourceType>"},{name:"filterMode",type:"FilterMode"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<LPSwapOutcomeInfo>",isSubscription:!1,jsonrpc:"liquidityProxy_quote",method:"quote",section:"liquidityProxy"},isPathAvailable:{description:"Check if given two arbitrary tokens can be exchanged via any liquidity sources",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"liquidityProxy_isPathAvailable",method:"isPathAvailable",section:"liquidityProxy"},listEnabledSourcesForPath:{description:"Given two arbitrary tokens, list liquidity sources that can be used along the path.",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<LiquiditySourceType>",isSubscription:!1,jsonrpc:"liquidityProxy_listEnabledSourcesForPath",method:"listEnabledSourcesForPath",section:"liquidityProxy"}},pswapDistribution:{claimableAmount:{description:"Get amount of PSWAP claimable by user (liquidity provision reward).",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"BalanceInfo",isSubscription:!1,jsonrpc:"pswapDistribution_claimableAmount",method:"claimableAmount",section:"pswapDistribution"}},rewards:{claimables:{description:"Get claimable rewards",params:[{name:"ethAddress",type:"EthAddress"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<BalanceInfo>",isSubscription:!1,jsonrpc:"rewards_claimables",method:"claimables",section:"rewards"}},template:{testMultiply2:{description:"Test type of Balance",params:[{name:"amount",type:"String"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<CustomInfo>",isSubscription:!1,jsonrpc:"template_testMultiply2",method:"testMultiply2",section:"template"}},tradingPair:{listEnabledPairs:{description:"List enabled trading pairs for DEX.",params:[{name:"dexId",type:"DEXId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<TradingPair>",isSubscription:!1,jsonrpc:"tradingPair_listEnabledPairs",method:"listEnabledPairs",section:"tradingPair"},isPairEnabled:{description:"Query if particular trading pair is enabled for DEX.",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"tradingPair_isPairEnabled",method:"isPairEnabled",section:"tradingPair"},listEnabledSourcesForPair:{description:"List enabled liquidity sources for trading pair.",params:[{name:"dexId",type:"DEXId"},{name:"baseAssetId",type:"AssetId"},{name:"targetAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<LiquiditySourceType>",isSubscription:!1,jsonrpc:"tradingPair_listEnabledSourcesForPair",method:"listEnabledSourcesForPair",section:"tradingPair"},isSourceEnabledForPair:{description:"Query if particular liquidity source is enabled for pair.",params:[{name:"dexId",type:"DEXId"},{name:"baseAssetId",type:"AssetId"},{name:"targetAssetId",type:"AssetId"},{name:"liquiditySourceType",type:"LiquiditySourceType"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"tradingPair_isSourceEnabledForPair",method:"isSourceEnabledForPair",section:"tradingPair"}},vestedRewards:{crowdloanClaimable:{description:"Get available crowdloan reward for a user.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"vestedRewards_crowdloanClaimable",method:"crowdloanClaimable",section:"vestedRewards"},crowdloanLease:{description:"Get crowdloan rewards lease period info.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"CrowdloanLease",isSubscription:!1,jsonrpc:"vestedRewards_crowdloanLease",method:"crowdloanLease",section:"vestedRewards"}},leafProvider:{latestDigest:{description:"Get leaf provider logs.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"AuxiliaryDigest",isSubscription:!1,jsonrpc:"leafProvider_latestDigest",method:"latestDigest",section:"leafProvider"}},basicChannel:{commitment:{description:"Get basic channel messages.",params:[{name:"commitmentHash",type:"H256"}],type:"Option<Vec<BasicChannelMessage>>",isSubscription:!1,jsonrpc:"basicChannel_commitment",method:"commitment",section:"basicChannel"}},intentivizedChannel:{commitment:{description:"Get intentivized channel messages.",params:[{name:"commitmentHash",type:"H256"}],type:"Option<Vec<IntentivizedChannelMessage>>",isSubscription:!1,jsonrpc:"intentivizedChannel_commitment",method:"commitment",section:"intentivizedChannel"}}},types:[{minmax:[2,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{totalShares:"Share",rewards:"BTreeMap<OrmlCurrencyId, (Balance, Balance)>"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"FixedU128",BalanceInfo:{balance:"Balance"},AssetInfo:{assetId:"AssetId",symbol:"AssetSymbolStr",name:"AssetNameStr",precision:"u8",isMintable:"bool"},AssetSymbolStr:"String",AssetNameStr:"String",AssetRecord:"Null",VotingInfo:{votingOption:"u32",numberOfVotes:"Balance",ceresWithdrawn:"bool"},PollInfo:{numberOfOptions:"u32",pollStartTimestamp:"Moment",pollEndTimestamp:"Moment"},LockInfo:{poolTokens:"Balance",unlockingTimestamp:"Moment",assetA:"AssetId",assetB:"AssetId"},StakingInfo:{deposited:"Balance",rewards:"Balance"},TokenLockInfo:{tokens:"Balance",unlockingTimestamp:"Moment",assetId:"AssetId"},ContributorsVesting:{firstReleasePercent:"Balance",vestingPeriod:"Moment",vestingPercent:"Balance"},TeamVesting:{teamVestingTotalTokens:"Balance",teamVestingFirstReleasePercent:"Balance",teamVestingPeriod:"Moment",teamVestingPercent:"Balance"},ContributionInfo:{fundsContributed:"Balance",tokensBought:"Balance",tokensClaimed:"Balance",claimingFinished:"bool",numberOfClaims:"u32"},ILOInfo:{iloOrganizer:"AccountId",tokensForIlo:"Balance",tokensForLiquidity:"Balance",iloPrice:"Balance",softCap:"Balance",hardCap:"Balance",minContribution:"Balance",maxContribution:"Balance",refundType:"bool",liquidityPercent:"Balance",listingPrice:"Balance",lockupDays:"u32",startTimestamp:"Moment",endTimestamp:"Moment",contributorsVesting:"ContributorsVesting",teamVesting:"TeamVesting",soldTokens:"Balance",fundsRaised:"Balance",succeeded:"bool",failed:"bool",lpTokens:"Balance",claimedLpTokens:"bool",finishTimestamp:"Moment",baseAsset:"AssetId"},PoolData:{multiplier:"u32",depositFee:"Balance",isCore:"bool",isFarm:"bool",totalTokensInPool:"Balance",rewards:"Balance",rewardsToBeDistributed:"Balance",isRemoved:"bool",baseAsset:"AssetId"},TokenInfo:{farmsTotalMultiplier:"u32",stakingTotalMultiplier:"u32",tokenPerBlock:"Balance",farmsAllocation:"Balance",stakingAllocation:"Balance",teamAllocation:"Balance",teamAccount:"AccountId"},UserInfo:{poolAsset:"AssetId",rewardAsset:"AssetId",isFarm:"bool",pooledTokens:"Balance",rewards:"Balance",baseAsset:"AssetId"},MultiChainHeight:{_enum:{Thischain:"BlockNumber",Sidechain:"u64"}},BridgeTimepoint:{height:"MultiChainHeight",index:"u32"},EthPeersSync:{isBridgeReady:"bool",isXorReady:"bool",isValReady:"bool"},BridgeStatus:{_enum:["Initialized","Migrating"]},BridgeNetworkId:"u32",AssetKind:{_enum:["Thischain","Sidechain","SidechainOwned"]},RequestStatus:{_enum:["Pending","Frozen","ApprovalsReady","Failed","Done"]},SignatureParams:{r:"[u8; 32]",s:"[u8; 32]",v:"u8"},IncomingTransactionRequestKind:{_enum:["Transfer","AddAsset","AddPeer","RemovePeer","PrepareForMigration","Migrate","AddPeerCompat","RemovePeerCompat","TransferXOR"]},IncomingMetaRequestKind:{_enum:["CancelOutgoingRequest","MarkAsDone"]},IncomingRequestKind:{_enum:{Transaction:"IncomingTransactionRequestKind",Meta:"IncomingMetaRequestKind"}},ChangePeersContract:{_enum:["XOR","VAL"]},CurrencyIdEncoded:{_enum:{AssetId:"H256",TokenAddress:"H160"}},FixedBytes:"Vec<u8>",OutgoingTransfer:{from:"AccountId",to:"EthAddress",assetId:"AssetId",amount:"Balance",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingTransferEncoded:{currencyId:"CurrencyIdEncoded",amount:"U256",to:"EthAddress",from:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingAddAsset:{author:"AccountId",assetId:"AssetId",supply:"Balance",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddAssetEncoded:{name:"String",symbol:"String",decimal:"u8",supply:"U256",sidechainAssetId:"FixedBytes",hash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingAddToken:{author:"AccountId",tokenAddress:"EthAddress",ticker:"String",name:"String",decimals:"u8",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddTokenEncoded:{tokenAddress:"EthAddress",ticker:"String",name:"String",decimals:"u8",hash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingAddPeer:{author:"AccountId",peerAddress:"EthAddress",peerAccountId:"AccountId",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddPeerCompat:{author:"AccountId",peerAddress:"EthAddress",peerAccountId:"AccountId",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddPeerEncoded:{peerAddress:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingRemovePeer:{author:"AccountId",peerAccountId:"AccountId",peerAddress:"EthAddress",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingRemovePeerCompat:{author:"AccountId",peerAccountId:"AccountId",peerAddress:"EthAddress",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingRemovePeerEncoded:{peerAddress:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingPrepareForMigration:{author:"AccountId",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingPrepareForMigrationEncoded:{thisContractAddress:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingMigrate:{author:"AccountId",newContractAddress:"EthAddress",erc20NativeTokens:"Vec<EthAddress>",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingMigrateEncoded:{thisContractAddress:"EthAddress",txHash:"H256",newContractAddress:"EthAddress",erc20NativeTokens:"Vec<EthAddress>",networkId:"H256",raw:"Vec<u8>"},OutgoingRequest:{_enum:{Transfer:"OutgoingTransfer",AddAsset:"OutgoingAddAsset",AddToken:"OutgoingAddToken",AddPeer:"OutgoingAddPeer",RemovePeer:"OutgoingRemovePeer",PrepareForMigration:"OutgoingPrepareForMigration",Migrate:"OutgoingMigrate"}},OutgoingRequestEncoded:{_enum:{Transfer:"OutgoingTransferEncoded",AddAsset:"OutgoingAddAssetEncoded",AddToken:"OutgoingAddTokenEncoded",AddPeer:"OutgoingAddPeerEncoded",RemovePeer:"OutgoingRemovePeerEncoded",PrepareForMigration:"OutgoingPrepareForMigrationEncoded",Migrate:"OutgoingMigrateEncoded"}},IncomingTransfer:{from:"EthAddress",to:"AccountId",assetId:"AssetId",assetKind:"AssetKind",amount:"Balance",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingAddToken:{tokenAddress:"EthAddress",assetId:"AssetId",precision:"BalancePrecision",symbol:"AssetSymbol",name:"AssetName",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingChangePeers:{peerAccountId:"AccountId",peerAddress:"EthAddress",added:"bool",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingChangePeersCompat:{peerAccountId:"AccountId",peerAddress:"EthAddress",added:"bool",contract:"ChangePeersContract",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingCancelOutgoingRequest:{outgoingRequest:"OutgoingRequest",outgoingRequestHash:"H256",initialRequestHash:"H256",txInput:"Vec<u8>",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingMarkAsDoneRequest:{outgoingRequestHash:"H256",initialRequestHash:"H256",author:"AccountId",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingPrepareForMigration:{author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingMigrate:{newContractAddress:"EthAddress",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingRequest:{_enum:{Transfer:"IncomingTransfer",AddToken:"IncomingAddToken",ChangePeers:"IncomingChangePeers",CancelOutgoingRequest:"IncomingCancelOutgoingRequest",MarkAsDone:"IncomingMarkAsDoneRequest",PrepareForMigration:"IncomingPrepareForMigration",Migrate:"IncomingMigrate"}},LoadIncomingTransactionRequest:{author:"AccountId",hash:"H256",timepoint:"BridgeTimepoint",kind:"IncomingTransactionRequestKind",networkId:"BridgeNetworkId"},LoadIncomingMetaRequest:{author:"AccountId",hash:"H256",timepoint:"BridgeTimepoint",kind:"IncomingMetaRequestKind",networkId:"BridgeNetworkId"},LoadIncomingRequest:{_enum:{Transaction:"LoadIncomingTransactionRequest",Meta:"(LoadIncomingMetaRequest, H256)"}},OffchainRequest:{_enum:{Outgoing:"(OutgoingRequest, H256)",LoadIncoming:"LoadIncomingRequest",Incoming:"(IncomingRequest, H256)"}},EthBridgeStorageVersion:{_enum:["V1","V2RemovePendingTransfers"]},EthAddress:"H160",BridgeSignatureVersion:{_enum:["V1","V2"]},BridgeAppInfo:{_enum:{EVM:"(GenericNetworkId, EVMAppInfo)",Sub:"(GenericNetworkId)"}},BridgeAssetInfo:{_enum:{EVMLegacy:"EVMLegacyAssetInfo",EVM:"EVMAssetInfo",Sub:"SubAssetInfo"}},EVMAppInfo:{evmAddress:"H160",appKind:"EVMAppKind"},EVMAssetInfo:{assetId:"MainnetAssetId",evmAddress:"H160",appKind:"EVMAppKind",precision:"u8"},EVMLegacyAssetInfo:{assetId:"MainnetAssetId",evmAddress:"H160",appKind:"EVMAppKind",precision:"u8"},EVMAppKind:{_enum:["EthApp","ERC20App","SidechainApp","HashiBridge","XorMaster","ValMaster"]},SubAssetInfo:{assetId:"MainnetAssetId",assetKind:"SubAssetKind",precision:"u8"},SubAssetKind:{_enum:["Thischain","Sidechain"]},GenericNetworkId:{_enum:{EVMLegacy:"u32",EVM:"EVMChainId",Sub:"SubNetworkId"}},MainnetAssetId:"H256",EVMChainId:"U256",SubNetworkId:{_enum:{Mainnet:null,Kusama:null,Polkadot:null,Rococo:null,Custom:"u32"}},PoolFarmer:{account:"AccountId",block:"BlockNumber",weight:"Balance"},VotingOption:{_enum:["Yes","No"]},HermesVotingInfo:{votingOption:"VotingOption",numberOfHermes:"Balance",hermesWithdrawn:"bool"},HermesPollInfo:{creator:"AccountId",hermesLocked:"Balance",pollStartTimestamp:"Moment",pollEndTimestamp:"Moment",title:"String",description:"String",creatorHermesWithdrawn:"bool"},PendingMultisigAccount:{approvingAccounts:"Vec<AccountId>",migrateAt:"Option<BlockNumber>"},LPSwapOutcomeInfo:{amount:"Balance",fee:"Balance",rewards:"Vec<LPRewardsInfo>",route:"Vec<AssetId>"},LPRewardsInfo:{amount:"Balance",currency:"AssetId",reason:"RewardReason"},LiquiditySourceIdOf:{dexId:"DEXId",liquiditySourceIndex:"LiquiditySourceType"},AssetIdOf:"AssetId",Amount:"i128",AmountOf:"Amount",CurrencyId:"AssetId",CurrencyIdOf:"AssetId",BasisPoints:"u16",Fixed:"FixedU128",FarmId:"u64",DEXId:"u32",DEXIdOf:"DEXId",DEXInfo:{baseAssetId:"AssetId",defaultFee:"BasisPoints",defaultProtocolFee:"BasisPoints"},BalancePrecision:"u8",AssetSymbol:"Text",AssetName:"Text",AssetId32:"[u8; 32]",SwapWithDesiredInput:{desiredAmountIn:"Balance",minAmountOut:"Balance"},SwapWithDesiredOutput:{desiredAmountOut:"Balance",maxAmountIn:"Balance"},SwapAmount:{_enum:{WithDesiredInput:"SwapWithDesiredInput",WithDesiredOutput:"SwapWithDesiredOutput"}},QuoteWithDesiredInput:{desiredAmountIn:"Balance"},QuoteWithDesiredOutput:{desiredAmountOut:"Balance"},QuoteAmount:{_enum:{WithDesiredInput:"QuoteWithDesiredInput",WithDesiredOutput:"QuoteWithDesiredOutput"}},SwapVariant:{_enum:["WithDesiredInput","WithDesiredOutput"]},TechAmount:"Amount",TechBalance:"Balance",SwapOutcome:{amount:"Balance",fee:"Balance"},LiquiditySourceType:{_enum:["XYKPool","BondingCurvePool","MulticollateralBondingCurvePool","MockPool","MockPool2","MockPool3","MockPool4","XSTPool","OrderBook"]},FilterMode:{_enum:["Disabled","ForbidSelected","AllowSelected"]},SwapOutcomeInfo:{amount:"Balance",fee:"Balance"},TradingPair:{baseAssetId:"AssetId",targetAssetId:"AssetId"},PermissionId:"u32",HolderId:"AccountId",OwnerId:"AccountId",Mode:{_enum:["Permit","Forbid"]},Scope:{_enum:{Limited:"H512",Unlimited:"Null"}},OracleKey:"AssetId",ChargeFeeInfo:{tip:"Compact<Balance>",target_asset_id:"AssetId"},SwapAction:"Null",ValidationFunction:"Null",Permission:"Null",DistributionAccounts:"Null",MultisigAccount:{signatories:"Vec<AccountId>",threshold:"u8"},Farmer:"Null",Farm:"Null",SmoothPriceState:"Null",MultiCurrencyBalanceOf:"MultiCurrencyBalance",Duration:"Null",PostDispatchInfo:{actualWeight:"Option<Weight>",paysFee:"Pays"},DispatchErrorWithPostInfoTPostDispatchInfo:{postInfo:"PostDispatchInfo",error:"DispatchError"},DispatchResultWithPostInfo:"Result<PostDispatchInfo, DispatchErrorWithPostInfoTPostDispatchInfo>",Public:"[u8; 33]",RewardReason:{_enum:["Unspecified","BuyOnBondingCurve","LiquidityProvisionFarming","MarketMakerVolume"]},StorageVersion:"Null",MarketMakerInfo:{count:"u32",volume:"Balance"},CrowdloanReward:{id:"Vec<u8>",address:"Vec<u8>",contribution:"Fixed",xorReward:"Fixed",valReward:"Fixed",pswapReward:"Fixed",xstusdReward:"Fixed",percent:"Fixed"},PredefinedAssetId:{_enum:["XOR","DOT","KSM","USDT","VAL","PSWAP","DAI","ETH","XSTUSD","XST","TBCD"]},RewardInfo:{limit:"Balance",totalAvailable:"Balance",rewards:"BTreeMap<RewardReason, Balance>"},TechTradingPair:{baseAssetId:"TechAssetId",targetAssetId:"TechAssetId"},TechAssetId:{_enum:{Wrapped:"PredefinedAssetId",Escaped:"AssetId"}},TechPurpose:{_enum:{FeeCollector:"Null",FeeCollectorForPair:"TechTradingPair",LiquidityKeeper:"TechTradingPair",Identifier:"Vec<u8>"}},TechAccountId:{_enum:{Pure:"(DEXId, TechPurpose)",Generic:"(Vec<u8>, Vec<u8>)",Wrapped:"AccountId",WrappedRepr:"AccountId"}},PriceInfo:{priceFailures:"u32",spotPrices:"Vec<Balance>",averagePrice:"Balance",needsUpdate:"bool",lastSpotPrice:"Balance"},ContentSource:"Text",Description:"Text",CustomInfo:{amount:"Balance"},TP:"TradingPair",CrowdloanLease:{startBlock:"String",totalDays:"String",blocksPerDay:"String"},AuxiliaryDigest:{logs:"Vec<AuxiliaryDigestItem>"},AuxiliaryDigestItem:{_enum:{Commitment:"(EthNetworkId, ChannelId, H256)"}},EthNetworkId:"U256",ChannelId:{_enum:{Basic:null,Incentivized:null}},BasicChannelMessage:{networkId:"EthNetworkId",target:"H160",nonce:"u64",payload:"Vec<u8>"},IntentivizedChannelMessage:{networkId:"EthNetworkId",target:"H160",nonce:"u64",fee:"U256",payload:"Vec<u8>"},Address:"AccountId",LookupSource:"AccountId",AssetId:"AssetId32",Keys:"SessionKeys3",RefCount:"u32",Balance:"u128",TAssetBalance:"Balance",MultiCurrencyBalance:"Balance",AccountInfo:"AccountInfoWithDualRefCount"}}]},sora_ksm:{alias:{bridgeProxy:{AssetKind:"SubAssetKind"},ethBridge:{StorageVersion:"EthBridgeStorageVersion"},tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},tokens:{queryExistentialDeposit:{description:"Query Existential Deposit for a given currency.",params:[{name:"currencyId",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex",isSubscription:!1,jsonrpc:"tokens_queryExistentialDeposit",method:"queryExistentialDeposit",section:"tokens"}},assets:{freeBalance:{description:"Get free balance of particular asset for account.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_freeBalance",method:"freeBalance",section:"assets"},usableBalance:{description:"Get usable (free and non-frozen, except for network fees) balance of particular asset for account.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_usableBalance",method:"usableBalance",section:"assets"},totalBalance:{description:"Get total balance (free + reserved) of particular asset for account.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_totalBalance",method:"totalBalance",section:"assets"},totalSupply:{description:"Get total supply of particular asset on chain.",params:[{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"assets_totalSupply",method:"totalSupply",section:"assets"},listAssetIds:{description:"List Ids of all assets registered on chain.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<AssetId>",isSubscription:!1,jsonrpc:"assets_listAssetIds",method:"listAssetIds",section:"assets"},listAssetInfos:{description:"List Infos of all assets registered on chain.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<AssetInfo>",isSubscription:!1,jsonrpc:"assets_listAssetInfos",method:"listAssetInfos",section:"assets"},getAssetInfo:{description:"Get Info for particular asset on chain.",params:[{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<AssetInfo>",isSubscription:!1,jsonrpc:"assets_getAssetInfo",method:"getAssetInfo",section:"assets"}},dexApi:{canExchange:{description:"Query capability to exchange particular tokens on DEX.",params:[{name:"dexId",type:"DEXId"},{name:"liquiditySourceType",type:"LiquiditySourceType"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"dexApi_canExchange",method:"canExchange",section:"dexApi"},listSupportedSources:{description:"List liquidity source types enabled on chain.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<LiquiditySourceType>",isSubscription:!1,jsonrpc:"dexApi_listSupportedSources",method:"listSupportedSources",section:"dexApi"},quote:{description:"Get price for a given input or output token amount.",params:[{name:"dexId",type:"DEXId"},{name:"liquiditySourceType",type:"LiquiditySourceType"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"amount",type:"String"},{name:"swapVariant",type:"SwapVariant"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<SwapOutcomeInfo>",isSubscription:!1,jsonrpc:"dexApi_quote",method:"quote",section:"dexApi"}},dexManager:{listDEXIds:{description:"Enumerate available ids of DEXes",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<DEXId>",isSubscription:!1,jsonrpc:"dexManager_listDEXIds",method:"listDEXIds",section:"dexManager"},testBalance:{description:"Test type of Balance",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Fixed",isSubscription:!1,jsonrpc:"dexManager_testBalance",method:"testBalance",section:"dexManager"}},ethBridge:{getRequests:{description:"Get registered requests and their statuses.",params:[{name:"requestHashes",type:"Vec<H256>"},{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"redirectFinishedLoadRequests",type:"bool",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(OffchainRequest, RequestStatus)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getRequests",method:"getRequests",section:"ethBridge"},getApprovedRequests:{description:"Get approved encoded requests and their approvals.",params:[{name:"requestHashes",type:"Vec<H256>"},{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(OutgoingRequestEncoded, Vec<SignatureParams>)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getApprovedRequests",method:"getApprovedRequests",section:"ethBridge"},getApprovals:{description:"Get approvals of the given requests.",params:[{name:"requestHashes",type:"Vec<H256>"},{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<Vec<SignatureParams>>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getApprovals",method:"getApprovals",section:"ethBridge"},getAccountRequests:{description:"Get account requests hashes.",params:[{name:"accountId",type:"AccountId"},{name:"statusFilter",type:"RequestStatus",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(BridgeNetworkId, H256)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getAccountRequests",method:"getAccountRequests",section:"ethBridge"},getRegisteredAssets:{description:"Get registered assets and tokens.",params:[{name:"networkId",type:"BridgeNetworkId",isOptional:!0},{name:"at",type:"BlockHash",isOptional:!0}],type:"Result<Vec<(AssetKind, (AssetId, BalancePrecision), Option<(H160, BalancePrecision)>)>, DispatchError>",isSubscription:!1,jsonrpc:"ethBridge_getRegisteredAssets",method:"getRegisteredAssets",section:"ethBridge"}},bridgeProxy:{listApps:{description:"",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<BridgeAppInfo>",isSubscription:!1,jsonrpc:"bridgeProxy_listApps",method:"listApps",section:"bridgeProxy"},listAssets:{description:"",params:[{name:"networkId",type:"GenericNetworkId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<BridgeAssetInfo>",isSubscription:!1,jsonrpc:"bridgeProxy_listAssets",method:"listAssets",section:"bridgeProxy"}},farming:{rewardDoublingAssets:{description:"Get list of double rewarding assets",params:[],type:"Vec<AssetId>",isSubscription:!1,jsonrpc:"farming_rewardDoublingAssets",method:"rewardDoublingAssets",section:"farming"}},irohaMigration:{needsMigration:{description:"Check if the account needs migration",params:[{name:"irohaAddress",type:"String"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"irohaMigration_needsMigration",method:"needsMigration",section:"irohaMigration"}},liquidityProxy:{quote:{description:"Get price with indicated Asset amount and direction, filtered by selected_types",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"amount",type:"String"},{name:"swapVariant",type:"SwapVariant"},{name:"selectedSourceTypes",type:"Vec<LiquiditySourceType>"},{name:"filterMode",type:"FilterMode"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<LPSwapOutcomeInfo>",isSubscription:!1,jsonrpc:"liquidityProxy_quote",method:"quote",section:"liquidityProxy"},isPathAvailable:{description:"Check if given two arbitrary tokens can be exchanged via any liquidity sources",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"liquidityProxy_isPathAvailable",method:"isPathAvailable",section:"liquidityProxy"},listEnabledSourcesForPath:{description:"Given two arbitrary tokens, list liquidity sources that can be used along the path.",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<LiquiditySourceType>",isSubscription:!1,jsonrpc:"liquidityProxy_listEnabledSourcesForPath",method:"listEnabledSourcesForPath",section:"liquidityProxy"}},pswapDistribution:{claimableAmount:{description:"Get amount of PSWAP claimable by user (liquidity provision reward).",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"BalanceInfo",isSubscription:!1,jsonrpc:"pswapDistribution_claimableAmount",method:"claimableAmount",section:"pswapDistribution"}},rewards:{claimables:{description:"Get claimable rewards",params:[{name:"ethAddress",type:"EthAddress"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<BalanceInfo>",isSubscription:!1,jsonrpc:"rewards_claimables",method:"claimables",section:"rewards"}},template:{testMultiply2:{description:"Test type of Balance",params:[{name:"amount",type:"String"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<CustomInfo>",isSubscription:!1,jsonrpc:"template_testMultiply2",method:"testMultiply2",section:"template"}},tradingPair:{listEnabledPairs:{description:"List enabled trading pairs for DEX.",params:[{name:"dexId",type:"DEXId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<TradingPair>",isSubscription:!1,jsonrpc:"tradingPair_listEnabledPairs",method:"listEnabledPairs",section:"tradingPair"},isPairEnabled:{description:"Query if particular trading pair is enabled for DEX.",params:[{name:"dexId",type:"DEXId"},{name:"inputAssetId",type:"AssetId"},{name:"outputAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"tradingPair_isPairEnabled",method:"isPairEnabled",section:"tradingPair"},listEnabledSourcesForPair:{description:"List enabled liquidity sources for trading pair.",params:[{name:"dexId",type:"DEXId"},{name:"baseAssetId",type:"AssetId"},{name:"targetAssetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Vec<LiquiditySourceType>",isSubscription:!1,jsonrpc:"tradingPair_listEnabledSourcesForPair",method:"listEnabledSourcesForPair",section:"tradingPair"},isSourceEnabledForPair:{description:"Query if particular liquidity source is enabled for pair.",params:[{name:"dexId",type:"DEXId"},{name:"baseAssetId",type:"AssetId"},{name:"targetAssetId",type:"AssetId"},{name:"liquiditySourceType",type:"LiquiditySourceType"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool",isSubscription:!1,jsonrpc:"tradingPair_isSourceEnabledForPair",method:"isSourceEnabledForPair",section:"tradingPair"}},vestedRewards:{crowdloanClaimable:{description:"Get available crowdloan reward for a user.",params:[{name:"accountId",type:"AccountId"},{name:"assetId",type:"AssetId"},{name:"at",type:"BlockHash",isOptional:!0}],type:"Option<BalanceInfo>",isSubscription:!1,jsonrpc:"vestedRewards_crowdloanClaimable",method:"crowdloanClaimable",section:"vestedRewards"},crowdloanLease:{description:"Get crowdloan rewards lease period info.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"CrowdloanLease",isSubscription:!1,jsonrpc:"vestedRewards_crowdloanLease",method:"crowdloanLease",section:"vestedRewards"}},leafProvider:{latestDigest:{description:"Get leaf provider logs.",params:[{name:"at",type:"BlockHash",isOptional:!0}],type:"AuxiliaryDigest",isSubscription:!1,jsonrpc:"leafProvider_latestDigest",method:"latestDigest",section:"leafProvider"}},basicChannel:{commitment:{description:"Get basic channel messages.",params:[{name:"commitmentHash",type:"H256"}],type:"Option<Vec<BasicChannelMessage>>",isSubscription:!1,jsonrpc:"basicChannel_commitment",method:"commitment",section:"basicChannel"}},intentivizedChannel:{commitment:{description:"Get intentivized channel messages.",params:[{name:"commitmentHash",type:"H256"}],type:"Option<Vec<IntentivizedChannelMessage>>",isSubscription:!1,jsonrpc:"intentivizedChannel_commitment",method:"commitment",section:"intentivizedChannel"}}},types:[{minmax:[2,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{totalShares:"Share",rewards:"BTreeMap<OrmlCurrencyId, (Balance, Balance)>"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"FixedU128",BalanceInfo:{balance:"Balance"},AssetInfo:{assetId:"AssetId",symbol:"AssetSymbolStr",name:"AssetNameStr",precision:"u8",isMintable:"bool"},AssetSymbolStr:"String",AssetNameStr:"String",AssetRecord:"Null",VotingInfo:{votingOption:"u32",numberOfVotes:"Balance",ceresWithdrawn:"bool"},PollInfo:{numberOfOptions:"u32",pollStartTimestamp:"Moment",pollEndTimestamp:"Moment"},LockInfo:{poolTokens:"Balance",unlockingTimestamp:"Moment",assetA:"AssetId",assetB:"AssetId"},StakingInfo:{deposited:"Balance",rewards:"Balance"},TokenLockInfo:{tokens:"Balance",unlockingTimestamp:"Moment",assetId:"AssetId"},ContributorsVesting:{firstReleasePercent:"Balance",vestingPeriod:"Moment",vestingPercent:"Balance"},TeamVesting:{teamVestingTotalTokens:"Balance",teamVestingFirstReleasePercent:"Balance",teamVestingPeriod:"Moment",teamVestingPercent:"Balance"},ContributionInfo:{fundsContributed:"Balance",tokensBought:"Balance",tokensClaimed:"Balance",claimingFinished:"bool",numberOfClaims:"u32"},ILOInfo:{iloOrganizer:"AccountId",tokensForIlo:"Balance",tokensForLiquidity:"Balance",iloPrice:"Balance",softCap:"Balance",hardCap:"Balance",minContribution:"Balance",maxContribution:"Balance",refundType:"bool",liquidityPercent:"Balance",listingPrice:"Balance",lockupDays:"u32",startTimestamp:"Moment",endTimestamp:"Moment",contributorsVesting:"ContributorsVesting",teamVesting:"TeamVesting",soldTokens:"Balance",fundsRaised:"Balance",succeeded:"bool",failed:"bool",lpTokens:"Balance",claimedLpTokens:"bool",finishTimestamp:"Moment",baseAsset:"AssetId"},PoolData:{multiplier:"u32",depositFee:"Balance",isCore:"bool",isFarm:"bool",totalTokensInPool:"Balance",rewards:"Balance",rewardsToBeDistributed:"Balance",isRemoved:"bool",baseAsset:"AssetId"},TokenInfo:{farmsTotalMultiplier:"u32",stakingTotalMultiplier:"u32",tokenPerBlock:"Balance",farmsAllocation:"Balance",stakingAllocation:"Balance",teamAllocation:"Balance",teamAccount:"AccountId"},UserInfo:{poolAsset:"AssetId",rewardAsset:"AssetId",isFarm:"bool",pooledTokens:"Balance",rewards:"Balance",baseAsset:"AssetId"},MultiChainHeight:{_enum:{Thischain:"BlockNumber",Sidechain:"u64"}},BridgeTimepoint:{height:"MultiChainHeight",index:"u32"},EthPeersSync:{isBridgeReady:"bool",isXorReady:"bool",isValReady:"bool"},BridgeStatus:{_enum:["Initialized","Migrating"]},BridgeNetworkId:"u32",AssetKind:{_enum:["Thischain","Sidechain","SidechainOwned"]},RequestStatus:{_enum:["Pending","Frozen","ApprovalsReady","Failed","Done"]},SignatureParams:{r:"[u8; 32]",s:"[u8; 32]",v:"u8"},IncomingTransactionRequestKind:{_enum:["Transfer","AddAsset","AddPeer","RemovePeer","PrepareForMigration","Migrate","AddPeerCompat","RemovePeerCompat","TransferXOR"]},IncomingMetaRequestKind:{_enum:["CancelOutgoingRequest","MarkAsDone"]},IncomingRequestKind:{_enum:{Transaction:"IncomingTransactionRequestKind",Meta:"IncomingMetaRequestKind"}},ChangePeersContract:{_enum:["XOR","VAL"]},CurrencyIdEncoded:{_enum:{AssetId:"H256",TokenAddress:"H160"}},FixedBytes:"Vec<u8>",OutgoingTransfer:{from:"AccountId",to:"EthAddress",assetId:"AssetId",amount:"Balance",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingTransferEncoded:{currencyId:"CurrencyIdEncoded",amount:"U256",to:"EthAddress",from:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingAddAsset:{author:"AccountId",assetId:"AssetId",supply:"Balance",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddAssetEncoded:{name:"String",symbol:"String",decimal:"u8",supply:"U256",sidechainAssetId:"FixedBytes",hash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingAddToken:{author:"AccountId",tokenAddress:"EthAddress",ticker:"String",name:"String",decimals:"u8",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddTokenEncoded:{tokenAddress:"EthAddress",ticker:"String",name:"String",decimals:"u8",hash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingAddPeer:{author:"AccountId",peerAddress:"EthAddress",peerAccountId:"AccountId",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddPeerCompat:{author:"AccountId",peerAddress:"EthAddress",peerAccountId:"AccountId",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingAddPeerEncoded:{peerAddress:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingRemovePeer:{author:"AccountId",peerAccountId:"AccountId",peerAddress:"EthAddress",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingRemovePeerCompat:{author:"AccountId",peerAccountId:"AccountId",peerAddress:"EthAddress",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingRemovePeerEncoded:{peerAddress:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingPrepareForMigration:{author:"AccountId",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingPrepareForMigrationEncoded:{thisContractAddress:"EthAddress",txHash:"H256",networkId:"H256",raw:"Vec<u8>"},OutgoingMigrate:{author:"AccountId",newContractAddress:"EthAddress",erc20NativeTokens:"Vec<EthAddress>",nonce:"Index",networkId:"BridgeNetworkId",timepoint:"BridgeTimepoint"},OutgoingMigrateEncoded:{thisContractAddress:"EthAddress",txHash:"H256",newContractAddress:"EthAddress",erc20NativeTokens:"Vec<EthAddress>",networkId:"H256",raw:"Vec<u8>"},OutgoingRequest:{_enum:{Transfer:"OutgoingTransfer",AddAsset:"OutgoingAddAsset",AddToken:"OutgoingAddToken",AddPeer:"OutgoingAddPeer",RemovePeer:"OutgoingRemovePeer",PrepareForMigration:"OutgoingPrepareForMigration",Migrate:"OutgoingMigrate"}},OutgoingRequestEncoded:{_enum:{Transfer:"OutgoingTransferEncoded",AddAsset:"OutgoingAddAssetEncoded",AddToken:"OutgoingAddTokenEncoded",AddPeer:"OutgoingAddPeerEncoded",RemovePeer:"OutgoingRemovePeerEncoded",PrepareForMigration:"OutgoingPrepareForMigrationEncoded",Migrate:"OutgoingMigrateEncoded"}},IncomingTransfer:{from:"EthAddress",to:"AccountId",assetId:"AssetId",assetKind:"AssetKind",amount:"Balance",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingAddToken:{tokenAddress:"EthAddress",assetId:"AssetId",precision:"BalancePrecision",symbol:"AssetSymbol",name:"AssetName",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingChangePeers:{peerAccountId:"AccountId",peerAddress:"EthAddress",added:"bool",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingChangePeersCompat:{peerAccountId:"AccountId",peerAddress:"EthAddress",added:"bool",contract:"ChangePeersContract",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingCancelOutgoingRequest:{outgoingRequest:"OutgoingRequest",outgoingRequestHash:"H256",initialRequestHash:"H256",txInput:"Vec<u8>",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingMarkAsDoneRequest:{outgoingRequestHash:"H256",initialRequestHash:"H256",author:"AccountId",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingPrepareForMigration:{author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingMigrate:{newContractAddress:"EthAddress",author:"AccountId",txHash:"H256",atHeight:"u64",timepoint:"BridgeTimepoint",networkId:"BridgeNetworkId"},IncomingRequest:{_enum:{Transfer:"IncomingTransfer",AddToken:"IncomingAddToken",ChangePeers:"IncomingChangePeers",CancelOutgoingRequest:"IncomingCancelOutgoingRequest",MarkAsDone:"IncomingMarkAsDoneRequest",PrepareForMigration:"IncomingPrepareForMigration",Migrate:"IncomingMigrate"}},LoadIncomingTransactionRequest:{author:"AccountId",hash:"H256",timepoint:"BridgeTimepoint",kind:"IncomingTransactionRequestKind",networkId:"BridgeNetworkId"},LoadIncomingMetaRequest:{author:"AccountId",hash:"H256",timepoint:"BridgeTimepoint",kind:"IncomingMetaRequestKind",networkId:"BridgeNetworkId"},LoadIncomingRequest:{_enum:{Transaction:"LoadIncomingTransactionRequest",Meta:"(LoadIncomingMetaRequest, H256)"}},OffchainRequest:{_enum:{Outgoing:"(OutgoingRequest, H256)",LoadIncoming:"LoadIncomingRequest",Incoming:"(IncomingRequest, H256)"}},EthBridgeStorageVersion:{_enum:["V1","V2RemovePendingTransfers"]},EthAddress:"H160",BridgeSignatureVersion:{_enum:["V1","V2"]},BridgeAppInfo:{_enum:{EVM:"(GenericNetworkId, EVMAppInfo)",Sub:"(GenericNetworkId)"}},BridgeAssetInfo:{_enum:{EVMLegacy:"EVMLegacyAssetInfo",EVM:"EVMAssetInfo",Sub:"SubAssetInfo"}},EVMAppInfo:{evmAddress:"H160",appKind:"EVMAppKind"},EVMAssetInfo:{assetId:"MainnetAssetId",evmAddress:"H160",appKind:"EVMAppKind",precision:"u8"},EVMLegacyAssetInfo:{assetId:"MainnetAssetId",evmAddress:"H160",appKind:"EVMAppKind",precision:"u8"},EVMAppKind:{_enum:["EthApp","ERC20App","SidechainApp","HashiBridge","XorMaster","ValMaster"]},SubAssetInfo:{assetId:"MainnetAssetId",assetKind:"SubAssetKind",precision:"u8"},SubAssetKind:{_enum:["Thischain","Sidechain"]},GenericNetworkId:{_enum:{EVMLegacy:"u32",EVM:"EVMChainId",Sub:"SubNetworkId"}},MainnetAssetId:"H256",EVMChainId:"U256",SubNetworkId:{_enum:{Mainnet:null,Kusama:null,Polkadot:null,Rococo:null,Custom:"u32"}},PoolFarmer:{account:"AccountId",block:"BlockNumber",weight:"Balance"},VotingOption:{_enum:["Yes","No"]},HermesVotingInfo:{votingOption:"VotingOption",numberOfHermes:"Balance",hermesWithdrawn:"bool"},HermesPollInfo:{creator:"AccountId",hermesLocked:"Balance",pollStartTimestamp:"Moment",pollEndTimestamp:"Moment",title:"String",description:"String",creatorHermesWithdrawn:"bool"},PendingMultisigAccount:{approvingAccounts:"Vec<AccountId>",migrateAt:"Option<BlockNumber>"},LPSwapOutcomeInfo:{amount:"Balance",fee:"Balance",rewards:"Vec<LPRewardsInfo>",route:"Vec<AssetId>"},LPRewardsInfo:{amount:"Balance",currency:"AssetId",reason:"RewardReason"},LiquiditySourceIdOf:{dexId:"DEXId",liquiditySourceIndex:"LiquiditySourceType"},AssetIdOf:"AssetId",Amount:"i128",AmountOf:"Amount",CurrencyId:"AssetId",CurrencyIdOf:"AssetId",BasisPoints:"u16",Fixed:"FixedU128",FarmId:"u64",DEXId:"u32",DEXIdOf:"DEXId",DEXInfo:{baseAssetId:"AssetId",defaultFee:"BasisPoints",defaultProtocolFee:"BasisPoints"},BalancePrecision:"u8",AssetSymbol:"Text",AssetName:"Text",AssetId32:"[u8; 32]",SwapWithDesiredInput:{desiredAmountIn:"Balance",minAmountOut:"Balance"},SwapWithDesiredOutput:{desiredAmountOut:"Balance",maxAmountIn:"Balance"},SwapAmount:{_enum:{WithDesiredInput:"SwapWithDesiredInput",WithDesiredOutput:"SwapWithDesiredOutput"}},QuoteWithDesiredInput:{desiredAmountIn:"Balance"},QuoteWithDesiredOutput:{desiredAmountOut:"Balance"},QuoteAmount:{_enum:{WithDesiredInput:"QuoteWithDesiredInput",WithDesiredOutput:"QuoteWithDesiredOutput"}},SwapVariant:{_enum:["WithDesiredInput","WithDesiredOutput"]},TechAmount:"Amount",TechBalance:"Balance",SwapOutcome:{amount:"Balance",fee:"Balance"},LiquiditySourceType:{_enum:["XYKPool","BondingCurvePool","MulticollateralBondingCurvePool","MockPool","MockPool2","MockPool3","MockPool4","XSTPool","OrderBook"]},FilterMode:{_enum:["Disabled","ForbidSelected","AllowSelected"]},SwapOutcomeInfo:{amount:"Balance",fee:"Balance"},TradingPair:{baseAssetId:"AssetId",targetAssetId:"AssetId"},PermissionId:"u32",HolderId:"AccountId",OwnerId:"AccountId",Mode:{_enum:["Permit","Forbid"]},Scope:{_enum:{Limited:"H512",Unlimited:"Null"}},OracleKey:"AssetId",ChargeFeeInfo:{tip:"Compact<Balance>",target_asset_id:"AssetId"},SwapAction:"Null",ValidationFunction:"Null",Permission:"Null",DistributionAccounts:"Null",MultisigAccount:{signatories:"Vec<AccountId>",threshold:"u8"},Farmer:"Null",Farm:"Null",SmoothPriceState:"Null",MultiCurrencyBalanceOf:"MultiCurrencyBalance",Duration:"Null",PostDispatchInfo:{actualWeight:"Option<Weight>",paysFee:"Pays"},DispatchErrorWithPostInfoTPostDispatchInfo:{postInfo:"PostDispatchInfo",error:"DispatchError"},DispatchResultWithPostInfo:"Result<PostDispatchInfo, DispatchErrorWithPostInfoTPostDispatchInfo>",Public:"[u8; 33]",RewardReason:{_enum:["Unspecified","BuyOnBondingCurve","LiquidityProvisionFarming","MarketMakerVolume"]},StorageVersion:"Null",MarketMakerInfo:{count:"u32",volume:"Balance"},CrowdloanReward:{id:"Vec<u8>",address:"Vec<u8>",contribution:"Fixed",xorReward:"Fixed",valReward:"Fixed",pswapReward:"Fixed",xstusdReward:"Fixed",percent:"Fixed"},PredefinedAssetId:{_enum:["XOR","DOT","KSM","USDT","VAL","PSWAP","DAI","ETH","XSTUSD","XST","TBCD"]},RewardInfo:{limit:"Balance",totalAvailable:"Balance",rewards:"BTreeMap<RewardReason, Balance>"},TechTradingPair:{baseAssetId:"TechAssetId",targetAssetId:"TechAssetId"},TechAssetId:{_enum:{Wrapped:"PredefinedAssetId",Escaped:"AssetId"}},TechPurpose:{_enum:{FeeCollector:"Null",FeeCollectorForPair:"TechTradingPair",LiquidityKeeper:"TechTradingPair",Identifier:"Vec<u8>"}},TechAccountId:{_enum:{Pure:"(DEXId, TechPurpose)",Generic:"(Vec<u8>, Vec<u8>)",Wrapped:"AccountId",WrappedRepr:"AccountId"}},PriceInfo:{priceFailures:"u32",spotPrices:"Vec<Balance>",averagePrice:"Balance",needsUpdate:"bool",lastSpotPrice:"Balance"},ContentSource:"Text",Description:"Text",CustomInfo:{amount:"Balance"},TP:"TradingPair",CrowdloanLease:{startBlock:"String",totalDays:"String",blocksPerDay:"String"},AuxiliaryDigest:{logs:"Vec<AuxiliaryDigestItem>"},AuxiliaryDigestItem:{_enum:{Commitment:"(EthNetworkId, ChannelId, H256)"}},EthNetworkId:"U256",ChannelId:{_enum:{Basic:null,Incentivized:null}},BasicChannelMessage:{networkId:"EthNetworkId",target:"H160",nonce:"u64",payload:"Vec<u8>"},IntentivizedChannelMessage:{networkId:"EthNetworkId",target:"H160",nonce:"u64",fee:"U256",payload:"Vec<u8>"},Address:"AccountId",LookupSource:"AccountId",AssetId:"AssetId32",Keys:"SessionKeys3",RefCount:"u32",Balance:"u128",TAssetBalance:"Balance",MultiCurrencyBalance:"Balance",AccountInfo:"AccountInfoWithDualRefCount"}}]},"spacewalk-standalone":{rpc:{issue:{getIssueRequests:{description:"Get all issue requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getIssueRequests",method:"getIssueRequests",section:"issue"},getVaultIssueRequests:{description:"Get all issue requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"issue_getVaultIssueRequests",method:"getVaultIssueRequests",section:"issue"}},redeem:{getRedeemRequests:{description:"Get all redeem requests for a particular account",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getRedeemRequests",method:"getRedeemRequests",section:"redeem"},getVaultRedeemRequests:{description:"Get all redeem requests for a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"redeem_getVaultRedeemRequests",method:"getVaultRedeemRequests",section:"redeem"}},replace:{getOldVaultReplaceRequests:{description:"Get all replace requests from a particular vault",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getOldVaultReplaceRequests",method:"getOldVaultReplaceRequests",section:"replace"},getNewVaultReplaceRequests:{description:"Get all replace requests to a particular vault",params:[{name:"vaultId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<H256>",isSubscription:!1,jsonrpc:"replace_getNewVaultReplaceRequests",method:"getNewVaultReplaceRequests",section:"replace"}},oracle:{currencyToUsd:{description:"Get the USD value of a currency",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_currencyToUsd",method:"currencyToUsd",section:"oracle"},usdToCurrency:{description:"Get the currency value of a USD amount",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"oracle_usdToCurrency",method:"usdToCurrency",section:"oracle"},getExchangeRate:{description:"Get the exchange rate of the given currencyId to USD",params:[{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"UnsignedFixedPoint",isSubscription:!1,jsonrpc:"oracle_getExchangeRate",method:"getExchangeRate",section:"oracle"}},vaultRegistry:{getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultCollateral",method:"getVaultCollateral",section:"vaultRegistry"},getVaultsByAccountId:{description:"Get all the vaultIds registered by a vault's accountId",params:[{name:"accountId",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<SpacewalkPrimitivesVaultId>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsByAccountId",method:"getVaultsByAccountId",section:"vaultRegistry"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultTotalCollateral",method:"getVaultTotalCollateral",section:"vaultRegistry"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getPremiumRedeemVaults",method:"getPremiumRedeemVaults",section:"vaultRegistry"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithIssuableTokens",method:"getVaultsWithIssuableTokens",section:"vaultRegistry"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(SpacewalkPrimitivesVaultId, BalanceWrapper)>",isSubscription:!1,jsonrpc:"vaultRegistry_getVaultsWithRedeemableTokens",method:"getVaultsWithRedeemableTokens",section:"vaultRegistry"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getIssueableTokensFromVault",method:"getIssueableTokensFromVault",section:"vaultRegistry"},getCollateralizationFromVault:{description:"Get the collateralization rate of a vault",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVault",method:"getCollateralizationFromVault",section:"vaultRegistry"},getCollateralizationFromVaultAndCollateral:{description:"Get the collateralization rate of a vault and collateral",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"onlyIssued",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"FixedU128",isSubscription:!1,jsonrpc:"vaultRegistry_getCollateralizationFromVaultAndCollateral",method:"getCollateralizationFromVaultAndCollateral",section:"vaultRegistry"},getRequiredCollateralForWrapped:{description:"Get the minimum amount of collateral required for the given amount of token with the current threshold and exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currencyId",type:"SpacewalkPrimitivesCurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForWrapped",method:"getRequiredCollateralForWrapped",section:"vaultRegistry"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vaultId",type:"SpacewalkPrimitivesVaultId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"BalanceWrapper",isSubscription:!1,jsonrpc:"vaultRegistry_getRequiredCollateralForVault",method:"getRequiredCollateralForVault",section:"vaultRegistry"}},farming:{getFarmingRewards:{description:"Get farming rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getFarmingRewards",method:"getFarmingRewards",section:"farming"},getGaugeRewards:{description:"Get gauge rewards",params:[{name:"who",type:"AccountId"},{name:"pid",type:"PoolId"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(SpacewalkPrimitivesCurrencyId, Balance)>",isSubscription:!1,jsonrpc:"farming_getGaugeRewards",method:"getGaugeRewards",section:"farming"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{OracleKey:{},CurrencyId:{},NumberOrHex:"u128",BalanceWrapper:{amount:"String"},UnsignedFixedPoint:"u128",SpacewalkPrimitivesCurrencyId:{_enum:{Native:"Null",XCM:"u8",Stellar:"SpacewalkPrimitivesAsset",ZenlinkLPToken:"(u8,u8,u8,u8)"}},SpacewalkPrimitivesAsset:{_enum:{StellarNative:"Null",AlphaNum4:{code:"[u8;4]",issuer:"[u8;32]"},AlphaNum12:{code:"[u8;12]",issuer:"[u8;32]"}}},SpacewalkPrimitivesVaultId:{accountId:"AccountId32",currencies:"SpacewalkPrimitivesVaultCurrencyPair"},SpacewalkPrimitivesVaultCurrencyPair:{collateral:"SpacewalkPrimitivesCurrencyId",wrapped:"SpacewalkPrimitivesCurrencyId"},PoolId:"u32"}}],alias:{}},spanner:{types:[{minmax:[0,104],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",PoolInfo:{total_shares:"Balance",total_rewards:"Balance",total_withdrawn_rewards:"Balance"},Share:"u128",OracleValue:"FixedU128",DpoInfo:"DpoInfoV1",Target:"TargetV1",DpoMemberInfo:"DpoMemberInfoV1",TravelCabinBuyerInfo:"TravelCabinBuyerInfoV1",TravelCabinIndex:"u32",TravelCabinInventoryIndex:"u16",DpoIndex:"u32",TravelCabinInfo:{name:"Text",creator:"AccountId",token_id:"CurrencyId",index:"TravelCabinIndex",deposit_amount:"Balance",bonus_total:"Balance",yield_total:"Balance",maturity:"BlockNumber"},TravelCabinBuyerInfoV1:{buyer:"Buyer",purchase_blk:"BlockNumber",yield_withdrawn:"Balance",fare_withdrawn:"bool",blk_of_last_withdraw:"BlockNumber"},MilestoneRewardInfo:{token_id:"CurrencyId",deposited:"Balance",milestones:"Vec<(Balance, Balance)>"},DpoState:{_enum:["CREATED","ACTIVE","RUNNING","FAILED","COMPLETED"]},TargetV1:{_enum:{Dpo:"(DpoIndex, u8)",TravelCabin:"TravelCabinIndex"}},Buyer:{_enum:{Dpo:"DpoIndex",Passenger:"AccountId",InvalidBuyer:null}},DpoInfoV1:{index:"DpoIndex",name:"Text",token_id:"CurrencyId",manager:"AccountId",target:"TargetV1",target_maturity:"BlockNumber",target_amount:"Balance",target_yield_estimate:"Balance",target_bonus_estimate:"Balance",amount_per_seat:"Balance",empty_seats:"u8",fifo:"Vec<Buyer>",vault_deposit:"Balance",vault_withdraw:"Balance",vault_yield:"Balance",vault_bonus:"Balance",total_yield_received:"Balance",total_bonus_received:"Balance",total_milestone_received:"Balance",blk_of_last_yield:"Option<BlockNumber>",blk_of_dpo_filled:"Option<BlockNumber>",expiry_blk:"BlockNumber",state:"DpoState",referrer:"Option<AccountId>",fare_withdrawn:"bool",direct_referral_rate:"u32",fee:"u32",fee_slashed:"bool"},DpoMemberInfoV1:{buyer:"Buyer",number_of_seats:"u8",referrer:"Referrer"},Referrer:{_enum:{None:null,MemberOfDpo:"Buyer",External:"(AccountId, Buyer)"}},PaymentType:{_enum:["Deposit","Bonus","MilestoneReward","Yield","UnusedFund","WithdrawOnCompletion","WithdrawOnFailure"]},DpoInfoV2:{index:"DpoIndex",name:"Text",token_id:"CurrencyId",manager:"AccountId",target:"TargetV2",target_maturity:"BlockNumber",target_amount:"Balance",target_yield_estimate:"Balance",target_bonus_estimate:"Balance",issued_shares:"Balance",share_rate:"(Balance, Balance)",fifo:"Vec<Buyer>",base_fee:"u32",fee:"u32",fee_slashed:"bool",vault_deposit:"Balance",vault_withdraw:"Balance",vault_yield:"Balance",vault_bonus:"Balance",total_fund:"Balance",total_yield_received:"Balance",total_bonus_received:"Balance",total_milestone_received:"Balance",blk_of_last_yield:"Option<BlockNumber>",blk_of_dpo_filled:"Option<BlockNumber>",expiry_blk:"BlockNumber",state:"DpoState",referrer:"Option<AccountId>",fare_withdrawn:"bool",direct_referral_rate:"u32"},TargetV2:{_enum:{Dpo:"(DpoIndex, Balance)",TravelCabin:"TravelCabinIndex"}},DpoMemberInfoV2:{buyer:"Buyer",share:"Balance",referrer:"Referrer"},TravelCabinBuyerInfoV2:{buyer:"Buyer",purchase_blk:"BlockNumber",yield_withdrawn:"Balance",fare_withdrawn:"bool"},ExchangeRate:"FixedU128",Ratio:"FixedU128",Rate:"FixedU128",TradingPair:"(CurrencyId, CurrencyId)",TradingPairStatus:{_enum:{NotEnabled:null,Provisioning:"TradingPairProvisionParameters",Enabled:null}},TradingPairProvisionParameters:{min_contribution:"(Balance, Balance)",target_provision:"(Balance, Balance)",accumulated_provision:"(Balance, Balance)",not_before:"BlockNumber"},Amount:"i128",AmountOf:"Amount",TokenSymbol:{_enum:["BOLT","WUSD","BBOT","NCAT","PLKT"]},CurrencyId:{_enum:{Token:"TokenSymbol",DexShare:"(TokenSymbol, TokenSymbol)"}},CurrencyIdOf:"CurrencyId",PoolId:{_enum:{DexYieldFarming:"CurrencyId"}}}},{minmax:[105,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",PoolInfo:{total_shares:"Balance",total_rewards:"Balance",total_withdrawn_rewards:"Balance"},Share:"u128",OracleValue:"FixedU128",DpoInfo:"DpoInfoV2",Target:"TargetV2",DpoMemberInfo:"DpoMemberInfoV2",TravelCabinBuyerInfo:"TravelCabinBuyerInfoV2",TravelCabinIndex:"u32",TravelCabinInventoryIndex:"u16",DpoIndex:"u32",TravelCabinInfo:{name:"Text",creator:"AccountId",token_id:"CurrencyId",index:"TravelCabinIndex",deposit_amount:"Balance",bonus_total:"Balance",yield_total:"Balance",maturity:"BlockNumber"},TravelCabinBuyerInfoV1:{buyer:"Buyer",purchase_blk:"BlockNumber",yield_withdrawn:"Balance",fare_withdrawn:"bool",blk_of_last_withdraw:"BlockNumber"},MilestoneRewardInfo:{token_id:"CurrencyId",deposited:"Balance",milestones:"Vec<(Balance, Balance)>"},DpoState:{_enum:["CREATED","ACTIVE","RUNNING","FAILED","COMPLETED"]},TargetV1:{_enum:{Dpo:"(DpoIndex, u8)",TravelCabin:"TravelCabinIndex"}},Buyer:{_enum:{Dpo:"DpoIndex",Passenger:"AccountId",InvalidBuyer:null}},DpoInfoV1:{index:"DpoIndex",name:"Text",token_id:"CurrencyId",manager:"AccountId",target:"TargetV1",target_maturity:"BlockNumber",target_amount:"Balance",target_yield_estimate:"Balance",target_bonus_estimate:"Balance",amount_per_seat:"Balance",empty_seats:"u8",fifo:"Vec<Buyer>",vault_deposit:"Balance",vault_withdraw:"Balance",vault_yield:"Balance",vault_bonus:"Balance",total_yield_received:"Balance",total_bonus_received:"Balance",total_milestone_received:"Balance",blk_of_last_yield:"Option<BlockNumber>",blk_of_dpo_filled:"Option<BlockNumber>",expiry_blk:"BlockNumber",state:"DpoState",referrer:"Option<AccountId>",fare_withdrawn:"bool",direct_referral_rate:"u32",fee:"u32",fee_slashed:"bool"},DpoMemberInfoV1:{buyer:"Buyer",number_of_seats:"u8",referrer:"Referrer"},Referrer:{_enum:{None:null,MemberOfDpo:"Buyer",External:"(AccountId, Buyer)"}},PaymentType:{_enum:["Deposit","Bonus","MilestoneReward","Yield","UnusedFund","WithdrawOnCompletion","WithdrawOnFailure"]},DpoInfoV2:{index:"DpoIndex",name:"Text",token_id:"CurrencyId",manager:"AccountId",target:"TargetV2",target_maturity:"BlockNumber",target_amount:"Balance",target_yield_estimate:"Balance",target_bonus_estimate:"Balance",issued_shares:"Balance",share_rate:"(Balance, Balance)",fifo:"Vec<Buyer>",base_fee:"u32",fee:"u32",fee_slashed:"bool",vault_deposit:"Balance",vault_withdraw:"Balance",vault_yield:"Balance",vault_bonus:"Balance",total_fund:"Balance",total_yield_received:"Balance",total_bonus_received:"Balance",total_milestone_received:"Balance",blk_of_last_yield:"Option<BlockNumber>",blk_of_dpo_filled:"Option<BlockNumber>",expiry_blk:"BlockNumber",state:"DpoState",referrer:"Option<AccountId>",fare_withdrawn:"bool",direct_referral_rate:"u32"},TargetV2:{_enum:{Dpo:"(DpoIndex, Balance)",TravelCabin:"TravelCabinIndex"}},DpoMemberInfoV2:{buyer:"Buyer",share:"Balance",referrer:"Referrer"},TravelCabinBuyerInfoV2:{buyer:"Buyer",purchase_blk:"BlockNumber",yield_withdrawn:"Balance",fare_withdrawn:"bool"},ExchangeRate:"FixedU128",Ratio:"FixedU128",Rate:"FixedU128",TradingPair:"(CurrencyId, CurrencyId)",TradingPairStatus:{_enum:{NotEnabled:null,Provisioning:"TradingPairProvisionParameters",Enabled:null}},TradingPairProvisionParameters:{min_contribution:"(Balance, Balance)",target_provision:"(Balance, Balance)",accumulated_provision:"(Balance, Balance)",not_before:"BlockNumber"},Amount:"i128",AmountOf:"Amount",TokenSymbol:{_enum:["BOLT","WUSD","BBOT","NCAT","PLKT"]},CurrencyId:{_enum:{Token:"TokenSymbol",DexShare:"(TokenSymbol, TokenSymbol)"}},CurrencyIdOf:"CurrencyId",PoolId:{_enum:{DexYieldFarming:"CurrencyId"}}}}]},stafi:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId",RefCount:"u8"}}]},standard:{types:[{minmax:[0,null],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",LookupSource:"MultiAddress",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},XCurrencyId:{chain_id:"ChainId",currency_id:"Bytes"},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{Token:"TokenSymbol"}},TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC","SDN","PLM"]},AmountOf:"Amount",Amount:"i128",DataVersion:"u64",RequestIdentifier:"u64",SpecIndex:"Vec<u8>",CDP:{liquidation_fee:"Balance",max_collateraization_rate:"U256",stability_fee:"Balance"},SocketIndex:"i32",Currency:"Balances",BridgeChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"enum"},Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},TokenId:"U256"}}]},steam:{types:[{minmax:[0,null],types:{AccountIdOf:"AccountId",Address:"MultiAddress",AirDropCurrencyId:{_enum:["ICE","EAVE"]},Amount:"i128",AmountOf:"Amount",AsOriginId:"AuthoritysOriginId",AssetId:"u64",AssetIdOf:"AssetId",AuctionId:"u32",AuctionIdOf:"AuctionId",AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},AuthoritysOriginId:{_enum:["Root","EaveTreasury","CdpTreasury","ElpTreasury","DSWF"]},BalanceInfo:{amount:"Balance"},BalanceRequest:{amount:"Balance"},BalanceWrapper:{amount:"Balance"},BondingLedger:{total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},CID:"Vec<u8>",CallOf:"Call",CallRequest:{from:"Option<H160>",to:"Option<H160>",gasLimit:"Option<u32>",storageLimit:"Option<u32>",value:"Option<U128>",data:"Option<Bytes>"},ChainId:{_enum:{RelayChain:"Null",ParaChain:"ParaId"}},ChangeBalance:{_enum:{NoChange:"Null",NewValue:"Balance"}},ChangeOptionRate:{_enum:{NoChange:"Null",NewValue:"OptionRate"}},ChangeOptionRatio:{_enum:{NoChange:"Null",NewValue:"OptionRatio"}},ChangeRate:{_enum:{NoChange:"Null",NewValue:"Rate"}},ChangeRatio:{_enum:{NoChange:"Null",NewValue:"Ratio"}},ClassData:{deposit:"Balance",properties:"Properties"},ClassId:"u32",ClassIdOf:"ClassId",ClassInfoOf:{metadata:"CID",totalIssuance:"TokenId",owner:"AccountId",data:"ClassData"},CodeInfo:{codeSize:"u32",refCount:"u32"},CollateralAuctionItem:{refundRecipient:"AccountId",currencyId:"CurrencyId",initialAmount:"Compact<Balance>",amount:"Compact<Balance>",target:"Compact<Balance>",startTime:"BlockNumber"},CurrencyId:{_enum:{Token:"TokenSymbol",DEXShare:"(TokenSymbol, TokenSymbol)",ERC20:"EvmAddress"}},CurrencyIdOf:"CurrencyId",DataProviderId:{_enum:["Aggregated","Eave","Band"]},DebitAuctionItem:{initialAmount:"Compact<Balance>",amount:"Compact<Balance>",fix:"Compact<Balance>",startTime:"BlockNumber"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},DestAddress:"Vec<u8>",DispatchId:"u32",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ElpUnlockChunk:{value:"Compact<Balance>",era:"Compact<EraIndex>"},EvmAccountInfo:{nonce:"Index",contractInfo:"Option<EvmContractInfo>",developerDeposit:"Option<Balance>"},EvmAddress:"H160",EvmContractInfo:{codeHash:"H256",maintainer:"H160",deployed:"bool"},ExchangeRate:"FixedU128",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},Keys:"SessionKeys2",Ledger:{bonded:"Balance",unbondingToFree:"Balance",freePool:"Balance",toUnbondNextEra:"(Balance, Balance)"},LiquidationStrategy:{_enum:["Auction","Exchange"]},LiquidityPool:{currency_ids:"Vec<AssetIdOf>",lp_token_id:"AssetId",pool_config_id:"u32",pool_reserves:"Vec<Balance>"},LiquidityPoolConfig_:"PoolConfig",LiquidityPool_:"LiquidityPool",LookupSource:"MultiAddress",NomineeId:"AccountId",NFTBalance:"u128",OptionRate:"Option<Rate>",OptionRatio:"Option<Ratio>",OracleKey:"CurrencyId",OracleValue:"Price",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},PalletBalanceOf:"Balance",PalletsOrigin:{_enum:{System:"SystemOrigin",Timestamp:"Null",RandomnessCollectiveFlip:"Null",Balances:"Null",Accounts:"Null",Currencies:"Null",Tokens:"Null",Vesting:"Null",EaveTreasury:"Null",Utility:"Null",Multisig:"Null",Recovery:"Null",Proxy:"Null",Scheduler:"Null",Indices:"Null",GraduallyUpdate:"Null",Authorship:"Null",Babe:"Null",Grandpa:"Null",Staking:"Null",Session:"Null",Historical:"Null",GeneralCouncil:"CollectiveOrigin",GeneralCouncilMembership:"Null",EYECouncil:"CollectiveOrigin",EYECouncilMembership:"Null",ElpCouncil:"CollectiveOrigin",ElpCouncilMembership:"Null",TechnicalCommittee:"CollectiveOrigin",TechnicalCommitteeMembership:"Null",Authority:"DelayedOrigin",ElectionsPhragmen:"Null",EaveOracle:"Null",BandOracle:"Null",OperatorMembershipEave:"Null",OperatorMembershipBand:"Null",Auction:"Null",Rewards:"Null",OrmlNFT:"Null",Prices:"Null",Dex:"Null",AuctionManager:"Null",Loans:"Null",EYE:"Null",CdpTreasury:"Null",CdpEngine:"Null",EmergencyShutdown:"Null",Elp:"Null",NomineesElection:"Null",StakingPool:"Null",PolkadotBridge:"Null",Incentives:"Null",AirDrop:"Null",NFT:"Null",RenVmBridge:"Null",Contracts:"Null",EVM:"Null",Sudo:"Null",TransactionPayment:"Null"}},Params:{targetMaxFreeUnbondedRatio:"Ratio",targetMinFreeUnbondedRatio:"Ratio",targetUnbondingToFreeRatio:"Ratio",unbondingToFreeAdjustment:"Ratio",baseFeeRate:"Rate"},PolkadotAccountId:"AccountId",PolkadotAccountIdOf:"PolkadotAccountId",PoolId:{_enum:{Loans:"CurrencyId",DexIncentive:"CurrencyId",DexSaving:"CurrencyId",Elp:"Null"}},PoolInfo:{totalShares:"Compact<Share>",totalRewards:"Compact<Balance>",totalWithdrawnRewards:"Compact<Balance>"},Position:{collateral:"Balance",debit:"Balance"},Price:"FixedU128",Properties:{_set:{_bitLength:8,Transferable:1,Burnable:2}},PublicKey:"[u8; 20]",Rate:"FixedU128",Ratio:"FixedU128",RedeemStrategy:{_enum:{Immediately:"Null",Target:"EraIndex",WaitForUnbonding:"Null"}},RelaychainAccountId:"AccountId",RiskManagementParams:{maximumTotalDebitValue:"Balance",stabilityFee:"Option<Rate>",liquidationRatio:"Option<Rate>",liquidationPenalty:"Option<Rate>",requiredCollateralRatio:"Option<Rate>"},RpcDataProviderId:"Text",ScheduleTaskIndex:"u32",Share:"u128",StorageKeyBytes:"Vec<u8>",StorageValue:"Vec<u8>",StorageValueBytes:"Vec<u8>",SubAccountStatus:{bonded:"Balance",available:"Balance",unbonding:"Vec<(EraIndex,Balance)>",mockRewardRate:"Rate"},SurplusAuctionItem:{amount:"Compact<Balance>",startTime:"BlockNumber"},TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",TokenBalanceOf:"Balance",TokenData:{deposit:"Balance"},TokenId:"u64",TokenIdOf:"TokenId",TokenInfo:{name:"Text",symbol:"Text",decimals:"u8",owner:"AccountId"},TokenInfoOf:{metadata:"CID",owner:"AccountId",data:"TokenData"},TokenSymbol:{_enum:{EAVE:0,EUSD:1,DOT:2,LDOT:3,XBTC:4,RENBTC:5,INTERBTC:6,PLM:7,PHA:8,HDT:9,ICE:128,IUSD:129,KSM:130,LKSM:131,SDN:135,KILT:138}},TradingPair:"(CurrencyId,  CurrencyId)",TradingPairProvisionParameters:{minContribution:"(Balance, Balance)",targetProvision:"(Balance, Balance)",accumulatedProvision:"(Balance, Balance)",notBefore:"BlockNumber"},TradingPairStatus:{_enum:{NotEnabled:"Null",Provisioning:"TradingPairProvisionParameters",Enabled:"Null"}},VestingScheduleOf:"OrmlVestingSchedule",XCurrencyId:{chainId:"ChainId",currencyId:"Vec<u8>"}}}]},subdao:{types:[{minmax:[0,null],types:{}}]},subgame:{types:[{minmax:[0,null],types:{GameIndex:"u32",GameMode:"u8",CommodityLimit:"u128",UserCommodityLimit:"u64",ChipBalance:"u128",ChipsDetail:{balance:"u128",reserve:"u128"},GameInfo:{owner:"AccountId",block_number:"u32",bet_block_number:"u32",amount:"u128"},BetInfo:{user:"AccountId",game_id:"u32",amount:"u128",game_mode:"u8"},Template:{template_id:"u32",template_name:"Vec<u8>"},GameInstance:{game_instance_id:"u32",owner:"AccountId",bet_block_number:"u32",chips_pool:"u128",game_over:"bool"},GameInstanceId:"u32",AccountInfo:"AccountInfoWithDualRefCount",SubGameAssetMetadata:{deposit:"DepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8"},SubGameAssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"u64",deposit:"DepositBalance",max_zombies:"u32",min_balance:"u64",zombies:"u32",accounts:"u32",isFrozen:"bool"},SusGameAssetBalance:{balance:"u64",isFrozen:"bool",isZombie:"bool"},SGAssetBalance:"u64",CommodityId:"Hash",Commodity:{id:"CommodityId",info:"Vec<u8>"},ProgramId:"u64",Program:{program_id:"ProgramId",stake_amount:"u128",valid_day_count:"u64"},PalletId:"u64",PalletInfo:{pallet_id:"PalletId",name:"Vec<u8>"},NftId:"Hash",LeaseInfo:{pallet_id:"PalletId",nft_id:"NftId"},StakeInfo:{pallet_id:"PalletId",program_id:"ProgramId",stake_amount:"Balance",will_expire:"bool",expires_at:"Moment",nft_id:"NftId"},Moment:"u64",MomentOf:"Moment",SwapId:"u32",SwapSender:"AccountId",SwapPoolOwner:"AccountId",SwapAssetX:"u32",SwapAssetY:"u32",SwapAmountX:"u64",SwapAmountY:"u64",SwapAmountLP:"u64",SwapPoolDetails:{swap_id:"u32",account:"AccountId",asset_a:"u32",asset_b:"u32",asset_lp:"u32",swap_k:"u128"},Auction:{id:"u128",platform_id:"u128",nft_id:"NftId",seller:"AccountId",buyer:"Option<AccountId>",amount:"Balance",percentage_of_fee:"u8",platform_fee:"Balance"},Platform:{id:"u128",admin:"AccountId",percentage_of_fee:"u8",fee_account:"AccountId"},Plan:{amount:"SGAssetBalance",score:"SGAssetBalance"},GRPlatform:{id:"u128",admin:"AccountId",pool_account:"AccountId",asset_id:"u32",plan:"Vec<Plan>"},AbilityOfLevel:{level:"u8",ability_value_1_min:"u32",ability_value_1_max:"u32"},CardType:{admin:"AccountId",id:"u128",name:"Vec<u8>",desc:"Vec<u8>",fixed_ability_value_1:"u32",fixed_ability_value_2:"u32",special_attribute_1:"Vec<u8>",level_max_limit:"u32",ability_of_level:"Vec<AbilityOfLevel>",is_can_draw:"bool"},CardInfo:{id:"u128",name:"Vec<u8>",desc:"Vec<u8>",type_id:"u128"},Card:{id:"u128",card_info_id:"u128",level:"u8",ability_value_1:"u32",nft_id:"NftId"}}}]},subsocial:{types:[{minmax:[0,9],types:{AccountInfo:"AccountInfoWithRefCountU8"}},{minmax:[10,12],types:{AccountInfo:"AccountInfoWithRefCount"}},{minmax:[13,14],types:{AccountInfo:"AccountInfoWithDualRefCount"}},{minmax:[15,16],types:{AccountInfo:"AccountInfoWithTripleRefCount"}},{minmax:[0,16],types:{IpfsCid:"Text",WhoAndWhen:{account:"AccountId",block:"BlockNumber",time:"Moment"},User:{_enum:{Account:"AccountId",Space:"SpaceId"}},Content:{_enum:{None:"Null",Raw:"Text",IPFS:"Text",Hyper:"Text"}}}},{minmax:[0,16],types:{Space:{id:"SpaceId",created:"WhoAndWhen",edited:"bool",owner:"AccountId",parent_id:"Option<SpaceId>",content:"Content",hidden:"bool",permissions:"Option<SpacePermissions>"},SpaceUpdate:{parent_id:"Option<Option<SpaceId>>",content:"Option<Content>",hidden:"Option<bool>",permissions:"Option<Option<SpacePermissions>>"},SpaceId:"u64",SpaceOwners:{created:"WhoAndWhen",space_id:"SpaceId",owners:"Vec<AccountId>",threshold:"u16",changes_count:"u16"}}},{minmax:[15,16],types:{SpacesSettings:{handles_enabled:"bool"}}},{minmax:[0,14],types:{ScoringAction:{_enum:["UpvotePost","DownvotePost","SharePost","CreateComment","UpvoteComment","DownvoteComment","ShareComment","FollowSpace","FollowAccount"]}}},{minmax:[0,9],types:{Address:"AccountId",LookupSource:"AccountId"}},{minmax:[0,16],types:{PostId:"u64",Post:{id:"PostId",created:"WhoAndWhen",edited:"bool",owner:"AccountId",extension:"PostExtension",space_id:"Option<SpaceId>",content:"Content",hidden:"bool",upvotes_count:"u16",downvotes_count:"u16"},PostUpdate:{space_id:"Option<SpaceId>",content:"Option<Content>",hidden:"Option<bool>"},PostExtension:{_enum:{RegularPost:"Null",Comment:"Comment",SharedPost:"PostId"}},Comment:{parent_id:"Option<PostId>",root_post_id:"PostId"}}},{minmax:[0,16],types:{ReactionId:"u64",ReactionKind:{_enum:["Upvote","Downvote"]},Reaction:{id:"ReactionId",created:"WhoAndWhen",updated:"Option<WhoAndWhen>",kind:"ReactionKind"}}},{minmax:[0,16],types:{SpacePermissionSet:"BTreeSet<SpacePermission>",SpacePermission:{_enum:["ManageRoles","RepresentSpaceInternally","RepresentSpaceExternally","UpdateSpace","CreateSubspaces","UpdateOwnSubspaces","DeleteOwnSubspaces","HideOwnSubspaces","UpdateAnySubspace","DeleteAnySubspace","HideAnySubspace","CreatePosts","UpdateOwnPosts","DeleteOwnPosts","HideOwnPosts","UpdateAnyPost","DeleteAnyPost","HideAnyPost","CreateComments","UpdateOwnComments","DeleteOwnComments","HideOwnComments","HideAnyComment","Upvote","Downvote","Share","OverrideSubspacePermissions","OverridePostPermissions","SuggestEntityStatus","UpdateEntityStatus","UpdateSpaceSettings"]},SpacePermissions:{none:"Option<SpacePermissionSet>",everyone:"Option<SpacePermissionSet>",follower:"Option<SpacePermissionSet>",space_owner:"Option<SpacePermissionSet>"},SpacePermissionsContext:{space_id:"SpaceId",is_space_owner:"bool",is_space_follower:"bool",space_perms:"Option<SpacePermissions>"}}},{minmax:[0,16],types:{RoleId:"u64",Role:{created:"WhoAndWhen",updated:"Option<WhoAndWhen>",id:"RoleId",space_id:"SpaceId",disabled:"bool",expires_at:"Option<BlockNumber>",content:"Content",permissions:"SpacePermissionSet"},RoleUpdate:{disabled:"Option<bool>",content:"Option<Content>",permissions:"Option<SpacePermissionSet>"}}},{minmax:[0,16],types:{FaucetSettings:{period:"Option<BlockNumber>",period_limit:"Balance"},FaucetSettingsUpdate:{period:"Option<Option<BlockNumber>>",period_limit:"Option<Balance>"},Faucet:{enabled:"bool",period:"BlockNumber",period_limit:"Balance",drip_limit:"Balance",next_period_at:"BlockNumber",dripped_in_current_period:"Balance"},FaucetUpdate:{enabled:"Option<bool>",period:"Option<BlockNumber>",period_limit:"Option<Balance>",drip_limit:"Option<Balance>"}}},{minmax:[15,16],types:{ReportId:"u64",EntityId:{_enum:{Content:"Content",Account:"AccountId",Space:"SpaceId",Post:"PostId"}},EntityStatus:{_enum:["Allowed","Blocked"]},Report:{id:"ReportId",created:"WhoAndWhen",reported_entity:"EntityId",reported_within:"SpaceId",reason:"Content"},SuggestedStatus:{suggested:"WhoAndWhen",status:"Option<EntityStatus>",report_id:"Option<ReportId>"},SpaceModerationSettings:{autoblock_threshold:"Option<u16>"},SpaceModerationSettingsUpdate:{autoblock_threshold:"Option<Option<u16>>"}}},{minmax:[17,null],types:{}}]},subspace:{types:[{minmax:[0,null],types:{Solution:{public_key:"AccountId32",reward_address:"AccountId32"},SubPreDigest:{slot:"u64",solution:"Solution"}}}]},"substrate-contracts-node":{types:[{minmax:[0,null],types:{Keys:"SessionKeys2"}}]},subzero:{types:[{minmax:[0,18],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",AccountInfoWithDualRefCount:{nonce:"Index",consumers:"RefCount",providers:"RefCount",data:"AccountData"},Timestamp:"Moment",Entity:{account:"AccountId",index:"u128",cid:"Vec<u8>",created:"BlockNumber",mutated:"BlockNumber"},EntityProperty:{value:"u64",mutated:"BlockNumber"},Space:{id:"H256",dna:"H256",price:"Balance",gen:"u64"},SpaceId:"Hash",HypaspaceId:"Hash",HypaspaceMetadata:{name:"Vec<u8>"},Item:{CommodityId:"CommodityId",CommodityInfo:"CommodityInfo"},ItemId:"Hash",ItemInfo:{dob:"u64",dna:"Hash"},Body:{id:"Hash",index:"u128",creator:"AccountId",name:"Vec<u8>",cid:"Vec<u8>",body:"u8",created:"BlockNumber",mutated:"BlockNumber"},BConfig:{fee_model:"u8",fee:"Balance",gov_asset:"u8",pay_asset:"u8",member_limit:"u64",access:"u8"},Campaign:{id:"Hash",org:"Hash",name:"Vec<u8>",owner:"AccountId",admin:"AccountId",deposit:"Balance",expiry:"BlockNumber",cap:"Balance",protocol:"u8",governance:"u8",cid:"Vec<u8>",token_symbol:"Vec<u8>",token_name:"Vec<u8>",created:"Timestamp"},Proposal:{proposal_id:"Hash",context_id:"Hash",proposal_type:"u8",voting_type:"u8",status:"u8",start:"BlockNumber",expiry:"BlockNumber"},ProposalMetadata:{title:"Vec<u8>",cid:"Vec<u8>",amount:"Balance"},EventMessage:"Vec<u8>",Nonce:"u64",TitleText:"Vec<u8>",CID:"Vec<u8>",ProposalType:"u8",ProposalState:"u8",VotingType:"u8",RealmIndex:"u64",ClassIndex:"u64",ItemIndex:"u64",TotalIndex:"u128",BurnedIndex:"u128",TangramRealm:{id:"Hash",org:"Hash",index:"u128"},TangramRealmMetadata:{id:"Hash",name:"Vec<u8>",cid:"Vec<u8>",created:"BlockNumber",mutated:"BlockNumber"},TangramClass:{id:"Hash",realm:"Hash",org:"Hash",index:"u128",cid:"Vec<u8>"},TangramClassMetadata:{id:"Hash",name:"Vec<u8>",cid:"Vec<u8>",created:"BlockNumber",mutated:"BlockNumber"},Tangram:{dob:"Moment",dna:"Hash"},TangramMetadata:{name:"Vec<u8>",owner:"AccountId",cid:"Vec<u8>"},TangramId:"Hash",TangramItemOf:"Tangram"}},{minmax:[19,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithDualRefCount",AccountInfoWithDualRefCount:{nonce:"Index",consumers:"RefCount",providers:"RefCount",data:"AccountData"},Timestamp:"Moment",Entity:{account:"AccountId",index:"u128",cid:"Vec<u8>",created:"BlockNumber",mutated:"BlockNumber"},EntityProperty:{value:"u64",mutated:"BlockNumber"},Space:{id:"H256",dna:"H256",price:"Balance",gen:"u64"},SpaceId:"Hash",HypaspaceId:"Hash",HypaspaceMetadata:{name:"Vec<u8>"},Item:{CommodityId:"CommodityId",CommodityInfo:"CommodityInfo"},ItemId:"Hash",ItemInfo:{dob:"u64",dna:"Hash"},Body:{id:"Hash",index:"u128",creator:"AccountId",name:"Vec<u8>",cid:"Vec<u8>",body:"u8",created:"BlockNumber",mutated:"BlockNumber"},BConfig:{fee_model:"u8",fee:"Balance",gov_asset:"u8",pay_asset:"u8",member_limit:"u64",access:"u8"},Campaign:{id:"Hash",org:"Hash",name:"Vec<u8>",owner:"AccountId",admin:"AccountId",deposit:"Balance",expiry:"BlockNumber",cap:"Balance",protocol:"u8",governance:"u8",cid:"Vec<u8>",token_symbol:"Vec<u8>",token_name:"Vec<u8>",created:"Timestamp"},Proposal:{proposal_id:"Hash",context_id:"Hash",proposal_type:"u8",voting_type:"u8",status:"u8",start:"BlockNumber",expiry:"BlockNumber"},ProposalMetadata:{title:"Vec<u8>",cid:"Vec<u8>",amount:"Balance"},EventMessage:"Vec<u8>",Nonce:"u64",TitleText:"Vec<u8>",CID:"Vec<u8>",ProposalType:"u8",ProposalState:"u8",VotingType:"u8",RealmIndex:"u64",ClassIndex:"u64",ItemIndex:"u64",TotalIndex:"u128",BurnedIndex:"u128",TangramRealm:{id:"Hash",org:"Hash",index:"u128"},TangramRealmMetadata:{id:"Hash",name:"Vec<u8>",cid:"Vec<u8>",created:"BlockNumber",mutated:"BlockNumber"},TangramClass:{id:"Hash",realm:"Hash",org:"Hash",index:"u128",cid:"Vec<u8>"},TangramClassMetadata:{id:"Hash",name:"Vec<u8>",cid:"Vec<u8>",created:"BlockNumber",mutated:"BlockNumber"},Tangram:{dob:"Moment",dna:"Hash"},TangramMetadata:{name:"Vec<u8>",owner:"AccountId",cid:"Vec<u8>"},TangramId:"Hash",TangramItemOf:"Tangram"}}]},swapdex:{types:[{minmax:[0,null],types:{EvmAddress:"H160",EthereumTxHash:"H256",Address:"MultiAddress",LookupSource:"MultiAddress",AccountInfo:"AccountInfoWithTripleRefCount",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},ClassId:"u64",TokenId:"u64",ClassData:"Vec<u8>",TokenData:"Vec<u8>",ReportReason:{_enum:["None","Illigal","Plagiarism","Duplicate","Reported"]},ClassInfoOf:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",class_data:"ClassData"},ExtendedInfo:{display_flag:"bool",report:"ReportReason",frozen:"bool"},TokenInfoOf:{metadata:"Vec<u8>",owner:"AccountId",class_data:"ClassData"},"bridge::ChainId":"u8",ChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"enum"}}}]},t0rn:{types:[{minmax:[0,null],types:{GatewayVendor:{_enum:["Substrate","Ethereum"]},GatewayType:{_enum:{ProgrammableInternal:"u32",ProgrammableExternal:"u32",TxOnly:"u32"}},GatewayGenesisConfig:{modules_encoded:"Option<Bytes>",extrinsics_version:"u8",genesis_hash:"Bytes"},GatewaySysProps:{ss58_format:"u16",token_symbol:"Bytes",token_decimals:"u8"},AllowedSideEffect:"[u8; 4]",BlockNumber:"u64",Compose:{name:"Vec<u8>",code_txt:"Vec<u8>",exec_type:"Vec<u8>",dest:"AccountId",value:"Balance",bytes:"Vec<u8>",input_data:"Vec<u8>"},CircuitOutboundMessage:{name:"Bytes",module_name:"Bytes",method_name:"Bytes",sender:"Option<Bytes>",target:"Option<Bytes>",arguments:"Vec<Bytes>",expected_output:"Vec<GatewayExpectedOutput>",extra_payload:"Option<ExtraMessagePayload>"},GatewayExpectedOutput:{_enum:{Storage:null,Events:null,Extrinsic:null,Output:null}},ProofTriePointer:{_enum:{State:0,Transaction:1,Receipts:2}},GatewayPointer:{id:"ChainId",vendor:"GatewayVendor",gateway_type:"GatewayType"},ExtraMessagePayload:{signer:"Bytes",module_name:"Bytes",method_name:"Bytes",call_bytes:"Bytes",signature:"Bytes",extra:"Bytes",tx_signed:"Bytes",custom_payload:"Option<Bytes>"},ContractActionDesc:{action_id:"Hash",target_id:"Option<TargetId>",to:"Option<AccountId>"},TargetId:"[u8; 4]",SideEffect:{target:"TargetId",prize:"BalanceOf",ordered_at:"BlockNumber",encoded_action:"Bytes",encoded_args:"Vec<Bytes>",signature:"Bytes",enforce_executioner:"Option<AccountId>"},SideEffectId:"Hash",ConfirmedSideEffect:{err:"Option<Bytes>",output:"Option<Bytes>",encoded_effect:"Bytes",inclusion_proof:"Option<Bytes>",executioner:"AccountId",received_at:"BlockNumber",cost:"Option<BalanceOf>"},FullSideEffect:{input:"SideEffect",confirmed:"Option<ConfirmedSideEffect>"},XtxId:"Hash",XdnsRecordId:"Hash",XdnsRecord:{url:"Vec<u8>",gateway_abi:"GatewayABIConfig",gateway_genesis:"GatewayGenesisConfig",gateway_vendor:"GatewayVendor",gateway_type:"GatewayType",gateway_id:"ChainId",gateway_sys_props:"GatewaySysProps",registrant:"Option<AccountId>",last_finalized:"Option<u64>"},FetchXdnsRecordsResponse:{xdns_records:"Vec<XdnsRecord<AccountId>>"},ChainId:"[u8; 4]",RegistryContractId:"Hash",RegistryContract:{code_txt:"Vec<u8>",bytes:"Vec<u8>",author:"AccountId",author_fees_per_single_use:"Option<BalanceOf>",abi:"Option<Vec<u8>>",action_descriptions:"Vec<ContractActionDesc<Hash, ChainId, AccountId>>",info:"Option<RawAliveContractInfo<Hash, BalanceOf, BlockNumber>>",meta:"ContractMetadata"},RawAliveContractInfo:{trie_id:"TrieId",storage_size:"u32",pair_count:"u32",code_hash:"CodeHash",rent_allowance:"Balance",rent_paid:"Balance",deduct_block:"BlockNumber",last_write:"Option<BlockNumber>",_reserved:"Option<()>"},Address:"MultiAddress",LookupSource:"MultiAddress",DispatchMessageId:{channelId:"ChannelId",nonce:"u64"},ChannelId:{_enum:["Basic","Incentivized"]},MessageNonce:"u64",Message:{data:"Vec<u8>",proof:"Proof"},Proof:{blockHash:"H256",txIndex:"u32",data:"(Vec<Vec<u8>>, Vec<Vec<u8>>)"},EthereumHeaderId:{number:"u64",hash:"H256"},EthereumHeader:{parentHash:"H256",timestamp:"u64",number:"u64",author:"H160",transactionsRoot:"H256",ommersHash:"H256",extraData:"Vec<u8>",stateRoot:"H256",receiptsRoot:"H256",logBloom:"Bloom",gasUsed:"U256",gasLimit:"U256",difficulty:"U256",seal:"Vec<Vec<u8>>",baseFee:"Option<U256>"},StoredHeader:{submitter:"Option<AccountId>",header:"EthereumHeader",totalDifficulty:"U256",finalized:"bool"},EthashProofData:{dagNodes:"[H512; 2]",proof:"Vec<H128>"},Bloom:"[u8; 256]",PruningRange:{oldestUnprunedBlock:"u64",oldestBlockToKeep:"u64"},EthereumDifficultyConfig:{byzantiumForkBlock:"u64",constantinopleForkBlock:"u64",muirGlacierForkBlock:"u64",londonForkBlock:"u64"},AssetId:{_enum:{ETH:null,Token:"H160"}},TokenId:"u128",TokenData:{tokenContract:"H160",tokenId:"U256"},TokenInfoOf:{owner:"AccountId",metadata:"Vec<u8>",data:"TokenData"},GatewayABIConfig:{block_number_type_size:"u16",hash_size:"u16",hasher:"HasherAlgo",crypto:"CryptoAlgo",address_length:"u16",value_type_size:"u16",decimals:"u16",structs:"Vec<StructDecl>"},HasherAlgo:{_enum:["Blake2","Keccak256"]},CryptoAlgo:{_enum:["Ed25519","Sr25519","Ecdsa"]},StructDecl:{name:"Type",fields:"Vec<Parameter>",offsets:"Vec<u16>"},Parachain:{relay_chain_id:"ChainId",id:"u32"}}}]},ternoa:{types:[{minmax:[0,null],types:{AccountDataOf:"AccountData",Address:"MultiAddress",LookupSource:"MultiAddress",ShardIdentifier:"Hash",Url:"Text",URI:"Text",ClusterId:"u32",EnclaveId:"u32",MarketplaceId:"u32",BalanceCaps:"Balance",NFTId:"u32",TernoaString:"Vec<u8>",NFTSeriesId:"Text",NFTData:{owner:"AccountId",ipfs_reference:"Text",series_id:"NFTSeriesId",locked:"bool"},NFTSeriesDetails:{owner:"AccountId",draft:"bool"},NFTCurrencyCombined:{caps:"Balance",tiime:"Balance"},NFTCurrency:{_enum:{Caps:"Balance",Tiime:"Balance",Combined:"NFTCurrencyCombined"}},NFTCurrencyId:{_enum:["Caps","Tiime"]},SaleInformation:{account_id:"AccountId",price:"NFTCurrency",marketplace_id:"MarketplaceId"},MarketplaceType:{_enum:["Public","Private"]},MarketplaceInformation:{kind:"MarketplaceType",commission_fee:"u8",owner:"AccountId",allow_list:"Vec<AccountId>",disallow_list:"Vec<AccountId>",name:"Text",uri:"Option<URI>",logo_uri:"Option<URI>"},Cluster:{enclaves:"Vec<EnclaveId>"},Enclave:{api_url:"Url"},CapsuleData:{owner:"AccountId",ipfs_reference:"Text"},CapsuleLedger:"Vec<(NFTId, Balance)>",Status:{_enum:["Free","Reserved"]},Request:{shard:"ShardIdentifier",cyphertext:"Vec<u8>"}}}]},"testnet-interlay":{default:{types:[{minmax:[0,null],types:{BalanceWrapper:{amount:"String"},CurrencyId:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",LendToken:"LendTokenId",LpToken:"(LpToken, LpToken)",StableLpToken:"StablePoolId"}},LpToken:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",StableLpToken:"StablePoolId"}},InterbtcPrimitivesCurrencyId:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",LendToken:"InterbtcLendTokenId",LpToken:"(InterbtcLpToken, InterbtcLpToken)",StableLpToken:"InterbtcStablePoolId"}},InterbtcLpToken:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",StableLpToken:"InterbtcStablePoolId"}},InterbtcForeignAssetId:"u32",ForeignAssetId:"u32",InterbtcLendTokenId:"u32",InterbtcStablePoolId:"u32",LendTokenId:"u32",StablePoolId:"u32",NumberOrHex:{_enum:{Number:"u64",Hex:"U256"}},Rate:"FixedU128",Ratio:"Permill",Liquidity:"FixedU128",Shortfall:"FixedU128",FundAccountJsonRpcRequest:{account_id:"AccountId",currency_id:"InterbtcPrimitivesCurrencyId"},H256Le:"H256",SignedFixedPoint:"FixedU128",TokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},InterbtcPrimitivesTokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},UnsignedFixedPoint:"FixedU128",VaultCurrencyPair:{collateral:"CurrencyId",wrapped:"CurrencyId"},VaultId:{account_id:"AccountId",currencies:"VaultCurrencyPair"}}}],rpc:{btcRelay:{verifyBlockHeaderInclusion:{description:"Verify that the block with the given hash is included",params:[{name:"block_hash",type:"H256Le"}],type:"void"}},escrow:{balanceAt:{description:"Get a given user's escrowed balance",params:[{name:"account_id",type:"AccountId"},{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},totalSupply:{description:"Get the total voting supply in the system",params:[{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},freeStakable:{description:"Amount of kint/intr that account can lock, taking into consideration the Limits.",params:[{name:"account_id",type:"AccountId"}],type:"BalanceWrapper"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},issue:{getIssueRequests:{description:"Get all issue request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultIssueRequests:{description:"Get all issue request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},oracle:{collateralToWrapped:{description:"Collateral to Wrapped exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},wrappedToCollateral:{description:"Wrapped to Collateral exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},redeem:{getRedeemRequests:{description:"Get all redeem request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultRedeemRequests:{description:"Get all redeem request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},refund:{getRefundRequests:{description:"Get all refund request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getRefundRequestsByIssueId:{description:"Get all refund request IDs for a particular issue ID",params:[{name:"issue_id",type:"H256"}],type:"H256"},getVaultRefundRequests:{description:"Get all refund request IDs for a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},replace:{getNewVaultReplaceRequests:{description:"Get all replace request IDs to a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getOldVaultReplaceRequests:{description:"Get all replace request IDs from a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},reward:{estimateEscrowRewardRate:{description:"Estimate the escrow reward rate for a given account",params:[{name:"account_id",type:"AccountId"},{name:"amount",type:"Option<Balance>"},{name:"lock_time",type:"Option<BlockNumber>"}],type:"UnsignedFixedPoint"},estimateVaultRewardRate:{description:"Estimate the vault reward rate a given vault id",params:[{name:"vault_id",type:"VaultId"}],type:"UnsignedFixedPoint"},computeEscrowReward:{description:"Get a given user's rewards due",params:[{name:"account_id",type:"AccountId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeFarmingReward:{description:"Get a given user's farming rewards due",params:[{name:"account_id",type:"AccountId"},{name:"pool_currency_id",type:"CurrencyId"},{name:"reward_currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeVaultReward:{description:"Get a given vault's rewards due",params:[{name:"vault_id",type:"VaultId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},vaultRegistry:{getCollateralizationFromVault:{description:"Returns the collateralization of a specific vault",params:[{name:"vault",type:"VaultId"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getCollateralizationFromVaultAndCollateral:{description:"Returns the collateralization of a specific vault and collateral",params:[{name:"vault",type:"VaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vault",type:"VaultId"}],type:"BalanceWrapper"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold.",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getRequiredCollateralForWrapped:{description:"Get the amount of collateral required to issue an amount of InterBTC",params:[{name:"amount_btc",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultsByAccountId:{description:"Get all vaults that are registered using the given account _id",params:[{name:"account_id",type:"AccountId"}],type:"Vec<VaultId>"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"}},dexStable:{getA:{description:"Get amplification coefficient of pool",params:[{name:"pool_id",type:"StablePoolId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex"}}},alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},instances:{balances:["ksm","kbtc","kint","dot","ibtc","intr"]}}},"testnet-kintsugi":{default:{types:[{minmax:[0,null],types:{BalanceWrapper:{amount:"String"},CurrencyId:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",LendToken:"LendTokenId",LpToken:"(LpToken, LpToken)",StableLpToken:"StablePoolId"}},LpToken:{_enum:{Token:"TokenSymbol",ForeignAsset:"ForeignAssetId",StableLpToken:"StablePoolId"}},InterbtcPrimitivesCurrencyId:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",LendToken:"InterbtcLendTokenId",LpToken:"(InterbtcLpToken, InterbtcLpToken)",StableLpToken:"InterbtcStablePoolId"}},InterbtcLpToken:{_enum:{Token:"InterbtcPrimitivesTokenSymbol",ForeignAsset:"InterbtcForeignAssetId",StableLpToken:"InterbtcStablePoolId"}},InterbtcForeignAssetId:"u32",ForeignAssetId:"u32",InterbtcLendTokenId:"u32",InterbtcStablePoolId:"u32",LendTokenId:"u32",StablePoolId:"u32",NumberOrHex:{_enum:{Number:"u64",Hex:"U256"}},Rate:"FixedU128",Ratio:"Permill",Liquidity:"FixedU128",Shortfall:"FixedU128",FundAccountJsonRpcRequest:{account_id:"AccountId",currency_id:"InterbtcPrimitivesCurrencyId"},H256Le:"H256",SignedFixedPoint:"FixedU128",TokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},InterbtcPrimitivesTokenSymbol:{_enum:{DOT:0,IBTC:1,INTR:2,KSM:10,KBTC:11,KINT:12}},UnsignedFixedPoint:"FixedU128",VaultCurrencyPair:{collateral:"CurrencyId",wrapped:"CurrencyId"},VaultId:{account_id:"AccountId",currencies:"VaultCurrencyPair"}}}],rpc:{btcRelay:{verifyBlockHeaderInclusion:{description:"Verify that the block with the given hash is included",params:[{name:"block_hash",type:"H256Le"}],type:"void"}},escrow:{balanceAt:{description:"Get a given user's escrowed balance",params:[{name:"account_id",type:"AccountId"},{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},totalSupply:{description:"Get the total voting supply in the system",params:[{name:"height",type:"Option<BlockNumber>"}],type:"BalanceWrapper"},freeStakable:{description:"Amount of kint/intr that account can lock, taking into consideration the Limits.",params:[{name:"account_id",type:"AccountId"}],type:"BalanceWrapper"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},issue:{getIssueRequests:{description:"Get all issue request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultIssueRequests:{description:"Get all issue request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},oracle:{collateralToWrapped:{description:"Collateral to Wrapped exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},wrappedToCollateral:{description:"Wrapped to Collateral exchange rate",params:[{name:"amount",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},redeem:{getRedeemRequests:{description:"Get all redeem request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getVaultRedeemRequests:{description:"Get all redeem request IDs for a particular vault",params:[{name:"vault_id",type:"AccountId"}],type:"Vec<H256>"}},refund:{getRefundRequests:{description:"Get all refund request IDs for a particular account",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getRefundRequestsByIssueId:{description:"Get all refund request IDs for a particular issue ID",params:[{name:"issue_id",type:"H256"}],type:"H256"},getVaultRefundRequests:{description:"Get all refund request IDs for a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},replace:{getNewVaultReplaceRequests:{description:"Get all replace request IDs to a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"},getOldVaultReplaceRequests:{description:"Get all replace request IDs from a particular vault",params:[{name:"account_id",type:"AccountId"}],type:"Vec<H256>"}},reward:{estimateEscrowRewardRate:{description:"Estimate the escrow reward rate for a given account",params:[{name:"account_id",type:"AccountId"},{name:"amount",type:"Option<Balance>"},{name:"lock_time",type:"Option<BlockNumber>"}],type:"UnsignedFixedPoint"},estimateVaultRewardRate:{description:"Estimate the vault reward rate a given vault id",params:[{name:"vault_id",type:"VaultId"}],type:"UnsignedFixedPoint"},computeEscrowReward:{description:"Get a given user's rewards due",params:[{name:"account_id",type:"AccountId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeFarmingReward:{description:"Get a given user's farming rewards due",params:[{name:"account_id",type:"AccountId"},{name:"pool_currency_id",type:"CurrencyId"},{name:"reward_currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},computeVaultReward:{description:"Get a given vault's rewards due",params:[{name:"vault_id",type:"VaultId"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"}},vaultRegistry:{getCollateralizationFromVault:{description:"Returns the collateralization of a specific vault",params:[{name:"vault",type:"VaultId"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getCollateralizationFromVaultAndCollateral:{description:"Returns the collateralization of a specific vault and collateral",params:[{name:"vault",type:"VaultId"},{name:"collateral",type:"BalanceWrapper"},{name:"only_issued",type:"bool"}],type:"UnsignedFixedPoint"},getIssueableTokensFromVault:{description:"Get the amount of tokens a vault can issue",params:[{name:"vault",type:"VaultId"}],type:"BalanceWrapper"},getPremiumRedeemVaults:{description:"Get all vaults below the premium redeem threshold.",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getRequiredCollateralForVault:{description:"Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getRequiredCollateralForWrapped:{description:"Get the amount of collateral required to issue an amount of InterBTC",params:[{name:"amount_btc",type:"BalanceWrapper"},{name:"currency_id",type:"CurrencyId"}],type:"BalanceWrapper"},getVaultCollateral:{description:"Get the vault's collateral (excluding nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultTotalCollateral:{description:"Get the vault's collateral (including nomination)",params:[{name:"vault_id",type:"VaultId"}],type:"BalanceWrapper"},getVaultsByAccountId:{description:"Get all vaults that are registered using the given account _id",params:[{name:"account_id",type:"AccountId"}],type:"Vec<VaultId>"},getVaultsWithIssuableTokens:{description:"Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"},getVaultsWithRedeemableTokens:{description:"Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",params:[],type:"Vec<(VaultId, BalanceWrapper)>"}},dexStable:{getA:{description:"Get amplification coefficient of pool",params:[{name:"pool_id",type:"StablePoolId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex"}}},alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}},instances:{balances:["ksm","kbtc","kint","dot","ibtc","intr"]}}},trustbase:{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId"}}]},turing:{types:[{minmax:[0,null],types:{}}]},uart:{types:[{minmax:[0,null],types:{Keys:"SessionKeys2",Address:"MultiAddress",LookupSource:"MultiAddress",AccountData:{free:"Balance",reserved:"Balance",misc_frozen:"Balance",fee_frozen:"Balance"},AccountInfo:"AccountInfoWithDualRefCount",WorkId:"u32",Id:"u32",Name:"Vec<u8>",Value:"Vec<u8>",ReasonIndex:"u32",LottoIndex:"u32",MemberId:"u64",ProposalId:"u64",TokenBalance:"Balance",LotteryKind:{_enum:["Routine","TreasuryFunded(ReasonIndex)"]},LottoResult:{_enum:["Routine(AccountId, Balance)","TreasuryFunded(Balance)"]},Lottery:{round:"LottoIndex",kind:"LotteryKind",jackpot:"Balance",next_ticket_id:"u32",players:"BTreeMap<AccountId, bool>",tickets:"BTreeMap<u32, AccountId>",result:"Option<LottoResult<AccountId, Balance>>"},CurrencyId:{_enum:{Native:"Null",UINK:"Null",DOT:"Null",KSM:"Null",ETH:"Null",Token:"TokenSymbol"}},TokenSymbol:{_enum:["USDT","DAI"]},StorageVersion:{_enum:["V1_0_0","V2_0_0"]},CurrencyIdOf:"CurrencyId",Amount:"i128",AmountOf:"Amount",NameData:{value:"Value",owner:"AccountId",expiration:"Option<u32>"},Token:{hash:"H256",symbol:"Vec<u8>",total_supply:"Balance"},OrderType:{_enum:["Buy","Sell"]},OrderStatus:{_enum:["Created","PartialFilled","Filled","Canceled"]},TradePair:{hash:"H256",base:"H256",quote:"H256",buy_one_price:"Option<Price>",sell_one_price:"Option<Price>",latest_matched_price:"Option<Price>",one_day_trade_volume:"Option<Price>",one_day_highest_price:"Option<Price>",one_day_lowest_price:"Option<Price>"},Price:"u128",LimitOrder:{hash:"H256",base:"H256",quote:"H256",owner:"AccountId",price:"Price",sell_amount:"Balance",buy_amount:"Balance",remained_sell_amount:"Balance",remained_buy_amount:"Balance",otype:"OrderType",status:"OrderStatus"},Trade:{hash:"H256",base:"H256",quote:"H256",buyer:"AccountId",seller:"AccountId",maker:"AccountId",taker:"AccountId",otype:"OrderType",price:"Price",base_amount:"Balance",quote_amount:"Balance"},OrderLinkedItem:{prev:"Option<Price>",next:"Option<Price>",price:"Option<Price>",orders:"Vec<H256>"},CollectionMode:{_enum:{Invalid:null,NFT:"u32",Fungible:"u32",ReFungible:"(u32, u32)"}},NftItemType:{Collection:"u64",Owner:"AccountId",Data:"Vec<u8>",item_hash:"H160"},FungibleItemType:{Collection:"u64",Owner:"AccountId",value:"u128",item_hash:"H160"},ApprovePermissions:{approved:"AccountId",amount:"u64"},AccessMode:{_enum:["Normal","WhiteList"]},SaleOrder:{order_id:"u64",collection_id:"u64",item_id:"u64",currency_id:"CurrencyId",value:"u64",owner:"AccountId",price:"u64"},SplitSaleOrder:{order_id:"u64",collection_id:"u64",item_id:"u64",currency_id:"CurrencyId",value:"u64",balance:"u64",owner:"AccountId",price:"u64"},SaleOrderHistory:{collection_id:"u64",item_id:"u64",currency_id:"CurrencyId",value:"u64",seller:"AccountId",buyer:"AccountId",price:"u64",buy_time:"BlockNumber"},SignatureAuthentication:{collection:"u64",item:"u64",names:"Name",names_owner:"AccountId",sign_time:"BlockNumber",memo:"Vec<u8>",expiration:"Option<BlockNumber>"},Ownership:{owner:"AccountId",fraction:"u128"},ReFungibleItemType:{Collection:"u64",Owner:"Vec<Ownership<AccountId>>",Data:"Vec<u8>",item_hash:"H160"},CollectionType:{Owner:"AccountId",Mode:"CollectionMode",Access:"u8",DecimalPoints:"u32",Name:"Vec<u16>",Description:"Vec<u16>",TokenPrefix:"Vec<u8>",CustomDataSize:"u32",OffchainSchema:"Vec<u8>",Sponsor:"AccountId",UnconfirmedSponsor:"AccountId"},Auction:{id:"u64",collection_id:"u64",item_id:"u64",currency_id:"CurrencyId",value:"u64",owner:"AccountId",start_price:"u64",increment:"u64",current_price:"u64",start_time:"BlockNumber",end_time:"BlockNumber"},BidHistory:{auction_id:"u64",currency_id:"CurrencyId",bidder:"AccountId",bid_price:"u64",bid_time:"BlockNumber"},Pool:{id:"Id",account:"AccountId",acc_rewards_per_share:"Balance",last_reward_block:"BlockNumber",asset_id:"Id",total_balance:"Balance"},Staker:{amount:"Balance",reward:"Balance",debt:"Balance"},Limits:{max_tx_value:"u128",day_max_limit:"u128",day_max_limit_for_one_address:"u128",max_pending_tx_limit:"u128",min_tx_value:"u128"},Royalty:{owner:"AccountId",rate:"u64",expired_at:"BlockNumber"},NftCard:{group_id:"u64",collection_id:"u64",item_id:"u64",value:"u64",remaind_value:"u64",draw_start:"u64",draw_end:"u64"},BlindboxItem:{id:"u64",owner:"AccountId",card_group:"Vec<u64>",total_count:"u64",remaind_count:"u64",currency_id:"CurrencyId",price:"u64",start_time:"BlockNumber",end_time:"BlockNumber",has_ended:"bool"}}}]},unique:{rpc:{appPromotion:{totalStaked:{description:"Returns the total amount of staked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},totalStakedPerBlock:{description:"Returns the total amount of staked tokens per block when staked",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"},pendingUnstake:{description:"Returns the total amount of unstaked tokens",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},pendingUnstakePerBlock:{description:"Returns the total amount of unstaked tokens per block",params:[{name:"staker",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<(u32, u128)>"}},unique:{accountTokens:{description:"Get tokens owned by an account in a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},collectionTokens:{description:"Get tokens contained within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u32>"},tokenExists:{description:"Check if the token exists",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},tokenOwner:{description:"Get the token owner",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},topmostTokenOwner:{description:"Get the topmost token owner in the hierarchy of a possibly nested token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenOwners:{description:"Returns 10 tokens owners in no particular order",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},tokenChildren:{description:"Get tokens nested directly into the token",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsTokenChild>"},collectionProperties:{description:"Get collection properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},tokenProperties:{description:"Get token properties, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsProperty>"},propertyPermissions:{description:"Get property permissions, optionally limited to the provided keys",params:[{name:"collection",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<UpDataStructsPropertyKeyPermission>"},constMetadata:{description:"Get token constant metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},variableMetadata:{description:"Get token variable metadata",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<u8>"},tokenData:{description:"Get token data, including properties, optionally limited to the provided keys, and total pieces for an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"propertyKeys",type:"Option<Vec<String>>",isOptional:!0},{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsTokenData"},totalSupply:{description:"Get the amount of distinctive tokens present in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},accountBalance:{description:"Get the amount of any user tokens owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},balance:{description:"Get the amount of a specific token owned by an account",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},allowance:{description:"Get the amount of currently possible sponsored transactions on a token for the fee to be taken off a sponsor",params:[{name:"collection",type:"u32"},{name:"sender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"spender",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u128"},adminlist:{description:"Get the list of admin accounts of a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowlist:{description:"Get the list of accounts allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Vec<PalletEvmAccountBasicCrossAccountIdRepr>"},allowed:{description:"Check if a user is allowed to operate within a collection",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"bool"},lastTokenId:{description:"Get the last token ID created in a collection",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"u32"},collectionById:{description:"Get a collection by the specified ID",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsRpcCollection>"},collectionStats:{description:"Get chain stats about collections",params:[{name:"at",type:"Hash",isOptional:!0}],type:"UpDataStructsCollectionStats"},nextSponsored:{description:"Get the number of blocks until sponsoring a transaction is available",params:[{name:"collection",type:"u32"},{name:"account",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u64>"},effectiveCollectionLimits:{description:"Get effective collection limits",params:[{name:"collection",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<UpDataStructsCollectionLimits>"},totalPieces:{description:"Get the total amount of pieces of an RFT",params:[{name:"collection",type:"u32"},{name:"tokenId",type:"u32"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<u128>"},allowanceForAll:{description:"Tells whether the given `owner` approves the `operator`.",params:[{name:"collection",type:"u32"},{name:"owner",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"operator",type:"PalletEvmAccountBasicCrossAccountIdRepr"},{name:"at",type:"Hash",isOptional:!0}],type:"Option<bool>"}}}},"unit-node":{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId",RefCount:"u8"}}]},"unit-parachain":{types:[{minmax:[0,null],types:{Address:"AccountId",LookupSource:"AccountId",RefCount:"u8"}}]},"unitnetwork-node":{types:[{minmax:[0,null],types:{}}]},"unitnetwork-parachain":{types:[{minmax:[0,null],types:{}}]},unorthodox:{types:[{minmax:[0,null],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",LookupSource:"MultiAddress",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},XCurrencyId:{chain_id:"ChainId",currency_id:"Bytes"},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{Token:"TokenSymbol"}},TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC","SDN","PLM"]},AmountOf:"Amount",Amount:"i128",DataVersion:"u64",RequestIdentifier:"u64",SpecIndex:"Vec<u8>",CDP:{liquidation_fee:"Balance",max_collateraization_rate:"U256",stability_fee:"Balance"},SocketIndex:"i32",Currency:"Balances",BridgeChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"enum"},Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},TokenId:"U256"}}]},vanilla:{rpc:{oracle:{getValue:{description:"Retrieves the oracle value for a given key.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"key",type:"OracleKey"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Option<TimestampedValue>",isSubscription:!1,jsonrpc:"oracle_getValue",method:"getValue",section:"oracle"},getAllValues:{description:"Retrieves all oracle values.",params:[{name:"providerId",type:"RpcDataProviderId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"Vec<(OracleKey, Option<TimestampedValue>)>",isSubscription:!1,jsonrpc:"oracle_getAllValues",method:"getAllValues",section:"oracle"}},tokens:{queryExistentialDeposit:{description:"Query Existential Deposit for a given currency.",params:[{name:"currencyId",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"NumberOrHex",isSubscription:!1,jsonrpc:"tokens_queryExistentialDeposit",method:"queryExistentialDeposit",section:"tokens"}},loans:{getCollateralLiquidity:{description:"Retrieves collateral liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getCollateralLiquidity",method:"getCollateralLiquidity",section:"loans"},getLiquidationThresholdLiquidity:{description:"Retrieves liquidation threshold liquidity for the given user.",params:[{name:"account",type:"AccountId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Liquidity, Shortfall, Liquidity, Shortfall)",isSubscription:!1,jsonrpc:"loans_getLiquidationThresholdLiquidity",method:"getLiquidationThresholdLiquidity",section:"loans"},getMarketStatus:{description:"Retrieves market status data for a given asset id.",params:[{name:"asset_id",type:"CurrencyId"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Rate, Rate, Rate, Ratio, Balance, Balance, FixedU128)",isSubscription:!1,jsonrpc:"loans_getMarketStatus",method:"getMarketStatus",section:"loans"}},router:{getBestRoute:{description:"Returns the route that results in the largest amount out for amount in",params:[{name:"amount",type:"Balance"},{name:"token_in",type:"CurrencyId"},{name:"token_out",type:"CurrencyId"},{name:"reversed",type:"bool"},{name:"at",type:"BlockHash",isHistoric:!0,isOptional:!0}],type:"(Vec<CurrencyId>, FixedU128)",isSubscription:!1,jsonrpc:"router_getBestRoute",method:"getBestRoute",section:"router"}}},instances:{council:["generalCouncil"]},types:[{minmax:[0,null],types:{CallOf:"Call",DispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},ScheduleTaskIndex:"u32",DelayedOrigin:{delay:"BlockNumber",origin:"PalletsOrigin"},AuthorityOrigin:"DelayedOrigin",StorageValue:"Vec<u8>",GraduallyUpdate:{key:"StorageKey",targetValue:"StorageValue",perBlock:"StorageValue"},StorageKeyBytes:"Vec<u8>",StorageValueBytes:"Vec<u8>",RpcDataProviderId:"Text",DataProviderId:"u8",TimestampedValue:{value:"OracleValue",timestamp:"Moment"},TimestampedValueOf:"TimestampedValue",OrderedSet:"Vec<AccountId>",OrmlAccountData:{free:"Balance",reserved:"Balance",frozen:"Balance"},OrmlBalanceLock:{amount:"Balance",id:"LockIdentifier"},AuctionInfo:{bid:"Option<(AccountId, Balance)>",start:"BlockNumber",end:"Option<BlockNumber>"},DelayedDispatchTime:{_enum:{At:"BlockNumber",After:"BlockNumber"}},DispatchId:"u32",Price:"FixedU128",OrmlVestingSchedule:{start:"BlockNumber",period:"BlockNumber",periodCount:"u32",perPeriod:"Compact<Balance>"},VestingScheduleOf:"OrmlVestingSchedule",OrmlCurrencyId:"u8",PoolInfo:{isActive:"bool",totalDeposited:"Balance",unlockHeight:"BlockNumber",coolDownDuration:"BlockNumber",rewardDuration:"BlockNumber",periodFinish:"BlockNumber",lastUpdateBlock:"BlockNumber",rewardRate:"Balance",rewardPerShareStored:"Balance"},CompactBalance:"Compact<Balance>",PoolInfoV0:{totalShares:"Compact<Share>",totalRewards:"CompactBalance",totalWithdrawnRewards:"CompactBalance"},Share:"u128",OracleValue:"Price",Deposits:{voucherBalance:"Balance",isCollateral:"bool"},BorrowSnapshot:{principal:"Balance",borrowIndex:"u128"},EarnedSnapshot:{totalEarnedPrior:"Balance",exchangeRatePrior:"u128"},JumpModel:{baseRate:"Rate",jumpRate:"Rate",fullRate:"Rate",jumpUtilization:"Ratio"},CurveModel:{baseRate:"Rate"},InterestRateModel:{_enum:{JumpModel:"JumpModel",CurveModel:"CurveModel"}},Market:{collateralFactor:"Ratio",liquidationThreshold:"Ratio",reserveFactor:"Ratio",closeFactor:"Ratio",liquidateIncentive:"Rate",liquidateIncentiveReservedFactor:"Ratio",rateModel:"InterestRateModel",state:"MarketState",supplyCap:"Balance",borrowCap:"Balance",ptokenId:"CurrencyId"},MarketState:{_enum:["Active","Pending","Supervision"]},RewardMarketState:{index:"Balance",block:"BlockNumber"},Liquidity:"FixedU128",Shortfall:"FixedU128",ReservableAmount:{total:"Balance",reserved:"Balance"},MatchingLedger:{totalStakeAmount:"ReservableAmount",totalUnstakeAmount:"ReservableAmount"},UnlockChunk:{value:"Balance",era:"EraIndex"},StakingLedger:{stash:"AccountId",total:"Balance",active:"Balance",unlocking:"Vec<UnlockChunk>",claimedRewards:"Vec<EraIndex>"},DerivativeIndex:"u16",Pool:{baseAmount:"Balance",quoteAmount:"Balance",baseAmountLast:"Balance",quoteAmountLast:"Balance",lpTokenId:"AssetId",blockTimestampLast:"BlockNumber",price0CumulativeLast:"Balance",price1CumulativeLast:"Balance"},Amount:"i128",AmountOf:"Amount",Rate:"FixedU128",Ratio:"Permill",Timestamp:"u64",PriceDetail:"(Price, Timestamp)",CurrencyId:"AssetId",CurrencyIdOf:"CurrencyId",Currency:"CurrencyId",AssetIdOf:"AssetId",OracleKey:"AssetId",BoundedBalance:"BoundedVec<(Balance, BlockNumber), u32>",UserPosition:{depositBalance:"Balance",lockBalanceItems:"BoundedBalance",rewardAmount:"Balance",rewardPerSharePaid:"Balance"},Route:"Vec<(AssetId, AssetId)>",VaultPhase:{_enum:["Pending","Contributing","Closed","Failed","Succeeded","Expired"]},ContributionStrategy:{_enum:["XCM","XCMPROXY"]},ChildStorageKind:{_enum:["Pending","Flying","Contributed"]},TrieIndex:"u32",LeasePeriod:"BlockNumber",Vault:{ctoken:"AssetId",phase:"VaultPhase",contributed:"Balance",pending:"Balance",flying:"Balance",contributionStrategy:"ContributionStrategy",cap:"Balance",endBlock:"BlockNumber",trieIndex:"TrieIndex",leaseStart:"LeasePeriod",leaseEnd:"LeasePeriod"},XcmWeightFeeMisc:{weight:"Weight",fee:"Balance"},XcmCall:{_enum:["Bond","BondExtra","Unbond","Rebond","WithdrawUnbonded","Nominate","Contribute","Withdraw","AddMemo"]},BridgeToken:{id:"CurrencyId",external:"bool",fee:"Balance"},ProposalStatus:{_enum:["Initiated","Approved","Rejected"]},Address:"MultiAddress",LookupSource:"MultiAddress",TAssetBalance:"u128"}}],alias:{tokens:{AccountData:"OrmlAccountData",BalanceLock:"OrmlBalanceLock"}}},vara:{types:[{minmax:[0,null],types:{AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",LookupSource:"MultiAddress",Account:{nonce:"U256",balance:"U256"},Transaction:{nonce:"U256",action:"String",gas_price:"u64",gas_limit:"u64",value:"U256",input:"Vec<u8>",signature:"Signature"},Signature:{v:"u64",r:"H256",s:"H256"},XCurrencyId:{chain_id:"ChainId",currency_id:"Bytes"},CurrencyIdOf:"CurrencyId",CurrencyId:{_enum:{Token:"TokenSymbol"}},TokenSymbol:{_enum:["ACA","AUSD","DOT","XBTC","LDOT","RENBTC","SDN","PLM"]},AmountOf:"Amount",Amount:"i128",DataVersion:"u64",RequestIdentifier:"u64",SpecIndex:"Vec<u8>",CDP:{liquidation_fee:"Balance",max_collateraization_rate:"U256",stability_fee:"Balance"},SocketIndex:"i32",Currency:"Balances",BridgeChainId:"u8",ResourceId:"[u8; 32]",DepositNonce:"u64",ProposalVotes:{votes_for:"Vec<AccountId>",votes_against:"Vec<AccountId>",status:"enum"},Erc721Token:{id:"TokenId",metadata:"Vec<u8>"},TokenId:"U256"}}]},vodka:{types:[{minmax:[0,null],types:{NameHash:"H256"}}]},"web3games-node":{types:[{minmax:[0,null],types:{Address:"MultiAddress",LookupSource:"MultiAddress",TokenId:"u64",InstanceId:"u64",ExchangeId:"u32",TokenSymbol:{_enum:{W3G:0,DOT:1,ACA:2,AUSD:3}},CurrencyId:{_enum:{Token:"TokenSymbol"}},CurrencyIdOf:"CurrencyId",CollectionId:"u64",AssetId:"64"}}]},"zcloak-network":{types:[{minmax:[0,null],types:{Class:"Vec<u8>",TaskStatus:{_enum:["JustCreated","Verifying","VerifiedTrue","VerifiedFalse"]},Status:{verifiers:"Vec<u32>",ayes:"u32",nays:"u32"},VerificationReceipt:{program_hash:"[u8; 32]",passed:"bool",submit_at:"BlockNumber",auth_index:"u32",validator_len:"u32"},TaskInfo:{proof_id:"Vec<u8>",inputs:"Vec<u128>",outputs:"Vec<u128>",program_hash:"[u8; 32]",is_task_finish:"Option<TaskStatus>",expiration:"Option<BlockNumber>"}}}]},zeitgeist:{alias:{tokens:{AccountData:"TokensAccountData"}},types:[{minmax:[0,null],types:{Address:"MultiAddress",Amount:"i128",AmountOf:"i128",Asset:{_enum:{CategoricalOutcome:"(MarketId, CategoryIndex)",ScalarOutcome:"(MarketId, ScalarPosition)",CombinatorialOutcome:null,PoolShare:"u128",Ztg:null}},AuthorId:"AccountId",SerdeWrapper:"Balance",BlockNumber:"u64",Bond:{owner:"AccountId",amount:"Balance"},CategoryIndex:"u16",Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",delegations:"Vec<Bond>",total:"Balance"},CollatorStatus:{_enum:{Active:null,Idle:null,Leaving:"RoundIndex"}},Currency:"Asset",CurrencyIdOf:"Asset",CurrencyId:"Asset",DelegatorStatus:{_enum:{Active:null,Leaving:"RoundIndex"}},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},Index:"u64",InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},Lookup:"MultiAddress",MarketIdOf:"u128",MaxRuntimeUsize:"u64",Moment:"u64",MultiHash:{_enum:{Sha3_384:"[u8; 50]"}},Nominator2:{delegations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"DelegatorStatus"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:null}},OrderedSet:"Vec<Bond>",OwnedValuesParams:{participatedBlocks:"BlockNumber",perpetualIncentives:"Balance",totalIncentives:"Balance",totalShares:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"},RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"},RoundIndex:"u32",RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"},ScalarPosition:{_enum:["Long","Short"]},VestingBlockNumber:"u32",TokensAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"}}}]}}},typesBundle=applyDerives(typesBundle$1);var assign=make_assign(),create$1=make_create(),trim$1=make_trim(),Global$5=typeof window<"u"?window:commonjsGlobal,util$6={assign,create:create$1,trim:trim$1,bind:bind$1,slice:slice$1,each:each$7,map,pluck:pluck$1,isList:isList$1,isFunction:isFunction$1,isObject:isObject$1,Global:Global$5};function make_assign(){return Object.assign?Object.assign:function(e,t,a,o){for(var i=1;i<arguments.length;i++)each$7(Object(arguments[i]),function(r,s){e[s]=r});return e}}function make_create(){if(Object.create)return function(e,t,a,o){var i=slice$1(arguments,1);return assign.apply(this,[Object.create(e)].concat(i))};{let n=function(){};return function(t,a,o,i){var r=slice$1(arguments,1);return n.prototype=t,assign.apply(this,[new n].concat(r))}}}function make_trim(){return String.prototype.trim?function(e){return String.prototype.trim.call(e)}:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}}function bind$1(n,e){return function(){return e.apply(n,Array.prototype.slice.call(arguments,0))}}function slice$1(n,e){return Array.prototype.slice.call(n,e||0)}function each$7(n,e){pluck$1(n,function(t,a){return e(t,a),!1})}function map(n,e){var t=isList$1(n)?[]:{};return pluck$1(n,function(a,o){return t[o]=e(a,o),!1}),t}function pluck$1(n,e){if(isList$1(n)){for(var t=0;t<n.length;t++)if(e(n[t],t))return n[t]}else for(var a in n)if(n.hasOwnProperty(a)&&e(n[a],a))return n[a]}function isList$1(n){return n!=null&&typeof n!="function"&&typeof n.length=="number"}function isFunction$1(n){return n&&{}.toString.call(n)==="[object Function]"}function isObject$1(n){return n&&{}.toString.call(n)==="[object Object]"}var util$5=util$6,slice=util$5.slice,pluck=util$5.pluck,each$6=util$5.each,bind=util$5.bind,create=util$5.create,isList=util$5.isList,isFunction=util$5.isFunction,isObject=util$5.isObject,storeEngine={createStore},storeAPI={version:"2.0.12",enabled:!1,get:function(n,e){var t=this.storage.read(this._namespacePrefix+n);return this._deserialize(t,e)},set:function(n,e){return e===void 0?this.remove(n):(this.storage.write(this._namespacePrefix+n,this._serialize(e)),e)},remove:function(n){this.storage.remove(this._namespacePrefix+n)},each:function(n){var e=this;this.storage.each(function(t,a){n.call(e,e._deserialize(t),(a||"").replace(e._namespaceRegexp,""))})},clearAll:function(){this.storage.clearAll()},hasNamespace:function(n){return this._namespacePrefix=="__storejs_"+n+"_"},createStore:function(){return createStore.apply(this,arguments)},addPlugin:function(n){this._addPlugin(n)},namespace:function(n){return createStore(this.storage,this.plugins,n)}};function _warn(){var n=typeof console>"u"?null:console;if(n){var e=n.warn?n.warn:n.log;e.apply(n,arguments)}}function createStore(n,e,t){t||(t=""),n&&!isList(n)&&(n=[n]),e&&!isList(e)&&(e=[e]);var a=t?"__storejs_"+t+"_":"",o=t?new RegExp("^"+a):null,i=/^[a-zA-Z0-9_\-]*$/;if(!i.test(t))throw new Error("store.js namespaces can only have alphanumerics + underscores and dashes");var r={_namespacePrefix:a,_namespaceRegexp:o,_testStorage:function(c){try{var d="__storejs__test__";c.write(d,d);var p=c.read(d)===d;return c.remove(d),p}catch{return!1}},_assignPluginFnProp:function(c,d){var p=this[d];this[d]=function(){var I=slice(arguments,0),_=this;function k(){if(p)return each$6(arguments,function(v,E){I[E]=v}),p.apply(_,I)}var P=[k].concat(I);return c.apply(_,P)}},_serialize:function(c){return JSON.stringify(c)},_deserialize:function(c,d){if(!c)return d;var p="";try{p=JSON.parse(c)}catch{p=c}return p!==void 0?p:d},_addStorage:function(c){this.enabled||this._testStorage(c)&&(this.storage=c,this.enabled=!0)},_addPlugin:function(c){var d=this;if(isList(c)){each$6(c,function(I){d._addPlugin(I)});return}var p=pluck(this.plugins,function(I){return c===I});if(!p){if(this.plugins.push(c),!isFunction(c))throw new Error("Plugins must be function values that return objects");var h=c.call(this);if(!isObject(h))throw new Error("Plugins must return an object of function properties");each$6(h,function(I,_){if(!isFunction(I))throw new Error("Bad plugin property: "+_+" from plugin "+c.name+". Plugins should only return functions.");d._assignPluginFnProp(I,_)})}},addStorage:function(c){_warn("store.addStorage(storage) is deprecated. Use createStore([storages])"),this._addStorage(c)}},s=create(r,storeAPI,{plugins:[]});return s.raw={},each$6(s,function(c,d){isFunction(c)&&(s.raw[d]=bind(s,c))}),each$6(n,function(c){s._addStorage(c)}),each$6(e,function(c){s._addPlugin(c)}),s}var util$4=util$6,Global$4=util$4.Global,localStorage_1={name:"localStorage",read:read$5,write:write$5,each:each$5,remove:remove$5,clearAll:clearAll$5};function localStorage(){return Global$4.localStorage}function read$5(n){return localStorage().getItem(n)}function write$5(n,e){return localStorage().setItem(n,e)}function each$5(n){for(var e=localStorage().length-1;e>=0;e--){var t=localStorage().key(e);n(read$5(t),t)}}function remove$5(n){return localStorage().removeItem(n)}function clearAll$5(){return localStorage().clear()}var util$3=util$6,Global$3=util$3.Global,oldFFGlobalStorage={name:"oldFF-globalStorage",read:read$4,write:write$4,each:each$4,remove:remove$4,clearAll:clearAll$4},globalStorage=Global$3.globalStorage;function read$4(n){return globalStorage[n]}function write$4(n,e){globalStorage[n]=e}function each$4(n){for(var e=globalStorage.length-1;e>=0;e--){var t=globalStorage.key(e);n(globalStorage[t],t)}}function remove$4(n){return globalStorage.removeItem(n)}function clearAll$4(){each$4(function(n,e){delete globalStorage[n]})}var util$2=util$6,Global$2=util$2.Global,oldIEUserDataStorage={name:"oldIE-userDataStorage",write:write$3,read:read$3,each:each$3,remove:remove$3,clearAll:clearAll$3},storageName="storejs",doc$1=Global$2.document,_withStorageEl=_makeIEStorageElFunction(),disable=(Global$2.navigator?Global$2.navigator.userAgent:"").match(/ (MSIE 8|MSIE 9|MSIE 10)\./);function write$3(n,e){if(!disable){var t=fixKey(n);_withStorageEl(function(a){a.setAttribute(t,e),a.save(storageName)})}}function read$3(n){if(!disable){var e=fixKey(n),t=null;return _withStorageEl(function(a){t=a.getAttribute(e)}),t}}function each$3(n){_withStorageEl(function(e){for(var t=e.XMLDocument.documentElement.attributes,a=t.length-1;a>=0;a--){var o=t[a];n(e.getAttribute(o.name),o.name)}})}function remove$3(n){var e=fixKey(n);_withStorageEl(function(t){t.removeAttribute(e),t.save(storageName)})}function clearAll$3(){_withStorageEl(function(n){var e=n.XMLDocument.documentElement.attributes;n.load(storageName);for(var t=e.length-1;t>=0;t--)n.removeAttribute(e[t].name);n.save(storageName)})}var forbiddenCharsRegex=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g");function fixKey(n){return n.replace(/^\d/,"___$&").replace(forbiddenCharsRegex,"___")}function _makeIEStorageElFunction(){if(!doc$1||!doc$1.documentElement||!doc$1.documentElement.addBehavior)return null;var n="script",e,t,a;try{t=new ActiveXObject("htmlfile"),t.open(),t.write("<"+n+">document.w=window</"+n+'><iframe src="/favicon.ico"></iframe>'),t.close(),e=t.w.frames[0].document,a=e.createElement("div")}catch{a=doc$1.createElement("div"),e=doc$1.body}return function(o){var i=[].slice.call(arguments,0);i.unshift(a),e.appendChild(a),a.addBehavior("#default#userData"),a.load(storageName),o.apply(this,i),e.removeChild(a)}}var util$1=util$6,Global$1=util$1.Global,trim=util$1.trim,cookieStorage={name:"cookieStorage",read:read$2,write:write$2,each:each$2,remove:remove$2,clearAll:clearAll$2},doc=Global$1.document;function read$2(n){if(!n||!_has(n))return null;var e="(?:^|.*;\\s*)"+escape(n).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*";return unescape(doc.cookie.replace(new RegExp(e),"$1"))}function each$2(n){for(var e=doc.cookie.split(/; ?/g),t=e.length-1;t>=0;t--)if(trim(e[t])){var a=e[t].split("="),o=unescape(a[0]),i=unescape(a[1]);n(i,o)}}function write$2(n,e){n&&(doc.cookie=escape(n)+"="+escape(e)+"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/")}function remove$2(n){!n||!_has(n)||(doc.cookie=escape(n)+"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/")}function clearAll$2(){each$2(function(n,e){remove$2(e)})}function _has(n){return new RegExp("(?:^|;\\s*)"+escape(n).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=").test(doc.cookie)}var util=util$6,Global=util.Global,sessionStorage_1={name:"sessionStorage",read:read$1,write:write$1,each:each$1,remove:remove$1,clearAll:clearAll$1};function sessionStorage(){return Global.sessionStorage}function read$1(n){return sessionStorage().getItem(n)}function write$1(n,e){return sessionStorage().setItem(n,e)}function each$1(n){for(var e=sessionStorage().length-1;e>=0;e--){var t=sessionStorage().key(e);n(read$1(t),t)}}function remove$1(n){return sessionStorage().removeItem(n)}function clearAll$1(){return sessionStorage().clear()}var memoryStorage_1={name:"memoryStorage",read,write,each,remove,clearAll},memoryStorage={};function read(n){return memoryStorage[n]}function write(n,e){memoryStorage[n]=e}function each(n){for(var e in memoryStorage)memoryStorage.hasOwnProperty(e)&&n(memoryStorage[e],e)}function remove(n){delete memoryStorage[n]}function clearAll(n){memoryStorage={}}var all$2=[localStorage_1,oldFFGlobalStorage,oldIEUserDataStorage,cookieStorage,sessionStorage_1,memoryStorage_1],json2$1={},hasRequiredJson2;function requireJson2(){return hasRequiredJson2||(hasRequiredJson2=1,typeof JSON!="object"&&(JSON={}),function(){var rx_one=/^[\],:{}\s]*$/,rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,rx_three=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,rx_four=/(?:^|:|,)(?:\s*\[)+/g,rx_escapable=/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,rx_dangerous=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;function f(n){return n<10?"0"+n:n}function this_value(){return this.valueOf()}typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},Boolean.prototype.toJSON=this_value,Number.prototype.toJSON=this_value,String.prototype.toJSON=this_value);var gap,indent,meta,rep;function quote(n){return rx_escapable.lastIndex=0,rx_escapable.test(n)?'"'+n.replace(rx_escapable,function(e){var t=meta[e];return typeof t=="string"?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+n+'"'}function str(n,e){var t,a,o,i,r=gap,s,c=e[n];switch(c&&typeof c=="object"&&typeof c.toJSON=="function"&&(c=c.toJSON(n)),typeof rep=="function"&&(c=rep.call(e,n,c)),typeof c){case"string":return quote(c);case"number":return isFinite(c)?String(c):"null";case"boolean":case"null":return String(c);case"object":if(!c)return"null";if(gap+=indent,s=[],Object.prototype.toString.apply(c)==="[object Array]"){for(i=c.length,t=0;t<i;t+=1)s[t]=str(t,c)||"null";return o=s.length===0?"[]":gap?`[
`+gap+s.join(`,
`+gap)+`
`+r+"]":"["+s.join(",")+"]",gap=r,o}if(rep&&typeof rep=="object")for(i=rep.length,t=0;t<i;t+=1)typeof rep[t]=="string"&&(a=rep[t],o=str(a,c),o&&s.push(quote(a)+(gap?": ":":")+o));else for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(o=str(a,c),o&&s.push(quote(a)+(gap?": ":":")+o));return o=s.length===0?"{}":gap?`{
`+gap+s.join(`,
`+gap)+`
`+r+"}":"{"+s.join(",")+"}",gap=r,o}}typeof JSON.stringify!="function"&&(meta={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},JSON.stringify=function(n,e,t){var a;if(gap="",indent="",typeof t=="number")for(a=0;a<t;a+=1)indent+=" ";else typeof t=="string"&&(indent=t);if(rep=e,e&&typeof e!="function"&&(typeof e!="object"||typeof e.length!="number"))throw new Error("JSON.stringify");return str("",{"":n})}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){var j;function walk(n,e){var t,a,o=n[e];if(o&&typeof o=="object")for(t in o)Object.prototype.hasOwnProperty.call(o,t)&&(a=walk(o,t),a!==void 0?o[t]=a:delete o[t]);return reviver.call(n,e,o)}if(text=String(text),rx_dangerous.lastIndex=0,rx_dangerous.test(text)&&(text=text.replace(rx_dangerous,function(n){return"\\u"+("0000"+n.charCodeAt(0).toString(16)).slice(-4)})),rx_one.test(text.replace(rx_two,"@").replace(rx_three,"]").replace(rx_four,"")))return j=eval("("+text+")"),typeof reviver=="function"?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}()),json2$1}var json2=json2Plugin;function json2Plugin(){return requireJson2(),{}}var engine=storeEngine,storages=all$2,plugins=[json2],store_legacy=engine.createStore(storages,plugins);const store=getDefaultExportFromCjs(store_legacy);class BrowserStore{all(e){store.each((t,a)=>{e(a,t)})}get(e,t){t(store.get(e))}remove(e,t){store.remove(e),t&&t()}set(e,t,a){store.set(e,t),a&&a()}}const packageInfo$2={name:"@polkadot/api",path:import.meta&&import.meta.url?new URL(import.meta.url).pathname.substring(0,new URL(import.meta.url).pathname.lastIndexOf("/")+1):"auto",type:"esm",version:"12.4.2"},PAIR_DIV=new Uint8Array([161,35,3,33,0]),PAIR_HDR=new Uint8Array([48,83,2,1,1,48,5,6,3,43,101,112,4,34,4,32]),PUB_LENGTH=32,SEC_LENGTH=64,SEED_LENGTH=32,SEED_OFFSET=PAIR_HDR.length;function decodePair(n,e,t){const a=Array.isArray(t)||t===void 0?t:[t],o=jsonDecryptData(e,n,a),i=o.subarray(0,PAIR_HDR.length);if(!u8aEq(i,PAIR_HDR))throw new Error("Invalid encoding header found in body");let r=o.subarray(SEED_OFFSET,SEED_OFFSET+SEC_LENGTH),s=SEED_OFFSET+SEC_LENGTH,c=o.subarray(s,s+PAIR_DIV.length);if(!u8aEq(c,PAIR_DIV)&&(s=SEED_OFFSET+SEED_LENGTH,r=o.subarray(SEED_OFFSET,s),c=o.subarray(s,s+PAIR_DIV.length),!u8aEq(c,PAIR_DIV)))throw new Error("Invalid encoding divider found in body");const d=s+PAIR_DIV.length;return{publicKey:o.subarray(d,d+PUB_LENGTH),secretKey:r}}function encodePair({publicKey:n,secretKey:e},t){if(!e)throw new Error("Expected a valid secretKey to be passed to encode");const a=u8aConcat(PAIR_HDR,e,PAIR_DIV,n);if(!t)return a;const{params:o,password:i,salt:r}=scryptEncode(t),{encrypted:s,nonce:c}=naclEncrypt(a,i.subarray(0,32));return u8aConcat(scryptToU8a(r,o),c,s)}function pairToJson(n,{address:e,meta:t},a,o){return objectSpread(jsonEncryptFormat(a,["pkcs8",n],o),{address:e,meta:t})}const SIG_TYPE_NONE=new Uint8Array,TYPE_FROM_SEED={ecdsa:secp256k1PairFromSeed,ed25519:ed25519PairFromSeed,ethereum:secp256k1PairFromSeed,sr25519:sr25519PairFromSeed},TYPE_PREFIX={ecdsa:new Uint8Array([2]),ed25519:new Uint8Array([0]),ethereum:new Uint8Array([2]),sr25519:new Uint8Array([1])},TYPE_SIGNATURE={ecdsa:(n,e)=>secp256k1Sign(n,e,"blake2"),ed25519:ed25519Sign,ethereum:(n,e)=>secp256k1Sign(n,e,"keccak"),sr25519:sr25519Sign},TYPE_ADDRESS={ecdsa:n=>n.length>32?blake2AsU8a(n):n,ed25519:n=>n,ethereum:n=>n.length===20?n:keccakAsU8a(secp256k1Expand(n)),sr25519:n=>n};function isLocked(n){return!n||u8aEmpty(n)}function vrfHash(n,e,t){return blake2AsU8a(u8aConcat(e||"",t||"",n))}function createPair({toSS58:n,type:e},{publicKey:t,secretKey:a},o={},i=null,r){const s=(p,h)=>{const I=decodePair(p,h||i,r);if(I.secretKey.length===64)t=I.publicKey,a=I.secretKey;else{const _=TYPE_FROM_SEED[e](I.secretKey);t=_.publicKey,a=_.secretKey}},c=p=>(isLocked(a)&&i&&s(p,i),i=encodePair({publicKey:t,secretKey:a},p),r=void 0,i),d=()=>{const p=TYPE_ADDRESS[e](t);return e==="ethereum"?ethereumEncode(p):n(p)};return{get address(){return d()},get addressRaw(){const p=TYPE_ADDRESS[e](t);return e==="ethereum"?p.slice(-20):p},get isLocked(){return isLocked(a)},get meta(){return o},get publicKey(){return t},get type(){return e},decodePkcs8:s,derive:(p,h)=>{if(e==="ethereum")throw new Error("Unable to derive on this keypair");if(isLocked(a))throw new Error("Cannot derive on a locked keypair");const{path:I}=keyExtractPath(p),_=keyFromPath({publicKey:t,secretKey:a},I,e);return createPair({toSS58:n,type:e},_,h,null)},encodePkcs8:p=>c(p),lock:()=>{a=new Uint8Array},setMeta:p=>{o=objectSpread({},o,p)},sign:(p,h={})=>{if(isLocked(a))throw new Error("Cannot sign with a locked key pair");return u8aConcat(h.withType?TYPE_PREFIX[e]:SIG_TYPE_NONE,TYPE_SIGNATURE[e](u8aToU8a(p),{publicKey:t,secretKey:a}))},toJson:p=>{const h=["ecdsa","ethereum"].includes(e)?t.length===20?u8aToHex(t):u8aToHex(secp256k1Compress(t)):d();return pairToJson(e,{address:h,meta:o},c(p),!!p)},unlock:p=>s(p),verify:(p,h,I)=>signatureVerify(p,h,TYPE_ADDRESS[e](u8aToU8a(I))).isValid,vrfSign:(p,h,I)=>{if(isLocked(a))throw new Error("Cannot sign with a locked key pair");if(e==="sr25519")return sr25519VrfSign(p,{secretKey:a},h,I);const _=TYPE_SIGNATURE[e](u8aToU8a(p),{publicKey:t,secretKey:a});return u8aConcat(vrfHash(_,h,I),_)},vrfVerify:(p,h,I,_,k)=>e==="sr25519"?sr25519VrfVerify(p,h,t,_,k):signatureVerify(p,u8aConcat(TYPE_PREFIX[e],h.subarray(32)),TYPE_ADDRESS[e](u8aToU8a(I))).isValid&&u8aEq(h.subarray(0,32),vrfHash(h.subarray(32),_,k))}}const DEV_PHRASE="bottom drive obey lake curtain smoke basket hold race lonely fit walk";class Pairs{constructor(){A(this,"__internal__map",{})}add(e){return this.__internal__map[decodeAddress(e.address).toString()]=e,e}all(){return Object.values(this.__internal__map)}get(e){const t=this.__internal__map[decodeAddress(e).toString()];if(!t)throw new Error(`Unable to retrieve keypair '${isU8a(e)||isHex(e)?u8aToHex(u8aToU8a(e)):e}'`);return t}remove(e){delete this.__internal__map[decodeAddress(e).toString()]}}const PairFromSeed={ecdsa:n=>secp256k1PairFromSeed(n),ed25519:n=>ed25519PairFromSeed(n),ethereum:n=>secp256k1PairFromSeed(n),sr25519:n=>sr25519PairFromSeed(n)};function pairToPublic({publicKey:n}){return n}let Keyring$1=class{constructor(e={}){A(this,"__internal__pairs");A(this,"__internal__type");A(this,"__internal__ss58");A(this,"decodeAddress",decodeAddress);A(this,"encodeAddress",(e,t)=>this.type==="ethereum"?ethereumEncode(e):encodeAddress(e,t??this.__internal__ss58));if(e.type=e.type||"ed25519",!["ecdsa","ethereum","ed25519","sr25519"].includes(e.type||"undefined"))throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${e.type||"unknown"}`);this.__internal__pairs=new Pairs,this.__internal__ss58=e.ss58Format,this.__internal__type=e.type}get pairs(){return this.getPairs()}get publicKeys(){return this.getPublicKeys()}get type(){return this.__internal__type}addPair(e){return this.__internal__pairs.add(e)}addFromAddress(e,t={},a=null,o=this.type,i,r){const s=this.decodeAddress(e,i);return this.addPair(createPair({toSS58:this.encodeAddress,type:o},{publicKey:s,secretKey:new Uint8Array},t,a,r))}addFromJson(e,t){return this.addPair(this.createFromJson(e,t))}addFromMnemonic(e,t={},a=this.type){return this.addFromUri(e,t,a)}addFromPair(e,t={},a=this.type){return this.addPair(this.createFromPair(e,t,a))}addFromSeed(e,t={},a=this.type){return this.addPair(createPair({toSS58:this.encodeAddress,type:a},PairFromSeed[a](e),t,null))}addFromUri(e,t={},a=this.type){return this.addPair(this.createFromUri(e,t,a))}createFromJson({address:e,encoded:t,encoding:{content:a,type:o,version:i},meta:r},s){if(i==="3"&&a[0]!=="pkcs8")throw new Error(`Unable to decode non-pkcs8 type, [${a.join(",")}] found}`);const c=i==="0"||!Array.isArray(a)?this.type:a[1],d=Array.isArray(o)?o:[o];if(!["ed25519","sr25519","ecdsa","ethereum"].includes(c))throw new Error(`Unknown crypto type ${c}`);const p=isHex(e)?hexToU8a(e):this.decodeAddress(e,s),h=isHex(t)?hexToU8a(t):base64Decode(t);return createPair({toSS58:this.encodeAddress,type:c},{publicKey:p,secretKey:new Uint8Array},r,h,d)}createFromPair(e,t={},a=this.type){return createPair({toSS58:this.encodeAddress,type:a},e,t,null)}createFromUri(e,t={},a=this.type){const o=e.startsWith("//")?`${DEV_PHRASE}${e}`:e,{derivePath:i,password:r,path:s,phrase:c}=keyExtractSuri(o);let d;const p=isHex(c,256);if(p)d=hexToU8a(c);else{const I=c.split(" ");if([12,15,18,21,24].includes(I.length))d=a==="ethereum"?mnemonicToLegacySeed(c,"",!1,64):mnemonicToMiniSecret(c,r);else{if(c.length>32)throw new Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");d=stringToU8a(c.padEnd(32))}}const h=a==="ethereum"?p?PairFromSeed[a](d):hdEthereum(d,i.substring(1)):keyFromPath(PairFromSeed[a](d),s,a);return createPair({toSS58:this.encodeAddress,type:a},h,t,null)}getPair(e){return this.__internal__pairs.get(e)}getPairs(){return this.__internal__pairs.all()}getPublicKeys(){return this.__internal__pairs.all().map(pairToPublic)}removePair(e){this.__internal__pairs.remove(e)}setSS58Format(e){this.__internal__ss58=e}toJson(e,t){return this.__internal__pairs.get(e).toJson(t)}};const PAIRSSR25519=[{p:"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d",s:"0x98319d4ff8a9508c4bb0cf0b5a78d760a0b2082c02775e6e82370816fedfff48925a225d97aa00682d6a59b95b18780c10d7032336e88f3442b42361f4a66011",seed:"Alice",type:"sr25519"},{p:"0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f",s:"0xe8da6c9d810e020f5e3c7f5af2dea314cbeaa0d72bc6421e92c0808a0c584a6046ab28e97c3ffc77fe12b5a4d37e8cd4afbfebbf2391ffc7cb07c0f38c023efd",seed:"Alice//stash",type:"sr25519"},{p:"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48",s:"0x081ff694633e255136bdb456c20a5fc8fed21f8b964c11bb17ff534ce80ebd5941ae88f85d0c1bfc37be41c904e1dfc01de8c8067b0d6d5df25dd1ac0894a325",seed:"Bob",type:"sr25519"},{p:"0xfe65717dad0447d715f660a0a58411de509b42e6efb8375f562f58a554d5860e",s:"0xc006507cdfc267a21532394c49ca9b754ca71de21e15a1cdf807c7ceab6d0b6c3ed408d9d35311540dcd54931933e67cf1ea10d46f75408f82b789d9bd212fde",seed:"Bob//stash",type:"sr25519"},{p:"0x90b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22",s:"0xa8f2d83016052e5d6d77b2f6fd5d59418922a09024cda701b3c34369ec43a7668faf12ff39cd4e5d92bb773972f41a7a5279ebc2ed92264bed8f47d344f8f18c",seed:"Charlie",type:"sr25519"},{p:"0x306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc20",s:"0x20e05482ca4677e0edbc58ae9a3a59f6ed3b1a9484ba17e64d6fe8688b2b7b5d108c4487b9323b98b11fe36cb301b084e920f7b7895536809a6d62a451b25568",seed:"Dave",type:"sr25519"},{p:"0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e",s:"0x683576abfd5dc35273e4264c23095a1bf21c14517bece57c7f0cc5c0ed4ce06a3dbf386b7828f348abe15d76973a72009e6ef86a5c91db2990cb36bb657c6587",seed:"Eve",type:"sr25519"},{p:"0x1cbd2d43530a44705ad088af313e18f80b53ef16b36177cd4b77b846f2a5f07c",s:"0xb835c20f450079cf4f513900ae9faf8df06ad86c681884122c752a4b2bf74d4303e4f21bc6cc62bb4eeed5a9cce642c25e2d2ac1464093b50f6196d78e3a7426",seed:"Ferdie",type:"sr25519"}],PAIRSETHEREUM=[{name:"Alith",p:"0x02509540919faacf9ab52146c9aa40db68172d83777250b28e4679176e49ccdd9f",s:"0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133",type:"ethereum"},{name:"Baltathar",p:"0x033bc19e36ff1673910575b6727a974a9abd80c9a875d41ab3e2648dbfb9e4b518",s:"0x8075991ce870b93a8870eca0c0f91913d12f47948ca0fd25b49c6fa7cdbeee8b",type:"ethereum"},{name:"Charleth",p:"0x0234637bdc0e89b5d46543bcbf8edff329d2702bc995e27e9af4b1ba009a3c2a5e",s:"0x0b6e18cafb6ed99687ec547bd28139cafdd2bffe70e6b688025de6b445aa5c5b",type:"ethereum"},{name:"Dorothy",p:"0x02a00d60b2b408c2a14c5d70cdd2c205db8985ef737a7e55ad20ea32cc9e7c417c",s:"0x39539ab1876910bbf3a223d84a29e28f1cb4e2e456503e7e91ed39b2e7223d68",type:"ethereum"},{name:"Ethan",p:"0x025cdc005b752651cd3f728fb9192182acb3a9c89e19072cbd5b03f3ee1f1b3ffa",s:"0x7dce9bc8babb68fec1409be38c8e1a52650206a7ed90ff956ae8a6d15eeaaef4",type:"ethereum"},{name:"Faith",p:"0x037964b6c9d546da4646ada28a99e34acaa1d14e7aba861a9055f9bd200c8abf74",s:"0xb9d2ea9a615f3165812e8d44de0d24da9bbd164b65c4f0573e1ce2c8dbd9c8df",type:"ethereum"}];function createMeta(n,e){if(!n&&!e)throw new Error("Testing pair should have either a name or a seed");return{isTesting:!0,name:n||(e==null?void 0:e.replace("//","_").toLowerCase())}}function createTestKeyring(n={},e=!0){const t=new Keyring$1(n),a=n.type==="ethereum"?PAIRSETHEREUM:PAIRSSR25519;for(const{name:o,p:i,s:r,seed:s,type:c}of a){const d=createMeta(o,s),p=!e&&!o&&s?t.addFromUri(s,d,n.type):t.addPair(createPair({toSS58:t.encodeAddress,type:c},{publicKey:hexToU8a(i),secretKey:hexToU8a(r)},d));p.lock=()=>{}}return t}const UNKNOWN=-99999;function extend(n,e,t){Object.defineProperty(n,e,{configurable:!0,enumerable:!1,value:t})}class RpcError extends Error{constructor(t="",a=UNKNOWN,o){super();A(this,"code");A(this,"data");A(this,"message");A(this,"name");A(this,"stack");if(extend(this,"message",String(t)),extend(this,"name",this.constructor.name),extend(this,"data",o),extend(this,"code",a),isFunction$2(Error.captureStackTrace))Error.captureStackTrace(this,this.constructor);else{const{stack:i}=new Error(t);i&&extend(this,"stack",i)}}}A(RpcError,"CODES",{ASSERT:-90009,INVALID_JSONRPC:-99998,METHOD_NOT_FOUND:-32601,UNKNOWN});function formatErrorData(n){if(isUndefined(n))return"";const e=`: ${isString(n)?n.replace(/Error\("/g,"").replace(/\("/g,"(").replace(/"\)/g,")").replace(/\(/g,", ").replace(/\)/g,""):stringify(n)}`;return e.length<=256?e:`${e.substring(0,255)}…`}function checkError(n){if(n){const{code:e,data:t,message:a}=n;throw new RpcError(`${e}: ${a}${formatErrorData(t)}`,e,t)}}class RpcCoder{constructor(){A(this,"__internal__id",0)}decodeResponse(e){if(!e||e.jsonrpc!=="2.0")throw new Error("Invalid jsonrpc field in decoded object");const t=!isUndefined(e.params)&&!isUndefined(e.method);if(!isNumber(e.id)&&(!t||!isNumber(e.params.subscription)&&!isString(e.params.subscription)))throw new Error("Invalid id field in decoded object");if(checkError(e.error),e.result===void 0&&!t)throw new Error("No result found in jsonrpc response");return t?(checkError(e.params.error),e.params.result):e.result}encodeJson(e,t){const[a,o]=this.encodeObject(e,t);return[a,stringify(o)]}encodeObject(e,t){const a=++this.__internal__id;return[a,{id:a,jsonrpc:"2.0",method:e,params:t}]}}const HTTP_URL="http://127.0.0.1:9933",WS_URL="ws://127.0.0.1:9944",defaults={HTTP_URL,WS_URL},DEFAULT_CAPACITY=128;class LRUNode{constructor(e){A(this,"key");A(this,"next");A(this,"prev");this.key=e,this.next=this.prev=this}}class LRUCache{constructor(e=DEFAULT_CAPACITY){A(this,"capacity");A(this,"__internal__data",new Map);A(this,"__internal__refs",new Map);A(this,"__internal__length",0);A(this,"__internal__head");A(this,"__internal__tail");this.capacity=e,this.__internal__head=this.__internal__tail=new LRUNode("<empty>")}get length(){return this.__internal__length}get lengthData(){return this.__internal__data.size}get lengthRefs(){return this.__internal__refs.size}entries(){const e=this.keys(),t=e.length,a=new Array(t);for(let o=0;o<t;o++){const i=e[o];a[o]=[i,this.__internal__data.get(i)]}return a}keys(){const e=[];if(this.__internal__length){let t=this.__internal__head;for(;t!==this.__internal__tail;)e.push(t.key),t=t.next;e.push(t.key)}return e}get(e){const t=this.__internal__data.get(e);return t?(this.__internal__toHead(e),t):null}set(e,t){if(this.__internal__data.has(e))this.__internal__toHead(e);else{const a=new LRUNode(e);this.__internal__refs.set(a.key,a),this.length===0?this.__internal__head=this.__internal__tail=a:(this.__internal__head.prev=a,a.next=this.__internal__head,this.__internal__head=a),this.__internal__length===this.capacity?(this.__internal__data.delete(this.__internal__tail.key),this.__internal__refs.delete(this.__internal__tail.key),this.__internal__tail=this.__internal__tail.prev,this.__internal__tail.next=this.__internal__head):this.__internal__length+=1}this.__internal__data.set(e,t)}__internal__toHead(e){const t=this.__internal__refs.get(e);t&&t!==this.__internal__head&&(t.prev.next=t.next,t.next.prev=t.prev,t.next=this.__internal__head,this.__internal__head.prev=t,this.__internal__head=t)}}var eventemitter3={exports:{}};(function(n){var e=Object.prototype.hasOwnProperty,t="~";function a(){}Object.create&&(a.prototype=Object.create(null),new a().__proto__||(t=!1));function o(c,d,p){this.fn=c,this.context=d,this.once=p||!1}function i(c,d,p,h,I){if(typeof p!="function")throw new TypeError("The listener must be a function");var _=new o(p,h||c,I),k=t?t+d:d;return c._events[k]?c._events[k].fn?c._events[k]=[c._events[k],_]:c._events[k].push(_):(c._events[k]=_,c._eventsCount++),c}function r(c,d){--c._eventsCount===0?c._events=new a:delete c._events[d]}function s(){this._events=new a,this._eventsCount=0}s.prototype.eventNames=function(){var d=[],p,h;if(this._eventsCount===0)return d;for(h in p=this._events)e.call(p,h)&&d.push(t?h.slice(1):h);return Object.getOwnPropertySymbols?d.concat(Object.getOwnPropertySymbols(p)):d},s.prototype.listeners=function(d){var p=t?t+d:d,h=this._events[p];if(!h)return[];if(h.fn)return[h.fn];for(var I=0,_=h.length,k=new Array(_);I<_;I++)k[I]=h[I].fn;return k},s.prototype.listenerCount=function(d){var p=t?t+d:d,h=this._events[p];return h?h.fn?1:h.length:0},s.prototype.emit=function(d,p,h,I,_,k){var P=t?t+d:d;if(!this._events[P])return!1;var v=this._events[P],E=arguments.length,M,R;if(v.fn){switch(v.once&&this.removeListener(d,v.fn,void 0,!0),E){case 1:return v.fn.call(v.context),!0;case 2:return v.fn.call(v.context,p),!0;case 3:return v.fn.call(v.context,p,h),!0;case 4:return v.fn.call(v.context,p,h,I),!0;case 5:return v.fn.call(v.context,p,h,I,_),!0;case 6:return v.fn.call(v.context,p,h,I,_,k),!0}for(R=1,M=new Array(E-1);R<E;R++)M[R-1]=arguments[R];v.fn.apply(v.context,M)}else{var H=v.length,K;for(R=0;R<H;R++)switch(v[R].once&&this.removeListener(d,v[R].fn,void 0,!0),E){case 1:v[R].fn.call(v[R].context);break;case 2:v[R].fn.call(v[R].context,p);break;case 3:v[R].fn.call(v[R].context,p,h);break;case 4:v[R].fn.call(v[R].context,p,h,I);break;default:if(!M)for(K=1,M=new Array(E-1);K<E;K++)M[K-1]=arguments[K];v[R].fn.apply(v[R].context,M)}}return!0},s.prototype.on=function(d,p,h){return i(this,d,p,h,!1)},s.prototype.once=function(d,p,h){return i(this,d,p,h,!0)},s.prototype.removeListener=function(d,p,h,I){var _=t?t+d:d;if(!this._events[_])return this;if(!p)return r(this,_),this;var k=this._events[_];if(k.fn)k.fn===p&&(!I||k.once)&&(!h||k.context===h)&&r(this,_);else{for(var P=0,v=[],E=k.length;P<E;P++)(k[P].fn!==p||I&&!k[P].once||h&&k[P].context!==h)&&v.push(k[P]);v.length?this._events[_]=v.length===1?v[0]:v:r(this,_)}return this},s.prototype.removeAllListeners=function(d){var p;return d?(p=t?t+d:d,this._events[p]&&r(this,p)):(this._events=new a,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=t,s.EventEmitter=s,n.exports=s})(eventemitter3);var eventemitter3Exports=eventemitter3.exports;const EventEmitter=getDefaultExportFromCjs(eventemitter3Exports),WebSocket=xglobal.WebSocket,known={1e3:"Normal Closure",1001:"Going Away",1002:"Protocol Error",1003:"Unsupported Data",1004:"(For future)",1005:"No Status Received",1006:"Abnormal Closure",1007:"Invalid frame payload data",1008:"Policy Violation",1009:"Message too big",1010:"Missing Extension",1011:"Internal Error",1012:"Service Restart",1013:"Try Again Later",1014:"Bad Gateway",1015:"TLS Handshake"};function getWSErrorString(n){if(n>=0&&n<=999)return"(Unused)";if(n>=1016){if(n<=1999)return"(For WebSocket standard)";if(n<=2999)return"(For WebSocket extensions)";if(n<=3999)return"(For libraries and frameworks)";if(n<=4999)return"(For applications)"}return known[n]||"(Unknown)"}const ALIASES={chain_finalisedHead:"chain_finalizedHead",chain_subscribeFinalisedHeads:"chain_subscribeFinalizedHeads",chain_unsubscribeFinalisedHeads:"chain_unsubscribeFinalizedHeads"},RETRY_DELAY=2500,DEFAULT_TIMEOUT_MS=60*1e3,TIMEOUT_INTERVAL=5e3,l$4=logger("api-ws");function eraseRecord(n,e){Object.keys(n).forEach(t=>{e&&e(n[t]),delete n[t]})}function defaultEndpointStats(){return{bytesRecv:0,bytesSent:0,cached:0,errors:0,requests:0,subscriptions:0,timeout:0}}class WsProvider{constructor(e=defaults.WS_URL,t=RETRY_DELAY,a={},o,i){A(this,"__internal__callCache");A(this,"__internal__coder");A(this,"__internal__endpoints");A(this,"__internal__headers");A(this,"__internal__eventemitter");A(this,"__internal__handlers",{});A(this,"__internal__isReadyPromise");A(this,"__internal__stats");A(this,"__internal__waitingForId",{});A(this,"__internal__autoConnectMs");A(this,"__internal__endpointIndex");A(this,"__internal__endpointStats");A(this,"__internal__isConnected",!1);A(this,"__internal__subscriptions",{});A(this,"__internal__timeoutId",null);A(this,"__internal__websocket");A(this,"__internal__timeout");A(this,"__internal__emit",(e,...t)=>{this.__internal__eventemitter.emit(e,...t)});A(this,"__internal__onSocketClose",e=>{const t=new Error(`disconnected from ${this.endpoint}: ${e.code}:: ${e.reason||getWSErrorString(e.code)}`);this.__internal__autoConnectMs>0&&l$4.error(t.message),this.__internal__isConnected=!1,this.__internal__websocket&&(this.__internal__websocket.onclose=null,this.__internal__websocket.onerror=null,this.__internal__websocket.onmessage=null,this.__internal__websocket.onopen=null,this.__internal__websocket=null),this.__internal__timeoutId&&(clearInterval(this.__internal__timeoutId),this.__internal__timeoutId=null),eraseRecord(this.__internal__handlers,a=>{try{a.callback(t,void 0)}catch(o){l$4.error(o)}}),eraseRecord(this.__internal__waitingForId),this.__internal__endpointStats=defaultEndpointStats(),this.__internal__emit("disconnected"),this.__internal__autoConnectMs>0&&setTimeout(()=>{this.connectWithRetry().catch(noop)},this.__internal__autoConnectMs)});A(this,"__internal__onSocketError",e=>{l$4.debug(()=>["socket error",e]),this.__internal__emit("error",e)});A(this,"__internal__onSocketMessage",e=>{l$4.debug(()=>["received",e.data]);const t=e.data.length;this.__internal__endpointStats.bytesRecv+=t,this.__internal__stats.total.bytesRecv+=t;const a=JSON.parse(e.data);return isUndefined(a.method)?this.__internal__onSocketMessageResult(a):this.__internal__onSocketMessageSubscribe(a)});A(this,"__internal__onSocketMessageResult",e=>{const t=this.__internal__handlers[e.id];if(!t){l$4.debug(()=>`Unable to find handler for id=${e.id}`);return}try{const{method:a,params:o,subscription:i}=t,r=this.__internal__coder.decodeResponse(e);if(t.callback(null,r),i){const s=`${i.type}::${r}`;this.__internal__subscriptions[s]=objectSpread({},i,{method:a,params:o}),this.__internal__waitingForId[s]&&this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[s])}}catch(a){this.__internal__endpointStats.errors++,this.__internal__stats.total.errors++,t.callback(a,void 0)}delete this.__internal__handlers[e.id]});A(this,"__internal__onSocketMessageSubscribe",e=>{if(!e.method)throw new Error("No method found in JSONRPC response");const a=`${ALIASES[e.method]||e.method}::${e.params.subscription}`,o=this.__internal__subscriptions[a];if(!o){this.__internal__waitingForId[a]=e,l$4.debug(()=>`Unable to find handler for subscription=${a}`);return}delete this.__internal__waitingForId[a];try{const i=this.__internal__coder.decodeResponse(e);o.callback(null,i)}catch(i){this.__internal__endpointStats.errors++,this.__internal__stats.total.errors++,o.callback(i,void 0)}});A(this,"__internal__onSocketOpen",()=>{if(this.__internal__websocket===null)throw new Error("WebSocket cannot be null in onOpen");return l$4.debug(()=>["connected to",this.endpoint]),this.__internal__isConnected=!0,this.__internal__resubscribe(),this.__internal__emit("connected"),!0});A(this,"__internal__resubscribe",()=>{const e=this.__internal__subscriptions;this.__internal__subscriptions={},Promise.all(Object.keys(e).map(async t=>{const{callback:a,method:o,params:i,type:r}=e[t];if(!r.startsWith("author_"))try{await this.subscribe(r,o,i,a)}catch(s){l$4.error(s)}})).catch(l$4.error)});A(this,"__internal__timeoutHandlers",()=>{const e=Date.now(),t=Object.keys(this.__internal__handlers);for(let a=0,o=t.length;a<o;a++){const i=this.__internal__handlers[t[a]];if(e-i.start>this.__internal__timeout){try{i.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout/1e3}s`),void 0)}catch{}this.__internal__endpointStats.timeout++,this.__internal__stats.total.timeout++,delete this.__internal__handlers[t[a]]}}});const r=Array.isArray(e)?e:[e];if(r.length===0)throw new Error("WsProvider requires at least one Endpoint");r.forEach(s=>{if(!/^(wss|ws):\/\//.test(s))throw new Error(`Endpoint should start with 'ws://', received '${s}'`)}),this.__internal__callCache=new LRUCache(i||DEFAULT_CAPACITY),this.__internal__eventemitter=new EventEmitter,this.__internal__autoConnectMs=t||0,this.__internal__coder=new RpcCoder,this.__internal__endpointIndex=-1,this.__internal__endpoints=r,this.__internal__headers=a,this.__internal__websocket=null,this.__internal__stats={active:{requests:0,subscriptions:0},total:defaultEndpointStats()},this.__internal__endpointStats=defaultEndpointStats(),this.__internal__timeout=o||DEFAULT_TIMEOUT_MS,t&&t>0&&this.connectWithRetry().catch(noop),this.__internal__isReadyPromise=new Promise(s=>{this.__internal__eventemitter.once("connected",()=>{s(this)})})}get hasSubscriptions(){return!0}get isClonable(){return!0}get isConnected(){return this.__internal__isConnected}get isReady(){return this.__internal__isReadyPromise}get endpoint(){return this.__internal__endpoints[this.__internal__endpointIndex]}clone(){return new WsProvider(this.__internal__endpoints)}selectEndpointIndex(e){return(this.__internal__endpointIndex+1)%e.length}async connect(){if(this.__internal__websocket)throw new Error("WebSocket is already connected");try{this.__internal__endpointIndex=this.selectEndpointIndex(this.__internal__endpoints),this.__internal__websocket=typeof xglobal.WebSocket<"u"&&isChildClass(xglobal.WebSocket,WebSocket)?new WebSocket(this.endpoint):new WebSocket(this.endpoint,void 0,{headers:this.__internal__headers}),this.__internal__websocket&&(this.__internal__websocket.onclose=this.__internal__onSocketClose,this.__internal__websocket.onerror=this.__internal__onSocketError,this.__internal__websocket.onmessage=this.__internal__onSocketMessage,this.__internal__websocket.onopen=this.__internal__onSocketOpen),this.__internal__timeoutId=setInterval(()=>this.__internal__timeoutHandlers(),TIMEOUT_INTERVAL)}catch(e){throw l$4.error(e),this.__internal__emit("error",e),e}}async connectWithRetry(){if(this.__internal__autoConnectMs>0)try{await this.connect()}catch{setTimeout(()=>{this.connectWithRetry().catch(noop)},this.__internal__autoConnectMs)}}async disconnect(){this.__internal__autoConnectMs=0;try{this.__internal__websocket&&this.__internal__websocket.close(1e3)}catch(e){throw l$4.error(e),this.__internal__emit("error",e),e}}get stats(){return{active:{requests:Object.keys(this.__internal__handlers).length,subscriptions:Object.keys(this.__internal__subscriptions).length},total:this.__internal__stats.total}}get endpointStats(){return this.__internal__endpointStats}on(e,t){return this.__internal__eventemitter.on(e,t),()=>{this.__internal__eventemitter.removeListener(e,t)}}send(e,t,a,o){this.__internal__endpointStats.requests++,this.__internal__stats.total.requests++;const[i,r]=this.__internal__coder.encodeJson(e,t),s=a?`${e}::${stringify(t)}`:"";let c=a?this.__internal__callCache.get(s):null;return c?(this.__internal__endpointStats.cached++,this.__internal__stats.total.cached++):(c=this.__internal__send(i,r,e,t,o),a&&this.__internal__callCache.set(s,c)),c}async __internal__send(e,t,a,o,i){return new Promise((r,s)=>{try{if(!this.isConnected||this.__internal__websocket===null)throw new Error("WebSocket is not connected");const c=(p,h)=>{p?s(p):r(h)};l$4.debug(()=>["calling",a,t]),this.__internal__handlers[e]={callback:c,method:a,params:o,start:Date.now(),subscription:i};const d=t.length;this.__internal__endpointStats.bytesSent+=d,this.__internal__stats.total.bytesSent+=d,this.__internal__websocket.send(t)}catch(c){this.__internal__endpointStats.errors++,this.__internal__stats.total.errors++,s(c)}})}subscribe(e,t,a,o){return this.__internal__endpointStats.subscriptions++,this.__internal__stats.total.subscriptions++,this.send(t,a,!1,{callback:o,type:e})}async unsubscribe(e,t,a){const o=`${e}::${a}`;if(isUndefined(this.__internal__subscriptions[o]))return l$4.debug(()=>`Unable to find active subscription=${o}`),!1;delete this.__internal__subscriptions[o];try{return this.isConnected&&!isNull(this.__internal__websocket)?this.send(t,[a]):!0}catch{return!1}}}const l$3=logger("api/util");function filterEvents(n,{block:{extrinsics:e,header:t}},a,o){for(const[i,r]of e.entries())if(r.hash.eq(n))return{blockNumber:isCompact(t.number)?t.number.unwrap():t.number,events:a.filter(({phase:s})=>s.isApplyExtrinsic&&s.asApplyExtrinsic.eqn(i)),txIndex:i};if(o.isInBlock){const i=e.map(r=>r.hash.toHex());l$3.warn(`block ${t.hash.toHex()}: Unable to find extrinsic ${n.toHex()} inside ${i.join(", ")}`)}return{}}function isKeyringPair(n){return isFunction$2(n.sign)}function accountId(n,e){return memo(n,t=>{const a=isU8a(t)?t:decodeAddress((t||"").toString());if(a.length>8)return of(e.registry.createType("AccountId",a));const o=e.registry.createType("AccountIndex",a);return e.derive.accounts.indexToId(o.toString()).pipe(map$2(i=>assertReturn(i,"Unable to retrieve accountId")))})}function parseFlags(n,[e,t,a,o,i]){const r=n==null?void 0:n.toString(),s=c=>c.toString()===r;return{isCouncil:((e==null?void 0:e.map(c=>Array.isArray(c)?c[0]:c.who))||t||[]).some(s),isSociety:(o||[]).some(s),isSudo:(i==null?void 0:i.toString())===r,isTechCommittee:(a||[]).some(s)}}function _flags(n,e){return memo(n,()=>{var i,r,s,c,d;const t=[void 0,[],[],[],void 0],a=[(i=e.query.elections||e.query.phragmenElection||e.query.electionsPhragmen)==null?void 0:i.members,(r=e.query.council)==null?void 0:r.members,(s=e.query.technicalCommittee)==null?void 0:s.members,(c=e.query.society)==null?void 0:c.members,(d=e.query.sudo)==null?void 0:d.key],o=a.filter(p=>p);return o.length?e.queryMulti(o).pipe(map$2(p=>{let h=-1;for(let I=0,_=a.length;I<_;I++)isFunction$2(a[I])&&(t[I]=p[++h]);return t})):of(t)})}function flags(n,e){return memo(n,t=>e.derive.accounts._flags().pipe(map$2(a=>parseFlags(t,a))))}function idAndIndex(n,e){return memo(n,t=>{try{const a=isU8a(t)?t:decodeAddress((t||"").toString());if(a.length>8){const i=e.registry.createType("AccountId",a);return e.derive.accounts.idToIndex(i).pipe(map$2(r=>[i,r]))}const o=e.registry.createType("AccountIndex",a);return e.derive.accounts.indexToId(o.toString()).pipe(map$2(i=>[i,o]))}catch{return of([void 0,void 0])}})}const UNDEF_HEX={toHex:()=>{}};function dataAsString(n){return n&&(n.isRaw?u8aToString(n.asRaw.toU8a(!0)):n.isNone?void 0:n.toHex())}function extractOther(n){return n.reduce((e,[t,a])=>{const o=dataAsString(t),i=dataAsString(a);return o&&i&&(e[o]=i),e},{})}function identityCompat(n){const e=n.unwrap();return Array.isArray(e)?e[0]:e}function extractIdentity(n,e){if(!(n!=null&&n.isSome))return{judgements:[]};const{info:t,judgements:a}=identityCompat(n),o=dataAsString(t.display);return{discord:dataAsString(t.discord),display:e&&dataAsString(e[1])||o,displayParent:e&&o,email:dataAsString(t.email),github:dataAsString(t.github),image:dataAsString(t.image),judgements:a,legal:dataAsString(t.legal),matrix:dataAsString(t.matrix),other:t.additional?extractOther(t.additional):{},parent:e==null?void 0:e[0],pgp:t.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),riot:dataAsString(t.riot),twitter:dataAsString(t.twitter),web:dataAsString(t.web)}}function getParent(n,e,t){if(e!=null&&e.isSome)return of([e,void 0]);if(t!=null&&t.isSome){const a=t.unwrap();return combineLatest([n.derive.accounts._identity(a[0]).pipe(map$2(([o])=>o)),of(a)])}return of([void 0,void 0])}function _identity(n,e){return memo(n,t=>{var a;return t&&((a=e.query.identity)!=null&&a.identityOf)?combineLatest([e.query.identity.identityOf(t),e.query.identity.superOf(t)]):of([void 0,void 0])})}function identity(n,e){return memo(n,t=>e.derive.accounts._identity(t).pipe(switchMap(([a,o])=>getParent(e,a,o)),map$2(([a,o])=>extractIdentity(a,o))))}const hasIdentity=firstMemo((n,e)=>n.derive.accounts.hasIdentityMulti([e]));function hasIdentityMulti(n,e){return memo(n,t=>{var a;return(a=e.query.identity)!=null&&a.identityOf?combineLatest([e.query.identity.identityOf.multi(t),e.query.identity.superOf.multi(t)]).pipe(map$2(([o,i])=>o.map((r,s)=>{const c=i[s],d=c&&c.isSome?c.unwrap()[0].toString():void 0;let p;if(r&&r.isSome){const h=dataAsString(identityCompat(r).info.display);h&&!isHex(h)&&(p=h)}return{display:p,hasIdentity:!!(p||d),parentId:d}}))):of(t.map(()=>({hasIdentity:!1})))})}function idToIndex(n,e){return memo(n,t=>e.derive.accounts.indexes().pipe(map$2(a=>a[t.toString()])))}let indicesCache=null;function queryAccounts(n){return n.query.indices.accounts.entries().pipe(map$2(e=>e.reduce((t,[a,o])=>(o.isSome&&(t[o.unwrap()[0].toString()]=n.registry.createType("AccountIndex",a.args[0])),t),{})))}function indexes$1(n,e){return memo(n,()=>indicesCache?of(indicesCache):(e.query.indices?queryAccounts(e).pipe(startWith({})):of({})).pipe(map$2(t=>(indicesCache=t,t))))}function indexToId(n,e){return memo(n,t=>e.query.indices?e.query.indices.accounts(t).pipe(map$2(a=>a.unwrapOr([])[0])):of(void 0))}function retrieveNick(n,e){var t;return(e&&((t=n.query.nicks)!=null&&t.nameOf)?n.query.nicks.nameOf(e):of(void 0)).pipe(map$2(a=>a!=null&&a.isSome?u8aToString(a.unwrap()[0]).substring(0,n.consts.nicks.maxLength.toNumber()):void 0))}function info$4(n,e){return memo(n,t=>e.derive.accounts.idAndIndex(t).pipe(switchMap(([a,o])=>combineLatest([of({accountId:a,accountIndex:o}),e.derive.accounts.identity(a),retrieveNick(e,a)])),map$2(([{accountId:a,accountIndex:o},i,r])=>({accountId:a,accountIndex:o,identity:i,nickname:r}))))}const accounts$2=Object.freeze(Object.defineProperty({__proto__:null,_flags,_identity,accountId,flags,hasIdentity,hasIdentityMulti,idAndIndex,idToIndex,identity,indexToId,indexes:indexes$1,info:info$4},Symbol.toStringTag,{value:"Module"}));function getInstance(n,e){const t=n.registry.getModuleInstances(n.runtimeVersion.specName,e),a=t!=null&&t.length?t[0]:e;return n.query[a]}function withSection(n,e){return(t,a)=>memo(t,e(getInstance(a,n),a,t))}function callMethod(n,e){return t=>withSection(t,a=>()=>isFunction$2(a==null?void 0:a[n])?a[n]():of(e))}const members$5=callMethod("members",[]);function prime$4(n){return withSection(n,e=>()=>isFunction$2(e==null?void 0:e.prime)?e.prime().pipe(map$2(t=>t.unwrapOr(null))):of(null))}function parse$4(n,[e,t,a]){return t.map((o,i)=>({hash:n.registry.createType("Hash",e[i]),proposal:o&&o.isSome?o.unwrap():null,votes:a[i].unwrapOr(null)}))}function _proposalsFrom(n,e,t){return(isFunction$2(e==null?void 0:e.proposals)&&t.length?combineLatest([of(t),e.proposalOf.multi(t).pipe(catchError(()=>of(t.map(()=>null)))),e.voting.multi(t)]):of([[],[],[]])).pipe(map$2(a=>parse$4(n,a)))}function hasProposals$4(n){return withSection(n,e=>()=>of(isFunction$2(e==null?void 0:e.proposals)))}function proposals$6(n){return withSection(n,(e,t)=>()=>t.derive[n].proposalHashes().pipe(switchMap(a=>_proposalsFrom(t,e,a))))}function proposal$4(n){return withSection(n,(e,t)=>a=>isFunction$2(e==null?void 0:e.proposals)?firstObservable(_proposalsFrom(t,e,[a])):of(null))}const proposalCount$4=callMethod("proposalCount",null),proposalHashes$4=callMethod("proposals",[]),members$4=members$5("allianceMotion"),hasProposals$3=hasProposals$4("allianceMotion"),proposal$3=proposal$4("allianceMotion"),proposalCount$3=proposalCount$4("allianceMotion"),proposalHashes$3=proposalHashes$4("allianceMotion"),proposals$5=proposals$6("allianceMotion"),prime$3=prime$4("allianceMotion"),alliance=Object.freeze(Object.defineProperty({__proto__:null,hasProposals:hasProposals$3,members:members$4,prime:prime$3,proposal:proposal$3,proposalCount:proposalCount$3,proposalHashes:proposalHashes$3,proposals:proposals$5},Symbol.toStringTag,{value:"Module"}));function getQueryInterface(n){return n.query.voterList||n.query.voterBagsList||n.query.bagsList}function orderBags(n,e){const t=n.map((o,i)=>({bag:e[i].unwrapOr(null),id:o,key:o.toString()})).sort((o,i)=>i.id.cmp(o.id)),a=t.length-1;return t.map((o,i)=>objectSpread(o,{bagLower:i===a?BN_ZERO:t[i+1].id,bagUpper:o.id,index:i}))}function _getIds(n,e){const t=getQueryInterface(e);return memo(n,a=>{const o=a.map(i=>bnToBn(i));return o.length?t.listBags.multi(o).pipe(map$2(i=>orderBags(o,i))):of([])})}function all$1(n,e){const t=getQueryInterface(e);return memo(n,()=>t.listBags.keys().pipe(switchMap(a=>e.derive.bagsList._getIds(a.map(({args:[o]})=>o))),map$2(a=>a.filter(({bag:o})=>o))))}function get(n,e){return memo(n,t=>e.derive.bagsList._getIds([bnToBn(t)]).pipe(map$2(a=>a[0])))}function expand(n,e){return memo(n,t=>e.derive.bagsList.listNodes(t.bag).pipe(map$2(a=>objectSpread({nodes:a},t))))}function getExpanded(n,e){return memo(n,t=>e.derive.bagsList.get(t).pipe(switchMap(a=>e.derive.bagsList.expand(a))))}function traverseLinks(n,e){const t=new BehaviorSubject(e),a=getQueryInterface(n);return t.pipe(switchMap(o=>a.listNodes(o)),tap(o=>{nextTick(()=>{o.isSome&&o.value.next.isSome?t.next(o.unwrap().next.unwrap()):t.complete()})}),toArray(),map$2(o=>o.map(i=>i.unwrap())))}function listNodes(n,e){return memo(n,t=>t&&t.head.isSome?traverseLinks(e,t.head.unwrap()):of([]))}const bagsList=Object.freeze(Object.defineProperty({__proto__:null,_getIds,all:all$1,expand,get,getExpanded,listNodes},Symbol.toStringTag,{value:"Module"})),VESTING_ID="0x76657374696e6720";function calcLocked(n,e,t){let a=n.registry.createType("Balance"),o=[],i=n.registry.createType("Balance"),r=!1;if(Array.isArray(t)){o=t.filter(({until:c})=>!c||e&&c.gt(e)),r=o.some(({amount:c})=>c&&c.isMax()),i=n.registry.createType("Balance",o.filter(({id:c})=>c.eq(VESTING_ID)).reduce((c,{amount:d})=>c.iadd(d),new BN(0)));const s=o.filter(({amount:c})=>c&&!c.isMax());s.length&&(a=n.registry.createType("Balance",bnMax(...s.map(({amount:c})=>c))))}return{allLocked:r,lockedBalance:a,lockedBreakdown:o,vestingLocked:i}}function calcShared(n,e,t,a){var d;const{allLocked:o,lockedBalance:i,lockedBreakdown:r,vestingLocked:s}=calcLocked(n,e,a);let c=null;if((d=t==null?void 0:t.frameSystemAccountInfo)!=null&&d.frozen){const{frameSystemAccountInfo:p,freeBalance:h,reservedBalance:I}=t,_=p.frozen.isZero()&&I.isZero(),k=n.consts.balances.existentialDeposit,P=_?new BN(0):k,v=p.frozen.sub(I);c=n.registry.createType("Balance",o?0:h.sub(bnMax(P,v)))}return objectSpread({},t,{availableBalance:n.registry.createType("Balance",o?0:bnMax(new BN(0),t!=null&&t.freeBalance?t.freeBalance.sub(i):new BN(0))),lockedBalance:i,lockedBreakdown:r,transferable:c,vestingLocked:s})}function calcVesting(n,e,t){const a=t||[],o=!e.vestingLocked.isZero(),i=a.map(({locked:c,perBlock:d,startingBlock:p})=>n.gt(p)?bnMin(c,d.mul(n.sub(p))):BN_ZERO),r=i.reduce((c,d)=>c.iadd(d),new BN(0)),s=a.reduce((c,{locked:d})=>c.iadd(d),new BN(0));return{isVesting:o,vestedBalance:r,vestedClaimable:o?e.vestingLocked.sub(s.sub(r)):BN_ZERO,vesting:a.map(({locked:c,perBlock:d,startingBlock:p},h)=>({endBlock:c.div(d).iadd(p),locked:c,perBlock:d,startingBlock:p,vested:i[h]})).filter(({locked:c})=>!c.isZero()),vestingTotal:s}}function calcBalances$1(n,e){const[t,[a,o,i],r]=e,s=calcShared(n,r,t,o[0]);return objectSpread(s,calcVesting(r,s,a),{accountId:t.accountId,accountNonce:t.accountNonce,additional:o.slice(1).map((c,d)=>calcShared(n,r,t.additional[d],c)),namedReserves:i})}function queryOld(n,e){return combineLatest([n.query.balances.locks(e),n.query.balances.vesting(e)]).pipe(map$2(([t,a])=>{let o=null;if(a.isSome){const{offset:i,perBlock:r,startingBlock:s}=a.unwrap();o=n.registry.createType("VestingInfo",{locked:i,perBlock:r,startingBlock:s})}return[o?[o]:null,[t],[]]}))}const isNonNullable=n=>!!n;function createCalls(n){return[n.map(e=>!e),n.filter(isNonNullable)]}function queryCurrent(n,e,t=["balances"]){var s;const[a,o]=createCalls(t.map(c=>{var d,p;return((d=n.derive[c])==null?void 0:d.customLocks)||((p=n.query[c])==null?void 0:p.locks)})),[i,r]=createCalls(t.map(c=>{var d;return(d=n.query[c])==null?void 0:d.reserves}));return combineLatest([(s=n.query.vesting)!=null&&s.vesting?n.query.vesting.vesting(e):of(n.registry.createType("Option<VestingInfo>")),o.length?combineLatest(o.map(c=>c(e))):of([]),r.length?combineLatest(r.map(c=>c(e))):of([])]).pipe(map$2(([c,d,p])=>{let h=-1,I=-1;const _=c.unwrapOr(null);return[_?Array.isArray(_)?_:[_]:null,a.map(k=>k?n.registry.createType("Vec<BalanceLock>"):d[++h]),i.map(k=>k?n.registry.createType("Vec<PalletBalancesReserveData>"):p[++I])]}))}function all(n,e){const t=e.registry.getModuleInstances(e.runtimeVersion.specName,"balances");return memo(n,a=>{var o,i;return combineLatest([e.derive.balances.account(a),isFunction$2((o=e.query.system)==null?void 0:o.account)||isFunction$2((i=e.query.balances)==null?void 0:i.account)?queryCurrent(e,a,t):queryOld(e,a)]).pipe(switchMap(([r,s])=>combineLatest([of(r),of(s),e.derive.chain.bestNumber()])),map$2(r=>calcBalances$1(e,r)))})}function zeroBalance(n){return n.registry.createType("Balance")}function getBalance(n,[e,t,a,o],i){const r=n.registry.createType("Balance",e.toBn());return i.isFrameAccountData?{frameSystemAccountInfo:{flags:o,frozen:a},freeBalance:e,frozenFee:n.registry.createType("Balance",0),frozenMisc:n.registry.createType("Balance",0),reservedBalance:t,votingBalance:r}:{freeBalance:e,frozenFee:a,frozenMisc:o,reservedBalance:t,votingBalance:r}}function calcBalances(n,[e,[t,[a,...o],i]]){return objectSpread({accountId:e,accountNonce:t,additional:o.map(r=>getBalance(n,r,i))},getBalance(n,a,i))}function queryBalancesFree(n,e){return combineLatest([n.query.balances.freeBalance(e),n.query.balances.reservedBalance(e),n.query.system.accountNonce(e)]).pipe(map$2(([t,a,o])=>[o,[[t,a,zeroBalance(n),zeroBalance(n)]],{isFrameAccountData:!1}]))}function queryNonceOnly(n,e){const t=a=>[a,[[zeroBalance(n),zeroBalance(n),zeroBalance(n),zeroBalance(n)]],{isFrameAccountData:!1}];return isFunction$2(n.query.system.account)?n.query.system.account(e).pipe(map$2(({nonce:a})=>t(a))):isFunction$2(n.query.system.accountNonce)?n.query.system.accountNonce(e).pipe(map$2(a=>t(a))):of(t(n.registry.createType("Index")))}function queryBalancesAccount(n,e,t=["balances"]){const a=t.map(i=>{var r,s;return((r=n.derive[i])==null?void 0:r.customAccount)||((s=n.query[i])==null?void 0:s.account)}).filter(i=>isFunction$2(i)),o=(i,r)=>[i,r.map(({feeFrozen:s,free:c,miscFrozen:d,reserved:p})=>[c,p,s,d]),{isFrameAccountData:!1}];return a.length?isFunction$2(n.query.system.account)?combineLatest([n.query.system.account(e),...a.map(i=>i(e))]).pipe(map$2(([{nonce:i},...r])=>o(i,r))):combineLatest([n.query.system.accountNonce(e),...a.map(i=>i(e))]).pipe(map$2(([i,...r])=>o(i,r))):queryNonceOnly(n,e)}function querySystemAccount(n,e){return n.query.system.account(e).pipe(map$2(t=>{const a=t.nonce?t.data:t[1],o=t.nonce||t[0];if(!a||a.isEmpty)return[o,[[zeroBalance(n),zeroBalance(n),zeroBalance(n),zeroBalance(n)]],{isFrameAccountData:!1}];if(!!t.data.frozen){const{flags:r,free:s,frozen:c,reserved:d}=a;return[o,[[s,d,c,r]],{isFrameAccountData:!0}]}else{const{feeFrozen:r,free:s,miscFrozen:c,reserved:d}=a;return[o,[[s,d,r,c]],{isFrameAccountData:!1}]}}))}function account$1(n,e){const t=e.registry.getModuleInstances(e.runtimeVersion.specName,"balances"),a=t&&t[0]!=="balances";return memo(n,o=>e.derive.accounts.accountId(o).pipe(switchMap(i=>{var r,s,c;return i?combineLatest([of(i),a?queryBalancesAccount(e,i,t):isFunction$2((r=e.query.system)==null?void 0:r.account)?querySystemAccount(e,i):isFunction$2((s=e.query.balances)==null?void 0:s.account)?queryBalancesAccount(e,i):isFunction$2((c=e.query.balances)==null?void 0:c.freeBalance)?queryBalancesFree(e,i):queryNonceOnly(e,i)]):of([e.registry.createType("AccountId"),[e.registry.createType("Index"),[[zeroBalance(e),zeroBalance(e),zeroBalance(e),zeroBalance(e)]],{isFrameAccountData:!1}]])}),map$2(i=>calcBalances(e,i))))}function votingBalances(n,e){return memo(n,t=>t!=null&&t.length?combineLatest(t.map(a=>e.derive.balances.account(a))):of([]))}const votingBalance=all,balances=Object.freeze(Object.defineProperty({__proto__:null,account:account$1,all,votingBalance,votingBalances},Symbol.toStringTag,{value:"Module"}));function filterBountiesProposals(n,e){const t=n.tx.bounties?n.tx.bounties:n.tx.treasury,a=[t.approveBounty,t.closeBounty,t.proposeCurator,t.unassignCurator];return e.filter(o=>a.find(i=>o.proposal&&i.is(o.proposal)))}function parseResult$2([n,e,t,a]){const o=[];return n.forEach((i,r)=>{i.isSome&&o.push({bounty:i.unwrap(),description:e[r].unwrapOrDefault().toUtf8(),index:t[r],proposals:a.filter(s=>s.proposal&&t[r].eq(s.proposal.args[0]))})}),o}function bounties$1(n,e){const t=e.query.bounties||e.query.treasury;return memo(n,()=>t.bounties?combineLatest([t.bountyCount(),e.query.council?e.query.council.proposalCount():of(0)]).pipe(switchMap(()=>combineLatest([t.bounties.keys(),e.derive.council?e.derive.council.proposals():of([])])),switchMap(([a,o])=>{const i=a.map(({args:[r]})=>r);return combineLatest([t.bounties.multi(i),t.bountyDescriptions.multi(i),of(i),of(filterBountiesProposals(e,o))])}),map$2(parseResult$2)):of(parseResult$2([[],[],[],[]])))}const bounties=Object.freeze(Object.defineProperty({__proto__:null,bounties:bounties$1},Symbol.toStringTag,{value:"Module"}));function queryConstants(n){return of([n.consts.contracts.callBaseFee||n.registry.createType("Balance"),n.consts.contracts.contractFee||n.registry.createType("Balance"),n.consts.contracts.creationFee||n.registry.createType("Balance"),n.consts.contracts.transactionBaseFee||n.registry.createType("Balance"),n.consts.contracts.transactionByteFee||n.registry.createType("Balance"),n.consts.contracts.transferFee||n.registry.createType("Balance"),n.consts.contracts.rentByteFee||n.registry.createType("Balance"),n.consts.contracts.rentDepositOffset||n.registry.createType("Balance"),n.consts.contracts.surchargeReward||n.registry.createType("Balance"),n.consts.contracts.tombstoneDeposit||n.registry.createType("Balance")])}function fees(n,e){return memo(n,()=>queryConstants(e).pipe(map$2(([t,a,o,i,r,s,c,d,p,h])=>({callBaseFee:t,contractFee:a,creationFee:o,rentByteFee:c,rentDepositOffset:d,surchargeReward:p,tombstoneDeposit:h,transactionBaseFee:i,transactionByteFee:r,transferFee:s}))))}const contracts$1=Object.freeze(Object.defineProperty({__proto__:null,fees},Symbol.toStringTag,{value:"Module"}));function isVoter(n){return!Array.isArray(n)}function retrieveStakeOf(n){return n.stakeOf.entries().pipe(map$2(e=>e.map(([{args:[t]},a])=>[t,a])))}function retrieveVoteOf(n){return n.votesOf.entries().pipe(map$2(e=>e.map(([{args:[t]},a])=>[t,a])))}function retrievePrev(n,e){return combineLatest([retrieveStakeOf(e),retrieveVoteOf(e)]).pipe(map$2(([t,a])=>{const o=[];return a.forEach(([i,r])=>{o.push([i,{stake:n.registry.createType("Balance"),votes:r}])}),t.forEach(([i,r])=>{const s=o.find(([c])=>c.eq(i));s?s[1].stake=r:o.push([i,{stake:r,votes:[]}])}),o}))}function retrieveCurrent(n){return n.voting.entries().pipe(map$2(e=>e.map(([{args:[t]},a])=>[t,isVoter(a)?{stake:a.stake,votes:a.votes}:{stake:a[0],votes:a[1]}])))}function votes(n,e){const t=e.query.elections||e.query.phragmenElection||e.query.electionsPhragmen;return memo(n,()=>t?t.stakeOf?retrievePrev(e,t):retrieveCurrent(t):of([]))}function votesOf(n,e){return memo(n,t=>e.derive.council.votes().pipe(map$2(a=>(a.find(([o])=>o.eq(t))||[null,{stake:e.registry.createType("Balance"),votes:[]}])[1])))}const members$3=members$5("council"),hasProposals$2=hasProposals$4("council"),proposal$2=proposal$4("council"),proposalCount$2=proposalCount$4("council"),proposalHashes$2=proposalHashes$4("council"),proposals$4=proposals$6("council"),prime$2=prime$4("council"),council=Object.freeze(Object.defineProperty({__proto__:null,hasProposals:hasProposals$2,members:members$3,prime:prime$2,proposal:proposal$2,proposalCount:proposalCount$2,proposalHashes:proposalHashes$2,proposals:proposals$4,votes,votesOf},Symbol.toStringTag,{value:"Module"}));function createChildKey(n){return u8aToHex(u8aConcat(":child_storage:default:",blake2AsU8a(u8aConcat("crowdloan",(n.fundIndex||n.trieIndex).toU8a()))))}function childKey(n,e){return memo(n,t=>e.query.crowdloan.funds(t).pipe(map$2(a=>a.isSome?createChildKey(a.unwrap()):null)))}function extractContributed(n,e){var o;const t=[],a=[];return e.filter(({event:{data:[,i],method:r,section:s}})=>s==="crowdloan"&&["Contributed","Withdrew"].includes(r)&&i.eq(n)).reduce((i,{event:{data:[r],method:s}})=>(s==="Contributed"?i.added.push(r.toHex()):i.removed.push(r.toHex()),i),{added:t,blockHash:((o=e.createdAtHash)==null?void 0:o.toHex())||"-",removed:a})}const PAGE_SIZE_K$1=1e3;function _getUpdates(n,e){let t=[],a=[];return n.query.system.events().pipe(switchMap(o=>{var r;const i=extractContributed(e,o);return i.added.length||i.removed.length?(t=t.concat(...i.added),a=a.concat(...i.removed),of({added:t,addedDelta:i.added,blockHash:((r=o.createdAtHash)==null?void 0:r.toHex())||"-",removed:a,removedDelta:i.removed})):EMPTY}),startWith({added:t,addedDelta:[],blockHash:"-",removed:a,removedDelta:[]}))}function _eventTriggerAll(n,e){return n.query.system.events().pipe(switchMap(t=>{var o;return t.filter(({event:{data:[i],method:r,section:s}})=>s==="crowdloan"&&["AllRefunded","Dissolved","PartiallyRefunded"].includes(r)&&i.eq(e)).length?of(((o=t.createdAtHash)==null?void 0:o.toHex())||"-"):EMPTY}),startWith("-"))}function _getKeysPaged(n,e){const t=new BehaviorSubject(void 0);return t.pipe(switchMap(a=>n.rpc.childstate.getKeysPaged(e,"0x",PAGE_SIZE_K$1,a)),tap(a=>{nextTick(()=>{a.length===PAGE_SIZE_K$1?t.next(a[PAGE_SIZE_K$1-1].toHex()):t.complete()})}),toArray(),map$2(a=>arrayFlatten(a)))}function _getAll(n,e,t){return _eventTriggerAll(n,e).pipe(switchMap(()=>isFunction$2(n.rpc.childstate.getKeysPaged)?_getKeysPaged(n,t):n.rpc.childstate.getKeys(t,"0x")),map$2(a=>a.map(o=>o.toHex())))}function _contributions$1(n,e,t){return combineLatest([_getAll(n,e,t),_getUpdates(n,e)]).pipe(map$2(([a,{added:o,blockHash:i,removed:r}])=>{const s={};return a.forEach(c=>{s[c]=!0}),o.forEach(c=>{s[c]=!0}),r.forEach(c=>{delete s[c]}),{blockHash:i,contributorsHex:Object.keys(s)}}))}function contributions(n,e){return memo(n,t=>e.derive.crowdloan.childKey(t).pipe(switchMap(a=>a?_contributions$1(e,t,a):of({blockHash:"-",contributorsHex:[]}))))}function _getValues(n,e,t){return combineLatest(t.map(a=>n.rpc.childstate.getStorage(e,a))).pipe(map$2(a=>a.map(o=>n.registry.createType("Option<StorageData>",o)).map(o=>o.isSome?n.registry.createType("Balance",o.unwrap()):n.registry.createType("Balance")).reduce((o,i,r)=>objectSpread(o,{[t[r]]:i}),{})))}function _watchOwnChanges(n,e,t,a){return n.query.system.events().pipe(switchMap(o=>{const i=extractContributed(e,o),r=a.filter(s=>i.added.includes(s)||i.removed.includes(s));return r.length?_getValues(n,t,r):EMPTY}),startWith({}))}function _contributions(n,e,t,a){return combineLatest([_getValues(n,t,a),_watchOwnChanges(n,e,t,a)]).pipe(map$2(([o,i])=>objectSpread({},o,i)))}function ownContributions(n,e){return memo(n,(t,a)=>e.derive.crowdloan.childKey(t).pipe(switchMap(o=>o&&a.length?_contributions(e,t,o,a):of({}))))}const crowdloan=Object.freeze(Object.defineProperty({__proto__:null,childKey,contributions,ownContributions},Symbol.toStringTag,{value:"Module"}));function isOldInfo(n){return!!n.proposalHash}function isCurrentStatus(n){return!!n.tally}function compareRationals(n,e,t,a){for(;;){const o=n.div(e),i=t.div(a);if(o.lt(i))return!0;if(i.lt(o))return!1;const r=n.mod(e),s=t.mod(a);if(s.isZero())return!1;if(r.isZero())return!0;n=a,t=e,e=s,a=r}}function calcPassingOther(n,e,{votedAye:t,votedNay:a,votedTotal:o}){const i=bnSqrt(o);return i.isZero()?!1:n.isSuperMajorityApprove?compareRationals(a,i,t,e):compareRationals(a,e,t,i)}function calcPassing(n,e,t){return n.isSimpleMajority?t.votedAye.gt(t.votedNay):calcPassingOther(n,e,t)}function calcVotesPrev(n){return n.reduce((e,t)=>{const{balance:a,vote:o}=t,i=o.conviction.index===0,r=a.muln(i?1:o.conviction.index).divn(i?10:1);return o.isAye?(e.allAye.push(t),e.voteCountAye++,e.votedAye.iadd(r)):(e.allNay.push(t),e.voteCountNay++,e.votedNay.iadd(r)),e.voteCount++,e.votedTotal.iadd(r),e},{allAye:[],allNay:[],voteCount:0,voteCountAye:0,voteCountNay:0,votedAye:new BN(0),votedNay:new BN(0),votedTotal:new BN(0)})}function calcVotesCurrent(n,e){const t=[],a=[];return e.forEach(o=>{o.vote.isAye?t.push(o):a.push(o)}),{allAye:t,allNay:a,voteCount:t.length+a.length,voteCountAye:t.length,voteCountNay:a.length,votedAye:n.ayes,votedNay:n.nays,votedTotal:n.turnout}}function calcVotes(n,e,t){const a=isCurrentStatus(e.status)?calcVotesCurrent(e.status.tally,t):calcVotesPrev(t);return objectSpread({},a,{isPassing:calcPassing(e.status.threshold,n,a),votes:t})}function getStatus(n){if(n.isNone)return null;const e=n.unwrap();return isOldInfo(e)?e:e.isOngoing?e.asOngoing:null}function getImageHashBounded(n){return n.isLegacy?n.asLegacy.hash_.toHex():n.isLookup?n.asLookup.hash_.toHex():n.isInline?n.asInline.hash.toHex():isString(n)?isHex(n)?n:stringToHex(n):isU8a(n)?u8aToHex(n):n.toHex()}function getImageHash(n){return getImageHashBounded(n.proposal||n.proposalHash)}const DEMOCRACY_ID=stringToHex("democrac");function isMaybeHashedOrBounded(n){return n instanceof Enum}function isBounded(n){return n.isInline||n.isLegacy||n.isLookup}function queryQueue(n){return n.query.democracy.dispatchQueue().pipe(switchMap(e=>combineLatest([of(e),n.derive.democracy.preimages(e.map(([,t])=>t))])),map$2(([e,t])=>e.map(([a,o,i],r)=>({at:a,image:t[r],imageHash:getImageHashBounded(o),index:i}))))}function schedulerEntries(n){return n.derive.democracy.referendumsFinished().pipe(switchMap(()=>n.query.scheduler.agenda.keys()),switchMap(e=>{const t=e.map(({args:[a]})=>a);return t.length?combineLatest([of(t),n.query.scheduler.agenda.multi(t).pipe(catchError(()=>of(t.map(()=>[]))))]):of([[],[]])}))}function queryScheduler(n){return schedulerEntries(n).pipe(switchMap(([e,t])=>{const a=[];return e.forEach((o,i)=>{(t[i]||[]).filter(r=>r.isSome).forEach(r=>{const s=r.unwrap();if(s.maybeId.isSome){const c=s.maybeId.unwrap().toHex();if(c.startsWith(DEMOCRACY_ID)){const d=isMaybeHashedOrBounded(s.call)?isBounded(s.call)?getImageHashBounded(s.call):s.call.isHash?s.call.asHash.toHex():s.call.asValue.args[0].toHex():s.call.args[0].toHex();a.push({at:o,imageHash:d,index:n.registry.createType("(u64, ReferendumIndex)",c)[1]})}}})}),combineLatest([of(a),a.length?n.derive.democracy.preimages(a.map(({imageHash:o})=>o)):of([])])}),map$2(([e,t])=>e.map((a,o)=>objectSpread({image:t[o]},a))))}function dispatchQueue(n,e){return memo(n,()=>{var t;return isFunction$2((t=e.query.scheduler)==null?void 0:t.agenda)?queryScheduler(e):e.query.democracy.dispatchQueue?queryQueue(e):of([])})}const LOCKUPS=[0,1,2,4,8,16,32];function parseEnd(n,e,{approved:t,end:a}){return[a,t.isTrue&&e.isAye||t.isFalse&&e.isNay?a.add((n.consts.democracy.voteLockingPeriod||n.consts.democracy.enactmentPeriod).muln(LOCKUPS[e.conviction.index])):BN_ZERO]}function parseLock(n,[e,t],a){const{balance:o,vote:i}=t.asStandard,[r,s]=a.isFinished?parseEnd(n,i,a.asFinished):[BN_ZERO,BN_ZERO];return{balance:o,isDelegated:!1,isFinished:a.isFinished,referendumEnd:r,referendumId:e,unlockAt:s,vote:i}}function delegateLocks(n,{balance:e,conviction:t,target:a}){return n.derive.democracy.locks(a).pipe(map$2(o=>o.map(({isFinished:i,referendumEnd:r,referendumId:s,unlockAt:c,vote:d})=>({balance:e,isDelegated:!0,isFinished:i,referendumEnd:r,referendumId:s,unlockAt:c.isZero()?c:r.add((n.consts.democracy.voteLockingPeriod||n.consts.democracy.enactmentPeriod).muln(LOCKUPS[t.index])),vote:n.registry.createType("Vote",{aye:d.isAye,conviction:t})}))))}function directLocks(n,{votes:e}){return e.length?n.query.democracy.referendumInfoOf.multi(e.map(([t])=>t)).pipe(map$2(t=>e.map((a,o)=>[a,t[o].unwrapOr(null)]).filter(a=>!!a[1]&&isUndefined(a[1].end)&&a[0][1].isStandard).map(([a,o])=>parseLock(n,a,o)))):of([])}function locks(n,e){return memo(n,t=>e.query.democracy.votingOf?e.query.democracy.votingOf(t).pipe(switchMap(a=>a.isDirect?directLocks(e,a.asDirect):a.isDelegating?delegateLocks(e,a.asDelegating):of([]))):of([]))}function withImage(n,e){if(e.isNone)return of(null);const[t,a]=e.unwrap();return n.derive.democracy.preimage(t).pipe(map$2(o=>({image:o,imageHash:getImageHashBounded(t),threshold:a})))}function nextExternal(n,e){return memo(n,()=>{var t;return(t=e.query.democracy)!=null&&t.nextExternal?e.query.democracy.nextExternal().pipe(switchMap(a=>withImage(e,a))):of(null)})}function getUnrequestedTicket(n){return n.ticket||n.deposit}function getRequestedTicket(n){return(n.maybeTicket||n.deposit).unwrapOrDefault()}function isDemocracyPreimage(n,e){return!!e&&!n.query.democracy.dispatchQueue}function constructProposal(n,[e,t,a,o]){let i;try{i=n.registry.createType("Call",e.toU8a(!0))}catch(r){console.error(r)}return{at:o,balance:a,proposal:i,proposer:t}}function parseDemocracy(n,e){if(!e.isNone){if(isDemocracyPreimage(n,e)){const t=e.unwrap();if(t.isMissing)return;const{data:a,deposit:o,provider:i,since:r}=t.asAvailable;return constructProposal(n,[a,i,o,r])}return constructProposal(n,e.unwrap())}}function parseImage(n,[e,t,a]){if(!t)return;const[o,i]=t.isUnrequested?getUnrequestedTicket(t.asUnrequested):getRequestedTicket(t.asRequested);let r;if(a)try{r=n.registry.createType("Call",a.toU8a(!0))}catch(s){console.error(s)}return{at:BN_ZERO,balance:i,proposal:r,proposalHash:e,proposer:o}}function getDemocracyImages(n,e){const t=e.map(a=>getImageHashBounded(a));return n.query.democracy.preimages.multi(t).pipe(map$2(a=>a.map(o=>parseDemocracy(n,o))))}function getImages(n,e){const t=e.map(o=>getImageHashBounded(o)),a=n.registry.lookup.getTypeDef(n.query.preimage.preimageFor.creator.meta.type.asMap.key).type;return n.query.preimage.statusFor.multi(t).pipe(switchMap(o=>{const i=o.map(s=>s.unwrapOr(null)),r=i.map((s,c)=>s?a==="H256"?t[c]:s.isRequested?[t[c],s.asRequested.len.unwrapOr(0)]:[t[c],s.asUnrequested.len]:null).filter(s=>!!s);return n.query.preimage.preimageFor.multi(r).pipe(map$2(s=>{let c=-1;return i.map((d,p)=>d?[t[p],d,s[++c].unwrapOr(null)]:[t[p],null,null]).map(d=>parseImage(n,d))}))}))}function preimages(n,e){return memo(n,t=>t.length?isFunction$2(e.query.democracy.preimages)?getDemocracyImages(e,t):isFunction$2(e.query.preimage.preimageFor)?getImages(e,t):of([]):of([]))}const preimage=firstMemo((n,e)=>n.derive.democracy.preimages([e]));function isNewDepositors(n){return isFunction$2(n[1].mul)}function parse$3([n,e,t]){return n.filter(([,,a],o)=>{var i;return!!((i=t[o])!=null&&i.isSome)&&!a.isEmpty}).map(([a,o,i],r)=>{const s=t[r].unwrap();return objectSpread({image:e[r],imageHash:getImageHashBounded(o),index:a,proposer:i},isNewDepositors(s)?{balance:s[1],seconds:s[0]}:{balance:s[0],seconds:s[1]})})}function proposals$3(n,e){return memo(n,()=>{var t;return isFunction$2((t=e.query.democracy)==null?void 0:t.publicProps)?e.query.democracy.publicProps().pipe(switchMap(a=>a.length?combineLatest([of(a),e.derive.democracy.preimages(a.map(([,o])=>o)),e.query.democracy.depositOf.multi(a.map(([o])=>o))]):of([[],[],[]])),map$2(parse$3)):of([])})}function referendumIds(n,e){return memo(n,()=>{var t;return(t=e.query.democracy)!=null&&t.lowestUnbaked?e.queryMulti([e.query.democracy.lowestUnbaked,e.query.democracy.referendumCount]).pipe(map$2(([a,o])=>o.gt(a)?[...Array(o.sub(a).toNumber())].map((i,r)=>a.addn(r)):[])):of([])})}function referendums(n,e){return memo(n,()=>e.derive.democracy.referendumsActive().pipe(switchMap(t=>t.length?combineLatest([of(t),e.derive.democracy._referendumsVotes(t)]):of([[],[]])),map$2(([t,a])=>t.map((o,i)=>objectSpread({},o,a[i])))))}function referendumsActive(n,e){return memo(n,()=>e.derive.democracy.referendumIds().pipe(switchMap(t=>t.length?e.derive.democracy.referendumsInfo(t):of([]))))}function referendumsFinished(n,e){return memo(n,()=>e.derive.democracy.referendumIds().pipe(switchMap(t=>e.query.democracy.referendumInfoOf.multi(t)),map$2(t=>t.map(a=>a.unwrapOr(null)).filter(a=>!!a&&a.isFinished).map(a=>a.asFinished))))}function votesPrev(n,e){return n.query.democracy.votersFor(e).pipe(switchMap(t=>combineLatest([of(t),t.length?n.query.democracy.voteOf.multi(t.map(a=>[e,a])):of([]),n.derive.balances.votingBalances(t)])),map$2(([t,a,o])=>t.map((i,r)=>({accountId:i,balance:o[r].votingBalance||n.registry.createType("Balance"),isDelegating:!1,vote:a[r]||n.registry.createType("Vote")}))))}function extractVotes(n,e){return n.filter(([,t])=>t.isDirect).map(([t,a])=>[t,a.asDirect.votes.filter(([o])=>o.eq(e))]).filter(([,t])=>!!t.length).reduce((t,[a,o])=>o.reduce((i,[,r])=>(r.isStandard&&i.push(objectSpread({accountId:a,isDelegating:!1},r.asStandard)),i),t),[])}function votesCurr(n,e){return n.query.democracy.votingOf.entries().pipe(map$2(t=>{const a=t.map(([{args:[r]},s])=>[r,s]),o=extractVotes(a,e),i=a.filter(([,r])=>r.isDelegating).map(([r,s])=>[r,s.asDelegating]);return i.forEach(([r,{balance:s,conviction:c,target:d}])=>{const p=i.find(([I])=>I.eq(d)),h=o.find(({accountId:I})=>I.eq(p?p[0]:d));h&&o.push({accountId:r,balance:s,isDelegating:!0,vote:n.registry.createType("Vote",{aye:h.vote.isAye,conviction:c})})}),o}))}function _referendumVotes(n,e){return memo(n,t=>combineLatest([e.derive.democracy.sqrtElectorate(),isFunction$2(e.query.democracy.votingOf)?votesCurr(e,t.index):votesPrev(e,t.index)]).pipe(map$2(([a,o])=>calcVotes(a,t,o))))}function _referendumsVotes(n,e){return memo(n,t=>t.length?combineLatest(t.map(a=>e.derive.democracy._referendumVotes(a))):of([]))}function _referendumInfo(n,e){return memo(n,(t,a)=>{const o=getStatus(a);return o?e.derive.democracy.preimage(o.proposal||o.proposalHash).pipe(map$2(i=>({image:i,imageHash:getImageHash(o),index:e.registry.createType("ReferendumIndex",t),status:o}))):of(null)})}function referendumsInfo(n,e){return memo(n,t=>t.length?e.query.democracy.referendumInfoOf.multi(t).pipe(switchMap(a=>combineLatest(t.map((o,i)=>e.derive.democracy._referendumInfo(o,a[i])))),map$2(a=>a.filter(o=>!!o))):of([]))}function sqrtElectorate(n,e){return memo(n,()=>e.query.balances.totalIssuance().pipe(map$2(bnSqrt)))}const democracy=Object.freeze(Object.defineProperty({__proto__:null,_referendumInfo,_referendumVotes,_referendumsVotes,dispatchQueue,locks,nextExternal,preimage,preimages,proposals:proposals$3,referendumIds,referendums,referendumsActive,referendumsFinished,referendumsInfo,sqrtElectorate},Symbol.toStringTag,{value:"Module"}));function isSeatHolder(n){return!Array.isArray(n)}function isCandidateTuple(n){return Array.isArray(n)}function getAccountTuple(n){return isSeatHolder(n)?[n.who,n.stake]:n}function getCandidate(n){return isCandidateTuple(n)?n[0]:n}function sortAccounts([,n],[,e]){return e.cmp(n)}function getConstants(n,e){return e?{candidacyBond:n.consts[e].candidacyBond,desiredRunnersUp:n.consts[e].desiredRunnersUp,desiredSeats:n.consts[e].desiredMembers,termDuration:n.consts[e].termDuration,votingBond:n.consts[e].votingBond,votingBondBase:n.consts[e].votingBondBase,votingBondFactor:n.consts[e].votingBondFactor}:{}}function getModules(n){const[e]=n.registry.getModuleInstances(n.runtimeVersion.specName,"council")||["council"],t=n.query.phragmenElection?"phragmenElection":n.query.electionsPhragmen?"electionsPhragmen":n.query.elections?"elections":null;return[n.query[e]?e:"council",t]}function queryAll(n,e,t){return n.queryMulti([n.query[e].members,n.query[t].candidates,n.query[t].members,n.query[t].runnersUp])}function queryCouncil(n,e){return combineLatest([n.query[e].members(),of([]),of([]),of([])])}function info$3(n,e){return memo(n,()=>{const[t,a]=getModules(e);return(a?queryAll(e,t,a):queryCouncil(e,t)).pipe(map$2(([o,i,r,s])=>objectSpread({},getConstants(e,a),{candidateCount:e.registry.createType("u32",i.length),candidates:i.map(getCandidate),members:r.length?r.map(getAccountTuple).sort(sortAccounts):o.map(c=>[c,e.registry.createType("Balance")]),runnersUp:s.map(getAccountTuple).sort(sortAccounts)})))})}const elections=Object.freeze(Object.defineProperty({__proto__:null,info:info$3},Symbol.toStringTag,{value:"Module"}));function mapResult([n,e,t,a]){return e.forEach((o,i)=>{const r=o.toString(),s=a[i],c=!t[i].isEmpty,d=n[r];(!d||d.hasMessage!==c||!d.blockCount.eq(s))&&(n[r]={blockCount:s,hasMessage:c,isOnline:c||s.gt(BN_ZERO)})}),n}function receivedHeartbeats(n,e){return memo(n,()=>{var t;return(t=e.query.imOnline)!=null&&t.receivedHeartbeats?e.derive.staking.overview().pipe(switchMap(({currentIndex:a,validators:o})=>combineLatest([of({}),of(o),e.query.imOnline.receivedHeartbeats.multi(o.map((i,r)=>[a,r])),e.query.imOnline.authoredBlocks.multi(o.map(i=>[a,i]))])),map$2(mapResult)):of({})})}const imOnline=Object.freeze(Object.defineProperty({__proto__:null,receivedHeartbeats},Symbol.toStringTag,{value:"Module"})),members$2=members$5("membership"),hasProposals$1=hasProposals$4("membership"),proposal$1=proposal$4("membership"),proposalCount$1=proposalCount$4("membership"),proposalHashes$1=proposalHashes$4("membership"),proposals$2=proposals$6("membership"),prime$1=prime$4("membership"),membership=Object.freeze(Object.defineProperty({__proto__:null,hasProposals:hasProposals$1,members:members$2,prime:prime$1,proposal:proposal$1,proposalCount:proposalCount$1,proposalHashes:proposalHashes$1,proposals:proposals$2},Symbol.toStringTag,{value:"Module"}));function didUpdateToBool(n,e){return n.isSome?n.unwrap().some(t=>t.eq(e)):!1}function parseActive(n,e){const t=e.find(([a])=>a===n);if(t&&t[1].isSome){const[a,o]=t[1].unwrap();return objectSpread({collatorId:a},o.isWithRetries?{isRetriable:!0,retries:o.asWithRetries.toNumber()}:{isRetriable:!1,retries:0})}return null}function parseCollators(n,e){return e.map(t=>{const a=t.find(([o])=>o===n);return a?a[1]:null})}function parse$2(n,[e,t,a,o,i,r,s,c]){return i.isNone?null:{active:parseActive(n,e),didUpdate:didUpdateToBool(o,n),heads:s,id:n,info:objectSpread({id:n},i.unwrap()),pendingSwapId:r.unwrapOr(null),relayDispatchQueue:c,retryCollators:parseCollators(n,t),selectedCollators:parseCollators(n,a)}}function info$2(n,e){return memo(n,t=>e.query.registrar&&e.query.parachains?e.queryMulti([e.query.registrar.active,e.query.registrar.retryQueue,e.query.registrar.selectedThreads,e.query.parachains.didUpdate,[e.query.registrar.paras,t],[e.query.registrar.pendingSwap,t],[e.query.parachains.heads,t],[e.query.parachains.relayDispatchQueue,t]]).pipe(map$2(a=>parse$2(e.registry.createType("ParaId",t),a))):of(null))}function parse$1([n,e,t,a,o]){return n.map((i,r)=>({didUpdate:didUpdateToBool(e,i),id:i,info:objectSpread({id:i},a[r].unwrapOr(null)),pendingSwapId:o[r].unwrapOr(null),relayDispatchQueueSize:t[r][0].toNumber()}))}function overview$1(n,e){return memo(n,()=>{var t;return(t=e.query.registrar)!=null&&t.parachains&&e.query.parachains?e.query.registrar.parachains().pipe(switchMap(a=>combineLatest([of(a),e.query.parachains.didUpdate(),e.query.parachains.relayDispatchQueueSize.multi(a),e.query.registrar.paras.multi(a),e.query.registrar.pendingSwap.multi(a)])),map$2(parse$1)):of([])})}const parachains=Object.freeze(Object.defineProperty({__proto__:null,info:info$2,overview:overview$1},Symbol.toStringTag,{value:"Module"}));function parse([n,e,t,a,o]){return{activeEra:e,activeEraStart:t,currentEra:a,currentIndex:n,validatorCount:o}}function queryStaking(n){return n.queryMulti([n.query.session.currentIndex,n.query.staking.activeEra,n.query.staking.currentEra,n.query.staking.validatorCount]).pipe(map$2(([e,t,a,o])=>{const{index:i,start:r}=t.unwrapOrDefault();return parse([e,i,r,a.unwrapOrDefault(),o])}))}function querySession(n){return n.query.session.currentIndex().pipe(map$2(e=>parse([e,n.registry.createType("EraIndex"),n.registry.createType("Option<Moment>"),n.registry.createType("EraIndex"),n.registry.createType("u32")])))}function empty(n){return of(parse([n.registry.createType("SessionIndex",1),n.registry.createType("EraIndex"),n.registry.createType("Option<Moment>"),n.registry.createType("EraIndex"),n.registry.createType("u32")]))}function indexes(n,e){return memo(n,()=>e.query.session?e.query.staking?queryStaking(e):querySession(e):empty(e))}function info$1(n,e){return memo(n,()=>e.derive.session.indexes().pipe(map$2(t=>{var i,r,s,c;const a=((r=(i=e.consts)==null?void 0:i.babe)==null?void 0:r.epochDuration)||e.registry.createType("u64",1),o=((c=(s=e.consts)==null?void 0:s.staking)==null?void 0:c.sessionsPerEra)||e.registry.createType("SessionIndex",1);return objectSpread({eraLength:e.registry.createType("BlockNumber",o.mul(a)),isEpoch:!!e.query.babe,sessionLength:a,sessionsPerEra:o},t)})))}function withProgressField(n){return(e,t)=>memo(e,()=>t.derive.session.progress().pipe(map$2(a=>a[n])))}function createDerive(n,e,[t,a,o,i]){const r=a.mul(e.sessionLength).iadd(o),s=t.sub(r),c=e.currentIndex.sub(i).imul(e.sessionLength).iadd(s);return objectSpread({eraProgress:n.registry.createType("BlockNumber",c),sessionProgress:n.registry.createType("BlockNumber",s)},e)}function queryAura(n){return n.derive.session.info().pipe(map$2(e=>objectSpread({eraProgress:n.registry.createType("BlockNumber"),sessionProgress:n.registry.createType("BlockNumber")},e)))}function queryBabe(n){return n.derive.session.info().pipe(switchMap(e=>{var t;return combineLatest([of(e),(t=n.query.staking)!=null&&t.erasStartSessionIndex?n.queryMulti([n.query.babe.currentSlot,n.query.babe.epochIndex,n.query.babe.genesisSlot,[n.query.staking.erasStartSessionIndex,e.activeEra]]):n.queryMulti([n.query.babe.currentSlot,n.query.babe.epochIndex,n.query.babe.genesisSlot])])}),map$2(([e,[t,a,o,i]])=>[e,[t,a,o,i&&i.isSome?i.unwrap():n.registry.createType("SessionIndex",1)]]))}function progress(n,e){return memo(n,()=>e.query.babe?queryBabe(e).pipe(map$2(([t,a])=>createDerive(e,t,a))):queryAura(e))}const eraLength=withProgressField("eraLength"),eraProgress=withProgressField("eraProgress"),sessionProgress=withProgressField("sessionProgress"),session=Object.freeze(Object.defineProperty({__proto__:null,eraLength,eraProgress,indexes,info:info$1,progress,sessionProgress},Symbol.toStringTag,{value:"Module"}));function getPrev(n){return n.query.society.candidates().pipe(switchMap(e=>combineLatest([of(e),n.query.society.suspendedCandidates.multi(e.map(({who:t})=>t))])),map$2(([e,t])=>e.map(({kind:a,value:o,who:i},r)=>({accountId:i,isSuspended:t[r].isSome,kind:a,value:o}))))}function getCurr(n){return n.query.society.candidates.entries().pipe(map$2(e=>e.filter(([,t])=>t.isSome).map(([{args:[t]},a])=>[t,a.unwrap()]).map(([t,{bid:a,kind:o}])=>({accountId:t,isSuspended:!1,kind:o,value:a}))))}function candidates(n,e){return memo(n,()=>e.query.society.suspendedCandidates&&e.query.society.candidates.creator.meta.type.isPlain?getPrev(e):getCurr(e))}function info(n,e){return memo(n,()=>combineLatest([e.query.society.bids(),e.query.society.defender?e.query.society.defender():of(void 0),e.query.society.founder(),e.query.society.head(),e.query.society.maxMembers?e.query.society.maxMembers():of(void 0),e.query.society.pot()]).pipe(map$2(([t,a,o,i,r,s])=>({bids:t,defender:a==null?void 0:a.unwrapOr(void 0),founder:o.unwrapOr(void 0),hasDefender:(a==null?void 0:a.isSome)&&i.isSome&&!i.eq(a)||!1,head:i.unwrapOr(void 0),maxMembers:r,pot:s}))))}function member(n,e){return memo(n,t=>e.derive.society._members([t]).pipe(map$2(([a])=>a)))}function _membersPrev(n,e){return combineLatest([of(e),n.query.society.payouts.multi(e),n.query.society.strikes.multi(e),n.query.society.defenderVotes.multi(e),n.query.society.suspendedMembers.multi(e),n.query.society.vouching.multi(e)]).pipe(map$2(([t,a,o,i,r,s])=>t.map((c,d)=>({accountId:c,isDefenderVoter:i[d].isSome,isSuspended:r[d].isTrue,payouts:a[d],strikes:o[d],vote:i[d].unwrapOr(void 0),vouching:s[d].unwrapOr(void 0)}))))}function _membersCurr(n,e){return combineLatest([of(e),n.query.society.members.multi(e),n.query.society.payouts.multi(e),n.query.society.challengeRoundCount().pipe(switchMap(t=>n.query.society.defenderVotes.multi(e.map(a=>[t,a])))),n.query.society.suspendedMembers.multi(e)]).pipe(map$2(([t,a,o,i,r])=>t.map((s,c)=>a[c].isSome?{accountId:s,isDefenderVoter:i[c].isSome,isSuspended:r[c].isSome,member:a[c].unwrap(),payouts:o[c].payouts}:null).filter(s=>!!s).map(({accountId:s,isDefenderVoter:c,isSuspended:d,member:p,payouts:h})=>({accountId:s,isDefenderVoter:c,isSuspended:d,payouts:h,strikes:p.strikes,vouching:p.vouching.unwrapOr(void 0)}))))}function _members(n,e){return memo(n,t=>e.query.society.members.creator.meta.type.isMap?_membersCurr(e,t):_membersPrev(e,t))}function members$1(n,e){return memo(n,()=>e.query.society.members.creator.meta.type.isMap?e.query.society.members.keys().pipe(switchMap(t=>e.derive.society._members(t.map(({args:[a]})=>a)))):e.query.society.members().pipe(switchMap(t=>e.derive.society._members(t))))}const society=Object.freeze(Object.defineProperty({__proto__:null,_members,candidates,info,member,members:members$1},Symbol.toStringTag,{value:"Module"})),QUERY_OPTS={withDestination:!0,withLedger:!0,withNominations:!0,withPrefs:!0};function groupByEra(n){return n.reduce((e,{era:t,value:a})=>{const o=t.toString();return e[o]=(e[o]||BN_ZERO).add(a.unwrap()),e},{})}function calculateUnlocking(n,e,t){const a=Object.entries(groupByEra(((e==null?void 0:e.unlocking)||[]).filter(({era:o})=>o.unwrap().gt(t.activeEra)))).map(([o,i])=>({remainingEras:new BN(o).isub(t.activeEra),value:n.registry.createType("Balance",i)}));return a.length?a:void 0}function redeemableSum(n,e,t){return n.registry.createType("Balance",((e==null?void 0:e.unlocking)||[]).reduce((a,{era:o,value:i})=>o.unwrap().gt(t.currentEra)?a:a.iadd(i.unwrap()),new BN(0)))}function parseResult$1(n,e,t,a){return objectSpread({},t,a,{redeemable:redeemableSum(n,a.stakingLedger,e),unlocking:calculateUnlocking(n,a.stakingLedger,e)})}function accounts$1(n,e){return memo(n,(t,a=QUERY_OPTS)=>e.derive.session.info().pipe(switchMap(o=>combineLatest([e.derive.staking.keysMulti(t),e.derive.staking.queryMulti(t,a)]).pipe(map$2(([i,r])=>r.map((s,c)=>parseResult$1(e,o,i[c],s)))))))}const account=firstMemo((n,e,t)=>n.derive.staking.accounts([e],t));function currentPoints(n,e){return memo(n,()=>e.derive.session.indexes().pipe(switchMap(({activeEra:t})=>e.query.staking.erasRewardPoints(t))))}const DEFAULT_FLAGS$1={withController:!0,withExposure:!0,withPrefs:!0};function combineAccounts(n,e){return arrayFlatten([n,e.filter(t=>!n.find(a=>a.eq(t)))])}function electedInfo(n,e){return memo(n,(t=DEFAULT_FLAGS$1,a=0)=>e.derive.staking.validators().pipe(switchMap(({nextElected:o,validators:i})=>e.derive.staking.queryMulti(combineAccounts(o,i),t,a).pipe(map$2(r=>({info:r,nextElected:o,validators:i}))))))}function getEraCache(n,e,t){const a=`${n}-${e.toString()}`;return[a,t?void 0:deriveCache.get(a)]}function getEraMultiCache(n,e,t){return t?[]:e.map(o=>deriveCache.get(`${n}-${o.toString()}`)).filter(o=>!!o)}function setEraCache(n,e,t){return!e&&deriveCache.set(n,t),t}function setEraMultiCache(n,e,t){return!e&&t.forEach(a=>deriveCache.set(`${n}-${a.era.toString()}`,a)),t}function filterCachedEras(n,e,t){return n.map(a=>e.find(({era:o})=>a.eq(o))||t.find(({era:o})=>a.eq(o))).filter(a=>!!a)}const ERA_CHUNK_SIZE=14;function chunkEras(n,e){const t=arrayChunk(n,ERA_CHUNK_SIZE);let a=0;const o=new BehaviorSubject(t[a]);return o.pipe(switchMap(e),tap(()=>{nextTick(()=>{a++,a===t.length?o.complete():o.next(t[a])})}),toArray(),map$2(arrayFlatten))}function filterEras(n,e){return n.filter(t=>!e.some(({era:a})=>t.eq(a)))}function erasHistoricApply(n){return(e,t)=>memo(e,(a=!1)=>t.derive.staking.erasHistoric(a).pipe(switchMap(o=>t.derive.staking[n](o,a))))}function erasHistoricApplyAccount(n){return(e,t)=>memo(e,(a,o=!1,i)=>t.derive.staking.erasHistoric(o).pipe(switchMap(r=>t.derive.staking[n](a,r,o,i||0))))}function singleEra(n){return(e,t)=>memo(e,a=>t.derive.staking[n](a,!0))}function combineEras(n){return(e,t)=>memo(e,(a,o)=>a.length?chunkEras(a,i=>combineLatest(i.map(r=>t.derive.staking[n](r,o)))):of([]))}const CACHE_KEY$4="eraExposure";function mapStakersClipped(n,e){const t={},a={};return e.forEach(([o,i])=>{const r=o.args[1].toString();a[r]=i,i.others.forEach(({who:s},c)=>{const d=s.toString();t[d]=t[d]||[],t[d].push({validatorId:r,validatorIndex:c})})}),{era:n,nominators:t,validators:a}}function mapStakersPaged(n,e){const t={},a={};return e.forEach(([o,i])=>{if(i.isSome){const r=o.args[1].toString(),s=i.unwrap();a[r]=s,s.others.forEach(({who:c},d)=>{const p=c.toString();t[p]=t[p]||[],t[p].push({validatorId:r,validatorIndex:d})})}}),{era:n,nominators:t,validators:a}}function _eraExposure(n,e){return memo(n,(t,a=!1)=>{const[o,i]=getEraCache(CACHE_KEY$4,t,a);return i?of(i):e.query.staking.erasStakersPaged?e.query.staking.erasStakersPaged.entries(t).pipe(map$2(r=>setEraCache(o,a,mapStakersPaged(t,r)))):e.query.staking.erasStakersClipped.entries(t).pipe(map$2(r=>setEraCache(o,a,mapStakersClipped(t,r))))})}const eraExposure=singleEra("_eraExposure"),_erasExposure=combineEras("_eraExposure"),erasExposure=erasHistoricApply("_erasExposure");function erasHistoric(n,e){return memo(n,t=>combineLatest([e.query.staking.activeEra(),e.consts.staking.historyDepth?of(e.consts.staking.historyDepth):e.query.staking.historyDepth()]).pipe(map$2(([a,o])=>{const i=[],r=o.toNumber(),s=a.unwrapOrDefault().index;let c=s;for(;c.gte(BN_ZERO)&&i.length<r;)(c!==s||t===!0)&&i.push(e.registry.createType("EraIndex",c)),c=c.sub(BN_ONE);return i.reverse()})))}const CACHE_KEY$3="eraPoints";function mapValidators({individual:n}){return[...n.entries()].filter(([,e])=>e.gt(BN_ZERO)).reduce((e,[t,a])=>(e[t.toString()]=a,e),{})}function mapPoints(n,e){return n.map((t,a)=>({era:t,eraPoints:e[a].total,validators:mapValidators(e[a])}))}function _erasPoints(n,e){return memo(n,(t,a)=>{if(!t.length)return of([]);const o=getEraMultiCache(CACHE_KEY$3,t,a),i=filterEras(t,o);return i.length?e.query.staking.erasRewardPoints.multi(i).pipe(map$2(r=>filterCachedEras(t,o,setEraMultiCache(CACHE_KEY$3,a,mapPoints(i,r))))):of(o)})}const erasPoints=erasHistoricApply("_erasPoints"),CACHE_KEY$2="eraPrefs";function mapPrefs(n,e){const t={};return e.forEach(([a,o])=>{t[a.args[1].toString()]=o}),{era:n,validators:t}}function _eraPrefs(n,e){return memo(n,(t,a)=>{const[o,i]=getEraCache(CACHE_KEY$2,t,a);return i?of(i):e.query.staking.erasValidatorPrefs.entries(t).pipe(map$2(r=>setEraCache(o,a,mapPrefs(t,r))))})}const eraPrefs=singleEra("_eraPrefs"),_erasPrefs=combineEras("_eraPrefs"),erasPrefs=erasHistoricApply("_erasPrefs"),CACHE_KEY$1="eraRewards";function mapRewards(n,e){return n.map((t,a)=>({era:t,eraReward:e[a].unwrapOrDefault()}))}function _erasRewards(n,e){return memo(n,(t,a)=>{if(!t.length)return of([]);const o=getEraMultiCache(CACHE_KEY$1,t,a),i=filterEras(t,o);return i.length?e.query.staking.erasValidatorReward.multi(i).pipe(map$2(r=>filterCachedEras(t,o,setEraMultiCache(CACHE_KEY$1,a,mapRewards(i,r))))):of(o)})}const erasRewards=erasHistoricApply("_erasRewards"),CACHE_KEY="eraSlashes";function mapSlashes(n,e,t){const a={},o={};return e.forEach(([i,r])=>{a[i.args[1].toString()]=r.unwrap()}),t.forEach(([i,r])=>{o[i.args[1].toString()]=r.unwrapOrDefault()[1]}),{era:n,nominators:a,validators:o}}function _eraSlashes(n,e){return memo(n,(t,a)=>{const[o,i]=getEraCache(CACHE_KEY,t,a);return i?of(i):combineLatest([e.query.staking.nominatorSlashInEra.entries(t),e.query.staking.validatorSlashInEra.entries(t)]).pipe(map$2(([r,s])=>setEraCache(o,a,mapSlashes(t,r,s))))})}const eraSlashes=singleEra("_eraSlashes"),_erasSlashes=combineEras("_eraSlashes"),erasSlashes=erasHistoricApply("_erasSlashes");function extractsIds(n,e,t){const a=(e.find(([i])=>i.eq(n))||[void 0,[]])[1],o=t.unwrapOr([]);return{nextSessionIds:Array.isArray(o)?o:[...o.values()],sessionIds:Array.isArray(a)?a:[...a.values()]}}const keys=firstMemo((n,e)=>n.derive.staking.keysMulti([e]));function keysMulti(n,e){return memo(n,t=>t.length?e.query.session.queuedKeys().pipe(switchMap(a=>{var o;return combineLatest([of(a),(o=e.consts.session)!=null&&o.dedupKeyPrefix?e.query.session.nextKeys.multi(t.map(i=>[e.consts.session.dedupKeyPrefix,i])):combineLatest(t.map(i=>e.query.session.nextKeys(i)))])}),map$2(([a,o])=>t.map((i,r)=>extractsIds(i,a,o[r])))):of([]))}function overview(n,e){return memo(n,()=>combineLatest([e.derive.session.indexes(),e.derive.staking.validators()]).pipe(map$2(([t,{nextElected:a,validators:o}])=>objectSpread({},t,{nextElected:a,validators:o}))))}function _ownExposures(n,e){return memo(n,(t,a,o,i)=>{const r=e.registry.createType("Exposure"),s=e.registry.createType("Option<Null>"),c=e.registry.createType("Option<Null>");return a.length?combineLatest([e.query.staking.erasStakersClipped?combineLatest(a.map(d=>e.query.staking.erasStakersClipped(d,t))):of(a.map(d=>r)),e.query.staking.erasStakers?combineLatest(a.map(d=>e.query.staking.erasStakers(d,t))):of(a.map(d=>r)),e.query.staking.erasStakersPaged?combineLatest(a.map(d=>e.query.staking.erasStakersPaged(d,t,i))):of(a.map(d=>s)),e.query.staking.erasStakersOverview?combineLatest(a.map(d=>e.query.staking.erasStakersOverview(d,t))):of(a.map(d=>c))]).pipe(map$2(([d,p,h,I])=>a.map((_,k)=>({clipped:d[k],era:_,exposure:p[k],exposureMeta:I[k],exposurePaged:h[k]})))):of([])})}const ownExposure=firstMemo((n,e,t,a)=>n.derive.staking._ownExposures(e,[t],!0,a||0)),ownExposures=erasHistoricApplyAccount("_ownExposures");function _ownSlashes(n,e){return memo(n,(t,a,o)=>a.length?combineLatest([combineLatest(a.map(i=>e.query.staking.validatorSlashInEra(i,t))),combineLatest(a.map(i=>e.query.staking.nominatorSlashInEra(i,t)))]).pipe(map$2(([i,r])=>a.map((s,c)=>({era:s,total:i[c].isSome?i[c].unwrap()[1]:r[c].unwrapOrDefault()})))):of([]))}const ownSlash=firstMemo((n,e,t)=>n.derive.staking._ownSlashes(e,[t],!0)),ownSlashes=erasHistoricApplyAccount("_ownSlashes");function rewardDestinationCompat(n){return typeof n.isSome=="boolean"?n.unwrapOr(null):n}function filterClaimedRewards(n,e){return n.registry.createType("Vec<u32>",e.filter(t=>t!==-1))}function filterRewards$1(n,e,t,a){const o={},i={},r=n.map(s=>s.toString());return t.forEach(([s,c])=>{const d=s.args[1].toString(),p=s.args[0].toNumber();r.includes(d)&&(o[d]||(o[d]=new Map),o[d].set(p,c.toArray()))}),a.forEach(([s,c])=>{const d=s.args[1].toString(),p=s.args[0].toNumber();r.includes(d)&&c.isSome&&(i[d]||(i[d]=new Map),i[d].set(p,c.unwrap().pageCount))}),n.map(s=>{const c=o[s.toString()],d=i[s.toString()];return e.map(p=>{if(c&&c.has(p)&&d&&d.has(p)){const h=c.get(p),I=d.get(p);return h.length===I.toNumber()?p:-1}return-1})})}function parseDetails(n,e,t,a,o,i,r,s,c,d,p){return{accountId:e,claimedRewardsEras:filterClaimedRewards(n,d),controllerId:(t==null?void 0:t.unwrapOr(null))||null,exposureEraStakers:p,exposureMeta:c,exposurePaged:r,nominators:a.isSome?a.unwrap().targets:[],rewardDestination:rewardDestinationCompat(o),stakingLedger:s.unwrapOrDefault(),stashId:e,validatorPrefs:i}}function getLedgers(n,e,{withLedger:t=!1}){const a=e.filter(i=>t&&!!i&&i.isSome).map(i=>i.unwrap()),o=n.registry.createType("Option<StakingLedger>");return(a.length?combineLatest(a.map(i=>n.query.staking.ledger(i))):of([])).pipe(map$2(i=>{let r=-1;return e.map(s=>s&&s.isSome&&i[++r]||o)}))}function getStashInfo(n,e,t,{withClaimedRewardsEras:a,withController:o,withDestination:i,withExposure:r,withExposureErasStakersLegacy:s,withExposureMeta:c,withLedger:d,withNominations:p,withPrefs:h},I){const _=n.registry.createType("Option<Nominations>"),k=n.registry.createType("RewardDestination"),P=n.registry.createType("Exposure"),v=n.registry.createType("ValidatorPrefs"),E=n.registry.createType("Option<Null>"),M=n.registry.createType("Option<Null>"),R=[-1],H=Number(n.consts.staking.historyDepth.toNumber()),K=new Array(H).fill(0).map((w,U)=>U===0?t.toNumber()-1:t.toNumber()-U-1);return combineLatest([o||d?combineLatest(e.map(w=>n.query.staking.bonded(w))):of(e.map(()=>null)),p?combineLatest(e.map(w=>n.query.staking.nominators(w))):of(e.map(()=>_)),i?combineLatest(e.map(w=>n.query.staking.payee(w))):of(e.map(()=>k)),h?combineLatest(e.map(w=>n.query.staking.validators(w))):of(e.map(()=>v)),r&&n.query.staking.erasStakersPaged?combineLatest(e.map(w=>n.query.staking.erasStakersPaged(t,w,I))):of(e.map(()=>E)),c&&n.query.staking.erasStakersOverview?combineLatest(e.map(w=>n.query.staking.erasStakersOverview(t,w))):of(e.map(()=>M)),a&&n.query.staking.claimedRewards?combineLatest([n.query.staking.claimedRewards.entries(),n.query.staking.erasStakersOverview.entries()]).pipe(map$2(([w,U])=>filterRewards$1(e,K,w,U))):of(e.map(()=>R)),s&&n.query.staking.erasStakers?combineLatest(e.map(w=>n.query.staking.erasStakers(t,w))):of(e.map(()=>P))])}function getBatch(n,e,t,a,o){return getStashInfo(n,t,e,a,o).pipe(switchMap(([i,r,s,c,d,p,h,I])=>getLedgers(n,i,a).pipe(map$2(_=>t.map((k,P)=>parseDetails(n,k,i[P],r[P],s[P],c[P],d[P],_[P],p[P],h[P],I[P]))))))}const query=firstMemo((n,e,t,a)=>n.derive.staking.queryMulti([e],t,a));function queryMulti(n,e){return memo(n,(t,a,o)=>e.derive.session.indexes().pipe(switchMap(({activeEra:i})=>{const r=t.map(c=>e.registry.createType("AccountId",c)),s=o||0;return r.length?getBatch(e,i,r,a,s):of([])})))}function _stakerExposures(n,e){return memo(n,(t,a,o=!1)=>{const i=t.map(r=>e.registry.createType("AccountId",r).toString());return e.derive.staking._erasExposure(a,o).pipe(map$2(r=>i.map(s=>r.map(({era:c,nominators:d,validators:p})=>{const h=!!p[s],I={},_=d[s]||[];return h?I[s]=p[s]:_&&_.forEach(({validatorId:k})=>{I[k]=p[k]}),{era:c,isEmpty:!Object.keys(I).length,isValidator:h,nominating:_,validators:I}}))))})}function stakerExposures(n,e){return memo(n,(t,a=!1)=>e.derive.staking.erasHistoric(a).pipe(switchMap(o=>e.derive.staking._stakerExposures(t,o,a))))}const stakerExposure=firstMemo((n,e,t)=>n.derive.staking.stakerExposures([e],t));function _stakerPoints(n,e){return memo(n,(t,a,o)=>{const i=e.registry.createType("AccountId",t).toString();return e.derive.staking._erasPoints(a,o).pipe(map$2(r=>r.map(({era:s,eraPoints:c,validators:d})=>({era:s,eraPoints:c,points:d[i]||e.registry.createType("RewardPoint")}))))})}const stakerPoints=erasHistoricApplyAccount("_stakerPoints");function _stakerPrefs(n,e){return memo(n,(t,a,o)=>e.query.staking.erasValidatorPrefs.multi(a.map(i=>[i,t])).pipe(map$2(i=>i.map((r,s)=>({era:a[s],validatorPrefs:r})))))}const stakerPrefs=erasHistoricApplyAccount("_stakerPrefs");function extractCompatRewards(n,e){const t=e?(e.legacyClaimedRewards||e.claimedRewards).toArray():[];return n.toArray().concat(t)}function parseRewards(n,e,[t,a,o],i){return i.map(({era:r,isEmpty:s,isValidator:c,nominating:d,validators:p})=>{const{eraPoints:h,validators:I}=t.find(E=>E.era.eq(r))||{eraPoints:BN_ZERO,validators:{}},{eraReward:_}=o.find(E=>E.era.eq(r))||{eraReward:n.registry.createType("Balance")},{validators:k}=a.find(E=>E.era.eq(r))||{validators:{}},P={},v=e.toString();return Object.entries(p).forEach(([E,M])=>{var F,X,z;const R=I[E]||BN_ZERO,H=((F=k[E])==null?void 0:F.commission.unwrap())||BN_ZERO,K=M.total?(X=M.total)==null?void 0:X.unwrap():M.pageTotal?(z=M.pageTotal)==null?void 0:z.unwrap():BN_ZERO;let w=BN_ZERO,U;if(!(K.isZero()||R.isZero()||h.isZero())){w=_.mul(R).div(h);const L=H.mul(w).div(BN_BILLION);let J;if(E===v)if(M.own)J=M.own.unwrap();else{const O=M.others.find(({who:u})=>u.eq(E));J=O?O.value.unwrap():BN_ZERO}else{const O=M.others.find(({who:u})=>u.eq(v));J=O?O.value.unwrap():BN_ZERO}U=w.sub(L).imul(J).div(K).iadd(E===v?L:BN_ZERO)}P[E]={total:n.registry.createType("Balance",w),value:n.registry.createType("Balance",U)}}),{era:r,eraReward:_,isEmpty:s,isValidator:c,nominating:d,validators:P}})}function allUniqValidators(n){return n.reduce(([e,t],a)=>{const o=[];return t.push(o),a.forEach(({validators:i})=>Object.keys(i).forEach(r=>{o.includes(r)||(o.push(r),e.includes(r)||e.push(r))})),[e,t]},[[],[]])}function removeClaimed(n,e,t,a){const o=[];Object.keys(t.validators).forEach(i=>{const r=n.indexOf(i);if(r!==-1){const s=e[r].stakingLedger;extractCompatRewards(a,s).some(c=>t.era.eq(c))&&o.push(i)}}),o.forEach(i=>{delete t.validators[i]})}function filterRewards(n,e,{claimedRewardsEras:t,rewards:a,stakingLedger:o}){const i=n.filter(c=>!extractCompatRewards(t,o).some(d=>d.eq(c))),r=e.map(([c])=>c),s=e.map(([,c])=>c);return a.filter(({isEmpty:c})=>!c).filter(c=>i.some(d=>c.era.eq(d))?(removeClaimed(r,s,c,t),!0):!1).filter(({validators:c})=>Object.keys(c).length!==0).map(c=>objectSpread({},c,{nominators:c.nominating.filter(d=>c.validators[d.validatorId])}))}function _stakerRewardsEras(n,e){return memo(n,(t,a=!1)=>combineLatest([e.derive.staking._erasPoints(t,a),e.derive.staking._erasPrefs(t,a),e.derive.staking._erasRewards(t,a)]))}function _stakerRewards(n,e){return memo(n,(t,a,o=!1)=>{const i=a.map(r=>typeof r=="number"||typeof r=="string"?e.registry.createType("u32",r):r);return combineLatest([e.derive.staking.queryMulti(t,{withClaimedRewardsEras:!0,withLedger:!0}),e.derive.staking._stakerExposures(t,i,o),e.derive.staking._stakerRewardsEras(i,o)]).pipe(switchMap(([r,s,c])=>{const d=r.map(({claimedRewardsEras:I,stakingLedger:_,stashId:k},P)=>!k||!_&&!I?[]:parseRewards(e,k,c,s[P]));if(o)return of(d);const[p,h]=allUniqValidators(d);return e.derive.staking.queryMulti(p,{withClaimedRewardsEras:!0,withLedger:!0}).pipe(map$2(I=>r.map(({claimedRewardsEras:_,stakingLedger:k},P)=>filterRewards(a,h[P].map(v=>[v,I.find(E=>E.accountId.eq(v))]).filter(v=>!!v[1]),{claimedRewardsEras:_,rewards:d[P],stakingLedger:k}))))}))})}const stakerRewards=firstMemo((n,e,t)=>n.derive.staking.erasHistoric(t).pipe(switchMap(a=>n.derive.staking._stakerRewards([e],a,t))));function stakerRewardsMultiEras(n,e){return memo(n,(t,a)=>t.length&&a.length?e.derive.staking._stakerRewards(t,a,!1):of([]))}function stakerRewardsMulti(n,e){return memo(n,(t,a=!1)=>e.derive.staking.erasHistoric(a).pipe(switchMap(o=>e.derive.staking.stakerRewardsMultiEras(t,o))))}function _stakerSlashes(n,e){return memo(n,(t,a,o)=>{const i=e.registry.createType("AccountId",t).toString();return e.derive.staking._erasSlashes(a,o).pipe(map$2(r=>r.map(({era:s,nominators:c,validators:d})=>({era:s,total:c[i]||d[i]||e.registry.createType("Balance")}))))})}const stakerSlashes=erasHistoricApplyAccount("_stakerSlashes");function onBondedEvent(n){let e=Date.now();return n.query.system.events().pipe(map$2(t=>(e=t.filter(({event:a,phase:o})=>{try{return o.isApplyExtrinsic&&a.section==="staking"&&a.method==="Bonded"}catch{return!1}})?Date.now():e,e)),startWith(e),drr({skipTimeout:!0}))}function stashes(n,e){return memo(n,()=>onBondedEvent(e).pipe(switchMap(()=>e.query.staking.validators.keys()),map$2(t=>t.map(({args:[a]})=>a).filter(a=>a))))}function nextElected(n,e){return memo(n,()=>e.query.staking.erasStakersPaged?e.derive.session.indexes().pipe(switchMap(({currentEra:t})=>e.query.staking.erasStakersPaged.keys(t)),map$2(t=>[...new Set(t.map(({args:[,a]})=>a.toString()))].map(a=>e.registry.createType("AccountId",a)))):e.query.staking.erasStakers?e.derive.session.indexes().pipe(switchMap(({currentEra:t})=>e.query.staking.erasStakers.keys(t)),map$2(t=>[...new Set(t.map(({args:[,a]})=>a.toString()))].map(a=>e.registry.createType("AccountId",a)))):e.query.staking.currentElected())}function validators(n,e){return memo(n,()=>combineLatest([e.query.session?e.query.session.validators():of([]),e.query.staking?e.derive.staking.nextElected():of([])]).pipe(map$2(([t,a])=>({nextElected:a.length?a:t,validators:t}))))}const DEFAULT_FLAGS={withController:!0,withPrefs:!0};function waitingInfo(n,e){return memo(n,(t=DEFAULT_FLAGS)=>combineLatest([e.derive.staking.validators(),e.derive.staking.stashes()]).pipe(switchMap(([{nextElected:a},o])=>{const i=a.map(s=>s.toString()),r=o.filter(s=>!i.includes(s.toString()));return e.derive.staking.queryMulti(r,t).pipe(map$2(s=>({info:s,waiting:r})))})))}const staking=Object.freeze(Object.defineProperty({__proto__:null,_eraExposure,_eraPrefs,_eraSlashes,_erasExposure,_erasPoints,_erasPrefs,_erasRewards,_erasSlashes,_ownExposures,_ownSlashes,_stakerExposures,_stakerPoints,_stakerPrefs,_stakerRewards,_stakerRewardsEras,_stakerSlashes,account,accounts:accounts$1,currentPoints,electedInfo,eraExposure,eraPrefs,eraSlashes,erasExposure,erasHistoric,erasPoints,erasPrefs,erasRewards,erasSlashes,keys,keysMulti,nextElected,overview,ownExposure,ownExposures,ownSlash,ownSlashes,query,queryMulti,stakerExposure,stakerExposures,stakerPoints,stakerPrefs,stakerRewards,stakerRewardsMulti,stakerRewardsMultiEras,stakerSlashes,stashes,validators,waitingInfo},Symbol.toStringTag,{value:"Module"})),members=members$5("technicalCommittee"),hasProposals=hasProposals$4("technicalCommittee"),proposal=proposal$4("technicalCommittee"),proposalCount=proposalCount$4("technicalCommittee"),proposalHashes=proposalHashes$4("technicalCommittee"),proposals$1=proposals$6("technicalCommittee"),prime=prime$4("technicalCommittee"),technicalCommittee=Object.freeze(Object.defineProperty({__proto__:null,hasProposals,members,prime,proposal,proposalCount,proposalHashes,proposals:proposals$1},Symbol.toStringTag,{value:"Module"}));function parseResult(n,{allIds:e,allProposals:t,approvalIds:a,councilProposals:o,proposalCount:i}){const r=[],s=[],c=o.filter(({proposal:d})=>d&&(n.tx.treasury.approveProposal&&n.tx.treasury.approveProposal.is(d)||n.tx.treasury.rejectProposal&&n.tx.treasury.rejectProposal.is(d)));return e.forEach((d,p)=>{if(t[p].isSome){const h=c.filter(({proposal:k})=>k&&d.eq(k.args[0])).sort((k,P)=>k.proposal&&P.proposal?k.proposal.method.localeCompare(P.proposal.method):k.proposal?-1:1),I=a.some(k=>k.eq(d)),_={council:h,id:d,proposal:t[p].unwrap()};I?r.push(_):s.push(_)}}),{approvals:r,proposalCount:i,proposals:s}}function retrieveProposals(n,e,t){const a=[],o=e.toNumber();for(let r=0;r<o;r++)t.some(s=>s.eqn(r))||a.push(n.registry.createType("ProposalIndex",r));const i=[...a,...t];return combineLatest([n.query.treasury.proposals.multi(i),n.derive.council?n.derive.council.proposals():of([])]).pipe(map$2(([r,s])=>parseResult(n,{allIds:i,allProposals:r,approvalIds:t,councilProposals:s,proposalCount:e})))}function proposals(n,e){return memo(n,()=>e.query.treasury?combineLatest([e.query.treasury.proposalCount(),e.query.treasury.approvals()]).pipe(switchMap(([t,a])=>retrieveProposals(e,t,a))):of({approvals:[],proposalCount:e.registry.createType("ProposalIndex"),proposals:[]}))}const treasury=Object.freeze(Object.defineProperty({__proto__:null,proposals},Symbol.toStringTag,{value:"Module"}));function events(n,e){return memo(n,t=>combineLatest([e.rpc.chain.getBlock(t),e.queryAt(t).pipe(switchMap(a=>a.system.events()))]).pipe(map$2(([a,o])=>({block:a,events:o}))))}const FALLBACK_MAX_HASH_COUNT=250,FALLBACK_PERIOD=new BN(6*1e3),MAX_FINALITY_LAG=new BN(5),MORTAL_PERIOD=new BN(5*60*1e3);function latestNonce(n,e){return n.derive.balances.account(e).pipe(map$2(({accountNonce:t})=>t))}function nextNonce(n,e){var t;return n.call.accountNonceApi?n.call.accountNonceApi.accountNonce(e):(t=n.rpc.system)!=null&&t.accountNextIndex?n.rpc.system.accountNextIndex(e):latestNonce(n,e)}function signingHeader(n){return combineLatest([n.rpc.chain.getHeader().pipe(switchMap(e=>e.parentHash.isEmpty?of(e):n.rpc.chain.getHeader(e.parentHash).pipe(catchError(()=>of(e))))),n.rpc.chain.getFinalizedHead().pipe(switchMap(e=>n.rpc.chain.getHeader(e).pipe(catchError(()=>of(null)))))]).pipe(map$2(([e,t])=>!t||unwrapBlockNumber(e).sub(unwrapBlockNumber(t)).gt(MAX_FINALITY_LAG)?e:t))}function babeOrAuraPeriod(n){var t,a,o;const e=((t=n.consts.babe)==null?void 0:t.expectedBlockTime)||((a=n.consts.aura)==null?void 0:a.slotDuration)||((o=n.consts.timestamp)==null?void 0:o.minimumPeriod.muln(2));return e&&e.isZero&&!e.isZero()?e:void 0}function signingInfo(n,e){return(t,a,o)=>combineLatest([isUndefined(a)?latestNonce(e,t):a===-1?nextNonce(e,t):of(e.registry.createType("Index",a)),isUndefined(o)||isNumber(o)&&o>0?signingHeader(e):of(null)]).pipe(map$2(([i,r])=>{var s,c;return{header:r,mortalLength:Math.min(((c=(s=e.consts.system)==null?void 0:s.blockHashCount)==null?void 0:c.toNumber())||FALLBACK_MAX_HASH_COUNT,MORTAL_PERIOD.div(babeOrAuraPeriod(e)||FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),nonce:i}}))}const tx=Object.freeze(Object.defineProperty({__proto__:null,events,signingInfo},Symbol.toStringTag,{value:"Module"})),derive={accounts:accounts$2,alliance,bagsList,balances,bounties,chain,contracts:contracts$1,council,crowdloan,democracy,elections,imOnline,membership,parachains,session,society,staking,technicalCommittee,treasury,tx},checks={allianceMotion:{instances:["allianceMotion"],methods:[]},bagsList:{instances:["voterBagsList","voterList","bagsList"],methods:[],withDetect:!0},contracts:{instances:["contracts"],methods:[]},council:{instances:["council"],methods:[],withDetect:!0},crowdloan:{instances:["crowdloan"],methods:[]},democracy:{instances:["democracy"],methods:[]},elections:{instances:["phragmenElection","electionsPhragmen","elections","council"],methods:[],withDetect:!0},imOnline:{instances:["imOnline"],methods:[]},membership:{instances:["membership"],methods:[]},parachains:{instances:["parachains","registrar"],methods:[]},session:{instances:["session"],methods:[]},society:{instances:["society"],methods:[]},staking:{instances:["staking"],methods:["erasRewardPoints"]},technicalCommittee:{instances:["technicalCommittee"],methods:[],withDetect:!0},treasury:{instances:["treasury"],methods:[]}};function getModuleInstances(n,e,t){return n.registry.getModuleInstances(e,t)||[]}function injectFunctions(n,e,t){const a={},o=Object.keys(t),i=Object.keys(e.query),r=e.runtimeVersion.specName,s=_=>i.includes(_),c=_=>getModuleInstances(e,r,_).some(s),d=_=>k=>_.some(P=>i.includes(P)&&e.query[P][k]),p=_=>Object.keys(t[_]),h=(_,k)=>t[_][k](n,e),I=_=>!checks[_]||checks[_].instances.some(s)&&(!checks[_].methods.length||checks[_].methods.every(d(checks[_].instances)))||checks[_].withDetect&&checks[_].instances.some(c);for(let _=0,k=o.length;_<k;_++){const P=o[_];I(P)&&lazyDeriveSection(a,P,p,h)}return a}function getAvailableDerives(n,e,t={}){return{...injectFunctions(n,e,derive),...injectFunctions(n,e,t)}}function decorateDeriveSections(n,e){const t=r=>Object.keys(e[r]),a=(r,s)=>n(e[r][s]),o={},i=Object.keys(e);for(let r=0,s=i.length;r<s;r++)lazyDeriveSection(o,i[r],t,a);return o}const recordIdentity=n=>n;function filterAndApply(n,e,t,a){return n.filter(({event:o})=>e===o.section&&t.includes(o.method)).map(o=>a(o))}function getDispatchError({event:{data:[n]}}){return n}function getDispatchInfo({event:{data:n,method:e}}){return e==="ExtrinsicSuccess"?n[0]:n[1]}function extractError(n=[]){return filterAndApply(n,"system",["ExtrinsicFailed"],getDispatchError)[0]}function extractInfo(n=[]){return filterAndApply(n,"system",["ExtrinsicFailed","ExtrinsicSuccess"],getDispatchInfo)[0]}class SubmittableResult{constructor({blockNumber:e,dispatchError:t,dispatchInfo:a,events:o,internalError:i,status:r,txHash:s,txIndex:c}){A(this,"dispatchError");A(this,"dispatchInfo");A(this,"internalError");A(this,"events");A(this,"status");A(this,"txHash");A(this,"txIndex");A(this,"blockNumber");this.dispatchError=t||extractError(o),this.dispatchInfo=a||extractInfo(o),this.events=o||[],this.internalError=i,this.status=r,this.txHash=s,this.txIndex=c,this.blockNumber=e}get isCompleted(){return this.isError||this.status.isInBlock||this.status.isFinalized}get isError(){return this.status.isDropped||this.status.isFinalityTimeout||this.status.isInvalid||this.status.isUsurped}get isFinalized(){return this.status.isFinalized}get isInBlock(){return this.status.isInBlock}get isWarning(){return this.status.isRetracted}filterRecords(e,t){return filterAndApply(this.events,e,Array.isArray(t)?t:[t],recordIdentity)}findRecord(e,t){return this.filterRecords(e,t)[0]}toHuman(e){var t,a,o;return{dispatchError:(t=this.dispatchError)==null?void 0:t.toHuman(),dispatchInfo:(a=this.dispatchInfo)==null?void 0:a.toHuman(),events:this.events.map(i=>i.toHuman(e)),internalError:(o=this.internalError)==null?void 0:o.message.toString(),status:this.status.toHuman(e)}}}function makeEraOptions(n,e,t,{header:a,mortalLength:o,nonce:i}){if(!a){if(t.era&&!t.blockHash)throw new Error("Expected blockHash to be passed alongside non-immortal era options");return isNumber(t.era)&&(delete t.era,delete t.blockHash),makeSignOptions(n,t,{nonce:i})}return makeSignOptions(n,t,{blockHash:a.hash,era:e.createTypeUnsafe("ExtrinsicEra",[{current:a.number,period:t.era||o}]),nonce:i})}function makeSignAndSendOptions(n,e){let t={};return isFunction$2(n)?e=n:t=objectSpread({},n),[t,e]}function makeSignOptions(n,e,t){return objectSpread({blockHash:n.genesisHash,genesisHash:n.genesisHash},e,t,{runtimeVersion:n.runtimeVersion,signedExtensions:n.registry.signedExtensions,version:n.extrinsicType})}function optionsOrNonce(n={}){return isBn(n)||isNumber(n)?{nonce:n}:n}function createClass({api:n,apiType:e,blockHash:t,decorateMethod:a}){const o=n.registry.createClass("Extrinsic");class i extends o{constructor(c,d){super(c,d,{version:n.extrinsicType});A(this,"__internal__ignoreStatusCb");A(this,"__internal__transformResult",identity$1);A(this,"__internal__observeSign",(c,d)=>{const p=isKeyringPair(c)?c.address:c.toString(),h=optionsOrNonce(d);return n.derive.tx.signingInfo(p,h.nonce,h.era).pipe(first(),mergeMap(async I=>{const _=makeEraOptions(n,this.registry,h,I);let k=-1,P=null;if(isKeyringPair(c))this.sign(c,_);else{const v=await this.__internal__signViaSigner(p,_,I.header);k=v.id,v.signedTransaction&&(P=v.signedTransaction)}return{options:_,signedTransaction:P,updateId:k}}))});A(this,"__internal__observeStatus",(c,d)=>{if(!d.isFinalized&&!d.isInBlock)return of(this.__internal__transformResult(new SubmittableResult({status:d,txHash:c})));const p=d.isInBlock?d.asInBlock:d.asFinalized;return n.derive.tx.events(p).pipe(map$2(({block:h,events:I})=>this.__internal__transformResult(new SubmittableResult({...filterEvents(c,h,I,d),status:d,txHash:c}))),catchError(h=>of(this.__internal__transformResult(new SubmittableResult({internalError:h,status:d,txHash:c})))))});A(this,"__internal__observeSend",c=>n.rpc.author.submitExtrinsic((c==null?void 0:c.signedTransaction)||this).pipe(tap(d=>{this.__internal__updateSigner(d,c)})));A(this,"__internal__observeSubscribe",c=>{const d=this.hash;return n.rpc.author.submitAndWatchExtrinsic((c==null?void 0:c.signedTransaction)||this).pipe(switchMap(p=>this.__internal__observeStatus(d,p)),tap(p=>{this.__internal__updateSigner(p,c)}))});A(this,"__internal__signViaSigner",async(c,d,p)=>{const h=d.signer||n.signer;if(!h)throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");const I=this.registry.createTypeUnsafe("SignerPayload",[objectSpread({},d,{address:c,blockNumber:p?p.number:0,method:this.method})]);let _;if(isFunction$2(h.signPayload)){if(_=await h.signPayload(I.toPayload()),_.signedTransaction&&!d.withSignedTransaction)throw new Error("The `signedTransaction` field may not be submitted when `withSignedTransaction` is disabled");if(_.signedTransaction&&d.withSignedTransaction){const k=this.registry.createTypeUnsafe("Extrinsic",[_.signedTransaction]),P=this.registry.createTypeUnsafe("SignerPayload",[objectSpread({},{address:c,assetId:k.assetId?k.assetId.toHex():null,blockHash:I.blockHash,blockNumber:p?p.number:0,era:k.era.toHex(),genesisHash:I.genesisHash,metadataHash:k.metadataHash?k.metadataHash.toHex():null,method:k.method.toHex(),mode:k.mode?k.mode.toHex():null,nonce:k.nonce.toHex(),runtimeVersion:I.runtimeVersion,signedExtensions:I.signedExtensions,tip:k.tip?k.tip.toHex():null,version:I.version})]);if(!k.isSigned)throw new Error(`When using the signedTransaction field, the transaction must be signed. Recieved isSigned: ${k.isSigned}`);return this.__internal__validateSignedTransaction(I,k),super.addSignature(c,_.signature,P.toPayload()),{id:_.id,signedTransaction:_.signedTransaction}}}else if(isFunction$2(h.signRaw))_=await h.signRaw(I.toRaw());else throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");return super.addSignature(c,_.signature,I.toPayload()),{id:_.id}});A(this,"__internal__updateSigner",(c,d)=>{if(d&&d.updateId!==-1){const{options:p,updateId:h}=d,I=p.signer||n.signer;I&&isFunction$2(I.update)&&I.update(h,c)}});A(this,"__internal__validateSignedTransaction",(c,d)=>{const p=c.toPayload(),h=I=>`signAndSend: ${I} does not match the original payload`;if(p.method!==d.method.toHex())throw new Error(h("call data"))});this.__internal__ignoreStatusCb=e==="rxjs"}get hasDryRun(){var c;return isFunction$2((c=n.rpc.system)==null?void 0:c.dryRun)}get hasPaymentInfo(){var c;return isFunction$2((c=n.call.transactionPaymentApi)==null?void 0:c.queryInfo)}dryRun(c,d){if(!this.hasDryRun)throw new Error("The system.dryRun RPC call is not available in your environment");return t||isString(d)||isU8a(d)?a(()=>n.rpc.system.dryRun(this.toHex(),t||d)):a(()=>this.__internal__observeSign(c,d).pipe(switchMap(()=>n.rpc.system.dryRun(this.toHex()))))()}paymentInfo(c,d){if(!this.hasPaymentInfo)throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");if(t||isString(d)||isU8a(d))return a(()=>n.callAt(t||d).pipe(switchMap(I=>{const _=this.toU8a();return I.transactionPaymentApi.queryInfo(_,_.length)})));const[p]=makeSignAndSendOptions(d),h=isKeyringPair(c)?c.address:c.toString();return a(()=>n.derive.tx.signingInfo(h,p.nonce,p.era).pipe(first(),switchMap(I=>{const _=makeEraOptions(n,this.registry,p,I),k=makeSignOptions(n,_,{}),P=n.tx(this.toU8a()).signFake(h,k).toU8a();return n.call.transactionPaymentApi.queryInfo(P,P.length)})))()}send(c){const d=n.hasSubscriptions&&(this.__internal__ignoreStatusCb||!!c);return a(d?this.__internal__observeSubscribe:this.__internal__observeSend)(c)}signAsync(c,d){return a(()=>this.__internal__observeSign(c,d).pipe(map$2(()=>this)))()}signAndSend(c,d,p){const[h,I]=makeSignAndSendOptions(d,p),_=n.hasSubscriptions&&(this.__internal__ignoreStatusCb||!!I);return a(()=>this.__internal__observeSign(c,h).pipe(switchMap(k=>_?this.__internal__observeSubscribe(k):this.__internal__observeSend(k))))(I)}withResultTransform(c){return this.__internal__transformResult=c,this}}return i}function createSubmittable(n,e,t,a,o){const i=createClass({api:e,apiType:n,blockHash:o,decorateMethod:t});return r=>new i(a||e.registry,r)}function findCall(n,e){return n.findMetaCall(u8aToU8a(e))}function findError(n,e){return n.findMetaError(u8aToU8a(e))}const typesChain={},sharedTypes$7={AnchorData:{anchoredBlock:"u64",docRoot:"H256",id:"H256"},DispatchErrorModule:"DispatchErrorModuleU8",PreCommitData:{expirationBlock:"u64",identity:"H256",signingRoot:"H256"},Fee:{key:"Hash",price:"Balance"},MultiAccountData:{deposit:"Balance",depositor:"AccountId",signatories:"Vec<AccountId>",threshold:"u16"},ChainId:"u8",DepositNonce:"u64",ResourceId:"[u8; 32]","chainbridge::ChainId":"u8",RegistryId:"H160",TokenId:"U256",AssetId:{registryId:"RegistryId",tokenId:"TokenId"},AssetInfo:{metadata:"Bytes"},MintInfo:{anchorId:"Hash",proofs:"Vec<ProofMint>",staticHashes:"[Hash; 3]"},Proof:{leafHash:"H256",sortedHashes:"H256"},ProofMint:{hashes:"Vec<Hash>",property:"Bytes",salt:"[u8; 32]",value:"Bytes"},RegistryInfo:{fields:"Vec<Bytes>",ownerCanBurn:"bool"},ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","NonProxy"]}},standaloneTypes={...sharedTypes$7,AccountInfo:"AccountInfoWithRefCount",Address:"LookupSource",LookupSource:"IndicesLookupSource",Multiplier:"Fixed64",RefCount:"RefCountTo259"},versioned$a=[{minmax:[240,243],types:{...standaloneTypes,ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","Vesting"]}}},{minmax:[244,999],types:{...standaloneTypes}},{minmax:[1e3,void 0],types:{...sharedTypes$7}}],sharedTypes$6={CompactAssignments:"CompactAssignmentsWith24",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith24",Keys:"SessionKeys6",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","IdentityJudgement","CancelProxy","Auction"]},Weight:"WeightV1"},addrIndicesTypes={AccountInfo:"AccountInfoWithRefCount",Address:"LookupSource",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Keys:"SessionKeys5",LookupSource:"IndicesLookupSource",ValidatorPrefs:"ValidatorPrefsWithCommission"},addrAccountIdTypes$2={AccountInfo:"AccountInfoWithRefCount",Address:"AccountId",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Keys:"SessionKeys5",LookupSource:"AccountId",ValidatorPrefs:"ValidatorPrefsWithCommission"},versioned$9=[{minmax:[1019,1031],types:{...addrIndicesTypes,BalanceLock:"BalanceLockTo212",CompactAssignments:"CompactAssignmentsTo257",DispatchError:"DispatchErrorTo198",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",IdentityInfo:"IdentityInfoTo198",Keys:"SessionKeys5",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",ReferendumInfo:"ReferendumInfoTo239",Scheduled:"ScheduledTo254",SlashingSpans:"SlashingSpansTo204",StakingLedger:"StakingLedgerTo223",Votes:"VotesTo230",Weight:"u32"}},{minmax:[1032,1042],types:{...addrIndicesTypes,BalanceLock:"BalanceLockTo212",CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",Keys:"SessionKeys5",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",ReferendumInfo:"ReferendumInfoTo239",Scheduled:"ScheduledTo254",SlashingSpans:"SlashingSpansTo204",StakingLedger:"StakingLedgerTo223",Votes:"VotesTo230",Weight:"u32"}},{minmax:[1043,1045],types:{...addrIndicesTypes,BalanceLock:"BalanceLockTo212",CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",Keys:"SessionKeys5",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",ReferendumInfo:"ReferendumInfoTo239",Scheduled:"ScheduledTo254",StakingLedger:"StakingLedgerTo223",Votes:"VotesTo230",Weight:"u32"}},{minmax:[1046,1049],types:{...sharedTypes$6,...addrAccountIdTypes$2,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",ReferendumInfo:"ReferendumInfoTo239",Scheduled:"ScheduledTo254",StakingLedger:"StakingLedgerTo223",Weight:"u32"}},{minmax:[1050,1054],types:{...sharedTypes$6,...addrAccountIdTypes$2,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",ReferendumInfo:"ReferendumInfoTo239",Scheduled:"ScheduledTo254",StakingLedger:"StakingLedgerTo240",Weight:"u32"}},{minmax:[1055,1056],types:{...sharedTypes$6,...addrAccountIdTypes$2,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",Scheduled:"ScheduledTo254",StakingLedger:"StakingLedgerTo240",Weight:"u32"}},{minmax:[1057,1061],types:{...sharedTypes$6,...addrAccountIdTypes$2,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",Scheduled:"ScheduledTo254"}},{minmax:[1062,2012],types:{...sharedTypes$6,...addrAccountIdTypes$2,CompactAssignments:"CompactAssignmentsTo257",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259"}},{minmax:[2013,2022],types:{...sharedTypes$6,...addrAccountIdTypes$2,CompactAssignments:"CompactAssignmentsTo257",RefCount:"RefCountTo259"}},{minmax:[2023,2024],types:{...sharedTypes$6,...addrAccountIdTypes$2,RefCount:"RefCountTo259"}},{minmax:[2025,2027],types:{...sharedTypes$6,...addrAccountIdTypes$2}},{minmax:[2028,2029],types:{...sharedTypes$6,AccountInfo:"AccountInfoWithDualRefCount",CompactAssignments:"CompactAssignmentsWith16",RawSolution:"RawSolutionWith16"}},{minmax:[2030,9e3],types:{...sharedTypes$6,CompactAssignments:"CompactAssignmentsWith16",RawSolution:"RawSolutionWith16"}},{minmax:[9010,9099],types:{...sharedTypes$6,...mapXcmTypes("V0")}},{minmax:[9100,9105],types:{...sharedTypes$6,...mapXcmTypes("V1")}},{minmax:[9106,void 0],types:{Weight:"WeightV1"}}],versioned$8=[{minmax:[0,void 0],types:{Weight:"WeightV2"}}],versioned$7=[{minmax:[0,void 0],types:{Weight:"WeightV2"}}],sharedTypes$5={CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Keys:"SessionKeys6",ProxyType:{_enum:{Any:0,NonTransfer:1,Governance:2,Staking:3,UnusedSudoBalances:4,IdentityJudgement:5,CancelProxy:6,Auction:7}},Weight:"WeightV1"},addrAccountIdTypes$1={AccountInfo:"AccountInfoWithRefCount",Address:"AccountId",DispatchErrorModule:"DispatchErrorModuleU8",Keys:"SessionKeys5",LookupSource:"AccountId",ValidatorPrefs:"ValidatorPrefsWithCommission"},versioned$6=[{minmax:[0,12],types:{...sharedTypes$5,...addrAccountIdTypes$1,CompactAssignments:"CompactAssignmentsTo257",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259"}},{minmax:[13,22],types:{...sharedTypes$5,...addrAccountIdTypes$1,CompactAssignments:"CompactAssignmentsTo257",RefCount:"RefCountTo259"}},{minmax:[23,24],types:{...sharedTypes$5,...addrAccountIdTypes$1,RefCount:"RefCountTo259"}},{minmax:[25,27],types:{...sharedTypes$5,...addrAccountIdTypes$1}},{minmax:[28,29],types:{...sharedTypes$5,AccountInfo:"AccountInfoWithDualRefCount"}},{minmax:[30,9109],types:{...sharedTypes$5}},{minmax:[9110,void 0],types:{Weight:"WeightV1"}}],sharedTypes$4={DispatchErrorModule:"DispatchErrorModuleU8",FullIdentification:"()",Keys:"SessionKeys7B",Weight:"WeightV1"},versioned$5=[{minmax:[0,200],types:{...sharedTypes$4,AccountInfo:"AccountInfoWithDualRefCount",Address:"AccountId",LookupSource:"AccountId"}},{minmax:[201,214],types:{...sharedTypes$4,AccountInfo:"AccountInfoWithDualRefCount"}},{minmax:[215,228],types:{...sharedTypes$4,Keys:"SessionKeys6"}},{minmax:[229,9099],types:{...sharedTypes$4,...mapXcmTypes("V0")}},{minmax:[9100,9105],types:{...sharedTypes$4,...mapXcmTypes("V1")}},{minmax:[9106,void 0],types:{Weight:"WeightV1"}}],versioned$4=[{minmax:[0,void 0],types:{}}],sharedTypes$3={DispatchErrorModule:"DispatchErrorModuleU8",TAssetBalance:"u128",ProxyType:{_enum:["Any","NonTransfer","CancelProxy","Assets","AssetOwner","AssetManager","Staking"]},Weight:"WeightV1"},versioned$3=[{minmax:[0,3],types:{DispatchError:"DispatchErrorPre6First",...sharedTypes$3,...mapXcmTypes("V0")}},{minmax:[4,5],types:{DispatchError:"DispatchErrorPre6First",...sharedTypes$3,...mapXcmTypes("V1")}},{minmax:[500,9999],types:{Weight:"WeightV1",TAssetConversion:"Option<AssetId>"}},{minmax:[1e4,void 0],types:{Weight:"WeightV1"}}],sharedTypes$2={DispatchErrorModule:"DispatchErrorModuleU8",TAssetBalance:"u128",ProxyType:{_enum:["Any","NonTransfer","CancelProxy","Assets","AssetOwner","AssetManager","Staking"]},Weight:"WeightV1"},versioned$2=[{minmax:[0,3],types:{DispatchError:"DispatchErrorPre6First",...sharedTypes$2,...mapXcmTypes("V0")}},{minmax:[4,5],types:{DispatchError:"DispatchErrorPre6First",...sharedTypes$2,...mapXcmTypes("V1")}},{minmax:[500,1001003],types:{Weight:"WeightV1",TAssetConversion:"Option<AssetId>"}},{minmax:[1002e3,void 0],types:{Weight:"WeightV1"}}],sharedTypes$1={CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",RawSolution:"RawSolutionWith16",Keys:"SessionKeys6",ProxyType:{_enum:["Any","NonTransfer","Staking","SudoBalances","IdentityJudgement","CancelProxy"]},Weight:"WeightV1"},addrAccountIdTypes={AccountInfo:"AccountInfoWithRefCount",Address:"AccountId",CompactAssignments:"CompactAssignmentsWith16",DispatchErrorModule:"DispatchErrorModuleU8",LookupSource:"AccountId",Keys:"SessionKeys5",RawSolution:"RawSolutionWith16",ValidatorPrefs:"ValidatorPrefsWithCommission"},versioned$1=[{minmax:[1,2],types:{...sharedTypes$1,...addrAccountIdTypes,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",Multiplier:"Fixed64",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259",Weight:"u32"}},{minmax:[3,22],types:{...sharedTypes$1,...addrAccountIdTypes,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",OpenTip:"OpenTipTo225",RefCount:"RefCountTo259"}},{minmax:[23,42],types:{...sharedTypes$1,...addrAccountIdTypes,CompactAssignments:"CompactAssignmentsTo257",DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",RefCount:"RefCountTo259"}},{minmax:[43,44],types:{...sharedTypes$1,...addrAccountIdTypes,DispatchInfo:"DispatchInfoTo244",Heartbeat:"HeartbeatTo244",RefCount:"RefCountTo259"}},{minmax:[45,47],types:{...sharedTypes$1,...addrAccountIdTypes}},{minmax:[48,49],types:{...sharedTypes$1,AccountInfo:"AccountInfoWithDualRefCount"}},{minmax:[50,9099],types:{...sharedTypes$1,...mapXcmTypes("V0")}},{minmax:[9100,9105],types:{...sharedTypes$1,...mapXcmTypes("V1")}},{minmax:[9106,void 0],types:{Weight:"WeightV1"}}],sharedTypes={DispatchErrorModule:"DispatchErrorModuleU8",TAssetBalance:"u128",ProxyType:{_enum:["Any","NonTransfer","CancelProxy","Assets","AssetOwner","AssetManager","Staking"]},Weight:"WeightV1"},versioned=[{minmax:[0,3],types:{DispatchError:"DispatchErrorPre6First",...sharedTypes,...mapXcmTypes("V0")}},{minmax:[4,5],types:{DispatchError:"DispatchErrorPre6First",...sharedTypes,...mapXcmTypes("V1")}},{minmax:[500,9434],types:{Weight:"WeightV1",TAssetConversion:"Option<AssetId>"}},{minmax:[9435,void 0],types:{Weight:"WeightV1"}}],typesSpec={"centrifuge-chain":versioned$a,kusama:versioned$9,node:versioned$8,"node-template":versioned$7,polkadot:versioned$6,rococo:versioned$5,shell:versioned$4,statemine:versioned$3,statemint:versioned$2,westend:versioned$1,westmint:versioned},upgrades$3=[[0,1020,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[26669,1021,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[38245,1022,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[54248,1023,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[59659,1024,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[67651,1025,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[82191,1027,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[83238,1028,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[101503,1029,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[203466,1030,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[295787,1031,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[461692,1032,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[504329,1033,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[569327,1038,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[587687,1039,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[653183,1040,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[693488,1042,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[901442,1045,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1375086,1050,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1445458,1051,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1472960,1052,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1475648,1053,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1491596,1054,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1574408,1055,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2064961,1058,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2201991,1062,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2671528,2005,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2704202,2007,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2728002,2008,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2832534,2011,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2962294,2012,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[324e4,2013,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3274408,2015,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3323565,2019,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3534175,2022,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3860281,2023,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4143129,2024,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4401242,2025,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4841367,2026,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5961600,2027,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6137912,2028,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6561855,2029,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7100891,2030,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7468792,9010,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7668600,9030,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7812476,9040,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8010981,9050,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8073833,9070,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8555825,9080,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8945245,9090,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9611377,9100,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9625129,9111,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9866422,9122,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10403784,9130,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10960765,9150,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11006614,9151,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11404482,9160,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11601803,9170,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12008022,9180,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12405451,9190,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12665416,9200,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12909508,9220,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[13109752,9230,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[13555777,9250,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[13727747,9260,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[14248044,9271,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0x17a6bc0d0062aeb3",1]]],[14433840,9280,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[14645900,9291,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[15048375,9300,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[15426015,9320,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[15680713,9340,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[15756296,9350,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[15912007,9360,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[16356547,9370,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[17335450,9381,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",3],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1]]],[18062739,9420,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[18625e3,9430,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[20465806,1e6,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",5],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[2157e4,1001e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",7],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[21786291,1001002,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",7],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[22515962,1001003,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",7],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[2279e4,1002e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[23176015,1002001,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[23450253,1002004,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[23565293,1002005,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[23780224,1002006,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]]],upgrades$2=[[0,0,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[29231,1,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[188836,5,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[199405,6,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[214264,7,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[244358,8,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[303079,9,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[314201,10,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[342400,11,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[443963,12,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[528470,13,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[687751,14,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[746085,15,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[787923,16,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[799302,17,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1205128,18,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1603423,23,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1733218,24,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2005673,25,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2436698,26,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3613564,27,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3899547,28,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4345767,29,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4876134,30,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5661442,9050,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6321619,9080,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6713249,9090,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7217907,9100,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7229126,9110,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7560558,9122,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8115869,9140,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8638103,9151,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9280179,9170,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9738717,9180,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10156856,9190,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10458576,9200,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10655116,9220,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10879371,9230,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11328884,9250,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11532856,9260,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11933818,9270,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12217535,9280,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[12245277,9281,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[12532644,9291,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[12876189,9300,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[13800015,9340,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2]]],[14188833,9360,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2]]],[14543918,9370,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2]]],[15978362,9420,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3]]],[1645e4,9430,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3]]],[1784e4,9431,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3]]],[18407475,1000001,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",5],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3]]],[19551e3,1001002,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",5],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]],[20181758,1001003,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",5],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]],[20438530,1002e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]],[21169168,1002004,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]],[21455374,1002005,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]],[21558004,1002006,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]],[21800141,1002007,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0xfbc577b9d747efd6",1]]]],upgrades$1=[[214356,4,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[392764,7,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[409740,8,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[809976,20,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[877581,24,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[879238,25,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[889472,26,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[902937,27,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[932751,28,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[991142,29,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1030162,31,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1119657,32,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1199282,33,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1342534,34,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1392263,35,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1431703,36,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1433369,37,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1490972,41,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2087397,43,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2316688,44,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2549864,45,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3925782,46,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3925843,47,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4207800,48,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4627944,49,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5124076,50,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5478664,900,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5482450,9e3,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5584305,9010,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5784566,9030,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5879822,9031,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5896856,9032,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5897316,9033,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6117927,9050,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6210274,9070,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6379314,9080,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6979141,9090,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7568453,9100,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7766394,9111,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7911691,9120,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7968866,9121,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7982889,9122,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8514322,9130,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9091726,9140,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9091774,9150,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9406726,9160,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9921066,9170,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10007115,9180,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10480973,9190,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10578091,9200,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10678509,9210,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10811001,9220,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11096116,9230,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11409279,9250,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11584820,9251,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11716837,9260,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11876919,9261,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11987927,9270,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0x17a6bc0d0062aeb3",1]]],[12077324,9271,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0x17a6bc0d0062aeb3",1]]],[12301871,9280,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[12604343,9290,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[12841034,9300,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[13128237,9310,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[13272363,9320,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13483497,9330,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13649433,9340,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13761100,9350,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13847400,9360,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[14249200,9370,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[14576855,9380,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",3],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1]]],[14849830,9390,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",3],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[15146832,9400,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",3],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[15332317,9401,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",3],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[15661793,9420,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[16165469,9430,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",4],["0x49eaaf1b548a0cb0",2],["0x91d5df18b0d2cf58",2],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1]]],[18293984,102e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",7],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[18293991,103e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",8],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[18451783,104e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",9],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[18679741,1005e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",9],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[19166695,1006e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[19234157,1006001,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[19542944,1007e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[19621258,1007001,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[19761406,1008e3,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[20056997,1009e3,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[20368318,101e4,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",10],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x6ff52ee858e6c5bd",1],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[20649086,1011e3,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",11],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x6ff52ee858e6c5bd",1],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[21217837,1011001,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",11],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x6ff52ee858e6c5bd",1],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[21300429,1013e3,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",11],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x6ff52ee858e6c5bd",1],["0x91b1c8b16328eb92",1],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[21460051,1014e3,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",11],["0x49eaaf1b548a0cb0",3],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x6ff52ee858e6c5bd",1],["0x91b1c8b16328eb92",1],["0x9ffb505aa738d69c",1],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]],[21925427,1015e3,[["0xdf6acb689907609b",5],["0x37e397fc7c91f5e4",2],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",11],["0x49eaaf1b548a0cb0",4],["0x91d5df18b0d2cf58",2],["0x2a5e924655399e60",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",4],["0xf3ff14d5ab527059",3],["0x6ff52ee858e6c5bd",1],["0x91b1c8b16328eb92",1],["0x9ffb505aa738d69c",1],["0x17a6bc0d0062aeb3",1],["0x18ef58a3b67ba770",1],["0xfbc577b9d747efd6",1]]]],allKnown=Object.freeze(Object.defineProperty({__proto__:null,kusama:upgrades$3,polkadot:upgrades$2,westend:upgrades$1},Symbol.toStringTag,{value:"Module"})),NET_EXTRA={westend:{genesisHash:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]}};function mapRaw([n,e]){const t=selectableNetworks.find(a=>a.network===n)||NET_EXTRA[n];if(!t)throw new Error(`Unable to find info for chain ${n}`);return{genesisHash:hexToU8a(t.genesisHash[0]),network:n,versions:e.map(([a,o,i])=>({apis:i,blockNumber:new BN(a),specVersion:new BN(o)}))}}const upgrades=Object.entries(allKnown).map(mapRaw);function withNames(n,e,t){return t(n.toString(),e.toString())}function filterVersions(n=[],e){return n.filter(({minmax:[t,a]})=>(t==null||e>=t)&&(a==null||e<=a)).reduce((t,{types:a})=>({...t,...a}),{})}function getSpecExtensions({knownTypes:n},e,t){return withNames(e,t,(a,o)=>{var i,r,s,c,d,p;return{...((s=(r=(i=n.typesBundle)==null?void 0:i.spec)==null?void 0:r[o])==null?void 0:s.signedExtensions)??{},...((p=(d=(c=n.typesBundle)==null?void 0:c.chain)==null?void 0:d[a])==null?void 0:p.signedExtensions)??{}}})}function getSpecTypes({knownTypes:n},e,t,a){const o=bnToBn(a).toNumber();return withNames(e,t,(i,r)=>{var s,c,d,p,h,I,_,k;return{...filterVersions(typesSpec[r],o),...filterVersions(typesChain[i],o),...filterVersions((d=(c=(s=n.typesBundle)==null?void 0:s.spec)==null?void 0:c[r])==null?void 0:d.types,o),...filterVersions((I=(h=(p=n.typesBundle)==null?void 0:p.chain)==null?void 0:h[i])==null?void 0:I.types,o),...((_=n.typesSpec)==null?void 0:_[r])??{},...((k=n.typesChain)==null?void 0:k[i])??{},...n.types??{}}})}function getSpecHasher({knownTypes:n},e,t){return withNames(e,t,(a,o)=>{var i,r,s,c,d,p;return n.hasher||((s=(r=(i=n.typesBundle)==null?void 0:i.chain)==null?void 0:r[a])==null?void 0:s.hasher)||((p=(d=(c=n.typesBundle)==null?void 0:c.spec)==null?void 0:d[o])==null?void 0:p.hasher)||null})}function getSpecRpc({knownTypes:n},e,t){return withNames(e,t,(a,o)=>{var i,r,s,c,d,p;return{...((s=(r=(i=n.typesBundle)==null?void 0:i.spec)==null?void 0:r[o])==null?void 0:s.rpc)??{},...((p=(d=(c=n.typesBundle)==null?void 0:c.chain)==null?void 0:d[a])==null?void 0:p.rpc)??{}}})}function getSpecRuntime({knownTypes:n},e,t){return withNames(e,t,(a,o)=>{var i,r,s,c,d,p;return{...((s=(r=(i=n.typesBundle)==null?void 0:i.spec)==null?void 0:r[o])==null?void 0:s.runtime)??{},...((p=(d=(c=n.typesBundle)==null?void 0:c.chain)==null?void 0:d[a])==null?void 0:p.runtime)??{}}})}function getSpecAlias({knownTypes:n},e,t){return withNames(e,t,(a,o)=>{var i,r,s,c,d,p;return{...((s=(r=(i=n.typesBundle)==null?void 0:i.spec)==null?void 0:r[o])==null?void 0:s.alias)??{},...((p=(d=(c=n.typesBundle)==null?void 0:c.chain)==null?void 0:d[a])==null?void 0:p.alias)??{},...n.typesAlias??{}}})}function getUpgradeVersion(n,e){const t=upgrades.find(a=>n.eq(a.genesisHash));return t?[t.versions.reduce((a,o)=>e.gt(o.blockNumber)?o:a,void 0),t.versions.find(a=>e.lte(a.blockNumber))]:[void 0,void 0]}const l$2=logger("api/augment");function logLength(n,e,t=[]){return e.length?` ${e.length} ${n}${t.length?" and":""}`:""}function logValues(n,e){return e.length?`
	${n.padStart(7)}: ${e.sort().join(", ")}`:""}function warn(n,e,[t,a]){(t.length||a.length)&&l$2.warn(`api.${n}: Found${logLength("added",t,a)}${logLength("removed",a)} ${e}:${logValues("added",t)}${logValues("removed",a)}`)}function findSectionExcludes(n,e){return n.filter(t=>!e.includes(t))}function findSectionIncludes(n,e){return n.filter(t=>e.includes(t))}function extractSections(n,e){const t=Object.keys(n),a=Object.keys(e);return[findSectionExcludes(t,a),findSectionExcludes(a,t)]}function findMethodExcludes(n,e){const t=Object.keys(n),a=findSectionIncludes(Object.keys(e),t),o=[];for(let i=0,r=a.length;i<r;i++){const s=a[i],c=Object.keys(n[s]),d=Object.keys(e[s]);for(let p=0,h=d.length;p<h;p++){const I=d[p];c.includes(I)||o.push(`${s}.${I}`)}}return o}function extractMethods(n,e){return[findMethodExcludes(e,n),findMethodExcludes(n,e)]}function augmentObject(n,e,t,a=!1){a&&objectClear(t),n&&Object.keys(t).length&&(warn(n,"modules",extractSections(e,t)),warn(n,"calls",extractMethods(e,t)));const o=Object.keys(e);for(let i=0,r=o.length;i<r;i++){const s=o[i],c=e[s];t[s]||(t[s]={}),lazyMethods(t[s],Object.keys(c),d=>c[d])}return t}function sig({lookup:n},{method:e,section:t},a){return`${t}.${e}(${a.map(o=>n.getTypeDef(o).type).join(", ")})`}function extractStorageArgs(n,e,t){const a=t.filter(o=>!isUndefined(o));if(e.meta.type.isPlain){if(a.length!==0)throw new Error(`${sig(n,e,[])} does not take any arguments, ${a.length} found`)}else{const{hashers:o,key:i}=e.meta.type.asMap,r=o.length===1?[i]:n.lookup.getSiType(i).def.asTuple.map(s=>s);if(a.length!==r.length)throw new Error(`${sig(n,e,r)} is a map, requiring ${r.length} arguments, ${a.length} found`)}return[e,a]}class Events{constructor(){A(this,"__internal__eventemitter",new EventEmitter)}emit(e,...t){return this.__internal__eventemitter.emit(e,...t)}on(e,t){return this.__internal__eventemitter.on(e,t),this}off(e,t){return this.__internal__eventemitter.removeListener(e,t),this}once(e,t){return this.__internal__eventemitter.once(e,t),this}}const PAGE_SIZE_K=1e3,PAGE_SIZE_V=250,PAGE_SIZE_Q=50,l$1=logger("api/init");let instanceCounter=0;function getAtQueryFn(n,{method:e,section:t}){return assertReturn(n.rx.query[t]&&n.rx.query[t][e],()=>`query.${t}.${e} is not available in this version of the metadata`)}class Decorate extends Events{constructor(t,a,o){var r;super();A(this,"__internal__instanceId");A(this,"__internal__runtimeLog",{});A(this,"__internal__registry");A(this,"__internal__storageGetQ",[]);A(this,"__internal__storageSubQ",[]);A(this,"__phantom",new BN(0));A(this,"_type");A(this,"_call",{});A(this,"_consts",{});A(this,"_derive");A(this,"_errors",{});A(this,"_events",{});A(this,"_extrinsics");A(this,"_extrinsicType",GenericExtrinsic.LATEST_EXTRINSIC_VERSION);A(this,"_genesisHash");A(this,"_isConnected");A(this,"_isReady",!1);A(this,"_query",{});A(this,"_queryMulti");A(this,"_rpc");A(this,"_rpcCore");A(this,"_runtimeMap",{});A(this,"_runtimeChain");A(this,"_runtimeMetadata");A(this,"_runtimeVersion");A(this,"_rx",{call:{},consts:{},query:{},tx:{}});A(this,"_options");A(this,"_decorateMethod");A(this,"_rxDecorateMethod",t=>t);this.__internal__instanceId=`${++instanceCounter}`,this.__internal__registry=((r=t.source)==null?void 0:r.registry)||t.registry||new TypeRegistry,this._rx.callAt=(s,c)=>from(this.at(s,c)).pipe(map$2(d=>d.rx.call)),this._rx.queryAt=(s,c)=>from(this.at(s,c)).pipe(map$2(d=>d.rx.query)),this._rx.registry=this.__internal__registry,this._decorateMethod=o,this._options=t,this._type=a;const i=t.source?t.source._rpcCore.provider.isClonable?t.source._rpcCore.provider.clone():t.source._rpcCore.provider:t.provider||new WsProvider;this._rpcCore=new RpcCore(this.__internal__instanceId,this.__internal__registry,{isPedantic:this._options.isPedantic,provider:i,userRpc:this._options.rpc}),this._isConnected=new BehaviorSubject(this._rpcCore.provider.isConnected),this._rx.hasSubscriptions=this._rpcCore.provider.hasSubscriptions}get registry(){return this.__internal__registry}createType(t,...a){return this.__internal__registry.createType(t,...a)}registerTypes(t){t&&this.__internal__registry.register(t)}get hasSubscriptions(){return this._rpcCore.provider.hasSubscriptions}get supportMulti(){return this._rpcCore.provider.hasSubscriptions||!!this._rpcCore.state.queryStorageAt}_emptyDecorated(t,a){return{call:{},consts:{},errors:{},events:{},query:{},registry:t,rx:{call:{},query:{}},tx:createSubmittable(this._type,this._rx,this._decorateMethod,t,a)}}_createDecorated(t,a,o,i){o||(o=this._emptyDecorated(t.registry,i)),(a||!t.decoratedMeta)&&(t.decoratedMeta=expandMetadata(t.registry,t.metadata));const r=this._decorateCalls(t,this._decorateMethod,i),s=this._decorateCalls(t,this._rxDecorateMethod,i),c=this._decorateStorage(t.decoratedMeta,this._decorateMethod,i),d=this._decorateStorage(t.decoratedMeta,this._rxDecorateMethod,i);return augmentObject("consts",t.decoratedMeta.consts,o.consts,a),augmentObject("errors",t.decoratedMeta.errors,o.errors,a),augmentObject("events",t.decoratedMeta.events,o.events,a),augmentObject("query",c,o.query,a),augmentObject("query",d,o.rx.query,a),augmentObject("call",r,o.call,a),augmentObject("call",s,o.rx.call,a),o.findCall=p=>findCall(t.registry,p),o.findError=p=>findError(t.registry,p),o.queryMulti=i?this._decorateMultiAt(o,this._decorateMethod,i):this._decorateMulti(this._decorateMethod),o.runtimeVersion=t.runtimeVersion,{createdAt:i,decoratedApi:o,decoratedMeta:t.decoratedMeta}}_injectMetadata(t,a=!1){(a||!t.decoratedApi)&&(t.decoratedApi=this._emptyDecorated(t.registry));const{decoratedApi:o,decoratedMeta:i}=this._createDecorated(t,a,t.decoratedApi);this._call=o.call,this._consts=o.consts,this._errors=o.errors,this._events=o.events,this._query=o.query,this._rx.call=o.rx.call,this._rx.query=o.rx.query;const r=this._decorateExtrinsics(i,this._decorateMethod),s=this._decorateExtrinsics(i,this._rxDecorateMethod);a||!this._extrinsics?(this._extrinsics=r,this._rx.tx=s):(augmentObject("tx",r,this._extrinsics,!1),augmentObject(null,s,this._rx.tx,!1)),augmentObject(null,i.consts,this._rx.consts,a),this.emit("decorated")}injectMetadata(t,a,o){this._injectMetadata({counter:0,metadata:t,registry:o||this.__internal__registry,runtimeVersion:this.__internal__registry.createType("RuntimeVersionPartial")},a)}_decorateFunctionMeta(t,a){return a.meta=t.meta,a.method=t.method,a.section=t.section,a.toJSON=t.toJSON,t.callIndex&&(a.callIndex=t.callIndex),a}_filterRpc(t,a){Object.keys(a).length!==0&&(this._rpcCore.addUserInterfaces(a),this._decorateRpc(this._rpcCore,this._decorateMethod,this._rpc),this._decorateRpc(this._rpcCore,this._rxDecorateMethod,this._rx.rpc));const o={};for(let r=0,s=t.length;r<s;r++){const[c]=t[r].split("_");o[c]=!0}const i=Object.keys(o);for(let r=0,s=i.length;r<s;r++){const c=stringUpperFirst(i[r]),d=`${c}Api`;this._runtimeMap[blake2AsHex(c,64)]=c,this._runtimeMap[blake2AsHex(d,64)]=d}this._filterRpcMethods(t)}_filterRpcMethods(t){const a=t.length!==0,o=[...this._rpcCore.mapping.entries()],i=[],r=o.length;for(let c=0;c<r;c++){const[,{alias:d,endpoint:p,method:h,pubsub:I,section:_}]=o[c];i.push(`${_}_${h}`),I&&(i.push(`${_}_${I[1]}`),i.push(`${_}_${I[2]}`)),d&&i.push(...d),p&&i.push(p)}const s=t.filter(c=>!i.includes(c)&&!c.includes("_unstable_"));s.length&&!this._options.noInitWarn&&l$1.warn(`RPC methods not decorated: ${s.join(", ")}`);for(let c=0;c<r;c++){const[d,{method:p,section:h}]=o[c];a&&!t.includes(d)&&d!=="rpc_methods"&&this._rpc[h]&&(delete this._rpc[h][p],delete this._rx.rpc[h][p])}}_rpcSubmitter(t){return t((o,...i)=>from(this._rpcCore.provider.send(o,i)))}_decorateRpc(t,a,o=this._rpcSubmitter(a)){const i=o,r=(s,c)=>{const d=t[s][c],p=a(d,{methodName:c});return p.meta=d.meta,p.raw=a(d.raw,{methodName:c}),p};for(let s=0,c=t.sections.length;s<c;s++){const d=t.sections[s];if(!Object.prototype.hasOwnProperty.call(i,d)){const p=Object.keys(t[d]),h=I=>r(d,I);for(let I=0,_=p.length;I<_;I++){const k=p[I];(this.hasSubscriptions||!(k.startsWith("subscribe")||k.startsWith("unsubscribe")))&&(Object.prototype.hasOwnProperty.call(i,d)||(i[d]={}),lazyMethod(i[d],k,h))}}}return i}_addRuntimeDef(t,a){if(!a)return;const o=Object.entries(a);for(let i=0,r=o.length;i<r;i++){const[s,c]=o[i];if(t[s])for(let d=0,p=c.length;d<p;d++){const h=c[d],I=t[s].find(({version:_})=>h.version===_);I?objectSpread(I.methods,h.methods):t[s].push(h)}else t[s]=c}}_getRuntimeDefs(t,a,o=""){const i={},r=Object.values(typeDefinitions);for(let s=0,c=r.length;s<c;s++)this._addRuntimeDef(i,r[s].runtime);return this._addRuntimeDef(i,getSpecRuntime(t,o,a)),this._addRuntimeDef(i,this._options.runtime),Object.entries(i)}_decorateCalls({registry:t,runtimeVersion:{apis:a,specName:o,specVersion:i}},r,s){const c={},d={},p={},h=this._getRuntimeDefs(t,o,this._runtimeChain),I=[],_=`${o.toString()}/${i.toString()}`,k=this.__internal__runtimeLog[_]||!1;this.__internal__runtimeLog[_]=!0;for(let R=0,H=h.length;R<H;R++){const[K,w]=h[R],U=blake2AsHex(K,64),F=a.find(([X])=>X.eq(U));if(p[U]=!0,F){const X=w.map(({version:L})=>L).sort(),z=w.find(({version:L})=>F[1].eq(L));if(z){const L=stringCamelCase(K),J=Object.entries(z.methods);if(J.length){d[L]||(d[L]={});for(let O=0,u=J.length;O<u;O++){const[m,g]=J[O],b=stringCamelCase(m);d[L][b]=objectSpread({method:b,name:`${K}_${m}`,section:L,sectionHash:U},g)}}}else I.push(`${K}/${F[1].toString()} (${X.join("/")} known)`)}}const P=a.map(([R,H])=>[R.toHex(),H.toString()]).filter(([R])=>!p[R]).map(([R,H])=>`${this._runtimeMap[R]||R}/${H}`);!this._options.noInitWarn&&!k&&(I.length&&l$1.warn(`${_}: Not decorating runtime apis without matching versions: ${I.join(", ")}`),P.length&&l$1.warn(`${_}: Not decorating unknown runtime apis: ${P.join(", ")}`));const v=s?(R,H)=>this._rpcCore.state.call(R,H,s):(R,H)=>this._rpcCore.state.call(R,H),E=R=>lazyMethods({},Object.keys(d[R]),H=>this._decorateCall(t,d[R][H],v,r)),M=Object.keys(d);for(let R=0,H=M.length;R<H;R++)lazyMethod(c,M[R],E);return c}_decorateCall(t,a,o,i){const r=i((...s)=>{if(s.length!==a.params.length)throw new Error(`${a.name}:: Expected ${a.params.length} arguments, found ${s.length}`);const c=t.createType("Raw",u8aConcatStrict(s.map((d,p)=>t.createTypeUnsafe(a.params[p].type,[d]).toU8a())));return o(a.name,c).pipe(map$2(d=>t.createTypeUnsafe(a.type,[d])))});return r.meta=a,r}_decorateMulti(t){return t(a=>a.length?(this.hasSubscriptions?this._rpcCore.state.subscribeStorage:this._rpcCore.state.queryStorageAt)(a.map(o=>Array.isArray(o)?o[0].creator.meta.type.isPlain?[o[0].creator]:o[0].creator.meta.type.asMap.hashers.length===1?[o[0].creator,o.slice(1)]:[o[0].creator,...o.slice(1)]:[o.creator])):of([]))}_decorateMultiAt(t,a,o){return a(i=>i.length?this._rpcCore.state.queryStorageAt(i.map(r=>{if(Array.isArray(r)){const{creator:s}=getAtQueryFn(t,r[0].creator);return s.meta.type.isPlain?[s]:s.meta.type.asMap.hashers.length===1?[s,r.slice(1)]:[s,...r.slice(1)]}return[getAtQueryFn(t,r.creator).creator]}),o):of([]))}_decorateExtrinsics({tx:t},a){const o=createSubmittable(this._type,this._rx,a),i=s=>lazyMethods({},Object.keys(t[s]),c=>c.startsWith("$")?t[s][c]:this._decorateExtrinsicEntry(t[s][c],o)),r=Object.keys(t);for(let s=0,c=r.length;s<c;s++)lazyMethod(o,r[s],i);return o}_decorateExtrinsicEntry(t,a){const o=(...i)=>a(t(...i));return o.is=i=>t.is(i),this._decorateFunctionMeta(t,o)}_decorateStorage({query:t,registry:a},o,i){const r={},s=d=>lazyMethods({},Object.keys(t[d]),p=>i?this._decorateStorageEntryAt(a,t[d][p],o,i):this._decorateStorageEntry(t[d][p],o)),c=Object.keys(t);for(let d=0,p=c.length;d<p;d++)lazyMethod(r,c[d],s);return r}_decorateStorageEntry(t,a){const o=(s,c)=>extractStorageArgs(c||this.__internal__registry,t,s),i=s=>from(this.at(s)).pipe(map$2(c=>getAtQueryFn(c,t))),r=this._decorateStorageCall(t,a);return r.creator=t,r.at=a((s,...c)=>i(s).pipe(switchMap(d=>d(...c)))),r.hash=a((...s)=>this._rpcCore.state.getStorageHash(o(s))),r.is=s=>s.section===t.section&&s.method===t.method,r.key=(...s)=>u8aToHex(compactStripLength(t(...s))[1]),r.keyPrefix=(...s)=>u8aToHex(t.keyPrefix(...s)),r.size=a((...s)=>this._rpcCore.state.getStorageSize(o(s))),r.sizeAt=a((s,...c)=>i(s).pipe(switchMap(d=>this._rpcCore.state.getStorageSize(o(c,d.creator.meta.registry),s)))),t.iterKey&&t.meta.type.isMap&&(r.entries=a(memo(this.__internal__instanceId,(...s)=>this._retrieveMapEntries(t,null,s))),r.entriesAt=a(memo(this.__internal__instanceId,(s,...c)=>i(s).pipe(switchMap(d=>this._retrieveMapEntries(d.creator,s,c))))),r.entriesPaged=a(memo(this.__internal__instanceId,s=>this._retrieveMapEntriesPaged(t,void 0,s))),r.keys=a(memo(this.__internal__instanceId,(...s)=>this._retrieveMapKeys(t,null,s))),r.keysAt=a(memo(this.__internal__instanceId,(s,...c)=>i(s).pipe(switchMap(d=>this._retrieveMapKeys(d.creator,s,c))))),r.keysPaged=a(memo(this.__internal__instanceId,s=>this._retrieveMapKeysPaged(t,void 0,s)))),this.supportMulti&&t.meta.type.isMap&&(r.multi=a(s=>t.meta.type.asMap.hashers.length===1?this._retrieveMulti(s.map(c=>[t,[c]])):this._retrieveMulti(s.map(c=>[t,c])))),this._decorateFunctionMeta(t,r)}_decorateStorageEntryAt(t,a,o,i){const r=c=>extractStorageArgs(t,a,c),s=o((...c)=>this._rpcCore.state.getStorage(r(c),i));return s.creator=a,s.hash=o((...c)=>this._rpcCore.state.getStorageHash(r(c),i)),s.is=c=>c.section===a.section&&c.method===a.method,s.key=(...c)=>u8aToHex(compactStripLength(a(...c))[1]),s.keyPrefix=(...c)=>u8aToHex(a.keyPrefix(...c)),s.size=o((...c)=>this._rpcCore.state.getStorageSize(r(c),i)),a.iterKey&&a.meta.type.isMap&&(s.entries=o(memo(this.__internal__instanceId,(...c)=>this._retrieveMapEntries(a,i,c))),s.entriesPaged=o(memo(this.__internal__instanceId,c=>this._retrieveMapEntriesPaged(a,i,c))),s.keys=o(memo(this.__internal__instanceId,(...c)=>this._retrieveMapKeys(a,i,c))),s.keysPaged=o(memo(this.__internal__instanceId,c=>this._retrieveMapKeysPaged(a,i,c)))),this.supportMulti&&a.meta.type.isMap&&(s.multi=o(c=>a.meta.type.asMap.hashers.length===1?this._retrieveMulti(c.map(d=>[a,[d]]),i):this._retrieveMulti(c.map(d=>[a,d]),i))),this._decorateFunctionMeta(a,s)}_queueStorage(t,a){const o=a===this.__internal__storageSubQ?this._rpcCore.state.subscribeStorage:this._rpcCore.state.queryStorageAt;let i=a.length-1,r=0,s;return i===-1||!a[i]||a[i][1].length===PAGE_SIZE_Q?(i++,s=from(new Promise(c=>{nextTick(()=>{const d=a[i][1];delete a[i],c(d)})})).pipe(switchMap(c=>o(c))),a.push([s,[t]])):(s=a[i][0],r=a[i][1].length,a[i][1].push(t)),s.pipe(map$2(c=>c[r]))}_decorateStorageCall(t,a){const o=memo(this.__internal__instanceId,(...i)=>{const r=extractStorageArgs(this.__internal__registry,t,i);return this.hasSubscriptions?this._queueStorage(r,this.__internal__storageSubQ):this._rpcCore.state.getStorage(r)});return a(o,{methodName:t.method,overrideNoSub:(...i)=>this._queueStorage(extractStorageArgs(this.__internal__registry,t,i),this.__internal__storageGetQ)})}_retrieveMulti(t,a){if(!t.length)return of([]);const o=this.hasSubscriptions&&!a?this._rpcCore.state.subscribeStorage:this._rpcCore.state.queryStorageAt;return t.length<=PAGE_SIZE_V?a?o(t,a):o(t):combineLatest(arrayChunk(t,PAGE_SIZE_V).map(i=>a?o(i,a):o(i))).pipe(map$2(arrayFlatten))}_retrieveMapKeys({iterKey:t,meta:a,method:o,section:i},r,s){if(!t||!a.type.isMap)throw new Error("keys can only be retrieved on maps");const c=t(...s).toHex(),d=new BehaviorSubject(c),p=r?I=>this._rpcCore.state.getKeysPaged(c,PAGE_SIZE_K,I,r):I=>this._rpcCore.state.getKeysPaged(c,PAGE_SIZE_K,I),h=I=>I.setMeta(a,i,o);return d.pipe(switchMap(p),map$2(I=>I.map(h)),tap(I=>nextTick(()=>{I.length===PAGE_SIZE_K?d.next(I[PAGE_SIZE_K-1].toHex()):d.complete()})),toArray(),map$2(arrayFlatten))}_retrieveMapKeysPaged({iterKey:t,meta:a,method:o,section:i},r,s){if(!t||!a.type.isMap)throw new Error("keys can only be retrieved on maps");const c=p=>p.setMeta(a,i,o);return(r?p=>this._rpcCore.state.getKeysPaged(p,s.pageSize,s.startKey||p,r):p=>this._rpcCore.state.getKeysPaged(p,s.pageSize,s.startKey||p))(t(...s.args).toHex()).pipe(map$2(p=>p.map(c)))}_retrieveMapEntries(t,a,o){const i=a?r=>this._rpcCore.state.queryStorageAt(r,a):r=>this._rpcCore.state.queryStorageAt(r);return this._retrieveMapKeys(t,a,o).pipe(switchMap(r=>r.length?combineLatest(arrayChunk(r,PAGE_SIZE_V).map(i)).pipe(map$2(s=>arrayFlatten(s).map((c,d)=>[r[d],c]))):of([])))}_retrieveMapEntriesPaged(t,a,o){const i=a?r=>this._rpcCore.state.queryStorageAt(r,a):r=>this._rpcCore.state.queryStorageAt(r);return this._retrieveMapKeysPaged(t,a,o).pipe(switchMap(r=>r.length?i(r).pipe(map$2(s=>s.map((c,d)=>[r[d],c]))):of([])))}_decorateDeriveRx(t){var i,r,s,c;const a=(i=this._runtimeVersion)==null?void 0:i.specName.toString(),o=getAvailableDerives(this.__internal__instanceId,this._rx,objectSpread({},this._options.derives,(c=(s=(r=this._options.typesBundle)==null?void 0:r.spec)==null?void 0:s[a||""])==null?void 0:c.derives));return decorateDeriveSections(t,o)}_decorateDerive(t){return decorateDeriveSections(t,this._rx.derive)}}const KEEPALIVE_INTERVAL=1e4,l=logger("api/init");function textToString(n){return n.toString()}class Init extends Decorate{constructor(t,a,o){super(t,a,o);A(this,"__internal__atLast",null);A(this,"__internal__healthTimer",null);A(this,"__internal__registries",[]);A(this,"__internal__updateSub",null);A(this,"__internal__waitingRegistries",{});this.registry.setKnownTypes(t),t.source?this.__internal__registries=t.source.__internal__registries:this.registerTypes(t.types),this._rpc=this._decorateRpc(this._rpcCore,this._decorateMethod),this._rx.rpc=this._decorateRpc(this._rpcCore,this._rxDecorateMethod),this.supportMulti&&(this._queryMulti=this._decorateMulti(this._decorateMethod),this._rx.queryMulti=this._decorateMulti(this._rxDecorateMethod)),this._rx.signer=t.signer,this._rpcCore.setRegistrySwap(i=>this.getBlockRegistry(i)),this._rpcCore.setResolveBlockHash(i=>firstValueFrom(this._rpcCore.chain.getBlockHash(i))),this.hasSubscriptions?(this._rpcCore.provider.on("disconnected",()=>this.__internal__onProviderDisconnect()),this._rpcCore.provider.on("error",i=>this.__internal__onProviderError(i)),this._rpcCore.provider.on("connected",()=>this.__internal__onProviderConnect())):this._options.noInitWarn||l.warn("Api will be available in a limited mode since the provider does not support subscriptions"),this._rpcCore.provider.isConnected&&this.__internal__onProviderConnect().catch(noop)}_initRegistry(t,a,o,i,r){t.clearCache(),t.setChainProperties(r||this.registry.getChainProperties()),t.setKnownTypes(this._options),t.register(getSpecTypes(t,a,o.specName,o.specVersion)),t.setHasher(getSpecHasher(t,a,o.specName)),t.knownTypes.typesBundle&&(t.knownTypes.typesAlias=getSpecAlias(t,a,o.specName)),t.setMetadata(i,void 0,objectSpread({},getSpecExtensions(t,a,o.specName),this._options.signedExtensions),this._options.noInitWarn)}_getDefaultRegistry(){return assertReturn(this.__internal__registries.find(({isDefault:t})=>t),"Initialization error, cannot find the default registry")}async at(t,a){const o=u8aToU8a(t),i=u8aToHex(o),r=await this.getBlockRegistry(o,a);return(!this.__internal__atLast||this.__internal__atLast[0]!==i)&&(this.__internal__atLast=[i,this._createDecorated(r,!0,null,o).decoratedApi]),this.__internal__atLast[1]}async _createBlockRegistry(t,a,o){const i=new TypeRegistry(t),r=new Metadata(i,await firstValueFrom(this._rpcCore.state.getMetadata.raw(a.parentHash))),s=this._runtimeChain;if(!s)throw new Error("Invalid initializion order, runtimeChain is not available");this._initRegistry(i,s,o,r);const c={counter:0,lastBlockHash:t,metadata:r,registry:i,runtimeVersion:o};return this.__internal__registries.push(c),c}_cacheBlockRegistryProgress(t,a){let o=this.__internal__waitingRegistries[t];return isUndefined(o)&&(o=this.__internal__waitingRegistries[t]=new Promise((i,r)=>{a().then(s=>{delete this.__internal__waitingRegistries[t],i(s)}).catch(s=>{delete this.__internal__waitingRegistries[t],r(s)})})),o}_getBlockRegistryViaVersion(t,a){if(a){const o=this.__internal__registries.find(({runtimeVersion:{specName:i,specVersion:r}})=>i.eq(a.specName)&&r.eq(a.specVersion));if(o)return o.counter++,o.lastBlockHash=t,o}return null}async _getBlockRegistryViaHash(t){if(!this._genesisHash||!this._runtimeVersion)throw new Error("Cannot retrieve data on an uninitialized chain");const a=this.registry.createType("HeaderPartial",this._genesisHash.eq(t)?{number:BN_ZERO,parentHash:this._genesisHash}:await firstValueFrom(this._rpcCore.chain.getHeader.raw(t)));if(a.parentHash.isEmpty)throw new Error("Unable to retrieve header and parent from supplied hash");getUpgradeVersion(this._genesisHash,a.number);const o=this.registry.createType("RuntimeVersionPartial",await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(a.parentHash)));return this._getBlockRegistryViaVersion(t,o)||await this._cacheBlockRegistryProgress(o.toHex(),()=>this._createBlockRegistry(t,a,o))}async getBlockRegistry(t,a){return this.__internal__registries.find(({lastBlockHash:o})=>o&&u8aEq(o,t))||this._getBlockRegistryViaVersion(t,a)||await this._cacheBlockRegistryProgress(u8aToHex(t),()=>this._getBlockRegistryViaHash(t))}async _loadMeta(){var t;return this._isReady?(this._options.source||this._subscribeUpdates(),!0):(this._unsubscribeUpdates(),[this._genesisHash,this._runtimeMetadata]=(t=this._options.source)!=null&&t._isReady?await this._metaFromSource(this._options.source):await this._metaFromChain(this._options.metadata),this._initFromMeta(this._runtimeMetadata))}async _metaFromSource(t){this._extrinsicType=t.extrinsicVersion,this._runtimeChain=t.runtimeChain,this._runtimeVersion=t.runtimeVersion;const a=Object.keys(t.rpc),o=[];for(let i=0,r=a.length;i<r;i++){const s=a[i],c=Object.keys(t.rpc[s]);for(let d=0,p=c.length;d<p;d++)o.push(`${s}_${c[d]}`)}return this._filterRpc(o,getSpecRpc(this.registry,t.runtimeChain,t.runtimeVersion.specName)),[t.genesisHash,t.runtimeMetadata]}_subscribeUpdates(){this.__internal__updateSub||!this.hasSubscriptions||(this.__internal__updateSub=this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap(t=>{var a;return(a=this._runtimeVersion)!=null&&a.specVersion.eq(t.specVersion)?of(!1):this._rpcCore.state.getMetadata().pipe(map$2(o=>{l.log(`Runtime version updated to spec=${t.specVersion.toString()}, tx=${t.transactionVersion.toString()}`),this._runtimeMetadata=o,this._runtimeVersion=t,this._rx.runtimeVersion=t;const i=this._getDefaultRegistry(),r=this._runtimeChain;if(!r)throw new Error("Invalid initializion order, runtimeChain is not available");return i.metadata=o,i.runtimeVersion=t,this._initRegistry(this.registry,r,t,o),this._injectMetadata(i,!0),!0}))})).subscribe())}async _metaFromChain(t){const[a,o,i,r,s,c]=await Promise.all([firstValueFrom(this._rpcCore.chain.getBlockHash(0)),firstValueFrom(this._rpcCore.state.getRuntimeVersion()),firstValueFrom(this._rpcCore.system.chain()),firstValueFrom(this._rpcCore.system.properties()),firstValueFrom(this._rpcCore.rpc.methods()),t?Promise.resolve(null):firstValueFrom(this._rpcCore.state.getMetadata())]);this._runtimeChain=i,this._runtimeVersion=o,this._rx.runtimeVersion=o;const d=`${a.toHex()||"0x"}-${o.specVersion.toString()}`,p=c||(t!=null&&t[d]?new Metadata(this.registry,t[d]):await firstValueFrom(this._rpcCore.state.getMetadata()));return this._initRegistry(this.registry,i,o,p,r),this._filterRpc(s.methods.map(textToString),getSpecRpc(this.registry,i,o.specName)),this._subscribeUpdates(),this.__internal__registries.length||this.__internal__registries.push({counter:0,isDefault:!0,metadata:p,registry:this.registry,runtimeVersion:o}),p.getUniqTypes(this._options.throwOnUnknown||!1),[a,p]}_initFromMeta(t){const a=this._runtimeVersion;if(!a)throw new Error("Invalid initializion order, runtimeVersion is not available");return this._extrinsicType=t.asLatest.extrinsic.version.toNumber(),this._rx.extrinsicType=this._extrinsicType,this._rx.genesisHash=this._genesisHash,this._rx.runtimeVersion=a,this._injectMetadata(this._getDefaultRegistry(),!0),this._rx.derive=this._decorateDeriveRx(this._rxDecorateMethod),this._derive=this._decorateDerive(this._decorateMethod),!0}_subscribeHealth(){this._unsubscribeHealth(),this.__internal__healthTimer=this.hasSubscriptions?setInterval(()=>{firstValueFrom(this._rpcCore.system.health.raw()).catch(noop)},KEEPALIVE_INTERVAL):null}_unsubscribeHealth(){this.__internal__healthTimer&&(clearInterval(this.__internal__healthTimer),this.__internal__healthTimer=null)}_unsubscribeUpdates(){this.__internal__updateSub&&(this.__internal__updateSub.unsubscribe(),this.__internal__updateSub=null)}_unsubscribe(){this._unsubscribeHealth(),this._unsubscribeUpdates()}async __internal__onProviderConnect(){this._isConnected.next(!0),this.emit("connected");try{const t=this._options.initWasm===!1?!0:await cryptoWaitReady(),a=await this._loadMeta();this._subscribeHealth(),a&&!this._isReady&&t&&(this._isReady=!0,this.emit("ready",this))}catch(t){const a=new Error(`FATAL: Unable to initialize the API: ${t.message}`);l.error(a),this.emit("error",a)}}__internal__onProviderDisconnect(){this._isConnected.next(!1),this._unsubscribe(),this.emit("disconnected")}__internal__onProviderError(t){this.emit("error",t)}}function assertResult(n){if(n===void 0)throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");return n}class Getters extends Init{get call(){return assertResult(this._call)}get consts(){return assertResult(this._consts)}get derive(){return assertResult(this._derive)}get errors(){return assertResult(this._errors)}get events(){return assertResult(this._events)}get extrinsicVersion(){return this._extrinsicType}get genesisHash(){return assertResult(this._genesisHash)}get isConnected(){return this._isConnected.getValue()}get libraryInfo(){return`${packageInfo$2.name} v${packageInfo$2.version}`}get query(){return assertResult(this._query)}get queryMulti(){return assertResult(this._queryMulti)}get rpc(){return assertResult(this._rpc)}get runtimeChain(){return assertResult(this._runtimeChain)}get runtimeMetadata(){return assertResult(this._runtimeMetadata)}get runtimeVersion(){return assertResult(this._runtimeVersion)}get rx(){return assertResult(this._rx)}get stats(){return this._rpcCore.stats}get type(){return this._type}get tx(){return assertResult(this._extrinsics)}findCall(e){return findCall(this.registry,e)}findError(e){return findError(this.registry,e)}}class ApiBase extends Getters{constructor(e={},t,a){super(e,t,a)}connect(){return this._rpcCore.connect()}disconnect(){return this._unsubscribe(),this._rpcCore.disconnect()}setSigner(e){this._rx.signer=e}async sign(e,t,{signer:a}={}){if(isString(e)){const o=a||this._rx.signer;if(!(o!=null&&o.signRaw))throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");return(await o.signRaw(objectSpread({type:"bytes"},t,{address:e}))).signature}return u8aToHex(e.sign(u8aToU8a(t.data)))}}class Combinator{constructor(e,t){A(this,"__internal__allHasFired",!1);A(this,"__internal__callback");A(this,"__internal__fired",[]);A(this,"__internal__fns",[]);A(this,"__internal__isActive",!0);A(this,"__internal__results",[]);A(this,"__internal__subscriptions",[]);this.__internal__callback=t,this.__internal__subscriptions=e.map(async(a,o)=>{const[i,...r]=Array.isArray(a)?a:[a];return this.__internal__fired.push(!1),this.__internal__fns.push(i),i(...r,this._createCallback(o))})}_allHasFired(){return this.__internal__allHasFired||(this.__internal__allHasFired=this.__internal__fired.filter(e=>!e).length===0),this.__internal__allHasFired}_createCallback(e){return t=>{this.__internal__fired[e]=!0,this.__internal__results[e]=t,this._triggerUpdate()}}_triggerUpdate(){if(!(!this.__internal__isActive||!isFunction$2(this.__internal__callback)||!this._allHasFired()))try{Promise.resolve(this.__internal__callback(this.__internal__results)).catch(noop)}catch{}}unsubscribe(){this.__internal__isActive&&(this.__internal__isActive=!1,Promise.all(this.__internal__subscriptions.map(async e=>{try{const t=await e;isFunction$2(t)&&t()}catch{}})).catch(()=>{}))}}function promiseTracker(n,e){let t=!1;return{reject:a=>(t||(t=!0,e(a)),EMPTY),resolve:a=>{t||(t=!0,n(a))}}}function extractArgs(n,e){const t=n.slice(),a=n.length&&isFunction$2(n[n.length-1])?t.pop():void 0;if(e&&!isFunction$2(a))throw new Error("Expected a callback to be passed with subscriptions");return[t,a]}function decorateCall(n,e){return new Promise((t,a)=>{const o=promiseTracker(t,a),i=n(...e).pipe(catchError(r=>o.reject(r))).subscribe(r=>{o.resolve(r),nextTick(()=>i.unsubscribe())})})}function decorateSubscribe(n,e,t){return new Promise((a,o)=>{const i=promiseTracker(a,o),r=n(...e).pipe(catchError(s=>i.reject(s)),tap(()=>i.resolve(()=>r.unsubscribe()))).subscribe(s=>{nextTick(()=>t(s))})})}function toPromiseMethod(n,e){const t=!!(e!=null&&e.methodName&&e.methodName.includes("subscribe"));return function(...a){const[o,i]=extractArgs(a,t);return i?decorateSubscribe(n,o,i):decorateCall((e==null?void 0:e.overrideNoSub)||n,o)}}class ApiPromise extends ApiBase{constructor(t){super(t,"promise",toPromiseMethod);A(this,"__internal__isReadyPromise");A(this,"__internal__isReadyOrErrorPromise");this.__internal__isReadyPromise=new Promise(a=>{super.once("ready",()=>a(this))}),this.__internal__isReadyOrErrorPromise=new Promise((a,o)=>{const i=promiseTracker(a,o);super.once("ready",()=>i.resolve(this)),super.once("error",r=>i.reject(r))})}static create(t){const a=new ApiPromise(t);return t&&t.throwOnConnect?a.isReadyOrError:(a.isReadyOrError.catch(noop),a.isReady)}get isReady(){return this.__internal__isReadyPromise}get isReadyOrError(){return this.__internal__isReadyOrErrorPromise}clone(){return new ApiPromise(objectSpread({},this._options,{source:this}))}async combineLatest(t,a){const o=new Combinator(t,a);return()=>{o.unsubscribe()}}}const packageInfo$1={name:"@polkadot/ui-settings",path:import.meta&&import.meta.url?new URL(import.meta.url).pathname.substring(0,new URL(import.meta.url).pathname.lastIndexOf("/")+1):"auto",type:"esm",version:"3.9.1"},packageInfo={name:"@polkadot/ui-keyring",path:import.meta&&import.meta.url?new URL(import.meta.url).pathname.substring(0,new URL(import.meta.url).pathname.lastIndexOf("/")+1):"auto",type:"esm",version:"3.9.1"};detectPackage(packageInfo,null,[packageInfo$1]);const chains=selectableNetworks.filter(n=>n.genesisHash.length).reduce((n,{genesisHash:e,network:t})=>objectSpread(n,{[t]:e}),{}),subject=new BehaviorSubject(!1),env={isDevelopment:()=>subject.getValue(),set:n=>{subject.next(n)},subject},ACCOUNT_PREFIX="account:",ADDRESS_PREFIX="address:",CONTRACT_PREFIX="contract:";function toHex(n){return u8aToHex(decodeAddress(n,!0))}function accountKey(n){return`${ACCOUNT_PREFIX}${toHex(n)}`}function addressKey(n){return`${ADDRESS_PREFIX}${toHex(n)}`}function contractKey(n){return`${CONTRACT_PREFIX}${toHex(n)}`}const accountRegex=new RegExp(`^${ACCOUNT_PREFIX}0x[0-9a-f]*`,""),addressRegex=new RegExp(`^${ADDRESS_PREFIX}0x[0-9a-f]*`,""),contractRegex=new RegExp(`^${CONTRACT_PREFIX}0x[0-9a-f]*`,"");function createOptionItem(n,e){const t=isUndefined(e)?n.length>15?`${n.slice(0,6)}…${n.slice(-6)}`:n:e;return{key:n,name:t,value:n}}function callNext(n,e,t){const a=env.isDevelopment(),o={};Object.keys(n).forEach(i=>{const{json:{meta:{isTesting:r=!1}={}}={}}=n[i];(!t||a||r!==!0)&&(o[i]=n[i])}),e.next(o)}function genericSubject(n,e=!1){let t={};const a=new BehaviorSubject({}),o=()=>callNext(t,a,e);return env.subject.subscribe(o),{add:(i,r,s,c)=>(t=objectCopy(t),t[r]={json:objectSpread({},s,{address:r}),option:createOptionItem(r,s.meta.name),type:c},!s.meta.isInjected&&(!s.meta.isTesting||env.isDevelopment())&&i.set(n(r),s),o(),t[r]),remove:(i,r)=>{t=objectCopy(t),delete t[r],i.remove(n(r)),o()},subject:a}}const accounts=genericSubject(accountKey,!0),addresses=genericSubject(addressKey),contracts=genericSubject(contractKey),obervableAll=combineLatest([accounts.subject,addresses.subject,contracts.subject]).pipe(map$2(([n,e,t])=>({accounts:n,addresses:e,contracts:t})));let hasCalledInitOptions=!1;const sortByName=(n,e)=>{const t=n.option.name,a=e.option.name;return t.localeCompare(a)},sortByCreated=(n,e)=>{const t=n.json.meta.whenCreated||0,a=e.json.meta.whenCreated||0;return t<a?1:t>a?-1:0};class KeyringOption{constructor(){A(this,"__internal__allSub",null);A(this,"optionsSubject",new BehaviorSubject(this.emptyOptions()))}createOptionHeader(e){return{key:`header-${e.toLowerCase()}`,name:e,value:null}}init(e){if(hasCalledInitOptions)throw new Error("Unable to initialise options more than once");this.__internal__allSub=obervableAll.subscribe(()=>{const t=this.emptyOptions();this.addAccounts(e,t),this.addAddresses(e,t),this.addContracts(e,t),t.address=this.linkItems({Addresses:t.address,Recent:t.recent}),t.account=this.linkItems({Accounts:t.account,Development:t.testing}),t.contract=this.linkItems({Contracts:t.contract}),t.all=[].concat(t.account,t.address),t.allPlus=[].concat(t.account,t.address,t.contract),this.optionsSubject.next(t)}),hasCalledInitOptions=!0}clear(){this.__internal__allSub&&this.__internal__allSub.unsubscribe()}linkItems(e){return Object.keys(e).reduce((t,a)=>{const o=e[a];return t.concat(o.length?[this.createOptionHeader(a)]:[],o)},[])}addAccounts(e,t){const a=e.accounts.subject.getValue();Object.values(a).sort(sortByName).forEach(({json:{meta:{isTesting:o=!1}},option:i})=>{o?t.testing.push(i):t.account.push(i)})}addAddresses(e,t){const a=e.addresses.subject.getValue();Object.values(a).filter(({json:o})=>!!o.meta.isRecent).sort(sortByCreated).forEach(({option:o})=>{t.recent.push(o)}),Object.values(a).filter(({json:o})=>!o.meta.isRecent).sort(sortByName).forEach(({option:o})=>{t.address.push(o)})}addContracts(e,t){const a=e.contracts.subject.getValue();Object.values(a).sort(sortByName).forEach(({option:o})=>{t.contract.push(o)})}emptyOptions(){return{account:[],address:[],all:[],allPlus:[],contract:[],recent:[],testing:[]}}}class Base{constructor(){A(this,"__internal__accounts");A(this,"__internal__addresses");A(this,"__internal__contracts");A(this,"__internal__isEthereum");A(this,"__internal__keyring");A(this,"_store");A(this,"_genesisHash");A(this,"_genesisHashAdd",[]);A(this,"decodeAddress",(e,t,a)=>this.keyring.decodeAddress(e,t,a));A(this,"encodeAddress",(e,t)=>this.keyring.encodeAddress(e,t));this.__internal__accounts=accounts,this.__internal__addresses=addresses,this.__internal__contracts=contracts,this.__internal__isEthereum=!1,this._store=new BrowserStore}get accounts(){return this.__internal__accounts}get addresses(){return this.__internal__addresses}get contracts(){return this.__internal__contracts}get isEthereum(){return this.__internal__isEthereum}get keyring(){if(this.__internal__keyring)return this.__internal__keyring;throw new Error("Keyring should be initialised via 'loadAll' before use")}get genesisHash(){return this._genesisHash}get genesisHashes(){return this._genesisHash?[this._genesisHash,...this._genesisHashAdd]:[...this._genesisHashAdd]}getPair(e){return this.keyring.getPair(e)}getPairs(){return this.keyring.getPairs().filter(e=>env.isDevelopment()||e.meta.isTesting!==!0)}isAvailable(e){const t=this.accounts.subject.getValue(),a=this.addresses.subject.getValue(),o=this.contracts.subject.getValue(),i=isString(e)?e:this.encodeAddress(e);return!t[i]&&!a[i]&&!o[i]}isPassValid(e){return e.length>0}setSS58Format(e){this.__internal__keyring&&isNumber(e)&&this.__internal__keyring.setSS58Format(e)}setDevMode(e){env.set(e)}initKeyring(e){const t=createTestKeyring(e,!0);isBoolean(e.isDevelopment)&&this.setDevMode(e.isDevelopment),this.__internal__isEthereum=t.type==="ethereum",this.__internal__keyring=t,this._genesisHash=e.genesisHash&&(isString(e.genesisHash)?e.genesisHash.toString():e.genesisHash.toHex()),this._genesisHashAdd=e.genesisHashAdd||[],this._store=e.store||this._store,this.addAccountPairs()}addAccountPairs(){this.keyring.getPairs().forEach(({address:e,meta:t})=>{this.accounts.add(this._store,e,{address:e,meta:t})})}addTimestamp(e){e.meta.whenCreated||e.setMeta({whenCreated:Date.now()})}}const RECENT_EXPIRY=24*60*60;class Keyring extends Base{constructor(){super(...arguments);A(this,"keyringOption",new KeyringOption);A(this,"__internal__stores",{account:()=>this.accounts,address:()=>this.addresses,contract:()=>this.contracts})}addExternal(t,a={}){const o=this.keyring.addFromAddress(t,objectSpread({},a,{isExternal:!0}),null);return{json:this.saveAccount(o),pair:o}}addHardware(t,a,o={}){return this.addExternal(t,objectSpread({},o,{hardwareType:a,isHardware:!0}))}addMultisig(t,a,o={}){let i=createKeyMulti(t,a);this.isEthereum&&(i=i.slice(0,20));const r=u8aSorted(t.map(s=>this.decodeAddress(s))).map(s=>this.encodeAddress(s));return this.addExternal(i,objectSpread({},o,{isMultisig:!0,threshold:bnToBn(a).toNumber(),who:r}))}addPair(t,a){return this.keyring.addPair(t),{json:this.saveAccount(t,a),pair:t}}addUri(t,a,o={},i){const r=this.keyring.addFromUri(t,o,i);return{json:this.saveAccount(r,a),pair:r}}backupAccount(t,a){return t.isLocked||t.lock(),t.decodePkcs8(a),t.toJson(a)}async backupAccounts(t,a){const o=t.map(r=>new Promise(s=>{this._store.get(accountKey(r),s)})),i=await Promise.all(o);return objectSpread({},jsonEncrypt(stringToU8a(JSON.stringify(i)),["batch-pkcs8"],a),{accounts:i.map(r=>({address:r.address,meta:r.meta}))})}createFromJson(t,a={}){return this.keyring.createFromJson(objectSpread({},t,{meta:objectSpread({},t.meta,a)}))}createFromUri(t,a={},o){return this.keyring.createFromUri(t,a,o)}encryptAccount(t,a){const o=t.toJson(a);o.meta.whenEdited=Date.now(),this.keyring.addFromJson(o),this.accounts.add(this._store,t.address,o,t.type)}forgetAccount(t){this.keyring.removePair(t),this.accounts.remove(this._store,t)}forgetAddress(t){this.addresses.remove(this._store,t)}forgetContract(t){this.contracts.remove(this._store,t)}getAccount(t){return this.getAddress(t,"account")}getAccounts(){const t=this.accounts.subject.getValue();return Object.keys(t).map(a=>this.getAddress(a,"account")).filter(a=>!!a&&(env.isDevelopment()||a.meta.isTesting!==!0))}getAddress(t,a=null){const o=isString(t)?t:this.encodeAddress(t),i=this.decodeAddress(o),s=(a?[this.__internal__stores[a]]:Object.values(this.__internal__stores)).reduce((c,d)=>d().subject.getValue()[o]||c,void 0);return s&&{address:o,meta:s.json.meta,publicKey:i}}getAddresses(){const t=this.addresses.subject.getValue();return Object.keys(t).map(a=>this.getAddress(a)).filter(a=>!!a)}getContract(t){return this.getAddress(t,"contract")}getContracts(){const t=this.contracts.subject.getValue();return Object.entries(t).filter(([,{json:{meta:{contract:a}}}])=>!!a&&a.genesisHash===this.genesisHash).map(([a])=>this.getContract(a)).filter(a=>!!a)}rewriteKey(t,a,o,i){o.startsWith("0x")||(this._store.remove(a),this._store.set(i(o),t))}loadAccount(t,a){if(!t.meta.isTesting&&t.encoded){const i=this.keyring.addFromJson(t,!0);this.accounts.add(this._store,i.address,t,i.type)}const[,o]=a.split(":");this.rewriteKey(t,a,o.trim(),accountKey)}loadAddress(t,a){const{isRecent:o,whenCreated:i=0}=t.meta;if(o&&Date.now()-i>RECENT_EXPIRY){this._store.remove(a);return}const r=isHex(t.address)&&t.address.length!==66?t.address:this.encodeAddress(isHex(t.address)?hexToU8a(t.address):this.decodeAddress(t.address,!0)),[,s]=a.split(":");this.addresses.add(this._store,r,t),this.rewriteKey(t,a,s,addressKey)}loadContract(t,a){var r;const o=this.encodeAddress(this.decodeAddress(t.address)),[,i]=a.split(":");t.meta.genesisHash=t.meta.genesisHash||((r=t.meta.contract)==null?void 0:r.genesisHash),this.contracts.add(this._store,o,t),this.rewriteKey(t,a,i,contractKey)}loadInjected(t,a,o){const i={address:t,meta:objectSpread({},a,{isInjected:!0})},r=this.keyring.addFromAddress(t,i.meta,null,o);this.accounts.add(this._store,r.address,i,r.type)}allowGenesis(t){if(t!=null&&t.meta&&this.genesisHash){const a=Object.values(chains).find(o=>o.includes(this.genesisHash||""))||[this.genesisHash];if(t.meta.genesisHash)return a.includes(t.meta.genesisHash)||this.genesisHashes.includes(t.meta.genesisHash);if(t.meta.contract)return a.includes(t.meta.contract.genesisHash)}return!0}loadAll(t,a=[]){super.initKeyring(t),this._store.all((o,i)=>{if(!isFunction$2(t.filter)||t.filter(i))try{this.allowGenesis(i)&&(accountRegex.test(o)?this.loadAccount(i,o):addressRegex.test(o)?this.loadAddress(i,o):contractRegex.test(o)&&this.loadContract(i,o))}catch{console.warn(`Keyring: Unable to load ${o}:${stringify(i)}`)}}),a.forEach(o=>{if(this.allowGenesis(o))try{this.loadInjected(o.address,o.meta,o.type)}catch{console.warn(`Keyring: Unable to inject ${stringify(o)}`)}}),this.keyringOption.init(this)}restoreAccount(t,a){const o=Array.isArray(t.encoding.content)?t.encoding.content[1]:"ed25519",i=Array.isArray(t.encoding.type)?t.encoding.type:[t.encoding.type],r=createPair({toSS58:this.encodeAddress,type:o},{publicKey:this.decodeAddress(t.address,!0)},t.meta,isHex(t.encoded)?hexToU8a(t.encoded):base64Decode(t.encoded),i);return r.decodePkcs8(a),this.addPair(r,a),r.lock(),r}restoreAccounts(t,a){JSON.parse(u8aToString(jsonDecrypt(t,a))).forEach(i=>{this.loadAccount(i,accountKey(i.address))})}saveAccount(t,a){this.addTimestamp(t);const o=t.toJson(a);return this.keyring.addFromJson(o),this.accounts.add(this._store,t.address,o,t.type),o}saveAccountMeta(t,a){const o=t.address;this._store.get(accountKey(o),i=>{t.setMeta(a),i.meta=t.meta,this.accounts.add(this._store,o,i,t.type)})}saveAddress(t,a,o="address"){var s;const r=((s=this.addresses.subject.getValue()[t])==null?void 0:s.json)||{address:t,meta:{isRecent:void 0,whenCreated:Date.now()}};return Object.keys(a).forEach(c=>{r.meta[c]=a[c]}),delete r.meta.isRecent,this.__internal__stores[o]().add(this._store,t,r),r}saveContract(t,a){return this.saveAddress(t,a,"contract")}saveRecent(t){return this.addresses.subject.getValue()[t]||this.addresses.add(this._store,t,{address:t,meta:{genesisHash:this.genesisHash,isRecent:!0,whenCreated:Date.now()}}),this.addresses.subject.getValue()[t]}}const keyring=new Keyring,S=64,C=S/2,Z=S/64*5,SCHEMES=[{colors:[0,28,0,0,28,0,0,28,0,0,28,0,0,28,0,0,28,0,1],freq:1},{colors:[0,1,3,2,4,3,0,1,3,2,4,3,0,1,3,2,4,3,5],freq:20},{colors:[1,2,3,1,2,4,5,5,4,1,2,3,1,2,4,5,5,4,0],freq:16},{colors:[0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,3],freq:32},{colors:[0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,6],freq:32},{colors:[0,1,2,3,4,5,3,4,2,0,1,6,7,8,9,7,8,6,10],freq:128},{colors:[0,1,2,3,4,5,6,7,8,9,10,8,6,7,5,3,4,2,11],freq:128}],SCHEMES_TOTAL=SCHEMES.map(n=>n.freq).reduce((n,e)=>n+e),OUTER_CIRCLE={cx:C,cy:C,fill:"#eee",r:C};let zeroHash=new Uint8Array;function getRotation(n){const e=n?C/8*5:C/4*3,t=e*Math.sqrt(3)/2,a=e/2,o=e*Math.sqrt(3)/4,i=e/4,r=e*3/4;return{r:e,r3o4:r,ro2:a,ro4:i,rroot3o2:t,rroot3o4:o}}function getCircleXY(n=!1){const{r:e,r3o4:t,ro2:a,ro4:o,rroot3o2:i,rroot3o4:r}=getRotation(n);return[[C,C-e],[C,C-a],[C-r,C-t],[C-i,C-a],[C-r,C-o],[C-i,C],[C-i,C+a],[C-r,C+o],[C-r,C+t],[C,C+e],[C,C+a],[C+r,C+t],[C+i,C+a],[C+r,C+o],[C+i,C],[C+i,C-a],[C+r,C-o],[C+r,C-t],[C,C]]}function findScheme(n){let e=0;const t=SCHEMES.find(a=>(e+=a.freq,n<e));if(!t)throw new Error("Unable to find schema");return t}function addressToId(n){return zeroHash.length||(zeroHash=blake2AsU8a(new Uint8Array(32),512)),blake2AsU8a(decodeAddress(n),512).map((e,t)=>(e+256-zeroHash[t])%256)}function getColors(n){const e=addressToId(n),t=Math.floor((e[30]+e[31]*256)%SCHEMES_TOTAL),a=e[28]%6*3,o=Math.floor(e[29]*70/256+26)%80+30,i=findScheme(t),r=Array.from(e).map((s,c)=>{const d=(s+c%28*58)%256;if(d===0)return"#444";if(d===255)return"transparent";const p=Math.floor(d%64*360/64),h=[53,15,35,75][Math.floor(d/64)];return`hsl(${p}, ${o}%, ${h}%)`});return i.colors.map((s,c)=>r[i.colors[c<18?(c+a)%18:18]])}function polkadotIcon(n,{isAlternative:e}){const t=getCircleXY(e);let a;try{a=getColors(n)}catch{a=new Array(t.length).fill("#ddd")}return[OUTER_CIRCLE].concat(t.map(([o,i],r)=>({cx:o,cy:i,fill:a[r],r:Z})))}function renderCircle({cx:n,cy:e,fill:t,r:a},o){return jsxRuntimeExports.jsx("circle",{cx:n,cy:e,fill:t,r:a},o)}function Identicon({address:n,className:e="",isAlternative:t=!1,size:a,style:o={}}){const i=reactExports.useMemo(()=>polkadotIcon(n,{isAlternative:t}),[n,t]);return jsxRuntimeExports.jsx("svg",{className:e,height:a,id:n,name:n,style:o,viewBox:"0 0 64 64",width:a,children:i.map(renderCircle)})}const Polkadot=React.memo(Identicon);export{ApiPromise as A,BrowserStore as B,isBn as C,u8aEq as D,EventEmitter as E,isNull as F,isUndefined as G,isFunction$2 as H,nextTick as I,BN_ZERO as J,BN as K,BN_THOUSAND as L,BN_TWO as M,bnMin as N,bnToBn as O,BN_ONE as P,createKeyMulti as Q,GenericCall as R,isU8a as S,TypeRegistry as T,Polkadot as U,isString as V,WsProvider as W,BN_TEN as X,stringToHex as Y,isTestChain as a,stringify as b,setDeriveCache as c,defaults$1 as d,deriveMapCache as e,formatBalance as f,combineLatest as g,decodeAddress as h,isArray as i,isHex as j,keyring as k,hexToU8a as l,map$2 as m,isAddress as n,objectSpread as o,isPromise as p,encodeMultiAddress as q,u8aSorted as r,store as s,typesBundle as t,u8aToHex as u,base64Encode as v,isNumber as w,getSpecTypes as x,assert as y,addressEq as z};
